{"version":3,"file":"static/js/main.95475944.js","mappings":"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GAAI,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,IAAK,IAAK,IAAK,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,IAAK,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,EAAG,EAAG,GAAI,IAAK,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,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A,EAASggB,MAAO,CAACxf,MAAOk7B,KAE3Dt7E,EAASqrH,EACb,GAAmB,MAAf+3D,EAAqB,CACvB5H,EAAUxhL,KAAKqxH,GACf,IAAM7Z,EAAO6hC,GAAoC+vC,GACjDpjL,EAASsxG,GAAU,CAAC79C,OAAQ,CAACv7D,EAAG8H,GAAS4/C,QAAAA,EAASggB,MAAO,CAAC4xC,KAAAA,KAI5D,OADAgqE,EAAU5yK,SAAQ,SAAAtR,GAAC,OAAIsoD,EAAQuqG,8BAA8B7yJ,EAAE,IACxD0I,CACT,GD0PA,QA1KsC,CACpCi1K,GACAC,GACAC,GACAC,GACAI,GACAK,GACAM,GACAG,GACAyB,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAc,GACAE,GACAI,GACAE,GACAC,GACAS,GACAgB,GACAQ,GACAC,GACAK,GACAI,GACAG,GACAzO,GACA8O,GACA+B,GACAmC,GACAK,GACAC,GACAC,GACAC,GACAE,GACAC,GACAC,GACAiB,GACAU,GACAC,GACAC,GACAQ,GACAO,GACAI,GACAC,GACAE,GACAG,GACAE,GACAmB,GACAC,GACAC,GACAC,GACAC,GACAE,GACAE,GACAW,GACAE,GACAE,GACAE,GACAC,GACAG,GACAI,GACAI,GACAG,GACAc,GACAC,GACAC,GACAlc,GACAmc,GACAtM,GACAuM,GACAC,GACAC,GACAhc,GACAic,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAQ,GACAE,GACAO,GACAC,GACAC,GACAE,GACAG,GACAI,GACAI,GACAG,GACAM,GACAC,GACAM,GACAC,GACAa,GACAzd,GACA4d,GACAC,GACAC,GACAC,GACA/S,GACAiT,GACAE,GACAC,GACAO,GACAC,GACArhB,GACAshB,GACAC,GACAO,GACAK,GACAE,GACA3U,GACA8R,GACA8C,GACAC,GACAC,GACA1f,GACAogB,GACAY,GACAI,GACAE,GACAY,GACAI,GACAC,GACAC,GACAU,GACAK,GACAO,GACAC,GACAC,GACAC,GACAC,GACAC,GACAra,GACAqT,GACAiH,GACAC,GACAO,GA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","sources":["../node_modules/@mediapipe/camera_utils/camera_utils.js","../node_modules/long/src/long.js","../node_modules/react-dom/cjs/react-dom.production.min.js","../node_modules/react-dom/client.js","../node_modules/react-dom/index.js","../node_modules/react/cjs/react-jsx-runtime.production.min.js","../node_modules/react/cjs/react.production.min.js","../node_modules/react/index.js","../node_modules/react/jsx-runtime.js","../node_modules/scheduler/cjs/scheduler.production.min.js","../node_modules/scheduler/index.js","../node_modules/seedrandom/index.js","../node_modules/seedrandom/lib/alea.js","../node_modules/seedrandom/lib/tychei.js","../node_modules/seedrandom/lib/xor128.js","../node_modules/seedrandom/lib/xor4096.js","../node_modules/seedrandom/lib/xorshift7.js","../node_modules/seedrandom/lib/xorwow.js","../node_modules/seedrandom/seedrandom.js","../webpack/bootstrap","../webpack/runtime/amd define","../webpack/runtime/amd options","../webpack/runtime/compat get default export","../webpack/runtime/define property getters","../webpack/runtime/global","../webpack/runtime/hasOwnProperty shorthand","../webpack/runtime/make namespace object","../webpack/runtime/node module decorator","../webpack/runtime/publicPath","../node_modules/@babel/runtime/helpers/esm/typeof.js","../node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","../node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","../node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../node_modules/@babel/runtime/helpers/esm/classCallCheck.js","../node_modules/@babel/runtime/helpers/esm/toPropertyKey.js","../node_modules/@babel/runtime/helpers/esm/toPrimitive.js","../node_modules/@babel/runtime/helpers/esm/createClass.js","../../tfjs-core/src/backends/backend.ts","../../tfjs-core/src/util_base.ts","../../tfjs-core/src/environment.ts","../../tfjs-core/src/global_util.ts","../../tfjs-core/src/kernel_names.ts","../../tfjs-core/src/log.ts","../../tfjs-core/src/kernel_registry.ts","../../tfjs-core/src/hash_util.ts","../../tfjs-core/src/util.ts","../../tfjs-core/src/profiler.ts","../../tfjs-core/src/tape.ts","../node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","../node_modules/@babel/runtime/helpers/esm/inherits.js","../node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","../node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","../node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","../node_modules/@babel/runtime/helpers/esm/createSuper.js","../node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js","../../tfjs-core/src/tensor_format.ts","../../tfjs-core/src/tensor.ts","../../tfjs-core/src/types.ts","../../tfjs-core/src/tensor_util.ts","../../tfjs-core/src/engine.ts","../../tfjs-core/src/device_util.ts","../../tfjs-core/src/flags.ts","../../tfjs-core/src/tensor_util_env.ts","../../tfjs-core/src/ops/operation.ts","../../tfjs-core/src/ops/complex.ts","../../tfjs-core/src/ops/tensor_ops_util.ts","../../tfjs-core/src/ops/tensor.ts","../../tfjs-core/src/io/types.ts","../../tfjs-core/src/io/io_utils.ts","../../tfjs-core/src/io/router_registry.ts","../../tfjs-core/src/io/indexed_db.ts","../../tfjs-core/src/io/local_storage.ts","../../tfjs-core/src/io/model_management.ts","../../tfjs-core/src/platforms/platform_browser.ts","../../tfjs-core/src/platforms/platform_node.ts","../../tfjs-core/src/ops/buffer.ts","../../tfjs-core/src/ops/cast.ts","../../tfjs-core/src/ops/clone.ts","../../tfjs-core/src/ops/print.ts","../../tfjs-core/src/globals.ts","../../tfjs-core/src/base_side_effects.ts","../../tfjs-core/src/ops/add.ts","../../tfjs-core/src/ops/floorDiv.ts","../../tfjs-core/src/ops/div.ts","../../tfjs-core/src/ops/mul.ts","../../tfjs-core/src/ops/sqrt.ts","../../tfjs-core/src/ops/square.ts","../../tfjs-core/src/ops/zeros_like.ts","../../tfjs-core/src/gradients.ts","../../tfjs-core/src/ops/scalar.ts","../../tfjs-core/src/serialization.ts","../../tfjs-core/src/optimizers/optimizer.ts","../../tfjs-core/src/optimizers/adadelta_optimizer.ts","../../tfjs-core/src/ops/fill.ts","../../tfjs-core/src/optimizers/adagrad_optimizer.ts","../../tfjs-core/src/ops/pow.ts","../../tfjs-core/src/ops/sub.ts","../../tfjs-core/src/optimizers/adam_optimizer.ts","../../tfjs-core/src/ops/abs.ts","../../tfjs-core/src/ops/broadcast_util.ts","../../tfjs-core/src/ops/maximum.ts","../../tfjs-core/src/optimizers/adamax_optimizer.ts","../../tfjs-core/src/optimizers/sgd_optimizer.ts","../../tfjs-core/src/optimizers/momentum_optimizer.ts","../../tfjs-core/src/optimizers/rmsprop_optimizer.ts","../../tfjs-core/src/optimizers/register_optimizers.ts","../../tfjs-core/src/io/browser_files.ts","../../tfjs-core/src/io/progress.ts","../../tfjs-core/src/io/weights_loader.ts","../../tfjs-core/src/io/http.ts","../../tfjs-core/src/io/passthrough.ts","../../tfjs-core/src/ops/browser.ts","../../tfjs-core/src/ops/tensor3d.ts","../../tfjs-core/src/ops/slice_util.ts","../../tfjs-core/src/ops/acos.ts","../../tfjs-core/src/ops/acosh.ts","../../tfjs-core/src/ops/add_n.ts","../../tfjs-core/src/ops/all.ts","../../tfjs-core/src/ops/any.ts","../../tfjs-core/src/ops/arg_max.ts","../../tfjs-core/src/ops/arg_min.ts","../../tfjs-core/src/ops/asin.ts","../../tfjs-core/src/ops/asinh.ts","../../tfjs-core/src/ops/atan.ts","../../tfjs-core/src/ops/atan2.ts","../../tfjs-core/src/ops/atanh.ts","../../tfjs-core/src/ops/conv_util.ts","../../tfjs-core/src/ops/reshape.ts","../../tfjs-core/src/ops/avg_pool.ts","../../tfjs-core/src/ops/avg_pool_3d.ts","../../tfjs-core/src/ops/concat.ts","../../tfjs-core/src/ops/mat_mul.ts","../../tfjs-core/src/ops/sigmoid.ts","../../tfjs-core/src/ops/slice.ts","../../tfjs-core/src/ops/tanh.ts","../../tfjs-core/src/ops/basic_lstm_cell.ts","../../tfjs-core/src/ops/batch_to_space_nd.ts","../../tfjs-core/src/ops/batchnorm.ts","../../tfjs-core/src/ops/batchnorm_util.ts","../../tfjs-core/src/ops/batchnorm2d.ts","../../tfjs-core/src/ops/batchnorm3d.ts","../../tfjs-core/src/ops/batchnorm4d.ts","../../tfjs-core/src/ops/bincount.ts","../../tfjs-core/src/ops/broadcast_args.ts","../../tfjs-core/src/ops/broadcast_to.ts","../../tfjs-core/src/ops/ceil.ts","../../tfjs-core/src/ops/clip_by_value.ts","../../tfjs-core/src/ops/concat_1d.ts","../../tfjs-core/src/ops/concat_2d.ts","../../tfjs-core/src/ops/concat_3d.ts","../../tfjs-core/src/ops/concat_4d.ts","../../tfjs-core/src/ops/conv2d.ts","../../tfjs-core/src/ops/conv1d.ts","../../tfjs-core/src/ops/conv2d_backprop_input.ts","../../tfjs-core/src/ops/conv2d_transpose.ts","../../tfjs-core/src/ops/conv3d.ts","../../tfjs-core/src/ops/conv3d_backprop_input.ts","../../tfjs-core/src/ops/conv3d_transpose.ts","../../tfjs-core/src/ops/cos.ts","../../tfjs-core/src/ops/cosh.ts","../../tfjs-core/src/ops/cumprod.ts","../../tfjs-core/src/ops/cumsum.ts","../../tfjs-core/src/ops/dense_bincount.ts","../../tfjs-core/src/ops/depth_to_space.ts","../../tfjs-core/src/ops/depthwise_conv2d.ts","../../tfjs-core/src/ops/diag.ts","../../tfjs-core/src/ops/dilation2d.ts","../../tfjs-core/src/ops/equal.ts","../../tfjs-core/src/ops/where.ts","../../tfjs-core/src/ops/div_no_nan.ts","../../tfjs-core/src/ops/dot.ts","../../tfjs-core/src/ops/einsum.ts","../../tfjs-core/src/ops/elu.ts","../../tfjs-core/src/ops/erf.ts","../../tfjs-core/src/ops/axis_util.ts","../../tfjs-core/src/ops/max.ts","../../tfjs-core/src/ops/min.ts","../../tfjs-core/src/ops/sum.ts","../../tfjs-core/src/ops/norm.ts","../../tfjs-core/src/ops/euclidean_norm.ts","../../tfjs-core/src/ops/exp.ts","../../tfjs-core/src/ops/expand_dims.ts","../../tfjs-core/src/ops/expm1.ts","../../tfjs-core/src/ops/tile.ts","../../tfjs-core/src/ops/eye.ts","../../tfjs-core/src/ops/floor.ts","../../tfjs-core/src/ops/gather.ts","../../tfjs-core/src/ops/greater.ts","../../tfjs-core/src/ops/greater_equal.ts","../../tfjs-core/src/ops/imag.ts","../../tfjs-core/src/ops/is_finite.ts","../../tfjs-core/src/ops/is_inf.ts","../../tfjs-core/src/ops/is_nan.ts","../../tfjs-core/src/ops/leaky_relu.ts","../../tfjs-core/src/ops/less.ts","../../tfjs-core/src/ops/less_equal.ts","../../tfjs-core/src/ops/linspace.ts","../../tfjs-core/src/ops/local_response_normalization.ts","../../tfjs-core/src/ops/log.ts","../../tfjs-core/src/ops/log1p.ts","../../tfjs-core/src/ops/neg.ts","../../tfjs-core/src/ops/softplus.ts","../../tfjs-core/src/ops/log_sigmoid.ts","../../tfjs-core/src/ops/log_softmax.ts","../../tfjs-core/src/ops/log_sum_exp.ts","../../tfjs-core/src/ops/logical_and.ts","../../tfjs-core/src/ops/logical_not.ts","../../tfjs-core/src/ops/logical_or.ts","../../tfjs-core/src/ops/logical_xor.ts","../../tfjs-core/src/ops/search_sorted.ts","../../tfjs-core/src/ops/lower_bound.ts","../../tfjs-core/src/ops/max_pool.ts","../../tfjs-core/src/ops/max_pool_3d.ts","../../tfjs-core/src/ops/max_pool_with_argmax.ts","../../tfjs-core/src/ops/mean.ts","../../tfjs-core/src/ops/zeros.ts","../../tfjs-core/src/ops/ones.ts","../../tfjs-core/src/ops/meshgrid.ts","../../tfjs-core/src/ops/minimum.ts","../../tfjs-core/src/ops/mirror_pad.ts","../../tfjs-core/src/ops/mod.ts","../../tfjs-core/src/ops/moments.ts","../../tfjs-core/src/ops/multi_rnn_cell.ts","../../tfjs-core/src/ops/multinomial.ts","../../tfjs-core/src/ops/not_equal.ts","../../tfjs-core/src/ops/one_hot.ts","../../tfjs-core/src/ops/ones_like.ts","../../tfjs-core/src/ops/outer_product.ts","../../tfjs-core/src/ops/pad.ts","../../tfjs-core/src/ops/pad1d.ts","../../tfjs-core/src/ops/pad2d.ts","../../tfjs-core/src/ops/pad3d.ts","../../tfjs-core/src/ops/pad4d.ts","../../tfjs-core/src/ops/space_to_batch_nd.ts","../../tfjs-core/src/ops/pool.ts","../../tfjs-core/src/ops/prelu.ts","../../tfjs-core/src/ops/prod.ts","../../tfjs-core/src/ops/ragged_gather.ts","../../tfjs-core/src/ops/ragged_range.ts","../../tfjs-core/src/ops/ragged_tensor_to_tensor.ts","../../tfjs-core/src/ops/rand.ts","../../tfjs-core/src/ops/rand_util.ts","../../tfjs-core/src/ops/random_gamma.ts","../../tfjs-core/src/ops/random_normal.ts","../../tfjs-core/src/ops/random_standard_normal.ts","../../tfjs-core/src/ops/random_uniform.ts","../../tfjs-core/src/ops/range.ts","../../tfjs-core/src/ops/real.ts","../../tfjs-core/src/ops/reciprocal.ts","../../tfjs-core/src/ops/relu.ts","../../tfjs-core/src/ops/relu6.ts","../../tfjs-core/src/ops/reverse.ts","../../tfjs-core/src/ops/reverse_1d.ts","../../tfjs-core/src/ops/reverse_2d.ts","../../tfjs-core/src/ops/reverse_3d.ts","../../tfjs-core/src/ops/reverse_4d.ts","../../tfjs-core/src/ops/round.ts","../../tfjs-core/src/ops/rsqrt.ts","../../tfjs-core/src/ops/selu.ts","../../tfjs-core/src/ops/separable_conv2d.ts","../../tfjs-core/src/ops/setdiff1d_async.ts","../../tfjs-core/src/ops/sign.ts","../../tfjs-core/src/ops/sin.ts","../../tfjs-core/src/ops/sinh.ts","../../tfjs-core/src/ops/slice1d.ts","../../tfjs-core/src/ops/slice2d.ts","../../tfjs-core/src/ops/slice3d.ts","../../tfjs-core/src/ops/slice4d.ts","../../tfjs-core/src/ops/softmax.ts","../../tfjs-core/src/ops/spectral/fft.ts","../../tfjs-core/src/ops/spectral/ifft.ts","../../tfjs-core/src/ops/spectral/irfft.ts","../../tfjs-core/src/ops/split.ts","../../tfjs-core/src/ops/spectral/rfft.ts","../../tfjs-core/src/ops/squared_difference.ts","../../tfjs-core/src/ops/squeeze.ts","../../tfjs-core/src/ops/stack.ts","../../tfjs-core/src/ops/step.ts","../../tfjs-core/src/ops/strided_slice.ts","../../tfjs-core/src/ops/tan.ts","../../tfjs-core/src/ops/tensor1d.ts","../../tfjs-core/src/ops/tensor2d.ts","../../tfjs-core/src/ops/tensor4d.ts","../../tfjs-core/src/ops/tensor5d.ts","../../tfjs-core/src/ops/tensor6d.ts","../../tfjs-core/src/ops/topk.ts","../../tfjs-core/src/ops/truncated_normal.ts","../../tfjs-core/src/ops/unique.ts","../../tfjs-core/src/ops/unsorted_segment_sum.ts","../../tfjs-core/src/ops/unstack.ts","../../tfjs-core/src/ops/upper_bound.ts","../../tfjs-core/src/ops/variable.ts","../../tfjs-core/src/backends/where_impl.ts","../../tfjs-core/src/ops/where_async.ts","../../tfjs-core/src/ops/boolean_mask.ts","../../tfjs-core/src/ops/transpose.ts","../../tfjs-core/src/ops/moving_average.ts","../../tfjs-core/src/ops/scatter_nd_util.ts","../../tfjs-core/src/ops/scatter_nd.ts","../../tfjs-core/src/ops/sparse_to_dense_util.ts","../../tfjs-core/src/ops/sparse_to_dense.ts","../../tfjs-core/src/ops/gather_nd.ts","../../tfjs-core/src/ops/dropout.ts","../../tfjs-core/src/ops/dropout_util.ts","../../tfjs-core/src/ops/signal_ops_util.ts","../../tfjs-core/src/ops/in_top_k.ts","../../tfjs-core/src/ops/conv2d_backprop_filter.ts","../../tfjs-core/src/ops/fused_util.ts","../../tfjs-core/src/ops/fused/conv2d.ts","../../tfjs-core/src/ops/depthwise_conv2d_native_backprop_filter.ts","../../tfjs-core/src/ops/depthwise_conv2d_native_backprop_input.ts","../../tfjs-core/src/ops/fused/depthwise_conv2d.ts","../../tfjs-core/src/ops/fused/mat_mul.ts","../../tfjs-core/src/ops/signal/hamming_window.ts","../../tfjs-core/src/ops/signal/hann_window.ts","../../tfjs-core/src/ops/signal/frame.ts","../../tfjs-core/src/ops/signal/stft.ts","../../tfjs-core/src/ops/image/crop_and_resize.ts","../../tfjs-core/src/ops/image/flip_left_right.ts","../../tfjs-core/src/ops/image/grayscale_to_rgb.ts","../../tfjs-core/src/ops/image/rotate_with_offset.ts","../../tfjs-core/src/ops/nonmax_util.ts","../../tfjs-core/src/ops/image/non_max_suppression.ts","../../tfjs-core/src/backends/non_max_suppression_util.ts","../../tfjs-core/src/backends/non_max_suppression_impl.ts","../../tfjs-core/src/ops/image/non_max_suppression_async.ts","../../tfjs-core/src/ops/image/non_max_suppression_with_score.ts","../../tfjs-core/src/ops/image/non_max_suppression_with_score_async.ts","../../tfjs-core/src/ops/image/non_max_suppression_padded.ts","../../tfjs-core/src/ops/image/non_max_suppression_padded_async.ts","../../tfjs-core/src/ops/image/resize_bilinear.ts","../../tfjs-core/src/ops/image/resize_nearest_neighbor.ts","../../tfjs-core/src/ops/image/threshold.ts","../../tfjs-core/src/ops/image/transform.ts","../../tfjs-core/src/ops/linalg/band_part.ts","../../tfjs-core/src/ops/linalg/gram_schmidt.ts","../../tfjs-core/src/ops/linalg/qr.ts","../../tfjs-core/src/ops/loss_ops_utils.ts","../../tfjs-core/src/ops/losses/compute_weighted_loss.ts","../../tfjs-core/src/ops/losses/absolute_difference.ts","../../tfjs-core/src/ops/losses/cosine_distance.ts","../../tfjs-core/src/ops/losses/hinge_loss.ts","../../tfjs-core/src/ops/losses/huber_loss.ts","../../tfjs-core/src/ops/losses/log_loss.ts","../../tfjs-core/src/ops/losses/mean_squared_error.ts","../../tfjs-core/src/ops/losses/sigmoid_cross_entropy.ts","../../tfjs-core/src/ops/losses/softmax_cross_entropy.ts","../../tfjs-core/src/ops/sparse/sparse_fill_empty_rows.ts","../../tfjs-core/src/ops/sparse/sparse_reshape.ts","../../tfjs-core/src/ops/sparse/sparse_segment_mean.ts","../../tfjs-core/src/ops/sparse/sparse_segment_sum.ts","../../tfjs-core/src/ops/string/string_n_grams.ts","../../tfjs-core/src/ops/string/string_split.ts","../../tfjs-core/src/ops/string/string_to_hash_bucket_fast.ts","../../tfjs-core/src/ops/ragged_to_dense_util.ts","../../tfjs-core/src/ops/ops.ts","../../tfjs-core/src/browser_util.ts","../../tfjs-core/src/ops/concat_util.ts","../../tfjs-core/src/ops/reduce_util.ts","../../tfjs-core/src/ops/array_ops_util.ts","../../tfjs-core/src/backends/complex_util.ts","../../tfjs-core/src/backends/einsum_util.ts","../../tfjs-converter/src/data/compiled_api.ts","../../tfjs-core/src/ops/sparse/sparse_fill_empty_rows_util.ts","../../tfjs-core/src/ops/sparse/sparse_segment_reduction_util.ts","../../tfjs-core/src/backends/backend_util.ts","../../tfjs-core/src/index.ts","../../tfjs-converter/src/flags.ts","../../tfjs-converter/src/operations/custom_op/register.ts","../../tfjs-converter/src/operations/executors/utils.ts","../../tfjs-converter/src/operations/op_list/arithmetic.ts","../../tfjs-converter/src/operations/op_list/basic_math.ts","../../tfjs-converter/src/operations/op_list/control.ts","../../tfjs-converter/src/operations/op_list/convolution.ts","../../tfjs-converter/src/operations/op_list/creation.ts","../../tfjs-converter/src/operations/op_list/dynamic.ts","../../tfjs-converter/src/operations/op_list/evaluation.ts","../../tfjs-converter/src/operations/op_list/graph.ts","../../tfjs-converter/src/operations/op_list/hash_table.ts","../../tfjs-converter/src/operations/op_list/image.ts","../../tfjs-converter/src/operations/op_list/logical.ts","../../tfjs-converter/src/operations/op_list/matrices.ts","../../tfjs-converter/src/operations/op_list/normalization.ts","../../tfjs-converter/src/operations/op_list/reduction.ts","../../tfjs-converter/src/operations/op_list/slice_join.ts","../../tfjs-converter/src/operations/op_list/sparse.ts","../../tfjs-converter/src/operations/op_list/spectral.ts","../../tfjs-converter/src/operations/op_list/string.ts","../../tfjs-converter/src/operations/op_list/transformation.ts","../../tfjs-converter/src/operations/operation_mapper.ts","../../tfjs-converter/src/operations/custom_op/node_value_impl.ts","../../tfjs-converter/src/operations/executors/arithmetic_executor.ts","../../tfjs-converter/src/operations/executors/basic_math_executor.ts","../../tfjs-converter/src/executor/tensor_utils.ts","../../tfjs-converter/src/executor/tensor_array.ts","../../tfjs-converter/src/executor/tensor_list.ts","../../tfjs-converter/src/operations/executors/control_executor.ts","../../tfjs-converter/src/operations/executors/convolution_executor.ts","../../tfjs-converter/src/operations/executors/creation_executor.ts","../../tfjs-converter/src/operations/executors/dynamic_executor.ts","../../tfjs-converter/src/operations/executors/evaluation_executor.ts","../../tfjs-converter/src/operations/executors/graph_executor.ts","../../tfjs-converter/src/executor/hash_table.ts","../../tfjs-converter/src/operations/executors/hash_table_executor.ts","../../tfjs-converter/src/operations/executors/image_executor.ts","../../tfjs-converter/src/operations/executors/logical_executor.ts","../../tfjs-converter/src/operations/executors/matrices_executor.ts","../../tfjs-converter/src/operations/executors/normalization_executor.ts","../../tfjs-converter/src/operations/executors/ragged_executor.ts","../../tfjs-converter/src/operations/executors/reduction_executor.ts","../../tfjs-converter/src/operations/executors/slice_join_executor.ts","../../tfjs-converter/src/operations/executors/sparse_executor.ts","../../tfjs-converter/src/operations/executors/spectral_executor.ts","../../tfjs-converter/src/operations/executors/string_executor.ts","../../tfjs-converter/src/operations/executors/transformation_executor.ts","../../tfjs-converter/src/operations/operation_executor.ts","../../tfjs-converter/src/executor/execution_context.ts","../../tfjs-converter/src/executor/model_analysis.ts","../../tfjs-converter/src/executor/graph_executor.ts","../../tfjs-converter/src/executor/resource_manager.ts","../../tfjs-converter/src/executor/graph_model.ts","../node_modules/@tensorflow-models/handpose/dist/handpose.esm.js","../../tfjs-backend-webgl/src/tex_util.ts","../../tfjs-backend-webgl/src/canvas_util.ts","../../tfjs-backend-webgl/src/webgl_util.ts","../../tfjs-backend-webgl/src/flags_webgl.ts","../../tfjs-backend-webgl/src/glsl_version.ts","../../tfjs-backend-webgl/src/shader_compiler_util.ts","../../tfjs-backend-webgl/src/shader_compiler.ts","../../tfjs-backend-webgl/src/gpgpu_math.ts","../../tfjs-backend-webgl/src/decode_matrix_gpu.ts","../../tfjs-backend-webgl/src/decode_matrix_packed_gpu.ts","../../tfjs-backend-webgl/src/encode_float_gpu.ts","../../tfjs-backend-webgl/src/encode_float_packed_gpu.ts","../../tfjs-backend-webgl/src/encode_matrix_gpu.ts","../../tfjs-backend-webgl/src/encode_matrix_packed_gpu.ts","../../tfjs-backend-webgl/src/gpgpu_util.ts","../../tfjs-backend-webgl/src/gpgpu_context.ts","../../tfjs-backend-cpu/src/utils/binary_impl.ts","../../tfjs-backend-cpu/src/cpu_util.ts","../../tfjs-backend-cpu/src/kernels/Complex.ts","../../tfjs-backend-cpu/src/utils/zeros_impl.ts","../../tfjs-backend-cpu/src/kernels/Identity.ts","../../tfjs-backend-cpu/src/kernels/Real.ts","../../tfjs-backend-cpu/src/kernels/Cast.ts","../../tfjs-backend-cpu/src/utils/binary_utils.ts","../../tfjs-backend-cpu/src/kernels/Add.ts","../../tfjs-backend-cpu/src/utils/unary_impl.ts","../../tfjs-backend-cpu/src/utils/unary_utils.ts","../../tfjs-backend-cpu/src/kernels/Ceil.ts","../../tfjs-backend-cpu/src/kernels/Equal.ts","../../tfjs-backend-cpu/src/kernels/Exp.ts","../../tfjs-backend-cpu/src/kernels/Expm1.ts","../../tfjs-backend-cpu/src/kernels/Floor.ts","../../tfjs-backend-cpu/src/kernels/Greater.ts","../../tfjs-backend-cpu/src/kernels/GreaterEqual.ts","../../tfjs-backend-cpu/src/kernels/Less.ts","../../tfjs-backend-cpu/src/kernels/LessEqual.ts","../../tfjs-backend-cpu/src/kernels/Log.ts","../../tfjs-backend-cpu/src/kernels/Maximum.ts","../../tfjs-backend-cpu/src/kernels/Minimum.ts","../../tfjs-backend-cpu/src/kernels/Multiply.ts","../../tfjs-backend-cpu/src/kernels/Neg.ts","../../tfjs-backend-cpu/src/kernels/NotEqual.ts","../../tfjs-backend-cpu/src/kernels/Transpose_impl.ts","../../tfjs-backend-cpu/src/kernels/Prod.ts","../../tfjs-backend-cpu/src/kernels/RaggedGather_impl.ts","../../tfjs-backend-cpu/src/kernels/RaggedRange_impl.ts","../../tfjs-backend-cpu/src/kernels/RaggedTensorToTensor_impl.ts","../../tfjs-backend-cpu/src/kernels/Rsqrt.ts","../../tfjs-backend-cpu/src/kernels/Sigmoid.ts","../../tfjs-backend-cpu/src/kernels/Abs.ts","../../tfjs-backend-cpu/src/kernels/Slice.ts","../../tfjs-backend-cpu/src/kernels/Sqrt.ts","../../tfjs-backend-cpu/src/kernels/StringNGrams_impl.ts","../../tfjs-backend-cpu/src/kernels/StringSplit_impl.ts","../../tfjs-backend-cpu/src/kernels/Sub.ts","../../tfjs-backend-cpu/src/kernels/TopK_impl.ts","../../tfjs-backend-webgl/src/kernel_utils/shared.ts","../../tfjs-backend-cpu/src/kernels/Bincount_impl.ts","../../tfjs-backend-cpu/src/kernels/Concat_impl.ts","../../tfjs-backend-cpu/src/kernels/GatherNd_Impl.ts","../../tfjs-backend-cpu/src/kernels/GatherV2_impl.ts","../../tfjs-backend-cpu/src/kernels/LinSpace_impl.ts","../../tfjs-backend-cpu/src/kernels/Max_impl.ts","../../tfjs-backend-cpu/src/kernels/Range_impl.ts","../../tfjs-backend-cpu/src/kernels/Scatter_impl.ts","../../tfjs-backend-cpu/src/kernels/SparseFillEmptyRows_impl.ts","../../tfjs-backend-cpu/src/kernels/SparseReshape_impl.ts","../../tfjs-core/src/ops/sparse/sparse_reshape_util.ts","../../tfjs-backend-cpu/src/kernels/SparseSegmentReduction_impl.ts","../../tfjs-backend-cpu/src/kernels/StridedSlice_impl.ts","../../tfjs-backend-cpu/src/kernels/StringToHashBucketFast_impl.ts","../../tfjs-backend-cpu/src/kernels/Tile_impl.ts","../../tfjs-backend-cpu/src/kernels/Unique_impl.ts","../../tfjs-backend-webgl/src/packing_util.ts","../../tfjs-backend-webgl/src/pack_gpu.ts","../../tfjs-backend-webgl/src/reshape_packed_gpu.ts","../../tfjs-backend-webgl/src/texture_manager.ts","../../tfjs-backend-webgl/src/unaryop_gpu.ts","../../tfjs-backend-webgl/src/unaryop_packed_gpu.ts","../../tfjs-backend-webgl/src/unpack_gpu.ts","../../tfjs-backend-webgl/src/backend_webgl.ts","../../tfjs-backend-webgl/src/base.ts","../../tfjs-backend-webgl/src/binaryop_gpu.ts","../../tfjs-backend-webgl/src/binaryop_packed_gpu.ts","../../tfjs-backend-webgl/src/kernels/Identity.ts","../../tfjs-backend-webgl/src/kernels/Complex.ts","../../tfjs-backend-webgl/src/kernels/LeakyRelu.ts","../../tfjs-backend-webgl/src/kernels/Prelu.ts","../../tfjs-backend-webgl/src/kernel_utils/kernel_funcs_utils.ts","../../tfjs-backend-webgl/src/mulmat_packed_gpu.ts","../../tfjs-backend-webgl/src/binaryop_complex_gpu.ts","../../tfjs-backend-webgl/src/kernels/Multiply.ts","../../tfjs-backend-webgl/src/kernels/Reshape.ts","../../tfjs-backend-webgl/src/kernel_utils/reshape.ts","../../tfjs-backend-webgl/src/mean_gpu.ts","../../tfjs-backend-webgl/src/reduce_gpu.ts","../../tfjs-backend-webgl/src/kernel_utils/reduce.ts","../../tfjs-backend-webgl/src/transpose_gpu.ts","../../tfjs-backend-webgl/src/transpose_packed_gpu.ts","../../tfjs-backend-webgl/src/kernels/Transpose_impl.ts","../../tfjs-backend-webgl/src/kernels/Sum.ts","../../tfjs-backend-webgl/src/kernels/Sum_impl.ts","../../tfjs-backend-webgl/src/kernels/Transpose.ts","../../tfjs-backend-webgl/src/kernels/BatchMatMul_impl.ts","../../tfjs-backend-webgl/src/kernels/_FusedMatMul.ts","../../tfjs-backend-webgl/src/kernels/Abs.ts","../../tfjs-backend-webgl/src/kernels/Acos.ts","../../tfjs-backend-webgl/src/kernels/Acosh.ts","../../tfjs-backend-webgl/src/kernels/Add.ts","../../tfjs-backend-webgl/src/addn_gpu.ts","../../tfjs-backend-webgl/src/addn_packed_gpu.ts","../../tfjs-backend-webgl/src/kernels/AddN.ts","../../tfjs-backend-webgl/src/kernels/All.ts","../../tfjs-backend-webgl/src/kernels/Any.ts","../../tfjs-backend-webgl/src/argminmax_gpu.ts","../../tfjs-backend-webgl/src/argminmax_packed_gpu.ts","../../tfjs-backend-webgl/src/kernel_utils/arg_min_max.ts","../../tfjs-backend-webgl/src/kernels/ArgMax.ts","../../tfjs-backend-webgl/src/kernels/ArgMin.ts","../../tfjs-backend-webgl/src/kernels/Asin.ts","../../tfjs-backend-webgl/src/kernels/Asinh.ts","../../tfjs-backend-webgl/src/kernels/Atan.ts","../../tfjs-backend-webgl/src/kernels/Atan2.ts","../../tfjs-backend-webgl/src/kernels/Atanh.ts","../../tfjs-backend-webgl/src/pool_gpu.ts","../../tfjs-backend-webgl/src/kernels/AvgPool.ts","../../tfjs-backend-webgl/src/kernels/AvgPool3D.ts","../../tfjs-backend-webgl/src/avg_pool_backprop_gpu.ts","../../tfjs-backend-webgl/src/kernels/AvgPool3DGrad.ts","../../tfjs-backend-webgl/src/kernels/AvgPoolGrad.ts","../../tfjs-backend-webgl/src/kernels/BatchMatMul.ts","../../tfjs-backend-webgl/src/batchnorm_gpu.ts","../../tfjs-backend-webgl/src/batchnorm_packed_gpu.ts","../../tfjs-backend-webgl/src/kernels/BatchNorm.ts","../../tfjs-backend-webgl/src/slice_gpu.ts","../../tfjs-backend-webgl/src/slice_packed_gpu.ts","../../tfjs-backend-webgl/src/kernels/Slice.ts","../../tfjs-backend-webgl/src/kernels/BatchToSpaceND.ts","../../tfjs-backend-webgl/src/kernels/Bincount.ts","../../tfjs-backend-webgl/src/kernels/BroadcastArgs.ts","../../tfjs-backend-webgl/src/kernels/NotEqual.ts","../../tfjs-backend-webgl/src/kernels/Real.ts","../../tfjs-backend-webgl/src/kernels/Cast.ts","../../tfjs-backend-webgl/src/kernel_utils/int.ts","../../tfjs-backend-webgl/src/kernels/Ceil.ts","../../tfjs-backend-webgl/src/clip_gpu.ts","../../tfjs-backend-webgl/src/clip_packed_gpu.ts","../../tfjs-backend-webgl/src/kernels/ClipByValue.ts","../../tfjs-backend-webgl/src/complex_abs_gpu.ts","../../tfjs-backend-webgl/src/kernels/ComplexAbs.ts","../../tfjs-backend-webgl/src/concat_gpu.ts","../../tfjs-backend-webgl/src/concat_packed_gpu.ts","../../tfjs-backend-webgl/src/kernels/Imag.ts","../../tfjs-backend-webgl/src/kernels/Concat_impl.ts","../../tfjs-backend-webgl/src/kernels/Concat.ts","../../tfjs-backend-webgl/src/conv_gpu.ts","../../tfjs-backend-webgl/src/conv_packed_gpu.ts","../../tfjs-backend-webgl/src/im2col_packed_gpu.ts","../../tfjs-backend-webgl/src/kernels/Conv2D_impl.ts","../../tfjs-backend-webgl/src/kernels/Conv2D.ts","../../tfjs-backend-webgl/src/conv_backprop_gpu.ts","../../tfjs-backend-webgl/src/kernels/Conv2DBackpropFilter.ts","../../tfjs-backend-webgl/src/kernels/Conv2DBackpropInput.ts","../../tfjs-backend-webgl/src/kernels/Conv3D.ts","../../tfjs-backend-webgl/src/kernels/Conv3DBackpropFilterV2.ts","../../tfjs-backend-webgl/src/kernels/Conv3DBackpropInputV2.ts","../../tfjs-backend-webgl/src/cum_gpu.ts","../../tfjs-backend-webgl/src/kernels/Cos.ts","../../tfjs-backend-webgl/src/kernels/Cosh.ts","../../tfjs-backend-webgl/src/crop_and_resize_gpu.ts","../../tfjs-backend-webgl/src/kernels/CropAndResize.ts","../../tfjs-backend-webgl/src/kernels/Cum_impl.ts","../../tfjs-backend-webgl/src/kernels/Cumprod.ts","../../tfjs-backend-webgl/src/kernels/Cumsum.ts","../../tfjs-backend-webgl/src/kernels/DenseBincount.ts","../../tfjs-backend-webgl/src/depth_to_space_gpu.ts","../../tfjs-backend-webgl/src/kernels/DepthToSpace.ts","../../tfjs-backend-webgl/src/conv_gpu_depthwise.ts","../../tfjs-backend-webgl/src/conv_packed_gpu_depthwise.ts","../../tfjs-backend-webgl/src/kernels/DepthwiseConv2dNative.ts","../../tfjs-backend-webgl/src/conv_backprop_gpu_depthwise.ts","../../tfjs-backend-webgl/src/kernels/DepthwiseConv2dNativeBackpropFilter.ts","../../tfjs-backend-webgl/src/kernels/DepthwiseConv2dNativeBackpropInput.ts","../../tfjs-backend-webgl/src/diag_gpu.ts","../../tfjs-backend-webgl/src/kernels/Diag.ts","../../tfjs-backend-webgl/src/dilation_gpu.ts","../../tfjs-backend-webgl/src/kernels/Dilation2D.ts","../../tfjs-backend-webgl/src/kernels/Einsum.ts","../../tfjs-backend-webgl/src/kernels/Elu.ts","../../tfjs-backend-webgl/src/kernels/EluGrad.ts","../../tfjs-backend-webgl/src/kernels/Equal.ts","../../tfjs-backend-webgl/src/kernels/Erf.ts","../../tfjs-core/src/ops/erf_util.ts","../../tfjs-backend-webgl/src/kernels/Exp.ts","../../tfjs-backend-webgl/src/kernels/ExpandDims.ts","../../tfjs-backend-webgl/src/kernels/Expm1.ts","../../tfjs-backend-webgl/src/fft_gpu.ts","../../tfjs-backend-webgl/src/kernels/FFT_impl.ts","../../tfjs-backend-webgl/src/kernels/FFT.ts","../../tfjs-backend-webgl/src/fill_gpu.ts","../../tfjs-backend-webgl/src/kernels/Fill.ts","../../tfjs-backend-webgl/src/kernels/FromPixels.ts","../../tfjs-backend-webgl/src/flip_left_right_gpu.ts","../../tfjs-backend-webgl/src/kernels/FlipLeftRight.ts","../../tfjs-backend-webgl/src/kernels/Floor.ts","../../tfjs-backend-webgl/src/kernels/FloorDiv.ts","../../tfjs-backend-webgl/src/kernels/FromPixels_utils/from_pixels_gpu.ts","../../tfjs-backend-webgl/src/kernels/FromPixels_utils/from_pixels_packed_gpu.ts","../../tfjs-backend-webgl/src/kernels/FusedConv2D.ts","../../tfjs-backend-webgl/src/kernels/FusedDepthwiseConv2D.ts","../../tfjs-backend-webgl/src/gather_nd_gpu.ts","../../tfjs-backend-webgl/src/kernels/GatherNd.ts","../../tfjs-core/src/ops/gather_nd_util.ts","../../tfjs-backend-webgl/src/gather_gpu.ts","../../tfjs-backend-webgl/src/kernels/GatherV2.ts","../../tfjs-core/src/ops/segment_util.ts","../../tfjs-backend-webgl/src/kernels/Greater.ts","../../tfjs-backend-webgl/src/kernels/GreaterEqual.ts","../../tfjs-backend-webgl/src/kernels/IFFT.ts","../../tfjs-backend-webgl/src/kernels/IsFinite.ts","../../tfjs-backend-webgl/src/kernels/IsInf.ts","../../tfjs-backend-webgl/src/kernels/IsNaN.ts","../../tfjs-backend-webgl/src/kernels/Less.ts","../../tfjs-backend-webgl/src/kernels/LessEqual.ts","../../tfjs-backend-webgl/src/kernels/LinSpace.ts","../../tfjs-backend-webgl/src/kernels/Log.ts","../../tfjs-backend-webgl/src/kernels/Log1p.ts","../../tfjs-backend-webgl/src/kernels/LogicalAnd.ts","../../tfjs-backend-webgl/src/kernels/LogicalNot.ts","../../tfjs-backend-webgl/src/kernels/LogicalOr.ts","../../tfjs-backend-webgl/src/lrn_gpu.ts","../../tfjs-backend-webgl/src/lrn_packed_gpu.ts","../../tfjs-backend-webgl/src/kernels/LRN.ts","../../tfjs-backend-webgl/src/lrn_grad_gpu.ts","../../tfjs-backend-webgl/src/kernels/LRNGrad.ts","../../tfjs-backend-webgl/src/kernels/Max.ts","../../tfjs-backend-webgl/src/kernels/Max_impl.ts","../../tfjs-backend-webgl/src/kernels/Maximum.ts","../../tfjs-backend-webgl/src/kernels/MaxPool.ts","../../tfjs-backend-webgl/src/kernels/MaxPool3D.ts","../../tfjs-backend-webgl/src/max_pool_backprop_gpu.ts","../../tfjs-backend-webgl/src/kernels/MaxPool3DGrad.ts","../../tfjs-backend-webgl/src/kernels/MaxPoolGrad.ts","../../tfjs-backend-webgl/src/kernels/MaxPoolWithArgmax.ts","../../tfjs-backend-webgl/src/kernels/MaxPoolWithArgmax_impl.ts","../../tfjs-backend-webgl/src/kernels/Mean.ts","../../tfjs-backend-webgl/src/kernels/Mean_impl.ts","../../tfjs-backend-webgl/src/kernels/Min.ts","../../tfjs-backend-webgl/src/kernels/Minimum.ts","../../tfjs-backend-webgl/src/mirror_pad_gpu.ts","../../tfjs-backend-webgl/src/mirror_pad_packed_gpu.ts","../../tfjs-backend-webgl/src/kernels/MirrorPad.ts","../../tfjs-backend-webgl/src/kernels/Mod.ts","../../tfjs-backend-webgl/src/multinomial_gpu.ts","../../tfjs-backend-webgl/src/kernels/RealDiv.ts","../../tfjs-backend-webgl/src/kernels/Sub.ts","../../tfjs-backend-webgl/src/kernels/Softmax.ts","../../tfjs-backend-webgl/src/kernels/Multinomial.ts","../../tfjs-backend-webgl/src/kernels/Neg.ts","../../tfjs-backend-webgl/src/kernels/NonMaxSuppressionV3.ts","../../tfjs-backend-webgl/src/kernels/NonMaxSuppressionV4.ts","../../tfjs-backend-webgl/src/kernels/NonMaxSuppressionV5.ts","../../tfjs-backend-webgl/src/onehot_gpu.ts","../../tfjs-backend-webgl/src/kernels/OneHot.ts","../../tfjs-backend-webgl/src/kernels/ZerosLike.ts","../../tfjs-backend-webgl/src/kernels/OnesLike.ts","../../tfjs-backend-webgl/src/kernels/Pack.ts","../../tfjs-backend-webgl/src/pad_gpu.ts","../../tfjs-backend-webgl/src/pad_packed_gpu.ts","../../tfjs-backend-webgl/src/kernels/PadV2.ts","../../tfjs-backend-webgl/src/kernels/Pow.ts","../../tfjs-backend-webgl/src/kernels/Prod.ts","../../tfjs-backend-webgl/src/kernels/RaggedGather.ts","../../tfjs-backend-webgl/src/kernels/RaggedRange.ts","../../tfjs-backend-webgl/src/kernels/RaggedTensorToTensor.ts","../../tfjs-backend-webgl/src/kernels/Range.ts","../../tfjs-backend-webgl/src/kernels/Reciprocal.ts","../../tfjs-backend-webgl/src/kernels/Relu.ts","../../tfjs-backend-webgl/src/kernels/Relu6.ts","../../tfjs-backend-webgl/src/resize_bilinear_gpu.ts","../../tfjs-backend-webgl/src/resize_bilinear_packed_gpu.ts","../../tfjs-backend-webgl/src/kernels/ResizeBilinear.ts","../../tfjs-backend-webgl/src/resize_bilinear_backprop_gpu.ts","../../tfjs-backend-webgl/src/kernels/ResizeBilinearGrad.ts","../../tfjs-backend-webgl/src/resize_nearest_neighbor_gpu.ts","../../tfjs-backend-webgl/src/resize_nearest_neighbor_packed_gpu.ts","../../tfjs-backend-webgl/src/kernels/ResizeNearestNeighbor.ts","../../tfjs-backend-webgl/src/resize_nearest_neighbor_backprop_gpu.ts","../../tfjs-backend-webgl/src/kernels/ResizeNearestNeighborGrad.ts","../../tfjs-backend-webgl/src/reverse_gpu.ts","../../tfjs-backend-webgl/src/reverse_packed_gpu.ts","../../tfjs-backend-webgl/src/kernels/Reverse.ts","../../tfjs-backend-webgl/src/rotate_gpu.ts","../../tfjs-backend-webgl/src/kernels/RotateWithOffset.ts","../../tfjs-core/src/ops/rotate_util.ts","../../tfjs-backend-webgl/src/kernels/Round.ts","../../tfjs-backend-webgl/src/kernels/Rsqrt.ts","../../tfjs-backend-webgl/src/scatter_gpu.ts","../../tfjs-backend-webgl/src/kernels/ScatterNd.ts","../../tfjs-backend-webgl/src/search_sorted_gpu.ts","../../tfjs-backend-webgl/src/kernels/SearchSorted.ts","../../tfjs-backend-webgl/src/select_gpu.ts","../../tfjs-backend-webgl/src/kernels/Select.ts","../../tfjs-backend-webgl/src/kernels/Selu.ts","../../tfjs-core/src/ops/selu_util.ts","../../tfjs-backend-webgl/src/kernels/Sigmoid.ts","../../tfjs-backend-webgl/src/kernels/Sign.ts","../../tfjs-backend-webgl/src/kernels/Sin.ts","../../tfjs-backend-webgl/src/kernels/Sinh.ts","../../tfjs-backend-webgl/src/kernels/Softplus.ts","../../tfjs-backend-webgl/src/kernels/SpaceToBatchND.ts","../../tfjs-backend-webgl/src/kernels/SparseFillEmptyRows.ts","../../tfjs-backend-webgl/src/kernels/SparseReshape.ts","../../tfjs-backend-webgl/src/kernels/SparseSegmentMean.ts","../../tfjs-backend-webgl/src/kernels/SparseSegmentSum.ts","../../tfjs-backend-webgl/src/kernels/SparseToDense.ts","../../tfjs-backend-webgl/src/kernels/SplitV.ts","../../tfjs-core/src/ops/split_util.ts","../../tfjs-backend-webgl/src/kernels/Sqrt.ts","../../tfjs-backend-webgl/src/kernels/Square.ts","../../tfjs-backend-webgl/src/kernels/SquaredDifference.ts","../../tfjs-backend-webgl/src/kernels/Step.ts","../../tfjs-backend-webgl/src/strided_slice_gpu.ts","../../tfjs-backend-webgl/src/kernels/StridedSlice.ts","../../tfjs-backend-webgl/src/kernels/StringNGrams.ts","../../tfjs-backend-webgl/src/kernels/StringSplit.ts","../../tfjs-backend-webgl/src/kernels/StringToHashBucketFast.ts","../../tfjs-backend-webgl/src/kernels/Tan.ts","../../tfjs-backend-webgl/src/kernels/Tanh.ts","../../tfjs-backend-webgl/src/tile_gpu.ts","../../tfjs-backend-webgl/src/kernels/Tile.ts","../../tfjs-backend-webgl/src/top_k_gpu.ts","../../tfjs-backend-webgl/src/kernels/TopK.ts","../../tfjs-backend-webgl/src/transform_gpu.ts","../../tfjs-backend-webgl/src/kernels/Transform.ts","../../tfjs-backend-webgl/src/kernels/Unique.ts","../../tfjs-backend-webgl/src/kernels/Unpack.ts","../../tfjs-backend-webgl/src/segment_gpu.ts","../../tfjs-backend-webgl/src/register_all_kernels.ts","../../tfjs-backend-webgl/src/kernels/UnsortedSegmentSum.ts","UsePrevious.js","CameraCanvas.jsx","App.js","index.js"],"sourcesContent":["(function(){/*\n\n Copyright The Closure Library Authors.\n SPDX-License-Identifier: Apache-2.0\n*/\n'use strict';function n(a){var b=0;return function(){return b<a.length?{done:!1,value:a[b++]}:{done:!0}}}var q=\"function\"==typeof Object.defineProperties?Object.defineProperty:function(a,b,e){if(a==Array.prototype||a==Object.prototype)return a;a[b]=e.value;return a};\nfunction t(a){a=[\"object\"==typeof globalThis&&globalThis,a,\"object\"==typeof window&&window,\"object\"==typeof self&&self,\"object\"==typeof global&&global];for(var b=0;b<a.length;++b){var e=a[b];if(e&&e.Math==Math)return e}throw Error(\"Cannot find global object\");}var u=t(this);function v(a,b){if(b)a:{var e=u;a=a.split(\".\");for(var f=0;f<a.length-1;f++){var h=a[f];if(!(h in e))break a;e=e[h]}a=a[a.length-1];f=e[a];b=b(f);b!=f&&null!=b&&q(e,a,{configurable:!0,writable:!0,value:b})}}\nv(\"Symbol\",function(a){function b(l){if(this instanceof b)throw new TypeError(\"Symbol is not a constructor\");return new e(f+(l||\"\")+\"_\"+h++,l)}function e(l,c){this.g=l;q(this,\"description\",{configurable:!0,writable:!0,value:c})}if(a)return a;e.prototype.toString=function(){return this.g};var f=\"jscomp_symbol_\"+(1E9*Math.random()>>>0)+\"_\",h=0;return b});\nv(\"Symbol.iterator\",function(a){if(a)return a;a=Symbol(\"Symbol.iterator\");for(var b=\"Array Int8Array Uint8Array Uint8ClampedArray Int16Array Uint16Array Int32Array Uint32Array Float32Array Float64Array\".split(\" \"),e=0;e<b.length;e++){var f=u[b[e]];\"function\"===typeof f&&\"function\"!=typeof f.prototype[a]&&q(f.prototype,a,{configurable:!0,writable:!0,value:function(){return w(n(this))}})}return a});function w(a){a={next:a};a[Symbol.iterator]=function(){return this};return a}\nfunction x(a){var b=\"undefined\"!=typeof Symbol&&Symbol.iterator&&a[Symbol.iterator];return b?b.call(a):{next:n(a)}}function y(){this.i=!1;this.g=null;this.o=void 0;this.j=1;this.m=0;this.h=null}function z(a){if(a.i)throw new TypeError(\"Generator is already running\");a.i=!0}y.prototype.l=function(a){this.o=a};function A(a,b){a.h={F:b,G:!0};a.j=a.m}y.prototype.return=function(a){this.h={return:a};this.j=this.m};function B(a){this.g=new y;this.h=a}\nfunction C(a,b){z(a.g);var e=a.g.g;if(e)return D(a,\"return\"in e?e[\"return\"]:function(f){return{value:f,done:!0}},b,a.g.return);a.g.return(b);return H(a)}function D(a,b,e,f){try{var h=b.call(a.g.g,e);if(!(h instanceof Object))throw new TypeError(\"Iterator result \"+h+\" is not an object\");if(!h.done)return a.g.i=!1,h;var l=h.value}catch(c){return a.g.g=null,A(a.g,c),H(a)}a.g.g=null;f.call(a.g,l);return H(a)}\nfunction H(a){for(;a.g.j;)try{var b=a.h(a.g);if(b)return a.g.i=!1,{value:b.value,done:!1}}catch(e){a.g.o=void 0,A(a.g,e)}a.g.i=!1;if(a.g.h){b=a.g.h;a.g.h=null;if(b.G)throw b.F;return{value:b.return,done:!0}}return{value:void 0,done:!0}}\nfunction I(a){this.next=function(b){z(a.g);a.g.g?b=D(a,a.g.g.next,b,a.g.l):(a.g.l(b),b=H(a));return b};this.throw=function(b){z(a.g);a.g.g?b=D(a,a.g.g[\"throw\"],b,a.g.l):(A(a.g,b),b=H(a));return b};this.return=function(b){return C(a,b)};this[Symbol.iterator]=function(){return this}}function J(a){function b(f){return a.next(f)}function e(f){return a.throw(f)}return new Promise(function(f,h){function l(c){c.done?f(c.value):Promise.resolve(c.value).then(b,e).then(l,h)}l(a.next())})}\nv(\"Promise\",function(a){function b(c){this.h=0;this.i=void 0;this.g=[];this.o=!1;var d=this.j();try{c(d.resolve,d.reject)}catch(g){d.reject(g)}}function e(){this.g=null}function f(c){return c instanceof b?c:new b(function(d){d(c)})}if(a)return a;e.prototype.h=function(c){if(null==this.g){this.g=[];var d=this;this.i(function(){d.l()})}this.g.push(c)};var h=u.setTimeout;e.prototype.i=function(c){h(c,0)};e.prototype.l=function(){for(;this.g&&this.g.length;){var c=this.g;this.g=[];for(var d=0;d<c.length;++d){var g=\nc[d];c[d]=null;try{g()}catch(k){this.j(k)}}}this.g=null};e.prototype.j=function(c){this.i(function(){throw c;})};b.prototype.j=function(){function c(k){return function(m){g||(g=!0,k.call(d,m))}}var d=this,g=!1;return{resolve:c(this.A),reject:c(this.l)}};b.prototype.A=function(c){if(c===this)this.l(new TypeError(\"A Promise cannot resolve to itself\"));else if(c instanceof b)this.C(c);else{a:switch(typeof c){case \"object\":var d=null!=c;break a;case \"function\":d=!0;break a;default:d=!1}d?this.v(c):this.m(c)}};\nb.prototype.v=function(c){var d=void 0;try{d=c.then}catch(g){this.l(g);return}\"function\"==typeof d?this.D(d,c):this.m(c)};b.prototype.l=function(c){this.u(2,c)};b.prototype.m=function(c){this.u(1,c)};b.prototype.u=function(c,d){if(0!=this.h)throw Error(\"Cannot settle(\"+c+\", \"+d+\"): Promise already settled in state\"+this.h);this.h=c;this.i=d;2===this.h&&this.B();this.H()};b.prototype.B=function(){var c=this;h(function(){if(c.I()){var d=u.console;\"undefined\"!==typeof d&&d.error(c.i)}},1)};b.prototype.I=\nfunction(){if(this.o)return!1;var c=u.CustomEvent,d=u.Event,g=u.dispatchEvent;if(\"undefined\"===typeof g)return!0;\"function\"===typeof c?c=new c(\"unhandledrejection\",{cancelable:!0}):\"function\"===typeof d?c=new d(\"unhandledrejection\",{cancelable:!0}):(c=u.document.createEvent(\"CustomEvent\"),c.initCustomEvent(\"unhandledrejection\",!1,!0,c));c.promise=this;c.reason=this.i;return g(c)};b.prototype.H=function(){if(null!=this.g){for(var c=0;c<this.g.length;++c)l.h(this.g[c]);this.g=null}};var l=new e;b.prototype.C=\nfunction(c){var d=this.j();c.s(d.resolve,d.reject)};b.prototype.D=function(c,d){var g=this.j();try{c.call(d,g.resolve,g.reject)}catch(k){g.reject(k)}};b.prototype.then=function(c,d){function g(p,r){return\"function\"==typeof p?function(E){try{k(p(E))}catch(F){m(F)}}:r}var k,m,G=new b(function(p,r){k=p;m=r});this.s(g(c,k),g(d,m));return G};b.prototype.catch=function(c){return this.then(void 0,c)};b.prototype.s=function(c,d){function g(){switch(k.h){case 1:c(k.i);break;case 2:d(k.i);break;default:throw Error(\"Unexpected state: \"+\nk.h);}}var k=this;null==this.g?l.h(g):this.g.push(g);this.o=!0};b.resolve=f;b.reject=function(c){return new b(function(d,g){g(c)})};b.race=function(c){return new b(function(d,g){for(var k=x(c),m=k.next();!m.done;m=k.next())f(m.value).s(d,g)})};b.all=function(c){var d=x(c),g=d.next();return g.done?f([]):new b(function(k,m){function G(E){return function(F){p[E]=F;r--;0==r&&k(p)}}var p=[],r=0;do p.push(void 0),r++,f(g.value).s(G(p.length-1),m),g=d.next();while(!g.done)})};return b});\nvar K=\"function\"==typeof Object.assign?Object.assign:function(a,b){for(var e=1;e<arguments.length;e++){var f=arguments[e];if(f)for(var h in f)Object.prototype.hasOwnProperty.call(f,h)&&(a[h]=f[h])}return a};v(\"Object.assign\",function(a){return a||K});var L=this||self;var M={facingMode:\"user\",width:640,height:480};function N(a,b){this.video=a;this.i=0;this.h=Object.assign(Object.assign({},M),b)}N.prototype.stop=function(){var a=this,b,e,f,h;return J(new I(new B(function(l){if(a.g){b=a.g.getTracks();e=x(b);for(f=e.next();!f.done;f=e.next())h=f.value,h.stop();a.g=void 0}l.j=0})))};\nN.prototype.start=function(){var a=this,b;return J(new I(new B(function(e){navigator.mediaDevices&&navigator.mediaDevices.getUserMedia||alert(\"No navigator.mediaDevices.getUserMedia exists.\");b=a.h;return e.return(navigator.mediaDevices.getUserMedia({video:{facingMode:b.facingMode,width:b.width,height:b.height}}).then(function(f){O(a,f)}).catch(function(f){var h=\"Failed to acquire camera feed: \"+f;console.error(h);alert(h);throw f;}))})))};\nfunction P(a){window.requestAnimationFrame(function(){Q(a)})}function O(a,b){a.g=b;a.video.srcObject=b;a.video.onloadedmetadata=function(){a.video.play();P(a)}}function Q(a){var b=null;a.video.paused||a.video.currentTime===a.i||(a.i=a.video.currentTime,b=a.h.onFrame());b?b.then(function(){P(a)}):P(a)}var R=[\"Camera\"],S=L;R[0]in S||\"undefined\"==typeof S.execScript||S.execScript(\"var \"+R[0]);\nfor(var T;R.length&&(T=R.shift());)R.length||void 0===N?S[T]&&S[T]!==Object.prototype[T]?S=S[T]:S=S[T]={}:S[T]=N;}).call(this);\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","/**\n * @license React\n * react-dom.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n/*\n Modernizr 3.0.0pre (Custom Build) | MIT\n*/\n'use strict';var aa=require(\"react\"),ca=require(\"scheduler\");function p(a){for(var b=\"https://reactjs.org/docs/error-decoder.html?invariant=\"+a,c=1;c<arguments.length;c++)b+=\"&args[]=\"+encodeURIComponent(arguments[c]);return\"Minified React error #\"+a+\"; visit \"+b+\" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.\"}var da=new Set,ea={};function fa(a,b){ha(a,b);ha(a+\"Capture\",b)}\nfunction ha(a,b){ea[a]=b;for(a=0;a<b.length;a++)da.add(b[a])}\nvar ia=!(\"undefined\"===typeof window||\"undefined\"===typeof window.document||\"undefined\"===typeof window.document.createElement),ja=Object.prototype.hasOwnProperty,ka=/^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$/,la=\n{},ma={};function oa(a){if(ja.call(ma,a))return!0;if(ja.call(la,a))return!1;if(ka.test(a))return ma[a]=!0;la[a]=!0;return!1}function pa(a,b,c,d){if(null!==c&&0===c.type)return!1;switch(typeof b){case \"function\":case \"symbol\":return!0;case \"boolean\":if(d)return!1;if(null!==c)return!c.acceptsBooleans;a=a.toLowerCase().slice(0,5);return\"data-\"!==a&&\"aria-\"!==a;default:return!1}}\nfunction qa(a,b,c,d){if(null===b||\"undefined\"===typeof b||pa(a,b,c,d))return!0;if(d)return!1;if(null!==c)switch(c.type){case 3:return!b;case 4:return!1===b;case 5:return isNaN(b);case 6:return isNaN(b)||1>b}return!1}function v(a,b,c,d,e,f,g){this.acceptsBooleans=2===b||3===b||4===b;this.attributeName=d;this.attributeNamespace=e;this.mustUseProperty=c;this.propertyName=a;this.type=b;this.sanitizeURL=f;this.removeEmptyString=g}var z={};\n\"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style\".split(\" \").forEach(function(a){z[a]=new v(a,0,!1,a,null,!1,!1)});[[\"acceptCharset\",\"accept-charset\"],[\"className\",\"class\"],[\"htmlFor\",\"for\"],[\"httpEquiv\",\"http-equiv\"]].forEach(function(a){var b=a[0];z[b]=new v(b,1,!1,a[1],null,!1,!1)});[\"contentEditable\",\"draggable\",\"spellCheck\",\"value\"].forEach(function(a){z[a]=new v(a,2,!1,a.toLowerCase(),null,!1,!1)});\n[\"autoReverse\",\"externalResourcesRequired\",\"focusable\",\"preserveAlpha\"].forEach(function(a){z[a]=new v(a,2,!1,a,null,!1,!1)});\"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope\".split(\" \").forEach(function(a){z[a]=new v(a,3,!1,a.toLowerCase(),null,!1,!1)});\n[\"checked\",\"multiple\",\"muted\",\"selected\"].forEach(function(a){z[a]=new v(a,3,!0,a,null,!1,!1)});[\"capture\",\"download\"].forEach(function(a){z[a]=new v(a,4,!1,a,null,!1,!1)});[\"cols\",\"rows\",\"size\",\"span\"].forEach(function(a){z[a]=new v(a,6,!1,a,null,!1,!1)});[\"rowSpan\",\"start\"].forEach(function(a){z[a]=new v(a,5,!1,a.toLowerCase(),null,!1,!1)});var ra=/[\\-:]([a-z])/g;function sa(a){return a[1].toUpperCase()}\n\"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height\".split(\" \").forEach(function(a){var b=a.replace(ra,\nsa);z[b]=new v(b,1,!1,a,null,!1,!1)});\"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type\".split(\" \").forEach(function(a){var b=a.replace(ra,sa);z[b]=new v(b,1,!1,a,\"http://www.w3.org/1999/xlink\",!1,!1)});[\"xml:base\",\"xml:lang\",\"xml:space\"].forEach(function(a){var b=a.replace(ra,sa);z[b]=new v(b,1,!1,a,\"http://www.w3.org/XML/1998/namespace\",!1,!1)});[\"tabIndex\",\"crossOrigin\"].forEach(function(a){z[a]=new v(a,1,!1,a.toLowerCase(),null,!1,!1)});\nz.xlinkHref=new v(\"xlinkHref\",1,!1,\"xlink:href\",\"http://www.w3.org/1999/xlink\",!0,!1);[\"src\",\"href\",\"action\",\"formAction\"].forEach(function(a){z[a]=new v(a,1,!1,a.toLowerCase(),null,!0,!0)});\nfunction ta(a,b,c,d){var e=z.hasOwnProperty(b)?z[b]:null;if(null!==e?0!==e.type:d||!(2<b.length)||\"o\"!==b[0]&&\"O\"!==b[0]||\"n\"!==b[1]&&\"N\"!==b[1])qa(b,c,e,d)&&(c=null),d||null===e?oa(b)&&(null===c?a.removeAttribute(b):a.setAttribute(b,\"\"+c)):e.mustUseProperty?a[e.propertyName]=null===c?3===e.type?!1:\"\":c:(b=e.attributeName,d=e.attributeNamespace,null===c?a.removeAttribute(b):(e=e.type,c=3===e||4===e&&!0===c?\"\":\"\"+c,d?a.setAttributeNS(d,b,c):a.setAttribute(b,c)))}\nvar ua=aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,va=Symbol.for(\"react.element\"),wa=Symbol.for(\"react.portal\"),ya=Symbol.for(\"react.fragment\"),za=Symbol.for(\"react.strict_mode\"),Aa=Symbol.for(\"react.profiler\"),Ba=Symbol.for(\"react.provider\"),Ca=Symbol.for(\"react.context\"),Da=Symbol.for(\"react.forward_ref\"),Ea=Symbol.for(\"react.suspense\"),Fa=Symbol.for(\"react.suspense_list\"),Ga=Symbol.for(\"react.memo\"),Ha=Symbol.for(\"react.lazy\");Symbol.for(\"react.scope\");Symbol.for(\"react.debug_trace_mode\");\nvar Ia=Symbol.for(\"react.offscreen\");Symbol.for(\"react.legacy_hidden\");Symbol.for(\"react.cache\");Symbol.for(\"react.tracing_marker\");var Ja=Symbol.iterator;function Ka(a){if(null===a||\"object\"!==typeof a)return null;a=Ja&&a[Ja]||a[\"@@iterator\"];return\"function\"===typeof a?a:null}var A=Object.assign,La;function Ma(a){if(void 0===La)try{throw Error();}catch(c){var b=c.stack.trim().match(/\\n( *(at )?)/);La=b&&b[1]||\"\"}return\"\\n\"+La+a}var Na=!1;\nfunction Oa(a,b){if(!a||Na)return\"\";Na=!0;var c=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(b)if(b=function(){throw Error();},Object.defineProperty(b.prototype,\"props\",{set:function(){throw Error();}}),\"object\"===typeof Reflect&&Reflect.construct){try{Reflect.construct(b,[])}catch(l){var d=l}Reflect.construct(a,[],b)}else{try{b.call()}catch(l){d=l}a.call(b.prototype)}else{try{throw Error();}catch(l){d=l}a()}}catch(l){if(l&&d&&\"string\"===typeof l.stack){for(var e=l.stack.split(\"\\n\"),\nf=d.stack.split(\"\\n\"),g=e.length-1,h=f.length-1;1<=g&&0<=h&&e[g]!==f[h];)h--;for(;1<=g&&0<=h;g--,h--)if(e[g]!==f[h]){if(1!==g||1!==h){do if(g--,h--,0>h||e[g]!==f[h]){var k=\"\\n\"+e[g].replace(\" at new \",\" at \");a.displayName&&k.includes(\"<anonymous>\")&&(k=k.replace(\"<anonymous>\",a.displayName));return k}while(1<=g&&0<=h)}break}}}finally{Na=!1,Error.prepareStackTrace=c}return(a=a?a.displayName||a.name:\"\")?Ma(a):\"\"}\nfunction Pa(a){switch(a.tag){case 5:return Ma(a.type);case 16:return Ma(\"Lazy\");case 13:return Ma(\"Suspense\");case 19:return Ma(\"SuspenseList\");case 0:case 2:case 15:return a=Oa(a.type,!1),a;case 11:return a=Oa(a.type.render,!1),a;case 1:return a=Oa(a.type,!0),a;default:return\"\"}}\nfunction Qa(a){if(null==a)return null;if(\"function\"===typeof a)return a.displayName||a.name||null;if(\"string\"===typeof a)return a;switch(a){case ya:return\"Fragment\";case wa:return\"Portal\";case Aa:return\"Profiler\";case za:return\"StrictMode\";case Ea:return\"Suspense\";case Fa:return\"SuspenseList\"}if(\"object\"===typeof a)switch(a.$$typeof){case Ca:return(a.displayName||\"Context\")+\".Consumer\";case Ba:return(a._context.displayName||\"Context\")+\".Provider\";case Da:var b=a.render;a=a.displayName;a||(a=b.displayName||\nb.name||\"\",a=\"\"!==a?\"ForwardRef(\"+a+\")\":\"ForwardRef\");return a;case Ga:return b=a.displayName||null,null!==b?b:Qa(a.type)||\"Memo\";case Ha:b=a._payload;a=a._init;try{return Qa(a(b))}catch(c){}}return null}\nfunction Ra(a){var b=a.type;switch(a.tag){case 24:return\"Cache\";case 9:return(b.displayName||\"Context\")+\".Consumer\";case 10:return(b._context.displayName||\"Context\")+\".Provider\";case 18:return\"DehydratedFragment\";case 11:return a=b.render,a=a.displayName||a.name||\"\",b.displayName||(\"\"!==a?\"ForwardRef(\"+a+\")\":\"ForwardRef\");case 7:return\"Fragment\";case 5:return b;case 4:return\"Portal\";case 3:return\"Root\";case 6:return\"Text\";case 16:return Qa(b);case 8:return b===za?\"StrictMode\":\"Mode\";case 22:return\"Offscreen\";\ncase 12:return\"Profiler\";case 21:return\"Scope\";case 13:return\"Suspense\";case 19:return\"SuspenseList\";case 25:return\"TracingMarker\";case 1:case 0:case 17:case 2:case 14:case 15:if(\"function\"===typeof b)return b.displayName||b.name||null;if(\"string\"===typeof b)return b}return null}function Sa(a){switch(typeof a){case \"boolean\":case \"number\":case \"string\":case \"undefined\":return a;case \"object\":return a;default:return\"\"}}\nfunction Ta(a){var b=a.type;return(a=a.nodeName)&&\"input\"===a.toLowerCase()&&(\"checkbox\"===b||\"radio\"===b)}\nfunction Ua(a){var b=Ta(a)?\"checked\":\"value\",c=Object.getOwnPropertyDescriptor(a.constructor.prototype,b),d=\"\"+a[b];if(!a.hasOwnProperty(b)&&\"undefined\"!==typeof c&&\"function\"===typeof c.get&&\"function\"===typeof c.set){var e=c.get,f=c.set;Object.defineProperty(a,b,{configurable:!0,get:function(){return e.call(this)},set:function(a){d=\"\"+a;f.call(this,a)}});Object.defineProperty(a,b,{enumerable:c.enumerable});return{getValue:function(){return d},setValue:function(a){d=\"\"+a},stopTracking:function(){a._valueTracker=\nnull;delete a[b]}}}}function Va(a){a._valueTracker||(a._valueTracker=Ua(a))}function Wa(a){if(!a)return!1;var b=a._valueTracker;if(!b)return!0;var c=b.getValue();var d=\"\";a&&(d=Ta(a)?a.checked?\"true\":\"false\":a.value);a=d;return a!==c?(b.setValue(a),!0):!1}function Xa(a){a=a||(\"undefined\"!==typeof document?document:void 0);if(\"undefined\"===typeof a)return null;try{return a.activeElement||a.body}catch(b){return a.body}}\nfunction Ya(a,b){var c=b.checked;return A({},b,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=c?c:a._wrapperState.initialChecked})}function Za(a,b){var c=null==b.defaultValue?\"\":b.defaultValue,d=null!=b.checked?b.checked:b.defaultChecked;c=Sa(null!=b.value?b.value:c);a._wrapperState={initialChecked:d,initialValue:c,controlled:\"checkbox\"===b.type||\"radio\"===b.type?null!=b.checked:null!=b.value}}function ab(a,b){b=b.checked;null!=b&&ta(a,\"checked\",b,!1)}\nfunction bb(a,b){ab(a,b);var c=Sa(b.value),d=b.type;if(null!=c)if(\"number\"===d){if(0===c&&\"\"===a.value||a.value!=c)a.value=\"\"+c}else a.value!==\"\"+c&&(a.value=\"\"+c);else if(\"submit\"===d||\"reset\"===d){a.removeAttribute(\"value\");return}b.hasOwnProperty(\"value\")?cb(a,b.type,c):b.hasOwnProperty(\"defaultValue\")&&cb(a,b.type,Sa(b.defaultValue));null==b.checked&&null!=b.defaultChecked&&(a.defaultChecked=!!b.defaultChecked)}\nfunction db(a,b,c){if(b.hasOwnProperty(\"value\")||b.hasOwnProperty(\"defaultValue\")){var d=b.type;if(!(\"submit\"!==d&&\"reset\"!==d||void 0!==b.value&&null!==b.value))return;b=\"\"+a._wrapperState.initialValue;c||b===a.value||(a.value=b);a.defaultValue=b}c=a.name;\"\"!==c&&(a.name=\"\");a.defaultChecked=!!a._wrapperState.initialChecked;\"\"!==c&&(a.name=c)}\nfunction cb(a,b,c){if(\"number\"!==b||Xa(a.ownerDocument)!==a)null==c?a.defaultValue=\"\"+a._wrapperState.initialValue:a.defaultValue!==\"\"+c&&(a.defaultValue=\"\"+c)}var eb=Array.isArray;\nfunction fb(a,b,c,d){a=a.options;if(b){b={};for(var e=0;e<c.length;e++)b[\"$\"+c[e]]=!0;for(c=0;c<a.length;c++)e=b.hasOwnProperty(\"$\"+a[c].value),a[c].selected!==e&&(a[c].selected=e),e&&d&&(a[c].defaultSelected=!0)}else{c=\"\"+Sa(c);b=null;for(e=0;e<a.length;e++){if(a[e].value===c){a[e].selected=!0;d&&(a[e].defaultSelected=!0);return}null!==b||a[e].disabled||(b=a[e])}null!==b&&(b.selected=!0)}}\nfunction gb(a,b){if(null!=b.dangerouslySetInnerHTML)throw Error(p(91));return A({},b,{value:void 0,defaultValue:void 0,children:\"\"+a._wrapperState.initialValue})}function hb(a,b){var c=b.value;if(null==c){c=b.children;b=b.defaultValue;if(null!=c){if(null!=b)throw Error(p(92));if(eb(c)){if(1<c.length)throw Error(p(93));c=c[0]}b=c}null==b&&(b=\"\");c=b}a._wrapperState={initialValue:Sa(c)}}\nfunction ib(a,b){var c=Sa(b.value),d=Sa(b.defaultValue);null!=c&&(c=\"\"+c,c!==a.value&&(a.value=c),null==b.defaultValue&&a.defaultValue!==c&&(a.defaultValue=c));null!=d&&(a.defaultValue=\"\"+d)}function jb(a){var b=a.textContent;b===a._wrapperState.initialValue&&\"\"!==b&&null!==b&&(a.value=b)}function kb(a){switch(a){case \"svg\":return\"http://www.w3.org/2000/svg\";case \"math\":return\"http://www.w3.org/1998/Math/MathML\";default:return\"http://www.w3.org/1999/xhtml\"}}\nfunction lb(a,b){return null==a||\"http://www.w3.org/1999/xhtml\"===a?kb(b):\"http://www.w3.org/2000/svg\"===a&&\"foreignObject\"===b?\"http://www.w3.org/1999/xhtml\":a}\nvar mb,nb=function(a){return\"undefined\"!==typeof MSApp&&MSApp.execUnsafeLocalFunction?function(b,c,d,e){MSApp.execUnsafeLocalFunction(function(){return a(b,c,d,e)})}:a}(function(a,b){if(\"http://www.w3.org/2000/svg\"!==a.namespaceURI||\"innerHTML\"in a)a.innerHTML=b;else{mb=mb||document.createElement(\"div\");mb.innerHTML=\"<svg>\"+b.valueOf().toString()+\"</svg>\";for(b=mb.firstChild;a.firstChild;)a.removeChild(a.firstChild);for(;b.firstChild;)a.appendChild(b.firstChild)}});\nfunction ob(a,b){if(b){var c=a.firstChild;if(c&&c===a.lastChild&&3===c.nodeType){c.nodeValue=b;return}}a.textContent=b}\nvar pb={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,\nzoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},qb=[\"Webkit\",\"ms\",\"Moz\",\"O\"];Object.keys(pb).forEach(function(a){qb.forEach(function(b){b=b+a.charAt(0).toUpperCase()+a.substring(1);pb[b]=pb[a]})});function rb(a,b,c){return null==b||\"boolean\"===typeof b||\"\"===b?\"\":c||\"number\"!==typeof b||0===b||pb.hasOwnProperty(a)&&pb[a]?(\"\"+b).trim():b+\"px\"}\nfunction sb(a,b){a=a.style;for(var c in b)if(b.hasOwnProperty(c)){var d=0===c.indexOf(\"--\"),e=rb(c,b[c],d);\"float\"===c&&(c=\"cssFloat\");d?a.setProperty(c,e):a[c]=e}}var tb=A({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});\nfunction ub(a,b){if(b){if(tb[a]&&(null!=b.children||null!=b.dangerouslySetInnerHTML))throw Error(p(137,a));if(null!=b.dangerouslySetInnerHTML){if(null!=b.children)throw Error(p(60));if(\"object\"!==typeof b.dangerouslySetInnerHTML||!(\"__html\"in b.dangerouslySetInnerHTML))throw Error(p(61));}if(null!=b.style&&\"object\"!==typeof b.style)throw Error(p(62));}}\nfunction vb(a,b){if(-1===a.indexOf(\"-\"))return\"string\"===typeof b.is;switch(a){case \"annotation-xml\":case \"color-profile\":case \"font-face\":case \"font-face-src\":case \"font-face-uri\":case \"font-face-format\":case \"font-face-name\":case \"missing-glyph\":return!1;default:return!0}}var wb=null;function xb(a){a=a.target||a.srcElement||window;a.correspondingUseElement&&(a=a.correspondingUseElement);return 3===a.nodeType?a.parentNode:a}var yb=null,zb=null,Ab=null;\nfunction Bb(a){if(a=Cb(a)){if(\"function\"!==typeof yb)throw Error(p(280));var b=a.stateNode;b&&(b=Db(b),yb(a.stateNode,a.type,b))}}function Eb(a){zb?Ab?Ab.push(a):Ab=[a]:zb=a}function Fb(){if(zb){var a=zb,b=Ab;Ab=zb=null;Bb(a);if(b)for(a=0;a<b.length;a++)Bb(b[a])}}function Gb(a,b){return a(b)}function Hb(){}var Ib=!1;function Jb(a,b,c){if(Ib)return a(b,c);Ib=!0;try{return Gb(a,b,c)}finally{if(Ib=!1,null!==zb||null!==Ab)Hb(),Fb()}}\nfunction Kb(a,b){var c=a.stateNode;if(null===c)return null;var d=Db(c);if(null===d)return null;c=d[b];a:switch(b){case \"onClick\":case \"onClickCapture\":case \"onDoubleClick\":case \"onDoubleClickCapture\":case \"onMouseDown\":case \"onMouseDownCapture\":case \"onMouseMove\":case \"onMouseMoveCapture\":case \"onMouseUp\":case \"onMouseUpCapture\":case \"onMouseEnter\":(d=!d.disabled)||(a=a.type,d=!(\"button\"===a||\"input\"===a||\"select\"===a||\"textarea\"===a));a=!d;break a;default:a=!1}if(a)return null;if(c&&\"function\"!==\ntypeof c)throw Error(p(231,b,typeof c));return c}var Lb=!1;if(ia)try{var Mb={};Object.defineProperty(Mb,\"passive\",{get:function(){Lb=!0}});window.addEventListener(\"test\",Mb,Mb);window.removeEventListener(\"test\",Mb,Mb)}catch(a){Lb=!1}function Nb(a,b,c,d,e,f,g,h,k){var l=Array.prototype.slice.call(arguments,3);try{b.apply(c,l)}catch(m){this.onError(m)}}var Ob=!1,Pb=null,Qb=!1,Rb=null,Sb={onError:function(a){Ob=!0;Pb=a}};function Tb(a,b,c,d,e,f,g,h,k){Ob=!1;Pb=null;Nb.apply(Sb,arguments)}\nfunction Ub(a,b,c,d,e,f,g,h,k){Tb.apply(this,arguments);if(Ob){if(Ob){var l=Pb;Ob=!1;Pb=null}else throw Error(p(198));Qb||(Qb=!0,Rb=l)}}function Vb(a){var b=a,c=a;if(a.alternate)for(;b.return;)b=b.return;else{a=b;do b=a,0!==(b.flags&4098)&&(c=b.return),a=b.return;while(a)}return 3===b.tag?c:null}function Wb(a){if(13===a.tag){var b=a.memoizedState;null===b&&(a=a.alternate,null!==a&&(b=a.memoizedState));if(null!==b)return b.dehydrated}return null}function Xb(a){if(Vb(a)!==a)throw Error(p(188));}\nfunction Yb(a){var b=a.alternate;if(!b){b=Vb(a);if(null===b)throw Error(p(188));return b!==a?null:a}for(var c=a,d=b;;){var e=c.return;if(null===e)break;var f=e.alternate;if(null===f){d=e.return;if(null!==d){c=d;continue}break}if(e.child===f.child){for(f=e.child;f;){if(f===c)return Xb(e),a;if(f===d)return Xb(e),b;f=f.sibling}throw Error(p(188));}if(c.return!==d.return)c=e,d=f;else{for(var g=!1,h=e.child;h;){if(h===c){g=!0;c=e;d=f;break}if(h===d){g=!0;d=e;c=f;break}h=h.sibling}if(!g){for(h=f.child;h;){if(h===\nc){g=!0;c=f;d=e;break}if(h===d){g=!0;d=f;c=e;break}h=h.sibling}if(!g)throw Error(p(189));}}if(c.alternate!==d)throw Error(p(190));}if(3!==c.tag)throw Error(p(188));return c.stateNode.current===c?a:b}function Zb(a){a=Yb(a);return null!==a?$b(a):null}function $b(a){if(5===a.tag||6===a.tag)return a;for(a=a.child;null!==a;){var b=$b(a);if(null!==b)return b;a=a.sibling}return null}\nvar ac=ca.unstable_scheduleCallback,bc=ca.unstable_cancelCallback,cc=ca.unstable_shouldYield,dc=ca.unstable_requestPaint,B=ca.unstable_now,ec=ca.unstable_getCurrentPriorityLevel,fc=ca.unstable_ImmediatePriority,gc=ca.unstable_UserBlockingPriority,hc=ca.unstable_NormalPriority,ic=ca.unstable_LowPriority,jc=ca.unstable_IdlePriority,kc=null,lc=null;function mc(a){if(lc&&\"function\"===typeof lc.onCommitFiberRoot)try{lc.onCommitFiberRoot(kc,a,void 0,128===(a.current.flags&128))}catch(b){}}\nvar oc=Math.clz32?Math.clz32:nc,pc=Math.log,qc=Math.LN2;function nc(a){a>>>=0;return 0===a?32:31-(pc(a)/qc|0)|0}var rc=64,sc=4194304;\nfunction tc(a){switch(a&-a){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return a&4194240;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return a&130023424;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;\ndefault:return a}}function uc(a,b){var c=a.pendingLanes;if(0===c)return 0;var d=0,e=a.suspendedLanes,f=a.pingedLanes,g=c&268435455;if(0!==g){var h=g&~e;0!==h?d=tc(h):(f&=g,0!==f&&(d=tc(f)))}else g=c&~e,0!==g?d=tc(g):0!==f&&(d=tc(f));if(0===d)return 0;if(0!==b&&b!==d&&0===(b&e)&&(e=d&-d,f=b&-b,e>=f||16===e&&0!==(f&4194240)))return b;0!==(d&4)&&(d|=c&16);b=a.entangledLanes;if(0!==b)for(a=a.entanglements,b&=d;0<b;)c=31-oc(b),e=1<<c,d|=a[c],b&=~e;return d}\nfunction vc(a,b){switch(a){case 1:case 2:case 4:return b+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return b+5E3;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return-1;case 134217728:case 268435456:case 536870912:case 1073741824:return-1;default:return-1}}\nfunction wc(a,b){for(var c=a.suspendedLanes,d=a.pingedLanes,e=a.expirationTimes,f=a.pendingLanes;0<f;){var g=31-oc(f),h=1<<g,k=e[g];if(-1===k){if(0===(h&c)||0!==(h&d))e[g]=vc(h,b)}else k<=b&&(a.expiredLanes|=h);f&=~h}}function xc(a){a=a.pendingLanes&-1073741825;return 0!==a?a:a&1073741824?1073741824:0}function yc(){var a=rc;rc<<=1;0===(rc&4194240)&&(rc=64);return a}function zc(a){for(var b=[],c=0;31>c;c++)b.push(a);return b}\nfunction Ac(a,b,c){a.pendingLanes|=b;536870912!==b&&(a.suspendedLanes=0,a.pingedLanes=0);a=a.eventTimes;b=31-oc(b);a[b]=c}function Bc(a,b){var c=a.pendingLanes&~b;a.pendingLanes=b;a.suspendedLanes=0;a.pingedLanes=0;a.expiredLanes&=b;a.mutableReadLanes&=b;a.entangledLanes&=b;b=a.entanglements;var d=a.eventTimes;for(a=a.expirationTimes;0<c;){var e=31-oc(c),f=1<<e;b[e]=0;d[e]=-1;a[e]=-1;c&=~f}}\nfunction Cc(a,b){var c=a.entangledLanes|=b;for(a=a.entanglements;c;){var d=31-oc(c),e=1<<d;e&b|a[d]&b&&(a[d]|=b);c&=~e}}var C=0;function Dc(a){a&=-a;return 1<a?4<a?0!==(a&268435455)?16:536870912:4:1}var Ec,Fc,Gc,Hc,Ic,Jc=!1,Kc=[],Lc=null,Mc=null,Nc=null,Oc=new Map,Pc=new Map,Qc=[],Rc=\"mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit\".split(\" \");\nfunction Sc(a,b){switch(a){case \"focusin\":case \"focusout\":Lc=null;break;case \"dragenter\":case \"dragleave\":Mc=null;break;case \"mouseover\":case \"mouseout\":Nc=null;break;case \"pointerover\":case \"pointerout\":Oc.delete(b.pointerId);break;case \"gotpointercapture\":case \"lostpointercapture\":Pc.delete(b.pointerId)}}\nfunction Tc(a,b,c,d,e,f){if(null===a||a.nativeEvent!==f)return a={blockedOn:b,domEventName:c,eventSystemFlags:d,nativeEvent:f,targetContainers:[e]},null!==b&&(b=Cb(b),null!==b&&Fc(b)),a;a.eventSystemFlags|=d;b=a.targetContainers;null!==e&&-1===b.indexOf(e)&&b.push(e);return a}\nfunction Uc(a,b,c,d,e){switch(b){case \"focusin\":return Lc=Tc(Lc,a,b,c,d,e),!0;case \"dragenter\":return Mc=Tc(Mc,a,b,c,d,e),!0;case \"mouseover\":return Nc=Tc(Nc,a,b,c,d,e),!0;case \"pointerover\":var f=e.pointerId;Oc.set(f,Tc(Oc.get(f)||null,a,b,c,d,e));return!0;case \"gotpointercapture\":return f=e.pointerId,Pc.set(f,Tc(Pc.get(f)||null,a,b,c,d,e)),!0}return!1}\nfunction Vc(a){var b=Wc(a.target);if(null!==b){var c=Vb(b);if(null!==c)if(b=c.tag,13===b){if(b=Wb(c),null!==b){a.blockedOn=b;Ic(a.priority,function(){Gc(c)});return}}else if(3===b&&c.stateNode.current.memoizedState.isDehydrated){a.blockedOn=3===c.tag?c.stateNode.containerInfo:null;return}}a.blockedOn=null}\nfunction Xc(a){if(null!==a.blockedOn)return!1;for(var b=a.targetContainers;0<b.length;){var c=Yc(a.domEventName,a.eventSystemFlags,b[0],a.nativeEvent);if(null===c){c=a.nativeEvent;var d=new c.constructor(c.type,c);wb=d;c.target.dispatchEvent(d);wb=null}else return b=Cb(c),null!==b&&Fc(b),a.blockedOn=c,!1;b.shift()}return!0}function Zc(a,b,c){Xc(a)&&c.delete(b)}function $c(){Jc=!1;null!==Lc&&Xc(Lc)&&(Lc=null);null!==Mc&&Xc(Mc)&&(Mc=null);null!==Nc&&Xc(Nc)&&(Nc=null);Oc.forEach(Zc);Pc.forEach(Zc)}\nfunction ad(a,b){a.blockedOn===b&&(a.blockedOn=null,Jc||(Jc=!0,ca.unstable_scheduleCallback(ca.unstable_NormalPriority,$c)))}\nfunction bd(a){function b(b){return ad(b,a)}if(0<Kc.length){ad(Kc[0],a);for(var c=1;c<Kc.length;c++){var d=Kc[c];d.blockedOn===a&&(d.blockedOn=null)}}null!==Lc&&ad(Lc,a);null!==Mc&&ad(Mc,a);null!==Nc&&ad(Nc,a);Oc.forEach(b);Pc.forEach(b);for(c=0;c<Qc.length;c++)d=Qc[c],d.blockedOn===a&&(d.blockedOn=null);for(;0<Qc.length&&(c=Qc[0],null===c.blockedOn);)Vc(c),null===c.blockedOn&&Qc.shift()}var cd=ua.ReactCurrentBatchConfig,dd=!0;\nfunction ed(a,b,c,d){var e=C,f=cd.transition;cd.transition=null;try{C=1,fd(a,b,c,d)}finally{C=e,cd.transition=f}}function gd(a,b,c,d){var e=C,f=cd.transition;cd.transition=null;try{C=4,fd(a,b,c,d)}finally{C=e,cd.transition=f}}\nfunction fd(a,b,c,d){if(dd){var e=Yc(a,b,c,d);if(null===e)hd(a,b,d,id,c),Sc(a,d);else if(Uc(e,a,b,c,d))d.stopPropagation();else if(Sc(a,d),b&4&&-1<Rc.indexOf(a)){for(;null!==e;){var f=Cb(e);null!==f&&Ec(f);f=Yc(a,b,c,d);null===f&&hd(a,b,d,id,c);if(f===e)break;e=f}null!==e&&d.stopPropagation()}else hd(a,b,d,null,c)}}var id=null;\nfunction Yc(a,b,c,d){id=null;a=xb(d);a=Wc(a);if(null!==a)if(b=Vb(a),null===b)a=null;else if(c=b.tag,13===c){a=Wb(b);if(null!==a)return a;a=null}else if(3===c){if(b.stateNode.current.memoizedState.isDehydrated)return 3===b.tag?b.stateNode.containerInfo:null;a=null}else b!==a&&(a=null);id=a;return null}\nfunction jd(a){switch(a){case \"cancel\":case \"click\":case \"close\":case \"contextmenu\":case \"copy\":case \"cut\":case \"auxclick\":case \"dblclick\":case \"dragend\":case \"dragstart\":case \"drop\":case \"focusin\":case \"focusout\":case \"input\":case \"invalid\":case \"keydown\":case \"keypress\":case \"keyup\":case \"mousedown\":case \"mouseup\":case \"paste\":case \"pause\":case \"play\":case \"pointercancel\":case \"pointerdown\":case \"pointerup\":case \"ratechange\":case \"reset\":case \"resize\":case \"seeked\":case \"submit\":case \"touchcancel\":case \"touchend\":case \"touchstart\":case \"volumechange\":case \"change\":case \"selectionchange\":case \"textInput\":case \"compositionstart\":case \"compositionend\":case \"compositionupdate\":case \"beforeblur\":case \"afterblur\":case \"beforeinput\":case \"blur\":case \"fullscreenchange\":case \"focus\":case \"hashchange\":case \"popstate\":case \"select\":case \"selectstart\":return 1;case \"drag\":case \"dragenter\":case \"dragexit\":case \"dragleave\":case \"dragover\":case \"mousemove\":case \"mouseout\":case \"mouseover\":case \"pointermove\":case \"pointerout\":case \"pointerover\":case \"scroll\":case \"toggle\":case \"touchmove\":case \"wheel\":case \"mouseenter\":case \"mouseleave\":case \"pointerenter\":case \"pointerleave\":return 4;\ncase \"message\":switch(ec()){case fc:return 1;case gc:return 4;case hc:case ic:return 16;case jc:return 536870912;default:return 16}default:return 16}}var kd=null,ld=null,md=null;function nd(){if(md)return md;var a,b=ld,c=b.length,d,e=\"value\"in kd?kd.value:kd.textContent,f=e.length;for(a=0;a<c&&b[a]===e[a];a++);var g=c-a;for(d=1;d<=g&&b[c-d]===e[f-d];d++);return md=e.slice(a,1<d?1-d:void 0)}\nfunction od(a){var b=a.keyCode;\"charCode\"in a?(a=a.charCode,0===a&&13===b&&(a=13)):a=b;10===a&&(a=13);return 32<=a||13===a?a:0}function pd(){return!0}function qd(){return!1}\nfunction rd(a){function b(b,d,e,f,g){this._reactName=b;this._targetInst=e;this.type=d;this.nativeEvent=f;this.target=g;this.currentTarget=null;for(var c in a)a.hasOwnProperty(c)&&(b=a[c],this[c]=b?b(f):f[c]);this.isDefaultPrevented=(null!=f.defaultPrevented?f.defaultPrevented:!1===f.returnValue)?pd:qd;this.isPropagationStopped=qd;return this}A(b.prototype,{preventDefault:function(){this.defaultPrevented=!0;var a=this.nativeEvent;a&&(a.preventDefault?a.preventDefault():\"unknown\"!==typeof a.returnValue&&\n(a.returnValue=!1),this.isDefaultPrevented=pd)},stopPropagation:function(){var a=this.nativeEvent;a&&(a.stopPropagation?a.stopPropagation():\"unknown\"!==typeof a.cancelBubble&&(a.cancelBubble=!0),this.isPropagationStopped=pd)},persist:function(){},isPersistent:pd});return b}\nvar sd={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(a){return a.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},td=rd(sd),ud=A({},sd,{view:0,detail:0}),vd=rd(ud),wd,xd,yd,Ad=A({},ud,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:zd,button:0,buttons:0,relatedTarget:function(a){return void 0===a.relatedTarget?a.fromElement===a.srcElement?a.toElement:a.fromElement:a.relatedTarget},movementX:function(a){if(\"movementX\"in\na)return a.movementX;a!==yd&&(yd&&\"mousemove\"===a.type?(wd=a.screenX-yd.screenX,xd=a.screenY-yd.screenY):xd=wd=0,yd=a);return wd},movementY:function(a){return\"movementY\"in a?a.movementY:xd}}),Bd=rd(Ad),Cd=A({},Ad,{dataTransfer:0}),Dd=rd(Cd),Ed=A({},ud,{relatedTarget:0}),Fd=rd(Ed),Gd=A({},sd,{animationName:0,elapsedTime:0,pseudoElement:0}),Hd=rd(Gd),Id=A({},sd,{clipboardData:function(a){return\"clipboardData\"in a?a.clipboardData:window.clipboardData}}),Jd=rd(Id),Kd=A({},sd,{data:0}),Ld=rd(Kd),Md={Esc:\"Escape\",\nSpacebar:\" \",Left:\"ArrowLeft\",Up:\"ArrowUp\",Right:\"ArrowRight\",Down:\"ArrowDown\",Del:\"Delete\",Win:\"OS\",Menu:\"ContextMenu\",Apps:\"ContextMenu\",Scroll:\"ScrollLock\",MozPrintableKey:\"Unidentified\"},Nd={8:\"Backspace\",9:\"Tab\",12:\"Clear\",13:\"Enter\",16:\"Shift\",17:\"Control\",18:\"Alt\",19:\"Pause\",20:\"CapsLock\",27:\"Escape\",32:\" \",33:\"PageUp\",34:\"PageDown\",35:\"End\",36:\"Home\",37:\"ArrowLeft\",38:\"ArrowUp\",39:\"ArrowRight\",40:\"ArrowDown\",45:\"Insert\",46:\"Delete\",112:\"F1\",113:\"F2\",114:\"F3\",115:\"F4\",116:\"F5\",117:\"F6\",118:\"F7\",\n119:\"F8\",120:\"F9\",121:\"F10\",122:\"F11\",123:\"F12\",144:\"NumLock\",145:\"ScrollLock\",224:\"Meta\"},Od={Alt:\"altKey\",Control:\"ctrlKey\",Meta:\"metaKey\",Shift:\"shiftKey\"};function Pd(a){var b=this.nativeEvent;return b.getModifierState?b.getModifierState(a):(a=Od[a])?!!b[a]:!1}function zd(){return Pd}\nvar Qd=A({},ud,{key:function(a){if(a.key){var b=Md[a.key]||a.key;if(\"Unidentified\"!==b)return b}return\"keypress\"===a.type?(a=od(a),13===a?\"Enter\":String.fromCharCode(a)):\"keydown\"===a.type||\"keyup\"===a.type?Nd[a.keyCode]||\"Unidentified\":\"\"},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:zd,charCode:function(a){return\"keypress\"===a.type?od(a):0},keyCode:function(a){return\"keydown\"===a.type||\"keyup\"===a.type?a.keyCode:0},which:function(a){return\"keypress\"===\na.type?od(a):\"keydown\"===a.type||\"keyup\"===a.type?a.keyCode:0}}),Rd=rd(Qd),Sd=A({},Ad,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0}),Td=rd(Sd),Ud=A({},ud,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:zd}),Vd=rd(Ud),Wd=A({},sd,{propertyName:0,elapsedTime:0,pseudoElement:0}),Xd=rd(Wd),Yd=A({},Ad,{deltaX:function(a){return\"deltaX\"in a?a.deltaX:\"wheelDeltaX\"in a?-a.wheelDeltaX:0},\ndeltaY:function(a){return\"deltaY\"in a?a.deltaY:\"wheelDeltaY\"in a?-a.wheelDeltaY:\"wheelDelta\"in a?-a.wheelDelta:0},deltaZ:0,deltaMode:0}),Zd=rd(Yd),$d=[9,13,27,32],ae=ia&&\"CompositionEvent\"in window,be=null;ia&&\"documentMode\"in document&&(be=document.documentMode);var ce=ia&&\"TextEvent\"in window&&!be,de=ia&&(!ae||be&&8<be&&11>=be),ee=String.fromCharCode(32),fe=!1;\nfunction ge(a,b){switch(a){case \"keyup\":return-1!==$d.indexOf(b.keyCode);case \"keydown\":return 229!==b.keyCode;case \"keypress\":case \"mousedown\":case \"focusout\":return!0;default:return!1}}function he(a){a=a.detail;return\"object\"===typeof a&&\"data\"in a?a.data:null}var ie=!1;function je(a,b){switch(a){case \"compositionend\":return he(b);case \"keypress\":if(32!==b.which)return null;fe=!0;return ee;case \"textInput\":return a=b.data,a===ee&&fe?null:a;default:return null}}\nfunction ke(a,b){if(ie)return\"compositionend\"===a||!ae&&ge(a,b)?(a=nd(),md=ld=kd=null,ie=!1,a):null;switch(a){case \"paste\":return null;case \"keypress\":if(!(b.ctrlKey||b.altKey||b.metaKey)||b.ctrlKey&&b.altKey){if(b.char&&1<b.char.length)return b.char;if(b.which)return String.fromCharCode(b.which)}return null;case \"compositionend\":return de&&\"ko\"!==b.locale?null:b.data;default:return null}}\nvar le={color:!0,date:!0,datetime:!0,\"datetime-local\":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function me(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return\"input\"===b?!!le[a.type]:\"textarea\"===b?!0:!1}function ne(a,b,c,d){Eb(d);b=oe(b,\"onChange\");0<b.length&&(c=new td(\"onChange\",\"change\",null,c,d),a.push({event:c,listeners:b}))}var pe=null,qe=null;function re(a){se(a,0)}function te(a){var b=ue(a);if(Wa(b))return a}\nfunction ve(a,b){if(\"change\"===a)return b}var we=!1;if(ia){var xe;if(ia){var ye=\"oninput\"in document;if(!ye){var ze=document.createElement(\"div\");ze.setAttribute(\"oninput\",\"return;\");ye=\"function\"===typeof ze.oninput}xe=ye}else xe=!1;we=xe&&(!document.documentMode||9<document.documentMode)}function Ae(){pe&&(pe.detachEvent(\"onpropertychange\",Be),qe=pe=null)}function Be(a){if(\"value\"===a.propertyName&&te(qe)){var b=[];ne(b,qe,a,xb(a));Jb(re,b)}}\nfunction Ce(a,b,c){\"focusin\"===a?(Ae(),pe=b,qe=c,pe.attachEvent(\"onpropertychange\",Be)):\"focusout\"===a&&Ae()}function De(a){if(\"selectionchange\"===a||\"keyup\"===a||\"keydown\"===a)return te(qe)}function Ee(a,b){if(\"click\"===a)return te(b)}function Fe(a,b){if(\"input\"===a||\"change\"===a)return te(b)}function Ge(a,b){return a===b&&(0!==a||1/a===1/b)||a!==a&&b!==b}var He=\"function\"===typeof Object.is?Object.is:Ge;\nfunction Ie(a,b){if(He(a,b))return!0;if(\"object\"!==typeof a||null===a||\"object\"!==typeof b||null===b)return!1;var c=Object.keys(a),d=Object.keys(b);if(c.length!==d.length)return!1;for(d=0;d<c.length;d++){var e=c[d];if(!ja.call(b,e)||!He(a[e],b[e]))return!1}return!0}function Je(a){for(;a&&a.firstChild;)a=a.firstChild;return a}\nfunction Ke(a,b){var c=Je(a);a=0;for(var d;c;){if(3===c.nodeType){d=a+c.textContent.length;if(a<=b&&d>=b)return{node:c,offset:b-a};a=d}a:{for(;c;){if(c.nextSibling){c=c.nextSibling;break a}c=c.parentNode}c=void 0}c=Je(c)}}function Le(a,b){return a&&b?a===b?!0:a&&3===a.nodeType?!1:b&&3===b.nodeType?Le(a,b.parentNode):\"contains\"in a?a.contains(b):a.compareDocumentPosition?!!(a.compareDocumentPosition(b)&16):!1:!1}\nfunction Me(){for(var a=window,b=Xa();b instanceof a.HTMLIFrameElement;){try{var c=\"string\"===typeof b.contentWindow.location.href}catch(d){c=!1}if(c)a=b.contentWindow;else break;b=Xa(a.document)}return b}function Ne(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return b&&(\"input\"===b&&(\"text\"===a.type||\"search\"===a.type||\"tel\"===a.type||\"url\"===a.type||\"password\"===a.type)||\"textarea\"===b||\"true\"===a.contentEditable)}\nfunction Oe(a){var b=Me(),c=a.focusedElem,d=a.selectionRange;if(b!==c&&c&&c.ownerDocument&&Le(c.ownerDocument.documentElement,c)){if(null!==d&&Ne(c))if(b=d.start,a=d.end,void 0===a&&(a=b),\"selectionStart\"in c)c.selectionStart=b,c.selectionEnd=Math.min(a,c.value.length);else if(a=(b=c.ownerDocument||document)&&b.defaultView||window,a.getSelection){a=a.getSelection();var e=c.textContent.length,f=Math.min(d.start,e);d=void 0===d.end?f:Math.min(d.end,e);!a.extend&&f>d&&(e=d,d=f,f=e);e=Ke(c,f);var g=Ke(c,\nd);e&&g&&(1!==a.rangeCount||a.anchorNode!==e.node||a.anchorOffset!==e.offset||a.focusNode!==g.node||a.focusOffset!==g.offset)&&(b=b.createRange(),b.setStart(e.node,e.offset),a.removeAllRanges(),f>d?(a.addRange(b),a.extend(g.node,g.offset)):(b.setEnd(g.node,g.offset),a.addRange(b)))}b=[];for(a=c;a=a.parentNode;)1===a.nodeType&&b.push({element:a,left:a.scrollLeft,top:a.scrollTop});\"function\"===typeof c.focus&&c.focus();for(c=0;c<b.length;c++)a=b[c],a.element.scrollLeft=a.left,a.element.scrollTop=a.top}}\nvar Pe=ia&&\"documentMode\"in document&&11>=document.documentMode,Qe=null,Re=null,Se=null,Te=!1;\nfunction Ue(a,b,c){var d=c.window===c?c.document:9===c.nodeType?c:c.ownerDocument;Te||null==Qe||Qe!==Xa(d)||(d=Qe,\"selectionStart\"in d&&Ne(d)?d={start:d.selectionStart,end:d.selectionEnd}:(d=(d.ownerDocument&&d.ownerDocument.defaultView||window).getSelection(),d={anchorNode:d.anchorNode,anchorOffset:d.anchorOffset,focusNode:d.focusNode,focusOffset:d.focusOffset}),Se&&Ie(Se,d)||(Se=d,d=oe(Re,\"onSelect\"),0<d.length&&(b=new td(\"onSelect\",\"select\",null,b,c),a.push({event:b,listeners:d}),b.target=Qe)))}\nfunction Ve(a,b){var c={};c[a.toLowerCase()]=b.toLowerCase();c[\"Webkit\"+a]=\"webkit\"+b;c[\"Moz\"+a]=\"moz\"+b;return c}var We={animationend:Ve(\"Animation\",\"AnimationEnd\"),animationiteration:Ve(\"Animation\",\"AnimationIteration\"),animationstart:Ve(\"Animation\",\"AnimationStart\"),transitionend:Ve(\"Transition\",\"TransitionEnd\")},Xe={},Ye={};\nia&&(Ye=document.createElement(\"div\").style,\"AnimationEvent\"in window||(delete We.animationend.animation,delete We.animationiteration.animation,delete We.animationstart.animation),\"TransitionEvent\"in window||delete We.transitionend.transition);function Ze(a){if(Xe[a])return Xe[a];if(!We[a])return a;var b=We[a],c;for(c in b)if(b.hasOwnProperty(c)&&c in Ye)return Xe[a]=b[c];return a}var $e=Ze(\"animationend\"),af=Ze(\"animationiteration\"),bf=Ze(\"animationstart\"),cf=Ze(\"transitionend\"),df=new Map,ef=\"abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel\".split(\" \");\nfunction ff(a,b){df.set(a,b);fa(b,[a])}for(var gf=0;gf<ef.length;gf++){var hf=ef[gf],jf=hf.toLowerCase(),kf=hf[0].toUpperCase()+hf.slice(1);ff(jf,\"on\"+kf)}ff($e,\"onAnimationEnd\");ff(af,\"onAnimationIteration\");ff(bf,\"onAnimationStart\");ff(\"dblclick\",\"onDoubleClick\");ff(\"focusin\",\"onFocus\");ff(\"focusout\",\"onBlur\");ff(cf,\"onTransitionEnd\");ha(\"onMouseEnter\",[\"mouseout\",\"mouseover\"]);ha(\"onMouseLeave\",[\"mouseout\",\"mouseover\"]);ha(\"onPointerEnter\",[\"pointerout\",\"pointerover\"]);\nha(\"onPointerLeave\",[\"pointerout\",\"pointerover\"]);fa(\"onChange\",\"change click focusin focusout input keydown keyup selectionchange\".split(\" \"));fa(\"onSelect\",\"focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange\".split(\" \"));fa(\"onBeforeInput\",[\"compositionend\",\"keypress\",\"textInput\",\"paste\"]);fa(\"onCompositionEnd\",\"compositionend focusout keydown keypress keyup mousedown\".split(\" \"));fa(\"onCompositionStart\",\"compositionstart focusout keydown keypress keyup mousedown\".split(\" \"));\nfa(\"onCompositionUpdate\",\"compositionupdate focusout keydown keypress keyup mousedown\".split(\" \"));var lf=\"abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting\".split(\" \"),mf=new Set(\"cancel close invalid load scroll toggle\".split(\" \").concat(lf));\nfunction nf(a,b,c){var d=a.type||\"unknown-event\";a.currentTarget=c;Ub(d,b,void 0,a);a.currentTarget=null}\nfunction se(a,b){b=0!==(b&4);for(var c=0;c<a.length;c++){var d=a[c],e=d.event;d=d.listeners;a:{var f=void 0;if(b)for(var g=d.length-1;0<=g;g--){var h=d[g],k=h.instance,l=h.currentTarget;h=h.listener;if(k!==f&&e.isPropagationStopped())break a;nf(e,h,l);f=k}else for(g=0;g<d.length;g++){h=d[g];k=h.instance;l=h.currentTarget;h=h.listener;if(k!==f&&e.isPropagationStopped())break a;nf(e,h,l);f=k}}}if(Qb)throw a=Rb,Qb=!1,Rb=null,a;}\nfunction D(a,b){var c=b[of];void 0===c&&(c=b[of]=new Set);var d=a+\"__bubble\";c.has(d)||(pf(b,a,2,!1),c.add(d))}function qf(a,b,c){var d=0;b&&(d|=4);pf(c,a,d,b)}var rf=\"_reactListening\"+Math.random().toString(36).slice(2);function sf(a){if(!a[rf]){a[rf]=!0;da.forEach(function(b){\"selectionchange\"!==b&&(mf.has(b)||qf(b,!1,a),qf(b,!0,a))});var b=9===a.nodeType?a:a.ownerDocument;null===b||b[rf]||(b[rf]=!0,qf(\"selectionchange\",!1,b))}}\nfunction pf(a,b,c,d){switch(jd(b)){case 1:var e=ed;break;case 4:e=gd;break;default:e=fd}c=e.bind(null,b,c,a);e=void 0;!Lb||\"touchstart\"!==b&&\"touchmove\"!==b&&\"wheel\"!==b||(e=!0);d?void 0!==e?a.addEventListener(b,c,{capture:!0,passive:e}):a.addEventListener(b,c,!0):void 0!==e?a.addEventListener(b,c,{passive:e}):a.addEventListener(b,c,!1)}\nfunction hd(a,b,c,d,e){var f=d;if(0===(b&1)&&0===(b&2)&&null!==d)a:for(;;){if(null===d)return;var g=d.tag;if(3===g||4===g){var h=d.stateNode.containerInfo;if(h===e||8===h.nodeType&&h.parentNode===e)break;if(4===g)for(g=d.return;null!==g;){var k=g.tag;if(3===k||4===k)if(k=g.stateNode.containerInfo,k===e||8===k.nodeType&&k.parentNode===e)return;g=g.return}for(;null!==h;){g=Wc(h);if(null===g)return;k=g.tag;if(5===k||6===k){d=f=g;continue a}h=h.parentNode}}d=d.return}Jb(function(){var d=f,e=xb(c),g=[];\na:{var h=df.get(a);if(void 0!==h){var k=td,n=a;switch(a){case \"keypress\":if(0===od(c))break a;case \"keydown\":case \"keyup\":k=Rd;break;case \"focusin\":n=\"focus\";k=Fd;break;case \"focusout\":n=\"blur\";k=Fd;break;case \"beforeblur\":case \"afterblur\":k=Fd;break;case \"click\":if(2===c.button)break a;case \"auxclick\":case \"dblclick\":case \"mousedown\":case \"mousemove\":case \"mouseup\":case \"mouseout\":case \"mouseover\":case \"contextmenu\":k=Bd;break;case \"drag\":case \"dragend\":case \"dragenter\":case \"dragexit\":case \"dragleave\":case \"dragover\":case \"dragstart\":case \"drop\":k=\nDd;break;case \"touchcancel\":case \"touchend\":case \"touchmove\":case \"touchstart\":k=Vd;break;case $e:case af:case bf:k=Hd;break;case cf:k=Xd;break;case \"scroll\":k=vd;break;case \"wheel\":k=Zd;break;case \"copy\":case \"cut\":case \"paste\":k=Jd;break;case \"gotpointercapture\":case \"lostpointercapture\":case \"pointercancel\":case \"pointerdown\":case \"pointermove\":case \"pointerout\":case \"pointerover\":case \"pointerup\":k=Td}var t=0!==(b&4),J=!t&&\"scroll\"===a,x=t?null!==h?h+\"Capture\":null:h;t=[];for(var w=d,u;null!==\nw;){u=w;var F=u.stateNode;5===u.tag&&null!==F&&(u=F,null!==x&&(F=Kb(w,x),null!=F&&t.push(tf(w,F,u))));if(J)break;w=w.return}0<t.length&&(h=new k(h,n,null,c,e),g.push({event:h,listeners:t}))}}if(0===(b&7)){a:{h=\"mouseover\"===a||\"pointerover\"===a;k=\"mouseout\"===a||\"pointerout\"===a;if(h&&c!==wb&&(n=c.relatedTarget||c.fromElement)&&(Wc(n)||n[uf]))break a;if(k||h){h=e.window===e?e:(h=e.ownerDocument)?h.defaultView||h.parentWindow:window;if(k){if(n=c.relatedTarget||c.toElement,k=d,n=n?Wc(n):null,null!==\nn&&(J=Vb(n),n!==J||5!==n.tag&&6!==n.tag))n=null}else k=null,n=d;if(k!==n){t=Bd;F=\"onMouseLeave\";x=\"onMouseEnter\";w=\"mouse\";if(\"pointerout\"===a||\"pointerover\"===a)t=Td,F=\"onPointerLeave\",x=\"onPointerEnter\",w=\"pointer\";J=null==k?h:ue(k);u=null==n?h:ue(n);h=new t(F,w+\"leave\",k,c,e);h.target=J;h.relatedTarget=u;F=null;Wc(e)===d&&(t=new t(x,w+\"enter\",n,c,e),t.target=u,t.relatedTarget=J,F=t);J=F;if(k&&n)b:{t=k;x=n;w=0;for(u=t;u;u=vf(u))w++;u=0;for(F=x;F;F=vf(F))u++;for(;0<w-u;)t=vf(t),w--;for(;0<u-w;)x=\nvf(x),u--;for(;w--;){if(t===x||null!==x&&t===x.alternate)break b;t=vf(t);x=vf(x)}t=null}else t=null;null!==k&&wf(g,h,k,t,!1);null!==n&&null!==J&&wf(g,J,n,t,!0)}}}a:{h=d?ue(d):window;k=h.nodeName&&h.nodeName.toLowerCase();if(\"select\"===k||\"input\"===k&&\"file\"===h.type)var na=ve;else if(me(h))if(we)na=Fe;else{na=De;var xa=Ce}else(k=h.nodeName)&&\"input\"===k.toLowerCase()&&(\"checkbox\"===h.type||\"radio\"===h.type)&&(na=Ee);if(na&&(na=na(a,d))){ne(g,na,c,e);break a}xa&&xa(a,h,d);\"focusout\"===a&&(xa=h._wrapperState)&&\nxa.controlled&&\"number\"===h.type&&cb(h,\"number\",h.value)}xa=d?ue(d):window;switch(a){case \"focusin\":if(me(xa)||\"true\"===xa.contentEditable)Qe=xa,Re=d,Se=null;break;case \"focusout\":Se=Re=Qe=null;break;case \"mousedown\":Te=!0;break;case \"contextmenu\":case \"mouseup\":case \"dragend\":Te=!1;Ue(g,c,e);break;case \"selectionchange\":if(Pe)break;case \"keydown\":case \"keyup\":Ue(g,c,e)}var $a;if(ae)b:{switch(a){case \"compositionstart\":var ba=\"onCompositionStart\";break b;case \"compositionend\":ba=\"onCompositionEnd\";\nbreak b;case \"compositionupdate\":ba=\"onCompositionUpdate\";break b}ba=void 0}else ie?ge(a,c)&&(ba=\"onCompositionEnd\"):\"keydown\"===a&&229===c.keyCode&&(ba=\"onCompositionStart\");ba&&(de&&\"ko\"!==c.locale&&(ie||\"onCompositionStart\"!==ba?\"onCompositionEnd\"===ba&&ie&&($a=nd()):(kd=e,ld=\"value\"in kd?kd.value:kd.textContent,ie=!0)),xa=oe(d,ba),0<xa.length&&(ba=new Ld(ba,a,null,c,e),g.push({event:ba,listeners:xa}),$a?ba.data=$a:($a=he(c),null!==$a&&(ba.data=$a))));if($a=ce?je(a,c):ke(a,c))d=oe(d,\"onBeforeInput\"),\n0<d.length&&(e=new Ld(\"onBeforeInput\",\"beforeinput\",null,c,e),g.push({event:e,listeners:d}),e.data=$a)}se(g,b)})}function tf(a,b,c){return{instance:a,listener:b,currentTarget:c}}function oe(a,b){for(var c=b+\"Capture\",d=[];null!==a;){var e=a,f=e.stateNode;5===e.tag&&null!==f&&(e=f,f=Kb(a,c),null!=f&&d.unshift(tf(a,f,e)),f=Kb(a,b),null!=f&&d.push(tf(a,f,e)));a=a.return}return d}function vf(a){if(null===a)return null;do a=a.return;while(a&&5!==a.tag);return a?a:null}\nfunction wf(a,b,c,d,e){for(var f=b._reactName,g=[];null!==c&&c!==d;){var h=c,k=h.alternate,l=h.stateNode;if(null!==k&&k===d)break;5===h.tag&&null!==l&&(h=l,e?(k=Kb(c,f),null!=k&&g.unshift(tf(c,k,h))):e||(k=Kb(c,f),null!=k&&g.push(tf(c,k,h))));c=c.return}0!==g.length&&a.push({event:b,listeners:g})}var xf=/\\r\\n?/g,yf=/\\u0000|\\uFFFD/g;function zf(a){return(\"string\"===typeof a?a:\"\"+a).replace(xf,\"\\n\").replace(yf,\"\")}function Af(a,b,c){b=zf(b);if(zf(a)!==b&&c)throw Error(p(425));}function Bf(){}\nvar Cf=null,Df=null;function Ef(a,b){return\"textarea\"===a||\"noscript\"===a||\"string\"===typeof b.children||\"number\"===typeof b.children||\"object\"===typeof b.dangerouslySetInnerHTML&&null!==b.dangerouslySetInnerHTML&&null!=b.dangerouslySetInnerHTML.__html}\nvar Ff=\"function\"===typeof setTimeout?setTimeout:void 0,Gf=\"function\"===typeof clearTimeout?clearTimeout:void 0,Hf=\"function\"===typeof Promise?Promise:void 0,Jf=\"function\"===typeof queueMicrotask?queueMicrotask:\"undefined\"!==typeof Hf?function(a){return Hf.resolve(null).then(a).catch(If)}:Ff;function If(a){setTimeout(function(){throw a;})}\nfunction Kf(a,b){var c=b,d=0;do{var e=c.nextSibling;a.removeChild(c);if(e&&8===e.nodeType)if(c=e.data,\"/$\"===c){if(0===d){a.removeChild(e);bd(b);return}d--}else\"$\"!==c&&\"$?\"!==c&&\"$!\"!==c||d++;c=e}while(c);bd(b)}function Lf(a){for(;null!=a;a=a.nextSibling){var b=a.nodeType;if(1===b||3===b)break;if(8===b){b=a.data;if(\"$\"===b||\"$!\"===b||\"$?\"===b)break;if(\"/$\"===b)return null}}return a}\nfunction Mf(a){a=a.previousSibling;for(var b=0;a;){if(8===a.nodeType){var c=a.data;if(\"$\"===c||\"$!\"===c||\"$?\"===c){if(0===b)return a;b--}else\"/$\"===c&&b++}a=a.previousSibling}return null}var Nf=Math.random().toString(36).slice(2),Of=\"__reactFiber$\"+Nf,Pf=\"__reactProps$\"+Nf,uf=\"__reactContainer$\"+Nf,of=\"__reactEvents$\"+Nf,Qf=\"__reactListeners$\"+Nf,Rf=\"__reactHandles$\"+Nf;\nfunction Wc(a){var b=a[Of];if(b)return b;for(var c=a.parentNode;c;){if(b=c[uf]||c[Of]){c=b.alternate;if(null!==b.child||null!==c&&null!==c.child)for(a=Mf(a);null!==a;){if(c=a[Of])return c;a=Mf(a)}return b}a=c;c=a.parentNode}return null}function Cb(a){a=a[Of]||a[uf];return!a||5!==a.tag&&6!==a.tag&&13!==a.tag&&3!==a.tag?null:a}function ue(a){if(5===a.tag||6===a.tag)return a.stateNode;throw Error(p(33));}function Db(a){return a[Pf]||null}var Sf=[],Tf=-1;function Uf(a){return{current:a}}\nfunction E(a){0>Tf||(a.current=Sf[Tf],Sf[Tf]=null,Tf--)}function G(a,b){Tf++;Sf[Tf]=a.current;a.current=b}var Vf={},H=Uf(Vf),Wf=Uf(!1),Xf=Vf;function Yf(a,b){var c=a.type.contextTypes;if(!c)return Vf;var d=a.stateNode;if(d&&d.__reactInternalMemoizedUnmaskedChildContext===b)return d.__reactInternalMemoizedMaskedChildContext;var e={},f;for(f in c)e[f]=b[f];d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=b,a.__reactInternalMemoizedMaskedChildContext=e);return e}\nfunction Zf(a){a=a.childContextTypes;return null!==a&&void 0!==a}function $f(){E(Wf);E(H)}function ag(a,b,c){if(H.current!==Vf)throw Error(p(168));G(H,b);G(Wf,c)}function bg(a,b,c){var d=a.stateNode;b=b.childContextTypes;if(\"function\"!==typeof d.getChildContext)return c;d=d.getChildContext();for(var e in d)if(!(e in b))throw Error(p(108,Ra(a)||\"Unknown\",e));return A({},c,d)}\nfunction cg(a){a=(a=a.stateNode)&&a.__reactInternalMemoizedMergedChildContext||Vf;Xf=H.current;G(H,a);G(Wf,Wf.current);return!0}function dg(a,b,c){var d=a.stateNode;if(!d)throw Error(p(169));c?(a=bg(a,b,Xf),d.__reactInternalMemoizedMergedChildContext=a,E(Wf),E(H),G(H,a)):E(Wf);G(Wf,c)}var eg=null,fg=!1,gg=!1;function hg(a){null===eg?eg=[a]:eg.push(a)}function ig(a){fg=!0;hg(a)}\nfunction jg(){if(!gg&&null!==eg){gg=!0;var a=0,b=C;try{var c=eg;for(C=1;a<c.length;a++){var d=c[a];do d=d(!0);while(null!==d)}eg=null;fg=!1}catch(e){throw null!==eg&&(eg=eg.slice(a+1)),ac(fc,jg),e;}finally{C=b,gg=!1}}return null}var kg=[],lg=0,mg=null,ng=0,og=[],pg=0,qg=null,rg=1,sg=\"\";function tg(a,b){kg[lg++]=ng;kg[lg++]=mg;mg=a;ng=b}\nfunction ug(a,b,c){og[pg++]=rg;og[pg++]=sg;og[pg++]=qg;qg=a;var d=rg;a=sg;var e=32-oc(d)-1;d&=~(1<<e);c+=1;var f=32-oc(b)+e;if(30<f){var g=e-e%5;f=(d&(1<<g)-1).toString(32);d>>=g;e-=g;rg=1<<32-oc(b)+e|c<<e|d;sg=f+a}else rg=1<<f|c<<e|d,sg=a}function vg(a){null!==a.return&&(tg(a,1),ug(a,1,0))}function wg(a){for(;a===mg;)mg=kg[--lg],kg[lg]=null,ng=kg[--lg],kg[lg]=null;for(;a===qg;)qg=og[--pg],og[pg]=null,sg=og[--pg],og[pg]=null,rg=og[--pg],og[pg]=null}var xg=null,yg=null,I=!1,zg=null;\nfunction Ag(a,b){var c=Bg(5,null,null,0);c.elementType=\"DELETED\";c.stateNode=b;c.return=a;b=a.deletions;null===b?(a.deletions=[c],a.flags|=16):b.push(c)}\nfunction Cg(a,b){switch(a.tag){case 5:var c=a.type;b=1!==b.nodeType||c.toLowerCase()!==b.nodeName.toLowerCase()?null:b;return null!==b?(a.stateNode=b,xg=a,yg=Lf(b.firstChild),!0):!1;case 6:return b=\"\"===a.pendingProps||3!==b.nodeType?null:b,null!==b?(a.stateNode=b,xg=a,yg=null,!0):!1;case 13:return b=8!==b.nodeType?null:b,null!==b?(c=null!==qg?{id:rg,overflow:sg}:null,a.memoizedState={dehydrated:b,treeContext:c,retryLane:1073741824},c=Bg(18,null,null,0),c.stateNode=b,c.return=a,a.child=c,xg=a,yg=\nnull,!0):!1;default:return!1}}function Dg(a){return 0!==(a.mode&1)&&0===(a.flags&128)}function Eg(a){if(I){var b=yg;if(b){var c=b;if(!Cg(a,b)){if(Dg(a))throw Error(p(418));b=Lf(c.nextSibling);var d=xg;b&&Cg(a,b)?Ag(d,c):(a.flags=a.flags&-4097|2,I=!1,xg=a)}}else{if(Dg(a))throw Error(p(418));a.flags=a.flags&-4097|2;I=!1;xg=a}}}function Fg(a){for(a=a.return;null!==a&&5!==a.tag&&3!==a.tag&&13!==a.tag;)a=a.return;xg=a}\nfunction Gg(a){if(a!==xg)return!1;if(!I)return Fg(a),I=!0,!1;var b;(b=3!==a.tag)&&!(b=5!==a.tag)&&(b=a.type,b=\"head\"!==b&&\"body\"!==b&&!Ef(a.type,a.memoizedProps));if(b&&(b=yg)){if(Dg(a))throw Hg(),Error(p(418));for(;b;)Ag(a,b),b=Lf(b.nextSibling)}Fg(a);if(13===a.tag){a=a.memoizedState;a=null!==a?a.dehydrated:null;if(!a)throw Error(p(317));a:{a=a.nextSibling;for(b=0;a;){if(8===a.nodeType){var c=a.data;if(\"/$\"===c){if(0===b){yg=Lf(a.nextSibling);break a}b--}else\"$\"!==c&&\"$!\"!==c&&\"$?\"!==c||b++}a=a.nextSibling}yg=\nnull}}else yg=xg?Lf(a.stateNode.nextSibling):null;return!0}function Hg(){for(var a=yg;a;)a=Lf(a.nextSibling)}function Ig(){yg=xg=null;I=!1}function Jg(a){null===zg?zg=[a]:zg.push(a)}var Kg=ua.ReactCurrentBatchConfig;function Lg(a,b){if(a&&a.defaultProps){b=A({},b);a=a.defaultProps;for(var c in a)void 0===b[c]&&(b[c]=a[c]);return b}return b}var Mg=Uf(null),Ng=null,Og=null,Pg=null;function Qg(){Pg=Og=Ng=null}function Rg(a){var b=Mg.current;E(Mg);a._currentValue=b}\nfunction Sg(a,b,c){for(;null!==a;){var d=a.alternate;(a.childLanes&b)!==b?(a.childLanes|=b,null!==d&&(d.childLanes|=b)):null!==d&&(d.childLanes&b)!==b&&(d.childLanes|=b);if(a===c)break;a=a.return}}function Tg(a,b){Ng=a;Pg=Og=null;a=a.dependencies;null!==a&&null!==a.firstContext&&(0!==(a.lanes&b)&&(Ug=!0),a.firstContext=null)}\nfunction Vg(a){var b=a._currentValue;if(Pg!==a)if(a={context:a,memoizedValue:b,next:null},null===Og){if(null===Ng)throw Error(p(308));Og=a;Ng.dependencies={lanes:0,firstContext:a}}else Og=Og.next=a;return b}var Wg=null;function Xg(a){null===Wg?Wg=[a]:Wg.push(a)}function Yg(a,b,c,d){var e=b.interleaved;null===e?(c.next=c,Xg(b)):(c.next=e.next,e.next=c);b.interleaved=c;return Zg(a,d)}\nfunction Zg(a,b){a.lanes|=b;var c=a.alternate;null!==c&&(c.lanes|=b);c=a;for(a=a.return;null!==a;)a.childLanes|=b,c=a.alternate,null!==c&&(c.childLanes|=b),c=a,a=a.return;return 3===c.tag?c.stateNode:null}var $g=!1;function ah(a){a.updateQueue={baseState:a.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}\nfunction bh(a,b){a=a.updateQueue;b.updateQueue===a&&(b.updateQueue={baseState:a.baseState,firstBaseUpdate:a.firstBaseUpdate,lastBaseUpdate:a.lastBaseUpdate,shared:a.shared,effects:a.effects})}function ch(a,b){return{eventTime:a,lane:b,tag:0,payload:null,callback:null,next:null}}\nfunction dh(a,b,c){var d=a.updateQueue;if(null===d)return null;d=d.shared;if(0!==(K&2)){var e=d.pending;null===e?b.next=b:(b.next=e.next,e.next=b);d.pending=b;return Zg(a,c)}e=d.interleaved;null===e?(b.next=b,Xg(d)):(b.next=e.next,e.next=b);d.interleaved=b;return Zg(a,c)}function eh(a,b,c){b=b.updateQueue;if(null!==b&&(b=b.shared,0!==(c&4194240))){var d=b.lanes;d&=a.pendingLanes;c|=d;b.lanes=c;Cc(a,c)}}\nfunction fh(a,b){var c=a.updateQueue,d=a.alternate;if(null!==d&&(d=d.updateQueue,c===d)){var e=null,f=null;c=c.firstBaseUpdate;if(null!==c){do{var g={eventTime:c.eventTime,lane:c.lane,tag:c.tag,payload:c.payload,callback:c.callback,next:null};null===f?e=f=g:f=f.next=g;c=c.next}while(null!==c);null===f?e=f=b:f=f.next=b}else e=f=b;c={baseState:d.baseState,firstBaseUpdate:e,lastBaseUpdate:f,shared:d.shared,effects:d.effects};a.updateQueue=c;return}a=c.lastBaseUpdate;null===a?c.firstBaseUpdate=b:a.next=\nb;c.lastBaseUpdate=b}\nfunction gh(a,b,c,d){var e=a.updateQueue;$g=!1;var f=e.firstBaseUpdate,g=e.lastBaseUpdate,h=e.shared.pending;if(null!==h){e.shared.pending=null;var k=h,l=k.next;k.next=null;null===g?f=l:g.next=l;g=k;var m=a.alternate;null!==m&&(m=m.updateQueue,h=m.lastBaseUpdate,h!==g&&(null===h?m.firstBaseUpdate=l:h.next=l,m.lastBaseUpdate=k))}if(null!==f){var q=e.baseState;g=0;m=l=k=null;h=f;do{var r=h.lane,y=h.eventTime;if((d&r)===r){null!==m&&(m=m.next={eventTime:y,lane:0,tag:h.tag,payload:h.payload,callback:h.callback,\nnext:null});a:{var n=a,t=h;r=b;y=c;switch(t.tag){case 1:n=t.payload;if(\"function\"===typeof n){q=n.call(y,q,r);break a}q=n;break a;case 3:n.flags=n.flags&-65537|128;case 0:n=t.payload;r=\"function\"===typeof n?n.call(y,q,r):n;if(null===r||void 0===r)break a;q=A({},q,r);break a;case 2:$g=!0}}null!==h.callback&&0!==h.lane&&(a.flags|=64,r=e.effects,null===r?e.effects=[h]:r.push(h))}else y={eventTime:y,lane:r,tag:h.tag,payload:h.payload,callback:h.callback,next:null},null===m?(l=m=y,k=q):m=m.next=y,g|=r;\nh=h.next;if(null===h)if(h=e.shared.pending,null===h)break;else r=h,h=r.next,r.next=null,e.lastBaseUpdate=r,e.shared.pending=null}while(1);null===m&&(k=q);e.baseState=k;e.firstBaseUpdate=l;e.lastBaseUpdate=m;b=e.shared.interleaved;if(null!==b){e=b;do g|=e.lane,e=e.next;while(e!==b)}else null===f&&(e.shared.lanes=0);hh|=g;a.lanes=g;a.memoizedState=q}}\nfunction ih(a,b,c){a=b.effects;b.effects=null;if(null!==a)for(b=0;b<a.length;b++){var d=a[b],e=d.callback;if(null!==e){d.callback=null;d=c;if(\"function\"!==typeof e)throw Error(p(191,e));e.call(d)}}}var jh=(new aa.Component).refs;function kh(a,b,c,d){b=a.memoizedState;c=c(d,b);c=null===c||void 0===c?b:A({},b,c);a.memoizedState=c;0===a.lanes&&(a.updateQueue.baseState=c)}\nvar nh={isMounted:function(a){return(a=a._reactInternals)?Vb(a)===a:!1},enqueueSetState:function(a,b,c){a=a._reactInternals;var d=L(),e=lh(a),f=ch(d,e);f.payload=b;void 0!==c&&null!==c&&(f.callback=c);b=dh(a,f,e);null!==b&&(mh(b,a,e,d),eh(b,a,e))},enqueueReplaceState:function(a,b,c){a=a._reactInternals;var d=L(),e=lh(a),f=ch(d,e);f.tag=1;f.payload=b;void 0!==c&&null!==c&&(f.callback=c);b=dh(a,f,e);null!==b&&(mh(b,a,e,d),eh(b,a,e))},enqueueForceUpdate:function(a,b){a=a._reactInternals;var c=L(),d=\nlh(a),e=ch(c,d);e.tag=2;void 0!==b&&null!==b&&(e.callback=b);b=dh(a,e,d);null!==b&&(mh(b,a,d,c),eh(b,a,d))}};function oh(a,b,c,d,e,f,g){a=a.stateNode;return\"function\"===typeof a.shouldComponentUpdate?a.shouldComponentUpdate(d,f,g):b.prototype&&b.prototype.isPureReactComponent?!Ie(c,d)||!Ie(e,f):!0}\nfunction ph(a,b,c){var d=!1,e=Vf;var f=b.contextType;\"object\"===typeof f&&null!==f?f=Vg(f):(e=Zf(b)?Xf:H.current,d=b.contextTypes,f=(d=null!==d&&void 0!==d)?Yf(a,e):Vf);b=new b(c,f);a.memoizedState=null!==b.state&&void 0!==b.state?b.state:null;b.updater=nh;a.stateNode=b;b._reactInternals=a;d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=e,a.__reactInternalMemoizedMaskedChildContext=f);return b}\nfunction qh(a,b,c,d){a=b.state;\"function\"===typeof b.componentWillReceiveProps&&b.componentWillReceiveProps(c,d);\"function\"===typeof b.UNSAFE_componentWillReceiveProps&&b.UNSAFE_componentWillReceiveProps(c,d);b.state!==a&&nh.enqueueReplaceState(b,b.state,null)}\nfunction rh(a,b,c,d){var e=a.stateNode;e.props=c;e.state=a.memoizedState;e.refs=jh;ah(a);var f=b.contextType;\"object\"===typeof f&&null!==f?e.context=Vg(f):(f=Zf(b)?Xf:H.current,e.context=Yf(a,f));e.state=a.memoizedState;f=b.getDerivedStateFromProps;\"function\"===typeof f&&(kh(a,b,f,c),e.state=a.memoizedState);\"function\"===typeof b.getDerivedStateFromProps||\"function\"===typeof e.getSnapshotBeforeUpdate||\"function\"!==typeof e.UNSAFE_componentWillMount&&\"function\"!==typeof e.componentWillMount||(b=e.state,\n\"function\"===typeof e.componentWillMount&&e.componentWillMount(),\"function\"===typeof e.UNSAFE_componentWillMount&&e.UNSAFE_componentWillMount(),b!==e.state&&nh.enqueueReplaceState(e,e.state,null),gh(a,c,e,d),e.state=a.memoizedState);\"function\"===typeof e.componentDidMount&&(a.flags|=4194308)}\nfunction sh(a,b,c){a=c.ref;if(null!==a&&\"function\"!==typeof a&&\"object\"!==typeof a){if(c._owner){c=c._owner;if(c){if(1!==c.tag)throw Error(p(309));var d=c.stateNode}if(!d)throw Error(p(147,a));var e=d,f=\"\"+a;if(null!==b&&null!==b.ref&&\"function\"===typeof b.ref&&b.ref._stringRef===f)return b.ref;b=function(a){var b=e.refs;b===jh&&(b=e.refs={});null===a?delete b[f]:b[f]=a};b._stringRef=f;return b}if(\"string\"!==typeof a)throw Error(p(284));if(!c._owner)throw Error(p(290,a));}return a}\nfunction th(a,b){a=Object.prototype.toString.call(b);throw Error(p(31,\"[object Object]\"===a?\"object with keys {\"+Object.keys(b).join(\", \")+\"}\":a));}function uh(a){var b=a._init;return b(a._payload)}\nfunction vh(a){function b(b,c){if(a){var d=b.deletions;null===d?(b.deletions=[c],b.flags|=16):d.push(c)}}function c(c,d){if(!a)return null;for(;null!==d;)b(c,d),d=d.sibling;return null}function d(a,b){for(a=new Map;null!==b;)null!==b.key?a.set(b.key,b):a.set(b.index,b),b=b.sibling;return a}function e(a,b){a=wh(a,b);a.index=0;a.sibling=null;return a}function f(b,c,d){b.index=d;if(!a)return b.flags|=1048576,c;d=b.alternate;if(null!==d)return d=d.index,d<c?(b.flags|=2,c):d;b.flags|=2;return c}function g(b){a&&\nnull===b.alternate&&(b.flags|=2);return b}function h(a,b,c,d){if(null===b||6!==b.tag)return b=xh(c,a.mode,d),b.return=a,b;b=e(b,c);b.return=a;return b}function k(a,b,c,d){var f=c.type;if(f===ya)return m(a,b,c.props.children,d,c.key);if(null!==b&&(b.elementType===f||\"object\"===typeof f&&null!==f&&f.$$typeof===Ha&&uh(f)===b.type))return d=e(b,c.props),d.ref=sh(a,b,c),d.return=a,d;d=yh(c.type,c.key,c.props,null,a.mode,d);d.ref=sh(a,b,c);d.return=a;return d}function l(a,b,c,d){if(null===b||4!==b.tag||\nb.stateNode.containerInfo!==c.containerInfo||b.stateNode.implementation!==c.implementation)return b=zh(c,a.mode,d),b.return=a,b;b=e(b,c.children||[]);b.return=a;return b}function m(a,b,c,d,f){if(null===b||7!==b.tag)return b=Ah(c,a.mode,d,f),b.return=a,b;b=e(b,c);b.return=a;return b}function q(a,b,c){if(\"string\"===typeof b&&\"\"!==b||\"number\"===typeof b)return b=xh(\"\"+b,a.mode,c),b.return=a,b;if(\"object\"===typeof b&&null!==b){switch(b.$$typeof){case va:return c=yh(b.type,b.key,b.props,null,a.mode,c),\nc.ref=sh(a,null,b),c.return=a,c;case wa:return b=zh(b,a.mode,c),b.return=a,b;case Ha:var d=b._init;return q(a,d(b._payload),c)}if(eb(b)||Ka(b))return b=Ah(b,a.mode,c,null),b.return=a,b;th(a,b)}return null}function r(a,b,c,d){var e=null!==b?b.key:null;if(\"string\"===typeof c&&\"\"!==c||\"number\"===typeof c)return null!==e?null:h(a,b,\"\"+c,d);if(\"object\"===typeof c&&null!==c){switch(c.$$typeof){case va:return c.key===e?k(a,b,c,d):null;case wa:return c.key===e?l(a,b,c,d):null;case Ha:return e=c._init,r(a,\nb,e(c._payload),d)}if(eb(c)||Ka(c))return null!==e?null:m(a,b,c,d,null);th(a,c)}return null}function y(a,b,c,d,e){if(\"string\"===typeof d&&\"\"!==d||\"number\"===typeof d)return a=a.get(c)||null,h(b,a,\"\"+d,e);if(\"object\"===typeof d&&null!==d){switch(d.$$typeof){case va:return a=a.get(null===d.key?c:d.key)||null,k(b,a,d,e);case wa:return a=a.get(null===d.key?c:d.key)||null,l(b,a,d,e);case Ha:var f=d._init;return y(a,b,c,f(d._payload),e)}if(eb(d)||Ka(d))return a=a.get(c)||null,m(b,a,d,e,null);th(b,d)}return null}\nfunction n(e,g,h,k){for(var l=null,m=null,u=g,w=g=0,x=null;null!==u&&w<h.length;w++){u.index>w?(x=u,u=null):x=u.sibling;var n=r(e,u,h[w],k);if(null===n){null===u&&(u=x);break}a&&u&&null===n.alternate&&b(e,u);g=f(n,g,w);null===m?l=n:m.sibling=n;m=n;u=x}if(w===h.length)return c(e,u),I&&tg(e,w),l;if(null===u){for(;w<h.length;w++)u=q(e,h[w],k),null!==u&&(g=f(u,g,w),null===m?l=u:m.sibling=u,m=u);I&&tg(e,w);return l}for(u=d(e,u);w<h.length;w++)x=y(u,e,w,h[w],k),null!==x&&(a&&null!==x.alternate&&u.delete(null===\nx.key?w:x.key),g=f(x,g,w),null===m?l=x:m.sibling=x,m=x);a&&u.forEach(function(a){return b(e,a)});I&&tg(e,w);return l}function t(e,g,h,k){var l=Ka(h);if(\"function\"!==typeof l)throw Error(p(150));h=l.call(h);if(null==h)throw Error(p(151));for(var u=l=null,m=g,w=g=0,x=null,n=h.next();null!==m&&!n.done;w++,n=h.next()){m.index>w?(x=m,m=null):x=m.sibling;var t=r(e,m,n.value,k);if(null===t){null===m&&(m=x);break}a&&m&&null===t.alternate&&b(e,m);g=f(t,g,w);null===u?l=t:u.sibling=t;u=t;m=x}if(n.done)return c(e,\nm),I&&tg(e,w),l;if(null===m){for(;!n.done;w++,n=h.next())n=q(e,n.value,k),null!==n&&(g=f(n,g,w),null===u?l=n:u.sibling=n,u=n);I&&tg(e,w);return l}for(m=d(e,m);!n.done;w++,n=h.next())n=y(m,e,w,n.value,k),null!==n&&(a&&null!==n.alternate&&m.delete(null===n.key?w:n.key),g=f(n,g,w),null===u?l=n:u.sibling=n,u=n);a&&m.forEach(function(a){return b(e,a)});I&&tg(e,w);return l}function J(a,d,f,h){\"object\"===typeof f&&null!==f&&f.type===ya&&null===f.key&&(f=f.props.children);if(\"object\"===typeof f&&null!==f){switch(f.$$typeof){case va:a:{for(var k=\nf.key,l=d;null!==l;){if(l.key===k){k=f.type;if(k===ya){if(7===l.tag){c(a,l.sibling);d=e(l,f.props.children);d.return=a;a=d;break a}}else if(l.elementType===k||\"object\"===typeof k&&null!==k&&k.$$typeof===Ha&&uh(k)===l.type){c(a,l.sibling);d=e(l,f.props);d.ref=sh(a,l,f);d.return=a;a=d;break a}c(a,l);break}else b(a,l);l=l.sibling}f.type===ya?(d=Ah(f.props.children,a.mode,h,f.key),d.return=a,a=d):(h=yh(f.type,f.key,f.props,null,a.mode,h),h.ref=sh(a,d,f),h.return=a,a=h)}return g(a);case wa:a:{for(l=f.key;null!==\nd;){if(d.key===l)if(4===d.tag&&d.stateNode.containerInfo===f.containerInfo&&d.stateNode.implementation===f.implementation){c(a,d.sibling);d=e(d,f.children||[]);d.return=a;a=d;break a}else{c(a,d);break}else b(a,d);d=d.sibling}d=zh(f,a.mode,h);d.return=a;a=d}return g(a);case Ha:return l=f._init,J(a,d,l(f._payload),h)}if(eb(f))return n(a,d,f,h);if(Ka(f))return t(a,d,f,h);th(a,f)}return\"string\"===typeof f&&\"\"!==f||\"number\"===typeof f?(f=\"\"+f,null!==d&&6===d.tag?(c(a,d.sibling),d=e(d,f),d.return=a,a=d):\n(c(a,d),d=xh(f,a.mode,h),d.return=a,a=d),g(a)):c(a,d)}return J}var Bh=vh(!0),Ch=vh(!1),Dh={},Eh=Uf(Dh),Fh=Uf(Dh),Gh=Uf(Dh);function Hh(a){if(a===Dh)throw Error(p(174));return a}function Ih(a,b){G(Gh,b);G(Fh,a);G(Eh,Dh);a=b.nodeType;switch(a){case 9:case 11:b=(b=b.documentElement)?b.namespaceURI:lb(null,\"\");break;default:a=8===a?b.parentNode:b,b=a.namespaceURI||null,a=a.tagName,b=lb(b,a)}E(Eh);G(Eh,b)}function Jh(){E(Eh);E(Fh);E(Gh)}\nfunction Kh(a){Hh(Gh.current);var b=Hh(Eh.current);var c=lb(b,a.type);b!==c&&(G(Fh,a),G(Eh,c))}function Lh(a){Fh.current===a&&(E(Eh),E(Fh))}var M=Uf(0);\nfunction Mh(a){for(var b=a;null!==b;){if(13===b.tag){var c=b.memoizedState;if(null!==c&&(c=c.dehydrated,null===c||\"$?\"===c.data||\"$!\"===c.data))return b}else if(19===b.tag&&void 0!==b.memoizedProps.revealOrder){if(0!==(b.flags&128))return b}else if(null!==b.child){b.child.return=b;b=b.child;continue}if(b===a)break;for(;null===b.sibling;){if(null===b.return||b.return===a)return null;b=b.return}b.sibling.return=b.return;b=b.sibling}return null}var Nh=[];\nfunction Oh(){for(var a=0;a<Nh.length;a++)Nh[a]._workInProgressVersionPrimary=null;Nh.length=0}var Ph=ua.ReactCurrentDispatcher,Qh=ua.ReactCurrentBatchConfig,Rh=0,N=null,O=null,P=null,Sh=!1,Th=!1,Uh=0,Vh=0;function Q(){throw Error(p(321));}function Wh(a,b){if(null===b)return!1;for(var c=0;c<b.length&&c<a.length;c++)if(!He(a[c],b[c]))return!1;return!0}\nfunction Xh(a,b,c,d,e,f){Rh=f;N=b;b.memoizedState=null;b.updateQueue=null;b.lanes=0;Ph.current=null===a||null===a.memoizedState?Yh:Zh;a=c(d,e);if(Th){f=0;do{Th=!1;Uh=0;if(25<=f)throw Error(p(301));f+=1;P=O=null;b.updateQueue=null;Ph.current=$h;a=c(d,e)}while(Th)}Ph.current=ai;b=null!==O&&null!==O.next;Rh=0;P=O=N=null;Sh=!1;if(b)throw Error(p(300));return a}function bi(){var a=0!==Uh;Uh=0;return a}\nfunction ci(){var a={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};null===P?N.memoizedState=P=a:P=P.next=a;return P}function di(){if(null===O){var a=N.alternate;a=null!==a?a.memoizedState:null}else a=O.next;var b=null===P?N.memoizedState:P.next;if(null!==b)P=b,O=a;else{if(null===a)throw Error(p(310));O=a;a={memoizedState:O.memoizedState,baseState:O.baseState,baseQueue:O.baseQueue,queue:O.queue,next:null};null===P?N.memoizedState=P=a:P=P.next=a}return P}\nfunction ei(a,b){return\"function\"===typeof b?b(a):b}\nfunction fi(a){var b=di(),c=b.queue;if(null===c)throw Error(p(311));c.lastRenderedReducer=a;var d=O,e=d.baseQueue,f=c.pending;if(null!==f){if(null!==e){var g=e.next;e.next=f.next;f.next=g}d.baseQueue=e=f;c.pending=null}if(null!==e){f=e.next;d=d.baseState;var h=g=null,k=null,l=f;do{var m=l.lane;if((Rh&m)===m)null!==k&&(k=k.next={lane:0,action:l.action,hasEagerState:l.hasEagerState,eagerState:l.eagerState,next:null}),d=l.hasEagerState?l.eagerState:a(d,l.action);else{var q={lane:m,action:l.action,hasEagerState:l.hasEagerState,\neagerState:l.eagerState,next:null};null===k?(h=k=q,g=d):k=k.next=q;N.lanes|=m;hh|=m}l=l.next}while(null!==l&&l!==f);null===k?g=d:k.next=h;He(d,b.memoizedState)||(Ug=!0);b.memoizedState=d;b.baseState=g;b.baseQueue=k;c.lastRenderedState=d}a=c.interleaved;if(null!==a){e=a;do f=e.lane,N.lanes|=f,hh|=f,e=e.next;while(e!==a)}else null===e&&(c.lanes=0);return[b.memoizedState,c.dispatch]}\nfunction gi(a){var b=di(),c=b.queue;if(null===c)throw Error(p(311));c.lastRenderedReducer=a;var d=c.dispatch,e=c.pending,f=b.memoizedState;if(null!==e){c.pending=null;var g=e=e.next;do f=a(f,g.action),g=g.next;while(g!==e);He(f,b.memoizedState)||(Ug=!0);b.memoizedState=f;null===b.baseQueue&&(b.baseState=f);c.lastRenderedState=f}return[f,d]}function hi(){}\nfunction ii(a,b){var c=N,d=di(),e=b(),f=!He(d.memoizedState,e);f&&(d.memoizedState=e,Ug=!0);d=d.queue;ji(ki.bind(null,c,d,a),[a]);if(d.getSnapshot!==b||f||null!==P&&P.memoizedState.tag&1){c.flags|=2048;li(9,mi.bind(null,c,d,e,b),void 0,null);if(null===R)throw Error(p(349));0!==(Rh&30)||ni(c,b,e)}return e}function ni(a,b,c){a.flags|=16384;a={getSnapshot:b,value:c};b=N.updateQueue;null===b?(b={lastEffect:null,stores:null},N.updateQueue=b,b.stores=[a]):(c=b.stores,null===c?b.stores=[a]:c.push(a))}\nfunction mi(a,b,c,d){b.value=c;b.getSnapshot=d;oi(b)&&pi(a)}function ki(a,b,c){return c(function(){oi(b)&&pi(a)})}function oi(a){var b=a.getSnapshot;a=a.value;try{var c=b();return!He(a,c)}catch(d){return!0}}function pi(a){var b=Zg(a,1);null!==b&&mh(b,a,1,-1)}\nfunction qi(a){var b=ci();\"function\"===typeof a&&(a=a());b.memoizedState=b.baseState=a;a={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:ei,lastRenderedState:a};b.queue=a;a=a.dispatch=ri.bind(null,N,a);return[b.memoizedState,a]}\nfunction li(a,b,c,d){a={tag:a,create:b,destroy:c,deps:d,next:null};b=N.updateQueue;null===b?(b={lastEffect:null,stores:null},N.updateQueue=b,b.lastEffect=a.next=a):(c=b.lastEffect,null===c?b.lastEffect=a.next=a:(d=c.next,c.next=a,a.next=d,b.lastEffect=a));return a}function si(){return di().memoizedState}function ti(a,b,c,d){var e=ci();N.flags|=a;e.memoizedState=li(1|b,c,void 0,void 0===d?null:d)}\nfunction ui(a,b,c,d){var e=di();d=void 0===d?null:d;var f=void 0;if(null!==O){var g=O.memoizedState;f=g.destroy;if(null!==d&&Wh(d,g.deps)){e.memoizedState=li(b,c,f,d);return}}N.flags|=a;e.memoizedState=li(1|b,c,f,d)}function vi(a,b){return ti(8390656,8,a,b)}function ji(a,b){return ui(2048,8,a,b)}function wi(a,b){return ui(4,2,a,b)}function xi(a,b){return ui(4,4,a,b)}\nfunction yi(a,b){if(\"function\"===typeof b)return a=a(),b(a),function(){b(null)};if(null!==b&&void 0!==b)return a=a(),b.current=a,function(){b.current=null}}function zi(a,b,c){c=null!==c&&void 0!==c?c.concat([a]):null;return ui(4,4,yi.bind(null,b,a),c)}function Ai(){}function Bi(a,b){var c=di();b=void 0===b?null:b;var d=c.memoizedState;if(null!==d&&null!==b&&Wh(b,d[1]))return d[0];c.memoizedState=[a,b];return a}\nfunction Ci(a,b){var c=di();b=void 0===b?null:b;var d=c.memoizedState;if(null!==d&&null!==b&&Wh(b,d[1]))return d[0];a=a();c.memoizedState=[a,b];return a}function Di(a,b,c){if(0===(Rh&21))return a.baseState&&(a.baseState=!1,Ug=!0),a.memoizedState=c;He(c,b)||(c=yc(),N.lanes|=c,hh|=c,a.baseState=!0);return b}function Ei(a,b){var c=C;C=0!==c&&4>c?c:4;a(!0);var d=Qh.transition;Qh.transition={};try{a(!1),b()}finally{C=c,Qh.transition=d}}function Fi(){return di().memoizedState}\nfunction Gi(a,b,c){var d=lh(a);c={lane:d,action:c,hasEagerState:!1,eagerState:null,next:null};if(Hi(a))Ii(b,c);else if(c=Yg(a,b,c,d),null!==c){var e=L();mh(c,a,d,e);Ji(c,b,d)}}\nfunction ri(a,b,c){var d=lh(a),e={lane:d,action:c,hasEagerState:!1,eagerState:null,next:null};if(Hi(a))Ii(b,e);else{var f=a.alternate;if(0===a.lanes&&(null===f||0===f.lanes)&&(f=b.lastRenderedReducer,null!==f))try{var g=b.lastRenderedState,h=f(g,c);e.hasEagerState=!0;e.eagerState=h;if(He(h,g)){var k=b.interleaved;null===k?(e.next=e,Xg(b)):(e.next=k.next,k.next=e);b.interleaved=e;return}}catch(l){}finally{}c=Yg(a,b,e,d);null!==c&&(e=L(),mh(c,a,d,e),Ji(c,b,d))}}\nfunction Hi(a){var b=a.alternate;return a===N||null!==b&&b===N}function Ii(a,b){Th=Sh=!0;var c=a.pending;null===c?b.next=b:(b.next=c.next,c.next=b);a.pending=b}function Ji(a,b,c){if(0!==(c&4194240)){var d=b.lanes;d&=a.pendingLanes;c|=d;b.lanes=c;Cc(a,c)}}\nvar ai={readContext:Vg,useCallback:Q,useContext:Q,useEffect:Q,useImperativeHandle:Q,useInsertionEffect:Q,useLayoutEffect:Q,useMemo:Q,useReducer:Q,useRef:Q,useState:Q,useDebugValue:Q,useDeferredValue:Q,useTransition:Q,useMutableSource:Q,useSyncExternalStore:Q,useId:Q,unstable_isNewReconciler:!1},Yh={readContext:Vg,useCallback:function(a,b){ci().memoizedState=[a,void 0===b?null:b];return a},useContext:Vg,useEffect:vi,useImperativeHandle:function(a,b,c){c=null!==c&&void 0!==c?c.concat([a]):null;return ti(4194308,\n4,yi.bind(null,b,a),c)},useLayoutEffect:function(a,b){return ti(4194308,4,a,b)},useInsertionEffect:function(a,b){return ti(4,2,a,b)},useMemo:function(a,b){var c=ci();b=void 0===b?null:b;a=a();c.memoizedState=[a,b];return a},useReducer:function(a,b,c){var d=ci();b=void 0!==c?c(b):b;d.memoizedState=d.baseState=b;a={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:a,lastRenderedState:b};d.queue=a;a=a.dispatch=Gi.bind(null,N,a);return[d.memoizedState,a]},useRef:function(a){var b=\nci();a={current:a};return b.memoizedState=a},useState:qi,useDebugValue:Ai,useDeferredValue:function(a){return ci().memoizedState=a},useTransition:function(){var a=qi(!1),b=a[0];a=Ei.bind(null,a[1]);ci().memoizedState=a;return[b,a]},useMutableSource:function(){},useSyncExternalStore:function(a,b,c){var d=N,e=ci();if(I){if(void 0===c)throw Error(p(407));c=c()}else{c=b();if(null===R)throw Error(p(349));0!==(Rh&30)||ni(d,b,c)}e.memoizedState=c;var f={value:c,getSnapshot:b};e.queue=f;vi(ki.bind(null,d,\nf,a),[a]);d.flags|=2048;li(9,mi.bind(null,d,f,c,b),void 0,null);return c},useId:function(){var a=ci(),b=R.identifierPrefix;if(I){var c=sg;var d=rg;c=(d&~(1<<32-oc(d)-1)).toString(32)+c;b=\":\"+b+\"R\"+c;c=Uh++;0<c&&(b+=\"H\"+c.toString(32));b+=\":\"}else c=Vh++,b=\":\"+b+\"r\"+c.toString(32)+\":\";return a.memoizedState=b},unstable_isNewReconciler:!1},Zh={readContext:Vg,useCallback:Bi,useContext:Vg,useEffect:ji,useImperativeHandle:zi,useInsertionEffect:wi,useLayoutEffect:xi,useMemo:Ci,useReducer:fi,useRef:si,useState:function(){return fi(ei)},\nuseDebugValue:Ai,useDeferredValue:function(a){var b=di();return Di(b,O.memoizedState,a)},useTransition:function(){var a=fi(ei)[0],b=di().memoizedState;return[a,b]},useMutableSource:hi,useSyncExternalStore:ii,useId:Fi,unstable_isNewReconciler:!1},$h={readContext:Vg,useCallback:Bi,useContext:Vg,useEffect:ji,useImperativeHandle:zi,useInsertionEffect:wi,useLayoutEffect:xi,useMemo:Ci,useReducer:gi,useRef:si,useState:function(){return gi(ei)},useDebugValue:Ai,useDeferredValue:function(a){var b=di();return null===\nO?b.memoizedState=a:Di(b,O.memoizedState,a)},useTransition:function(){var a=gi(ei)[0],b=di().memoizedState;return[a,b]},useMutableSource:hi,useSyncExternalStore:ii,useId:Fi,unstable_isNewReconciler:!1};function Ki(a,b){try{var c=\"\",d=b;do c+=Pa(d),d=d.return;while(d);var e=c}catch(f){e=\"\\nError generating stack: \"+f.message+\"\\n\"+f.stack}return{value:a,source:b,stack:e,digest:null}}function Li(a,b,c){return{value:a,source:null,stack:null!=c?c:null,digest:null!=b?b:null}}\nfunction Mi(a,b){try{console.error(b.value)}catch(c){setTimeout(function(){throw c;})}}var Ni=\"function\"===typeof WeakMap?WeakMap:Map;function Oi(a,b,c){c=ch(-1,c);c.tag=3;c.payload={element:null};var d=b.value;c.callback=function(){Pi||(Pi=!0,Qi=d);Mi(a,b)};return c}\nfunction Ri(a,b,c){c=ch(-1,c);c.tag=3;var d=a.type.getDerivedStateFromError;if(\"function\"===typeof d){var e=b.value;c.payload=function(){return d(e)};c.callback=function(){Mi(a,b)}}var f=a.stateNode;null!==f&&\"function\"===typeof f.componentDidCatch&&(c.callback=function(){Mi(a,b);\"function\"!==typeof d&&(null===Si?Si=new Set([this]):Si.add(this));var c=b.stack;this.componentDidCatch(b.value,{componentStack:null!==c?c:\"\"})});return c}\nfunction Ti(a,b,c){var d=a.pingCache;if(null===d){d=a.pingCache=new Ni;var e=new Set;d.set(b,e)}else e=d.get(b),void 0===e&&(e=new Set,d.set(b,e));e.has(c)||(e.add(c),a=Ui.bind(null,a,b,c),b.then(a,a))}function Vi(a){do{var b;if(b=13===a.tag)b=a.memoizedState,b=null!==b?null!==b.dehydrated?!0:!1:!0;if(b)return a;a=a.return}while(null!==a);return null}\nfunction Wi(a,b,c,d,e){if(0===(a.mode&1))return a===b?a.flags|=65536:(a.flags|=128,c.flags|=131072,c.flags&=-52805,1===c.tag&&(null===c.alternate?c.tag=17:(b=ch(-1,1),b.tag=2,dh(c,b,1))),c.lanes|=1),a;a.flags|=65536;a.lanes=e;return a}var Xi=ua.ReactCurrentOwner,Ug=!1;function Yi(a,b,c,d){b.child=null===a?Ch(b,null,c,d):Bh(b,a.child,c,d)}\nfunction Zi(a,b,c,d,e){c=c.render;var f=b.ref;Tg(b,e);d=Xh(a,b,c,d,f,e);c=bi();if(null!==a&&!Ug)return b.updateQueue=a.updateQueue,b.flags&=-2053,a.lanes&=~e,$i(a,b,e);I&&c&&vg(b);b.flags|=1;Yi(a,b,d,e);return b.child}\nfunction aj(a,b,c,d,e){if(null===a){var f=c.type;if(\"function\"===typeof f&&!bj(f)&&void 0===f.defaultProps&&null===c.compare&&void 0===c.defaultProps)return b.tag=15,b.type=f,cj(a,b,f,d,e);a=yh(c.type,null,d,b,b.mode,e);a.ref=b.ref;a.return=b;return b.child=a}f=a.child;if(0===(a.lanes&e)){var g=f.memoizedProps;c=c.compare;c=null!==c?c:Ie;if(c(g,d)&&a.ref===b.ref)return $i(a,b,e)}b.flags|=1;a=wh(f,d);a.ref=b.ref;a.return=b;return b.child=a}\nfunction cj(a,b,c,d,e){if(null!==a){var f=a.memoizedProps;if(Ie(f,d)&&a.ref===b.ref)if(Ug=!1,b.pendingProps=d=f,0!==(a.lanes&e))0!==(a.flags&131072)&&(Ug=!0);else return b.lanes=a.lanes,$i(a,b,e)}return dj(a,b,c,d,e)}\nfunction ej(a,b,c){var d=b.pendingProps,e=d.children,f=null!==a?a.memoizedState:null;if(\"hidden\"===d.mode)if(0===(b.mode&1))b.memoizedState={baseLanes:0,cachePool:null,transitions:null},G(fj,gj),gj|=c;else{if(0===(c&1073741824))return a=null!==f?f.baseLanes|c:c,b.lanes=b.childLanes=1073741824,b.memoizedState={baseLanes:a,cachePool:null,transitions:null},b.updateQueue=null,G(fj,gj),gj|=a,null;b.memoizedState={baseLanes:0,cachePool:null,transitions:null};d=null!==f?f.baseLanes:c;G(fj,gj);gj|=d}else null!==\nf?(d=f.baseLanes|c,b.memoizedState=null):d=c,G(fj,gj),gj|=d;Yi(a,b,e,c);return b.child}function hj(a,b){var c=b.ref;if(null===a&&null!==c||null!==a&&a.ref!==c)b.flags|=512,b.flags|=2097152}function dj(a,b,c,d,e){var f=Zf(c)?Xf:H.current;f=Yf(b,f);Tg(b,e);c=Xh(a,b,c,d,f,e);d=bi();if(null!==a&&!Ug)return b.updateQueue=a.updateQueue,b.flags&=-2053,a.lanes&=~e,$i(a,b,e);I&&d&&vg(b);b.flags|=1;Yi(a,b,c,e);return b.child}\nfunction ij(a,b,c,d,e){if(Zf(c)){var f=!0;cg(b)}else f=!1;Tg(b,e);if(null===b.stateNode)jj(a,b),ph(b,c,d),rh(b,c,d,e),d=!0;else if(null===a){var g=b.stateNode,h=b.memoizedProps;g.props=h;var k=g.context,l=c.contextType;\"object\"===typeof l&&null!==l?l=Vg(l):(l=Zf(c)?Xf:H.current,l=Yf(b,l));var m=c.getDerivedStateFromProps,q=\"function\"===typeof m||\"function\"===typeof g.getSnapshotBeforeUpdate;q||\"function\"!==typeof g.UNSAFE_componentWillReceiveProps&&\"function\"!==typeof g.componentWillReceiveProps||\n(h!==d||k!==l)&&qh(b,g,d,l);$g=!1;var r=b.memoizedState;g.state=r;gh(b,d,g,e);k=b.memoizedState;h!==d||r!==k||Wf.current||$g?(\"function\"===typeof m&&(kh(b,c,m,d),k=b.memoizedState),(h=$g||oh(b,c,h,d,r,k,l))?(q||\"function\"!==typeof g.UNSAFE_componentWillMount&&\"function\"!==typeof g.componentWillMount||(\"function\"===typeof g.componentWillMount&&g.componentWillMount(),\"function\"===typeof g.UNSAFE_componentWillMount&&g.UNSAFE_componentWillMount()),\"function\"===typeof g.componentDidMount&&(b.flags|=4194308)):\n(\"function\"===typeof g.componentDidMount&&(b.flags|=4194308),b.memoizedProps=d,b.memoizedState=k),g.props=d,g.state=k,g.context=l,d=h):(\"function\"===typeof g.componentDidMount&&(b.flags|=4194308),d=!1)}else{g=b.stateNode;bh(a,b);h=b.memoizedProps;l=b.type===b.elementType?h:Lg(b.type,h);g.props=l;q=b.pendingProps;r=g.context;k=c.contextType;\"object\"===typeof k&&null!==k?k=Vg(k):(k=Zf(c)?Xf:H.current,k=Yf(b,k));var y=c.getDerivedStateFromProps;(m=\"function\"===typeof y||\"function\"===typeof g.getSnapshotBeforeUpdate)||\n\"function\"!==typeof g.UNSAFE_componentWillReceiveProps&&\"function\"!==typeof g.componentWillReceiveProps||(h!==q||r!==k)&&qh(b,g,d,k);$g=!1;r=b.memoizedState;g.state=r;gh(b,d,g,e);var n=b.memoizedState;h!==q||r!==n||Wf.current||$g?(\"function\"===typeof y&&(kh(b,c,y,d),n=b.memoizedState),(l=$g||oh(b,c,l,d,r,n,k)||!1)?(m||\"function\"!==typeof g.UNSAFE_componentWillUpdate&&\"function\"!==typeof g.componentWillUpdate||(\"function\"===typeof g.componentWillUpdate&&g.componentWillUpdate(d,n,k),\"function\"===typeof g.UNSAFE_componentWillUpdate&&\ng.UNSAFE_componentWillUpdate(d,n,k)),\"function\"===typeof g.componentDidUpdate&&(b.flags|=4),\"function\"===typeof g.getSnapshotBeforeUpdate&&(b.flags|=1024)):(\"function\"!==typeof g.componentDidUpdate||h===a.memoizedProps&&r===a.memoizedState||(b.flags|=4),\"function\"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&r===a.memoizedState||(b.flags|=1024),b.memoizedProps=d,b.memoizedState=n),g.props=d,g.state=n,g.context=k,d=l):(\"function\"!==typeof g.componentDidUpdate||h===a.memoizedProps&&r===\na.memoizedState||(b.flags|=4),\"function\"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&r===a.memoizedState||(b.flags|=1024),d=!1)}return kj(a,b,c,d,f,e)}\nfunction kj(a,b,c,d,e,f){hj(a,b);var g=0!==(b.flags&128);if(!d&&!g)return e&&dg(b,c,!1),$i(a,b,f);d=b.stateNode;Xi.current=b;var h=g&&\"function\"!==typeof c.getDerivedStateFromError?null:d.render();b.flags|=1;null!==a&&g?(b.child=Bh(b,a.child,null,f),b.child=Bh(b,null,h,f)):Yi(a,b,h,f);b.memoizedState=d.state;e&&dg(b,c,!0);return b.child}function lj(a){var b=a.stateNode;b.pendingContext?ag(a,b.pendingContext,b.pendingContext!==b.context):b.context&&ag(a,b.context,!1);Ih(a,b.containerInfo)}\nfunction mj(a,b,c,d,e){Ig();Jg(e);b.flags|=256;Yi(a,b,c,d);return b.child}var nj={dehydrated:null,treeContext:null,retryLane:0};function oj(a){return{baseLanes:a,cachePool:null,transitions:null}}\nfunction pj(a,b,c){var d=b.pendingProps,e=M.current,f=!1,g=0!==(b.flags&128),h;(h=g)||(h=null!==a&&null===a.memoizedState?!1:0!==(e&2));if(h)f=!0,b.flags&=-129;else if(null===a||null!==a.memoizedState)e|=1;G(M,e&1);if(null===a){Eg(b);a=b.memoizedState;if(null!==a&&(a=a.dehydrated,null!==a))return 0===(b.mode&1)?b.lanes=1:\"$!\"===a.data?b.lanes=8:b.lanes=1073741824,null;g=d.children;a=d.fallback;return f?(d=b.mode,f=b.child,g={mode:\"hidden\",children:g},0===(d&1)&&null!==f?(f.childLanes=0,f.pendingProps=\ng):f=qj(g,d,0,null),a=Ah(a,d,c,null),f.return=b,a.return=b,f.sibling=a,b.child=f,b.child.memoizedState=oj(c),b.memoizedState=nj,a):rj(b,g)}e=a.memoizedState;if(null!==e&&(h=e.dehydrated,null!==h))return sj(a,b,g,d,h,e,c);if(f){f=d.fallback;g=b.mode;e=a.child;h=e.sibling;var k={mode:\"hidden\",children:d.children};0===(g&1)&&b.child!==e?(d=b.child,d.childLanes=0,d.pendingProps=k,b.deletions=null):(d=wh(e,k),d.subtreeFlags=e.subtreeFlags&14680064);null!==h?f=wh(h,f):(f=Ah(f,g,c,null),f.flags|=2);f.return=\nb;d.return=b;d.sibling=f;b.child=d;d=f;f=b.child;g=a.child.memoizedState;g=null===g?oj(c):{baseLanes:g.baseLanes|c,cachePool:null,transitions:g.transitions};f.memoizedState=g;f.childLanes=a.childLanes&~c;b.memoizedState=nj;return d}f=a.child;a=f.sibling;d=wh(f,{mode:\"visible\",children:d.children});0===(b.mode&1)&&(d.lanes=c);d.return=b;d.sibling=null;null!==a&&(c=b.deletions,null===c?(b.deletions=[a],b.flags|=16):c.push(a));b.child=d;b.memoizedState=null;return d}\nfunction rj(a,b){b=qj({mode:\"visible\",children:b},a.mode,0,null);b.return=a;return a.child=b}function tj(a,b,c,d){null!==d&&Jg(d);Bh(b,a.child,null,c);a=rj(b,b.pendingProps.children);a.flags|=2;b.memoizedState=null;return a}\nfunction sj(a,b,c,d,e,f,g){if(c){if(b.flags&256)return b.flags&=-257,d=Li(Error(p(422))),tj(a,b,g,d);if(null!==b.memoizedState)return b.child=a.child,b.flags|=128,null;f=d.fallback;e=b.mode;d=qj({mode:\"visible\",children:d.children},e,0,null);f=Ah(f,e,g,null);f.flags|=2;d.return=b;f.return=b;d.sibling=f;b.child=d;0!==(b.mode&1)&&Bh(b,a.child,null,g);b.child.memoizedState=oj(g);b.memoizedState=nj;return f}if(0===(b.mode&1))return tj(a,b,g,null);if(\"$!\"===e.data){d=e.nextSibling&&e.nextSibling.dataset;\nif(d)var h=d.dgst;d=h;f=Error(p(419));d=Li(f,d,void 0);return tj(a,b,g,d)}h=0!==(g&a.childLanes);if(Ug||h){d=R;if(null!==d){switch(g&-g){case 4:e=2;break;case 16:e=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:e=32;break;case 536870912:e=268435456;break;default:e=0}e=0!==(e&(d.suspendedLanes|g))?0:e;\n0!==e&&e!==f.retryLane&&(f.retryLane=e,Zg(a,e),mh(d,a,e,-1))}uj();d=Li(Error(p(421)));return tj(a,b,g,d)}if(\"$?\"===e.data)return b.flags|=128,b.child=a.child,b=vj.bind(null,a),e._reactRetry=b,null;a=f.treeContext;yg=Lf(e.nextSibling);xg=b;I=!0;zg=null;null!==a&&(og[pg++]=rg,og[pg++]=sg,og[pg++]=qg,rg=a.id,sg=a.overflow,qg=b);b=rj(b,d.children);b.flags|=4096;return b}function wj(a,b,c){a.lanes|=b;var d=a.alternate;null!==d&&(d.lanes|=b);Sg(a.return,b,c)}\nfunction xj(a,b,c,d,e){var f=a.memoizedState;null===f?a.memoizedState={isBackwards:b,rendering:null,renderingStartTime:0,last:d,tail:c,tailMode:e}:(f.isBackwards=b,f.rendering=null,f.renderingStartTime=0,f.last=d,f.tail=c,f.tailMode=e)}\nfunction yj(a,b,c){var d=b.pendingProps,e=d.revealOrder,f=d.tail;Yi(a,b,d.children,c);d=M.current;if(0!==(d&2))d=d&1|2,b.flags|=128;else{if(null!==a&&0!==(a.flags&128))a:for(a=b.child;null!==a;){if(13===a.tag)null!==a.memoizedState&&wj(a,c,b);else if(19===a.tag)wj(a,c,b);else if(null!==a.child){a.child.return=a;a=a.child;continue}if(a===b)break a;for(;null===a.sibling;){if(null===a.return||a.return===b)break a;a=a.return}a.sibling.return=a.return;a=a.sibling}d&=1}G(M,d);if(0===(b.mode&1))b.memoizedState=\nnull;else switch(e){case \"forwards\":c=b.child;for(e=null;null!==c;)a=c.alternate,null!==a&&null===Mh(a)&&(e=c),c=c.sibling;c=e;null===c?(e=b.child,b.child=null):(e=c.sibling,c.sibling=null);xj(b,!1,e,c,f);break;case \"backwards\":c=null;e=b.child;for(b.child=null;null!==e;){a=e.alternate;if(null!==a&&null===Mh(a)){b.child=e;break}a=e.sibling;e.sibling=c;c=e;e=a}xj(b,!0,c,null,f);break;case \"together\":xj(b,!1,null,null,void 0);break;default:b.memoizedState=null}return b.child}\nfunction jj(a,b){0===(b.mode&1)&&null!==a&&(a.alternate=null,b.alternate=null,b.flags|=2)}function $i(a,b,c){null!==a&&(b.dependencies=a.dependencies);hh|=b.lanes;if(0===(c&b.childLanes))return null;if(null!==a&&b.child!==a.child)throw Error(p(153));if(null!==b.child){a=b.child;c=wh(a,a.pendingProps);b.child=c;for(c.return=b;null!==a.sibling;)a=a.sibling,c=c.sibling=wh(a,a.pendingProps),c.return=b;c.sibling=null}return b.child}\nfunction zj(a,b,c){switch(b.tag){case 3:lj(b);Ig();break;case 5:Kh(b);break;case 1:Zf(b.type)&&cg(b);break;case 4:Ih(b,b.stateNode.containerInfo);break;case 10:var d=b.type._context,e=b.memoizedProps.value;G(Mg,d._currentValue);d._currentValue=e;break;case 13:d=b.memoizedState;if(null!==d){if(null!==d.dehydrated)return G(M,M.current&1),b.flags|=128,null;if(0!==(c&b.child.childLanes))return pj(a,b,c);G(M,M.current&1);a=$i(a,b,c);return null!==a?a.sibling:null}G(M,M.current&1);break;case 19:d=0!==(c&\nb.childLanes);if(0!==(a.flags&128)){if(d)return yj(a,b,c);b.flags|=128}e=b.memoizedState;null!==e&&(e.rendering=null,e.tail=null,e.lastEffect=null);G(M,M.current);if(d)break;else return null;case 22:case 23:return b.lanes=0,ej(a,b,c)}return $i(a,b,c)}var Aj,Bj,Cj,Dj;\nAj=function(a,b){for(var c=b.child;null!==c;){if(5===c.tag||6===c.tag)a.appendChild(c.stateNode);else if(4!==c.tag&&null!==c.child){c.child.return=c;c=c.child;continue}if(c===b)break;for(;null===c.sibling;){if(null===c.return||c.return===b)return;c=c.return}c.sibling.return=c.return;c=c.sibling}};Bj=function(){};\nCj=function(a,b,c,d){var e=a.memoizedProps;if(e!==d){a=b.stateNode;Hh(Eh.current);var f=null;switch(c){case \"input\":e=Ya(a,e);d=Ya(a,d);f=[];break;case \"select\":e=A({},e,{value:void 0});d=A({},d,{value:void 0});f=[];break;case \"textarea\":e=gb(a,e);d=gb(a,d);f=[];break;default:\"function\"!==typeof e.onClick&&\"function\"===typeof d.onClick&&(a.onclick=Bf)}ub(c,d);var g;c=null;for(l in e)if(!d.hasOwnProperty(l)&&e.hasOwnProperty(l)&&null!=e[l])if(\"style\"===l){var h=e[l];for(g in h)h.hasOwnProperty(g)&&\n(c||(c={}),c[g]=\"\")}else\"dangerouslySetInnerHTML\"!==l&&\"children\"!==l&&\"suppressContentEditableWarning\"!==l&&\"suppressHydrationWarning\"!==l&&\"autoFocus\"!==l&&(ea.hasOwnProperty(l)?f||(f=[]):(f=f||[]).push(l,null));for(l in d){var k=d[l];h=null!=e?e[l]:void 0;if(d.hasOwnProperty(l)&&k!==h&&(null!=k||null!=h))if(\"style\"===l)if(h){for(g in h)!h.hasOwnProperty(g)||k&&k.hasOwnProperty(g)||(c||(c={}),c[g]=\"\");for(g in k)k.hasOwnProperty(g)&&h[g]!==k[g]&&(c||(c={}),c[g]=k[g])}else c||(f||(f=[]),f.push(l,\nc)),c=k;else\"dangerouslySetInnerHTML\"===l?(k=k?k.__html:void 0,h=h?h.__html:void 0,null!=k&&h!==k&&(f=f||[]).push(l,k)):\"children\"===l?\"string\"!==typeof k&&\"number\"!==typeof k||(f=f||[]).push(l,\"\"+k):\"suppressContentEditableWarning\"!==l&&\"suppressHydrationWarning\"!==l&&(ea.hasOwnProperty(l)?(null!=k&&\"onScroll\"===l&&D(\"scroll\",a),f||h===k||(f=[])):(f=f||[]).push(l,k))}c&&(f=f||[]).push(\"style\",c);var l=f;if(b.updateQueue=l)b.flags|=4}};Dj=function(a,b,c,d){c!==d&&(b.flags|=4)};\nfunction Ej(a,b){if(!I)switch(a.tailMode){case \"hidden\":b=a.tail;for(var c=null;null!==b;)null!==b.alternate&&(c=b),b=b.sibling;null===c?a.tail=null:c.sibling=null;break;case \"collapsed\":c=a.tail;for(var d=null;null!==c;)null!==c.alternate&&(d=c),c=c.sibling;null===d?b||null===a.tail?a.tail=null:a.tail.sibling=null:d.sibling=null}}\nfunction S(a){var b=null!==a.alternate&&a.alternate.child===a.child,c=0,d=0;if(b)for(var e=a.child;null!==e;)c|=e.lanes|e.childLanes,d|=e.subtreeFlags&14680064,d|=e.flags&14680064,e.return=a,e=e.sibling;else for(e=a.child;null!==e;)c|=e.lanes|e.childLanes,d|=e.subtreeFlags,d|=e.flags,e.return=a,e=e.sibling;a.subtreeFlags|=d;a.childLanes=c;return b}\nfunction Fj(a,b,c){var d=b.pendingProps;wg(b);switch(b.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return S(b),null;case 1:return Zf(b.type)&&$f(),S(b),null;case 3:d=b.stateNode;Jh();E(Wf);E(H);Oh();d.pendingContext&&(d.context=d.pendingContext,d.pendingContext=null);if(null===a||null===a.child)Gg(b)?b.flags|=4:null===a||a.memoizedState.isDehydrated&&0===(b.flags&256)||(b.flags|=1024,null!==zg&&(Gj(zg),zg=null));Bj(a,b);S(b);return null;case 5:Lh(b);var e=Hh(Gh.current);\nc=b.type;if(null!==a&&null!=b.stateNode)Cj(a,b,c,d,e),a.ref!==b.ref&&(b.flags|=512,b.flags|=2097152);else{if(!d){if(null===b.stateNode)throw Error(p(166));S(b);return null}a=Hh(Eh.current);if(Gg(b)){d=b.stateNode;c=b.type;var f=b.memoizedProps;d[Of]=b;d[Pf]=f;a=0!==(b.mode&1);switch(c){case \"dialog\":D(\"cancel\",d);D(\"close\",d);break;case \"iframe\":case \"object\":case \"embed\":D(\"load\",d);break;case \"video\":case \"audio\":for(e=0;e<lf.length;e++)D(lf[e],d);break;case \"source\":D(\"error\",d);break;case \"img\":case \"image\":case \"link\":D(\"error\",\nd);D(\"load\",d);break;case \"details\":D(\"toggle\",d);break;case \"input\":Za(d,f);D(\"invalid\",d);break;case \"select\":d._wrapperState={wasMultiple:!!f.multiple};D(\"invalid\",d);break;case \"textarea\":hb(d,f),D(\"invalid\",d)}ub(c,f);e=null;for(var g in f)if(f.hasOwnProperty(g)){var h=f[g];\"children\"===g?\"string\"===typeof h?d.textContent!==h&&(!0!==f.suppressHydrationWarning&&Af(d.textContent,h,a),e=[\"children\",h]):\"number\"===typeof h&&d.textContent!==\"\"+h&&(!0!==f.suppressHydrationWarning&&Af(d.textContent,\nh,a),e=[\"children\",\"\"+h]):ea.hasOwnProperty(g)&&null!=h&&\"onScroll\"===g&&D(\"scroll\",d)}switch(c){case \"input\":Va(d);db(d,f,!0);break;case \"textarea\":Va(d);jb(d);break;case \"select\":case \"option\":break;default:\"function\"===typeof f.onClick&&(d.onclick=Bf)}d=e;b.updateQueue=d;null!==d&&(b.flags|=4)}else{g=9===e.nodeType?e:e.ownerDocument;\"http://www.w3.org/1999/xhtml\"===a&&(a=kb(c));\"http://www.w3.org/1999/xhtml\"===a?\"script\"===c?(a=g.createElement(\"div\"),a.innerHTML=\"<script>\\x3c/script>\",a=a.removeChild(a.firstChild)):\n\"string\"===typeof d.is?a=g.createElement(c,{is:d.is}):(a=g.createElement(c),\"select\"===c&&(g=a,d.multiple?g.multiple=!0:d.size&&(g.size=d.size))):a=g.createElementNS(a,c);a[Of]=b;a[Pf]=d;Aj(a,b,!1,!1);b.stateNode=a;a:{g=vb(c,d);switch(c){case \"dialog\":D(\"cancel\",a);D(\"close\",a);e=d;break;case \"iframe\":case \"object\":case \"embed\":D(\"load\",a);e=d;break;case \"video\":case \"audio\":for(e=0;e<lf.length;e++)D(lf[e],a);e=d;break;case \"source\":D(\"error\",a);e=d;break;case \"img\":case \"image\":case \"link\":D(\"error\",\na);D(\"load\",a);e=d;break;case \"details\":D(\"toggle\",a);e=d;break;case \"input\":Za(a,d);e=Ya(a,d);D(\"invalid\",a);break;case \"option\":e=d;break;case \"select\":a._wrapperState={wasMultiple:!!d.multiple};e=A({},d,{value:void 0});D(\"invalid\",a);break;case \"textarea\":hb(a,d);e=gb(a,d);D(\"invalid\",a);break;default:e=d}ub(c,e);h=e;for(f in h)if(h.hasOwnProperty(f)){var k=h[f];\"style\"===f?sb(a,k):\"dangerouslySetInnerHTML\"===f?(k=k?k.__html:void 0,null!=k&&nb(a,k)):\"children\"===f?\"string\"===typeof k?(\"textarea\"!==\nc||\"\"!==k)&&ob(a,k):\"number\"===typeof k&&ob(a,\"\"+k):\"suppressContentEditableWarning\"!==f&&\"suppressHydrationWarning\"!==f&&\"autoFocus\"!==f&&(ea.hasOwnProperty(f)?null!=k&&\"onScroll\"===f&&D(\"scroll\",a):null!=k&&ta(a,f,k,g))}switch(c){case \"input\":Va(a);db(a,d,!1);break;case \"textarea\":Va(a);jb(a);break;case \"option\":null!=d.value&&a.setAttribute(\"value\",\"\"+Sa(d.value));break;case \"select\":a.multiple=!!d.multiple;f=d.value;null!=f?fb(a,!!d.multiple,f,!1):null!=d.defaultValue&&fb(a,!!d.multiple,d.defaultValue,\n!0);break;default:\"function\"===typeof e.onClick&&(a.onclick=Bf)}switch(c){case \"button\":case \"input\":case \"select\":case \"textarea\":d=!!d.autoFocus;break a;case \"img\":d=!0;break a;default:d=!1}}d&&(b.flags|=4)}null!==b.ref&&(b.flags|=512,b.flags|=2097152)}S(b);return null;case 6:if(a&&null!=b.stateNode)Dj(a,b,a.memoizedProps,d);else{if(\"string\"!==typeof d&&null===b.stateNode)throw Error(p(166));c=Hh(Gh.current);Hh(Eh.current);if(Gg(b)){d=b.stateNode;c=b.memoizedProps;d[Of]=b;if(f=d.nodeValue!==c)if(a=\nxg,null!==a)switch(a.tag){case 3:Af(d.nodeValue,c,0!==(a.mode&1));break;case 5:!0!==a.memoizedProps.suppressHydrationWarning&&Af(d.nodeValue,c,0!==(a.mode&1))}f&&(b.flags|=4)}else d=(9===c.nodeType?c:c.ownerDocument).createTextNode(d),d[Of]=b,b.stateNode=d}S(b);return null;case 13:E(M);d=b.memoizedState;if(null===a||null!==a.memoizedState&&null!==a.memoizedState.dehydrated){if(I&&null!==yg&&0!==(b.mode&1)&&0===(b.flags&128))Hg(),Ig(),b.flags|=98560,f=!1;else if(f=Gg(b),null!==d&&null!==d.dehydrated){if(null===\na){if(!f)throw Error(p(318));f=b.memoizedState;f=null!==f?f.dehydrated:null;if(!f)throw Error(p(317));f[Of]=b}else Ig(),0===(b.flags&128)&&(b.memoizedState=null),b.flags|=4;S(b);f=!1}else null!==zg&&(Gj(zg),zg=null),f=!0;if(!f)return b.flags&65536?b:null}if(0!==(b.flags&128))return b.lanes=c,b;d=null!==d;d!==(null!==a&&null!==a.memoizedState)&&d&&(b.child.flags|=8192,0!==(b.mode&1)&&(null===a||0!==(M.current&1)?0===T&&(T=3):uj()));null!==b.updateQueue&&(b.flags|=4);S(b);return null;case 4:return Jh(),\nBj(a,b),null===a&&sf(b.stateNode.containerInfo),S(b),null;case 10:return Rg(b.type._context),S(b),null;case 17:return Zf(b.type)&&$f(),S(b),null;case 19:E(M);f=b.memoizedState;if(null===f)return S(b),null;d=0!==(b.flags&128);g=f.rendering;if(null===g)if(d)Ej(f,!1);else{if(0!==T||null!==a&&0!==(a.flags&128))for(a=b.child;null!==a;){g=Mh(a);if(null!==g){b.flags|=128;Ej(f,!1);d=g.updateQueue;null!==d&&(b.updateQueue=d,b.flags|=4);b.subtreeFlags=0;d=c;for(c=b.child;null!==c;)f=c,a=d,f.flags&=14680066,\ng=f.alternate,null===g?(f.childLanes=0,f.lanes=a,f.child=null,f.subtreeFlags=0,f.memoizedProps=null,f.memoizedState=null,f.updateQueue=null,f.dependencies=null,f.stateNode=null):(f.childLanes=g.childLanes,f.lanes=g.lanes,f.child=g.child,f.subtreeFlags=0,f.deletions=null,f.memoizedProps=g.memoizedProps,f.memoizedState=g.memoizedState,f.updateQueue=g.updateQueue,f.type=g.type,a=g.dependencies,f.dependencies=null===a?null:{lanes:a.lanes,firstContext:a.firstContext}),c=c.sibling;G(M,M.current&1|2);return b.child}a=\na.sibling}null!==f.tail&&B()>Hj&&(b.flags|=128,d=!0,Ej(f,!1),b.lanes=4194304)}else{if(!d)if(a=Mh(g),null!==a){if(b.flags|=128,d=!0,c=a.updateQueue,null!==c&&(b.updateQueue=c,b.flags|=4),Ej(f,!0),null===f.tail&&\"hidden\"===f.tailMode&&!g.alternate&&!I)return S(b),null}else 2*B()-f.renderingStartTime>Hj&&1073741824!==c&&(b.flags|=128,d=!0,Ej(f,!1),b.lanes=4194304);f.isBackwards?(g.sibling=b.child,b.child=g):(c=f.last,null!==c?c.sibling=g:b.child=g,f.last=g)}if(null!==f.tail)return b=f.tail,f.rendering=\nb,f.tail=b.sibling,f.renderingStartTime=B(),b.sibling=null,c=M.current,G(M,d?c&1|2:c&1),b;S(b);return null;case 22:case 23:return Ij(),d=null!==b.memoizedState,null!==a&&null!==a.memoizedState!==d&&(b.flags|=8192),d&&0!==(b.mode&1)?0!==(gj&1073741824)&&(S(b),b.subtreeFlags&6&&(b.flags|=8192)):S(b),null;case 24:return null;case 25:return null}throw Error(p(156,b.tag));}\nfunction Jj(a,b){wg(b);switch(b.tag){case 1:return Zf(b.type)&&$f(),a=b.flags,a&65536?(b.flags=a&-65537|128,b):null;case 3:return Jh(),E(Wf),E(H),Oh(),a=b.flags,0!==(a&65536)&&0===(a&128)?(b.flags=a&-65537|128,b):null;case 5:return Lh(b),null;case 13:E(M);a=b.memoizedState;if(null!==a&&null!==a.dehydrated){if(null===b.alternate)throw Error(p(340));Ig()}a=b.flags;return a&65536?(b.flags=a&-65537|128,b):null;case 19:return E(M),null;case 4:return Jh(),null;case 10:return Rg(b.type._context),null;case 22:case 23:return Ij(),\nnull;case 24:return null;default:return null}}var Kj=!1,U=!1,Lj=\"function\"===typeof WeakSet?WeakSet:Set,V=null;function Mj(a,b){var c=a.ref;if(null!==c)if(\"function\"===typeof c)try{c(null)}catch(d){W(a,b,d)}else c.current=null}function Nj(a,b,c){try{c()}catch(d){W(a,b,d)}}var Oj=!1;\nfunction Pj(a,b){Cf=dd;a=Me();if(Ne(a)){if(\"selectionStart\"in a)var c={start:a.selectionStart,end:a.selectionEnd};else a:{c=(c=a.ownerDocument)&&c.defaultView||window;var d=c.getSelection&&c.getSelection();if(d&&0!==d.rangeCount){c=d.anchorNode;var e=d.anchorOffset,f=d.focusNode;d=d.focusOffset;try{c.nodeType,f.nodeType}catch(F){c=null;break a}var g=0,h=-1,k=-1,l=0,m=0,q=a,r=null;b:for(;;){for(var y;;){q!==c||0!==e&&3!==q.nodeType||(h=g+e);q!==f||0!==d&&3!==q.nodeType||(k=g+d);3===q.nodeType&&(g+=\nq.nodeValue.length);if(null===(y=q.firstChild))break;r=q;q=y}for(;;){if(q===a)break b;r===c&&++l===e&&(h=g);r===f&&++m===d&&(k=g);if(null!==(y=q.nextSibling))break;q=r;r=q.parentNode}q=y}c=-1===h||-1===k?null:{start:h,end:k}}else c=null}c=c||{start:0,end:0}}else c=null;Df={focusedElem:a,selectionRange:c};dd=!1;for(V=b;null!==V;)if(b=V,a=b.child,0!==(b.subtreeFlags&1028)&&null!==a)a.return=b,V=a;else for(;null!==V;){b=V;try{var n=b.alternate;if(0!==(b.flags&1024))switch(b.tag){case 0:case 11:case 15:break;\ncase 1:if(null!==n){var t=n.memoizedProps,J=n.memoizedState,x=b.stateNode,w=x.getSnapshotBeforeUpdate(b.elementType===b.type?t:Lg(b.type,t),J);x.__reactInternalSnapshotBeforeUpdate=w}break;case 3:var u=b.stateNode.containerInfo;1===u.nodeType?u.textContent=\"\":9===u.nodeType&&u.documentElement&&u.removeChild(u.documentElement);break;case 5:case 6:case 4:case 17:break;default:throw Error(p(163));}}catch(F){W(b,b.return,F)}a=b.sibling;if(null!==a){a.return=b.return;V=a;break}V=b.return}n=Oj;Oj=!1;return n}\nfunction Qj(a,b,c){var d=b.updateQueue;d=null!==d?d.lastEffect:null;if(null!==d){var e=d=d.next;do{if((e.tag&a)===a){var f=e.destroy;e.destroy=void 0;void 0!==f&&Nj(b,c,f)}e=e.next}while(e!==d)}}function Rj(a,b){b=b.updateQueue;b=null!==b?b.lastEffect:null;if(null!==b){var c=b=b.next;do{if((c.tag&a)===a){var d=c.create;c.destroy=d()}c=c.next}while(c!==b)}}function Sj(a){var b=a.ref;if(null!==b){var c=a.stateNode;switch(a.tag){case 5:a=c;break;default:a=c}\"function\"===typeof b?b(a):b.current=a}}\nfunction Tj(a){var b=a.alternate;null!==b&&(a.alternate=null,Tj(b));a.child=null;a.deletions=null;a.sibling=null;5===a.tag&&(b=a.stateNode,null!==b&&(delete b[Of],delete b[Pf],delete b[of],delete b[Qf],delete b[Rf]));a.stateNode=null;a.return=null;a.dependencies=null;a.memoizedProps=null;a.memoizedState=null;a.pendingProps=null;a.stateNode=null;a.updateQueue=null}function Uj(a){return 5===a.tag||3===a.tag||4===a.tag}\nfunction Vj(a){a:for(;;){for(;null===a.sibling;){if(null===a.return||Uj(a.return))return null;a=a.return}a.sibling.return=a.return;for(a=a.sibling;5!==a.tag&&6!==a.tag&&18!==a.tag;){if(a.flags&2)continue a;if(null===a.child||4===a.tag)continue a;else a.child.return=a,a=a.child}if(!(a.flags&2))return a.stateNode}}\nfunction Wj(a,b,c){var d=a.tag;if(5===d||6===d)a=a.stateNode,b?8===c.nodeType?c.parentNode.insertBefore(a,b):c.insertBefore(a,b):(8===c.nodeType?(b=c.parentNode,b.insertBefore(a,c)):(b=c,b.appendChild(a)),c=c._reactRootContainer,null!==c&&void 0!==c||null!==b.onclick||(b.onclick=Bf));else if(4!==d&&(a=a.child,null!==a))for(Wj(a,b,c),a=a.sibling;null!==a;)Wj(a,b,c),a=a.sibling}\nfunction Xj(a,b,c){var d=a.tag;if(5===d||6===d)a=a.stateNode,b?c.insertBefore(a,b):c.appendChild(a);else if(4!==d&&(a=a.child,null!==a))for(Xj(a,b,c),a=a.sibling;null!==a;)Xj(a,b,c),a=a.sibling}var X=null,Yj=!1;function Zj(a,b,c){for(c=c.child;null!==c;)ak(a,b,c),c=c.sibling}\nfunction ak(a,b,c){if(lc&&\"function\"===typeof lc.onCommitFiberUnmount)try{lc.onCommitFiberUnmount(kc,c)}catch(h){}switch(c.tag){case 5:U||Mj(c,b);case 6:var d=X,e=Yj;X=null;Zj(a,b,c);X=d;Yj=e;null!==X&&(Yj?(a=X,c=c.stateNode,8===a.nodeType?a.parentNode.removeChild(c):a.removeChild(c)):X.removeChild(c.stateNode));break;case 18:null!==X&&(Yj?(a=X,c=c.stateNode,8===a.nodeType?Kf(a.parentNode,c):1===a.nodeType&&Kf(a,c),bd(a)):Kf(X,c.stateNode));break;case 4:d=X;e=Yj;X=c.stateNode.containerInfo;Yj=!0;\nZj(a,b,c);X=d;Yj=e;break;case 0:case 11:case 14:case 15:if(!U&&(d=c.updateQueue,null!==d&&(d=d.lastEffect,null!==d))){e=d=d.next;do{var f=e,g=f.destroy;f=f.tag;void 0!==g&&(0!==(f&2)?Nj(c,b,g):0!==(f&4)&&Nj(c,b,g));e=e.next}while(e!==d)}Zj(a,b,c);break;case 1:if(!U&&(Mj(c,b),d=c.stateNode,\"function\"===typeof d.componentWillUnmount))try{d.props=c.memoizedProps,d.state=c.memoizedState,d.componentWillUnmount()}catch(h){W(c,b,h)}Zj(a,b,c);break;case 21:Zj(a,b,c);break;case 22:c.mode&1?(U=(d=U)||null!==\nc.memoizedState,Zj(a,b,c),U=d):Zj(a,b,c);break;default:Zj(a,b,c)}}function bk(a){var b=a.updateQueue;if(null!==b){a.updateQueue=null;var c=a.stateNode;null===c&&(c=a.stateNode=new Lj);b.forEach(function(b){var d=ck.bind(null,a,b);c.has(b)||(c.add(b),b.then(d,d))})}}\nfunction dk(a,b){var c=b.deletions;if(null!==c)for(var d=0;d<c.length;d++){var e=c[d];try{var f=a,g=b,h=g;a:for(;null!==h;){switch(h.tag){case 5:X=h.stateNode;Yj=!1;break a;case 3:X=h.stateNode.containerInfo;Yj=!0;break a;case 4:X=h.stateNode.containerInfo;Yj=!0;break a}h=h.return}if(null===X)throw Error(p(160));ak(f,g,e);X=null;Yj=!1;var k=e.alternate;null!==k&&(k.return=null);e.return=null}catch(l){W(e,b,l)}}if(b.subtreeFlags&12854)for(b=b.child;null!==b;)ek(b,a),b=b.sibling}\nfunction ek(a,b){var c=a.alternate,d=a.flags;switch(a.tag){case 0:case 11:case 14:case 15:dk(b,a);fk(a);if(d&4){try{Qj(3,a,a.return),Rj(3,a)}catch(t){W(a,a.return,t)}try{Qj(5,a,a.return)}catch(t){W(a,a.return,t)}}break;case 1:dk(b,a);fk(a);d&512&&null!==c&&Mj(c,c.return);break;case 5:dk(b,a);fk(a);d&512&&null!==c&&Mj(c,c.return);if(a.flags&32){var e=a.stateNode;try{ob(e,\"\")}catch(t){W(a,a.return,t)}}if(d&4&&(e=a.stateNode,null!=e)){var f=a.memoizedProps,g=null!==c?c.memoizedProps:f,h=a.type,k=a.updateQueue;\na.updateQueue=null;if(null!==k)try{\"input\"===h&&\"radio\"===f.type&&null!=f.name&&ab(e,f);vb(h,g);var l=vb(h,f);for(g=0;g<k.length;g+=2){var m=k[g],q=k[g+1];\"style\"===m?sb(e,q):\"dangerouslySetInnerHTML\"===m?nb(e,q):\"children\"===m?ob(e,q):ta(e,m,q,l)}switch(h){case \"input\":bb(e,f);break;case \"textarea\":ib(e,f);break;case \"select\":var r=e._wrapperState.wasMultiple;e._wrapperState.wasMultiple=!!f.multiple;var y=f.value;null!=y?fb(e,!!f.multiple,y,!1):r!==!!f.multiple&&(null!=f.defaultValue?fb(e,!!f.multiple,\nf.defaultValue,!0):fb(e,!!f.multiple,f.multiple?[]:\"\",!1))}e[Pf]=f}catch(t){W(a,a.return,t)}}break;case 6:dk(b,a);fk(a);if(d&4){if(null===a.stateNode)throw Error(p(162));e=a.stateNode;f=a.memoizedProps;try{e.nodeValue=f}catch(t){W(a,a.return,t)}}break;case 3:dk(b,a);fk(a);if(d&4&&null!==c&&c.memoizedState.isDehydrated)try{bd(b.containerInfo)}catch(t){W(a,a.return,t)}break;case 4:dk(b,a);fk(a);break;case 13:dk(b,a);fk(a);e=a.child;e.flags&8192&&(f=null!==e.memoizedState,e.stateNode.isHidden=f,!f||\nnull!==e.alternate&&null!==e.alternate.memoizedState||(gk=B()));d&4&&bk(a);break;case 22:m=null!==c&&null!==c.memoizedState;a.mode&1?(U=(l=U)||m,dk(b,a),U=l):dk(b,a);fk(a);if(d&8192){l=null!==a.memoizedState;if((a.stateNode.isHidden=l)&&!m&&0!==(a.mode&1))for(V=a,m=a.child;null!==m;){for(q=V=m;null!==V;){r=V;y=r.child;switch(r.tag){case 0:case 11:case 14:case 15:Qj(4,r,r.return);break;case 1:Mj(r,r.return);var n=r.stateNode;if(\"function\"===typeof n.componentWillUnmount){d=r;c=r.return;try{b=d,n.props=\nb.memoizedProps,n.state=b.memoizedState,n.componentWillUnmount()}catch(t){W(d,c,t)}}break;case 5:Mj(r,r.return);break;case 22:if(null!==r.memoizedState){hk(q);continue}}null!==y?(y.return=r,V=y):hk(q)}m=m.sibling}a:for(m=null,q=a;;){if(5===q.tag){if(null===m){m=q;try{e=q.stateNode,l?(f=e.style,\"function\"===typeof f.setProperty?f.setProperty(\"display\",\"none\",\"important\"):f.display=\"none\"):(h=q.stateNode,k=q.memoizedProps.style,g=void 0!==k&&null!==k&&k.hasOwnProperty(\"display\")?k.display:null,h.style.display=\nrb(\"display\",g))}catch(t){W(a,a.return,t)}}}else if(6===q.tag){if(null===m)try{q.stateNode.nodeValue=l?\"\":q.memoizedProps}catch(t){W(a,a.return,t)}}else if((22!==q.tag&&23!==q.tag||null===q.memoizedState||q===a)&&null!==q.child){q.child.return=q;q=q.child;continue}if(q===a)break a;for(;null===q.sibling;){if(null===q.return||q.return===a)break a;m===q&&(m=null);q=q.return}m===q&&(m=null);q.sibling.return=q.return;q=q.sibling}}break;case 19:dk(b,a);fk(a);d&4&&bk(a);break;case 21:break;default:dk(b,\na),fk(a)}}function fk(a){var b=a.flags;if(b&2){try{a:{for(var c=a.return;null!==c;){if(Uj(c)){var d=c;break a}c=c.return}throw Error(p(160));}switch(d.tag){case 5:var e=d.stateNode;d.flags&32&&(ob(e,\"\"),d.flags&=-33);var f=Vj(a);Xj(a,f,e);break;case 3:case 4:var g=d.stateNode.containerInfo,h=Vj(a);Wj(a,h,g);break;default:throw Error(p(161));}}catch(k){W(a,a.return,k)}a.flags&=-3}b&4096&&(a.flags&=-4097)}function ik(a,b,c){V=a;jk(a,b,c)}\nfunction jk(a,b,c){for(var d=0!==(a.mode&1);null!==V;){var e=V,f=e.child;if(22===e.tag&&d){var g=null!==e.memoizedState||Kj;if(!g){var h=e.alternate,k=null!==h&&null!==h.memoizedState||U;h=Kj;var l=U;Kj=g;if((U=k)&&!l)for(V=e;null!==V;)g=V,k=g.child,22===g.tag&&null!==g.memoizedState?kk(e):null!==k?(k.return=g,V=k):kk(e);for(;null!==f;)V=f,jk(f,b,c),f=f.sibling;V=e;Kj=h;U=l}lk(a,b,c)}else 0!==(e.subtreeFlags&8772)&&null!==f?(f.return=e,V=f):lk(a,b,c)}}\nfunction lk(a){for(;null!==V;){var b=V;if(0!==(b.flags&8772)){var c=b.alternate;try{if(0!==(b.flags&8772))switch(b.tag){case 0:case 11:case 15:U||Rj(5,b);break;case 1:var d=b.stateNode;if(b.flags&4&&!U)if(null===c)d.componentDidMount();else{var e=b.elementType===b.type?c.memoizedProps:Lg(b.type,c.memoizedProps);d.componentDidUpdate(e,c.memoizedState,d.__reactInternalSnapshotBeforeUpdate)}var f=b.updateQueue;null!==f&&ih(b,f,d);break;case 3:var g=b.updateQueue;if(null!==g){c=null;if(null!==b.child)switch(b.child.tag){case 5:c=\nb.child.stateNode;break;case 1:c=b.child.stateNode}ih(b,g,c)}break;case 5:var h=b.stateNode;if(null===c&&b.flags&4){c=h;var k=b.memoizedProps;switch(b.type){case \"button\":case \"input\":case \"select\":case \"textarea\":k.autoFocus&&c.focus();break;case \"img\":k.src&&(c.src=k.src)}}break;case 6:break;case 4:break;case 12:break;case 13:if(null===b.memoizedState){var l=b.alternate;if(null!==l){var m=l.memoizedState;if(null!==m){var q=m.dehydrated;null!==q&&bd(q)}}}break;case 19:case 17:case 21:case 22:case 23:case 25:break;\ndefault:throw Error(p(163));}U||b.flags&512&&Sj(b)}catch(r){W(b,b.return,r)}}if(b===a){V=null;break}c=b.sibling;if(null!==c){c.return=b.return;V=c;break}V=b.return}}function hk(a){for(;null!==V;){var b=V;if(b===a){V=null;break}var c=b.sibling;if(null!==c){c.return=b.return;V=c;break}V=b.return}}\nfunction kk(a){for(;null!==V;){var b=V;try{switch(b.tag){case 0:case 11:case 15:var c=b.return;try{Rj(4,b)}catch(k){W(b,c,k)}break;case 1:var d=b.stateNode;if(\"function\"===typeof d.componentDidMount){var e=b.return;try{d.componentDidMount()}catch(k){W(b,e,k)}}var f=b.return;try{Sj(b)}catch(k){W(b,f,k)}break;case 5:var g=b.return;try{Sj(b)}catch(k){W(b,g,k)}}}catch(k){W(b,b.return,k)}if(b===a){V=null;break}var h=b.sibling;if(null!==h){h.return=b.return;V=h;break}V=b.return}}\nvar mk=Math.ceil,nk=ua.ReactCurrentDispatcher,ok=ua.ReactCurrentOwner,pk=ua.ReactCurrentBatchConfig,K=0,R=null,Y=null,Z=0,gj=0,fj=Uf(0),T=0,qk=null,hh=0,rk=0,sk=0,tk=null,uk=null,gk=0,Hj=Infinity,vk=null,Pi=!1,Qi=null,Si=null,wk=!1,xk=null,yk=0,zk=0,Ak=null,Bk=-1,Ck=0;function L(){return 0!==(K&6)?B():-1!==Bk?Bk:Bk=B()}\nfunction lh(a){if(0===(a.mode&1))return 1;if(0!==(K&2)&&0!==Z)return Z&-Z;if(null!==Kg.transition)return 0===Ck&&(Ck=yc()),Ck;a=C;if(0!==a)return a;a=window.event;a=void 0===a?16:jd(a.type);return a}function mh(a,b,c,d){if(50<zk)throw zk=0,Ak=null,Error(p(185));Ac(a,c,d);if(0===(K&2)||a!==R)a===R&&(0===(K&2)&&(rk|=c),4===T&&Dk(a,Z)),Ek(a,d),1===c&&0===K&&0===(b.mode&1)&&(Hj=B()+500,fg&&jg())}\nfunction Ek(a,b){var c=a.callbackNode;wc(a,b);var d=uc(a,a===R?Z:0);if(0===d)null!==c&&bc(c),a.callbackNode=null,a.callbackPriority=0;else if(b=d&-d,a.callbackPriority!==b){null!=c&&bc(c);if(1===b)0===a.tag?ig(Fk.bind(null,a)):hg(Fk.bind(null,a)),Jf(function(){0===(K&6)&&jg()}),c=null;else{switch(Dc(d)){case 1:c=fc;break;case 4:c=gc;break;case 16:c=hc;break;case 536870912:c=jc;break;default:c=hc}c=Gk(c,Hk.bind(null,a))}a.callbackPriority=b;a.callbackNode=c}}\nfunction Hk(a,b){Bk=-1;Ck=0;if(0!==(K&6))throw Error(p(327));var c=a.callbackNode;if(Ik()&&a.callbackNode!==c)return null;var d=uc(a,a===R?Z:0);if(0===d)return null;if(0!==(d&30)||0!==(d&a.expiredLanes)||b)b=Jk(a,d);else{b=d;var e=K;K|=2;var f=Kk();if(R!==a||Z!==b)vk=null,Hj=B()+500,Lk(a,b);do try{Mk();break}catch(h){Nk(a,h)}while(1);Qg();nk.current=f;K=e;null!==Y?b=0:(R=null,Z=0,b=T)}if(0!==b){2===b&&(e=xc(a),0!==e&&(d=e,b=Ok(a,e)));if(1===b)throw c=qk,Lk(a,0),Dk(a,d),Ek(a,B()),c;if(6===b)Dk(a,d);\nelse{e=a.current.alternate;if(0===(d&30)&&!Pk(e)&&(b=Jk(a,d),2===b&&(f=xc(a),0!==f&&(d=f,b=Ok(a,f))),1===b))throw c=qk,Lk(a,0),Dk(a,d),Ek(a,B()),c;a.finishedWork=e;a.finishedLanes=d;switch(b){case 0:case 1:throw Error(p(345));case 2:Qk(a,uk,vk);break;case 3:Dk(a,d);if((d&130023424)===d&&(b=gk+500-B(),10<b)){if(0!==uc(a,0))break;e=a.suspendedLanes;if((e&d)!==d){L();a.pingedLanes|=a.suspendedLanes&e;break}a.timeoutHandle=Ff(Qk.bind(null,a,uk,vk),b);break}Qk(a,uk,vk);break;case 4:Dk(a,d);if((d&4194240)===\nd)break;b=a.eventTimes;for(e=-1;0<d;){var g=31-oc(d);f=1<<g;g=b[g];g>e&&(e=g);d&=~f}d=e;d=B()-d;d=(120>d?120:480>d?480:1080>d?1080:1920>d?1920:3E3>d?3E3:4320>d?4320:1960*mk(d/1960))-d;if(10<d){a.timeoutHandle=Ff(Qk.bind(null,a,uk,vk),d);break}Qk(a,uk,vk);break;case 5:Qk(a,uk,vk);break;default:throw Error(p(329));}}}Ek(a,B());return a.callbackNode===c?Hk.bind(null,a):null}\nfunction Ok(a,b){var c=tk;a.current.memoizedState.isDehydrated&&(Lk(a,b).flags|=256);a=Jk(a,b);2!==a&&(b=uk,uk=c,null!==b&&Gj(b));return a}function Gj(a){null===uk?uk=a:uk.push.apply(uk,a)}\nfunction Pk(a){for(var b=a;;){if(b.flags&16384){var c=b.updateQueue;if(null!==c&&(c=c.stores,null!==c))for(var d=0;d<c.length;d++){var e=c[d],f=e.getSnapshot;e=e.value;try{if(!He(f(),e))return!1}catch(g){return!1}}}c=b.child;if(b.subtreeFlags&16384&&null!==c)c.return=b,b=c;else{if(b===a)break;for(;null===b.sibling;){if(null===b.return||b.return===a)return!0;b=b.return}b.sibling.return=b.return;b=b.sibling}}return!0}\nfunction Dk(a,b){b&=~sk;b&=~rk;a.suspendedLanes|=b;a.pingedLanes&=~b;for(a=a.expirationTimes;0<b;){var c=31-oc(b),d=1<<c;a[c]=-1;b&=~d}}function Fk(a){if(0!==(K&6))throw Error(p(327));Ik();var b=uc(a,0);if(0===(b&1))return Ek(a,B()),null;var c=Jk(a,b);if(0!==a.tag&&2===c){var d=xc(a);0!==d&&(b=d,c=Ok(a,d))}if(1===c)throw c=qk,Lk(a,0),Dk(a,b),Ek(a,B()),c;if(6===c)throw Error(p(345));a.finishedWork=a.current.alternate;a.finishedLanes=b;Qk(a,uk,vk);Ek(a,B());return null}\nfunction Rk(a,b){var c=K;K|=1;try{return a(b)}finally{K=c,0===K&&(Hj=B()+500,fg&&jg())}}function Sk(a){null!==xk&&0===xk.tag&&0===(K&6)&&Ik();var b=K;K|=1;var c=pk.transition,d=C;try{if(pk.transition=null,C=1,a)return a()}finally{C=d,pk.transition=c,K=b,0===(K&6)&&jg()}}function Ij(){gj=fj.current;E(fj)}\nfunction Lk(a,b){a.finishedWork=null;a.finishedLanes=0;var c=a.timeoutHandle;-1!==c&&(a.timeoutHandle=-1,Gf(c));if(null!==Y)for(c=Y.return;null!==c;){var d=c;wg(d);switch(d.tag){case 1:d=d.type.childContextTypes;null!==d&&void 0!==d&&$f();break;case 3:Jh();E(Wf);E(H);Oh();break;case 5:Lh(d);break;case 4:Jh();break;case 13:E(M);break;case 19:E(M);break;case 10:Rg(d.type._context);break;case 22:case 23:Ij()}c=c.return}R=a;Y=a=wh(a.current,null);Z=gj=b;T=0;qk=null;sk=rk=hh=0;uk=tk=null;if(null!==Wg){for(b=\n0;b<Wg.length;b++)if(c=Wg[b],d=c.interleaved,null!==d){c.interleaved=null;var e=d.next,f=c.pending;if(null!==f){var g=f.next;f.next=e;d.next=g}c.pending=d}Wg=null}return a}\nfunction Nk(a,b){do{var c=Y;try{Qg();Ph.current=ai;if(Sh){for(var d=N.memoizedState;null!==d;){var e=d.queue;null!==e&&(e.pending=null);d=d.next}Sh=!1}Rh=0;P=O=N=null;Th=!1;Uh=0;ok.current=null;if(null===c||null===c.return){T=1;qk=b;Y=null;break}a:{var f=a,g=c.return,h=c,k=b;b=Z;h.flags|=32768;if(null!==k&&\"object\"===typeof k&&\"function\"===typeof k.then){var l=k,m=h,q=m.tag;if(0===(m.mode&1)&&(0===q||11===q||15===q)){var r=m.alternate;r?(m.updateQueue=r.updateQueue,m.memoizedState=r.memoizedState,\nm.lanes=r.lanes):(m.updateQueue=null,m.memoizedState=null)}var y=Vi(g);if(null!==y){y.flags&=-257;Wi(y,g,h,f,b);y.mode&1&&Ti(f,l,b);b=y;k=l;var n=b.updateQueue;if(null===n){var t=new Set;t.add(k);b.updateQueue=t}else n.add(k);break a}else{if(0===(b&1)){Ti(f,l,b);uj();break a}k=Error(p(426))}}else if(I&&h.mode&1){var J=Vi(g);if(null!==J){0===(J.flags&65536)&&(J.flags|=256);Wi(J,g,h,f,b);Jg(Ki(k,h));break a}}f=k=Ki(k,h);4!==T&&(T=2);null===tk?tk=[f]:tk.push(f);f=g;do{switch(f.tag){case 3:f.flags|=65536;\nb&=-b;f.lanes|=b;var x=Oi(f,k,b);fh(f,x);break a;case 1:h=k;var w=f.type,u=f.stateNode;if(0===(f.flags&128)&&(\"function\"===typeof w.getDerivedStateFromError||null!==u&&\"function\"===typeof u.componentDidCatch&&(null===Si||!Si.has(u)))){f.flags|=65536;b&=-b;f.lanes|=b;var F=Ri(f,h,b);fh(f,F);break a}}f=f.return}while(null!==f)}Tk(c)}catch(na){b=na;Y===c&&null!==c&&(Y=c=c.return);continue}break}while(1)}function Kk(){var a=nk.current;nk.current=ai;return null===a?ai:a}\nfunction uj(){if(0===T||3===T||2===T)T=4;null===R||0===(hh&268435455)&&0===(rk&268435455)||Dk(R,Z)}function Jk(a,b){var c=K;K|=2;var d=Kk();if(R!==a||Z!==b)vk=null,Lk(a,b);do try{Uk();break}catch(e){Nk(a,e)}while(1);Qg();K=c;nk.current=d;if(null!==Y)throw Error(p(261));R=null;Z=0;return T}function Uk(){for(;null!==Y;)Vk(Y)}function Mk(){for(;null!==Y&&!cc();)Vk(Y)}function Vk(a){var b=Wk(a.alternate,a,gj);a.memoizedProps=a.pendingProps;null===b?Tk(a):Y=b;ok.current=null}\nfunction Tk(a){var b=a;do{var c=b.alternate;a=b.return;if(0===(b.flags&32768)){if(c=Fj(c,b,gj),null!==c){Y=c;return}}else{c=Jj(c,b);if(null!==c){c.flags&=32767;Y=c;return}if(null!==a)a.flags|=32768,a.subtreeFlags=0,a.deletions=null;else{T=6;Y=null;return}}b=b.sibling;if(null!==b){Y=b;return}Y=b=a}while(null!==b);0===T&&(T=5)}function Qk(a,b,c){var d=C,e=pk.transition;try{pk.transition=null,C=1,Xk(a,b,c,d)}finally{pk.transition=e,C=d}return null}\nfunction Xk(a,b,c,d){do Ik();while(null!==xk);if(0!==(K&6))throw Error(p(327));c=a.finishedWork;var e=a.finishedLanes;if(null===c)return null;a.finishedWork=null;a.finishedLanes=0;if(c===a.current)throw Error(p(177));a.callbackNode=null;a.callbackPriority=0;var f=c.lanes|c.childLanes;Bc(a,f);a===R&&(Y=R=null,Z=0);0===(c.subtreeFlags&2064)&&0===(c.flags&2064)||wk||(wk=!0,Gk(hc,function(){Ik();return null}));f=0!==(c.flags&15990);if(0!==(c.subtreeFlags&15990)||f){f=pk.transition;pk.transition=null;\nvar g=C;C=1;var h=K;K|=4;ok.current=null;Pj(a,c);ek(c,a);Oe(Df);dd=!!Cf;Df=Cf=null;a.current=c;ik(c,a,e);dc();K=h;C=g;pk.transition=f}else a.current=c;wk&&(wk=!1,xk=a,yk=e);f=a.pendingLanes;0===f&&(Si=null);mc(c.stateNode,d);Ek(a,B());if(null!==b)for(d=a.onRecoverableError,c=0;c<b.length;c++)e=b[c],d(e.value,{componentStack:e.stack,digest:e.digest});if(Pi)throw Pi=!1,a=Qi,Qi=null,a;0!==(yk&1)&&0!==a.tag&&Ik();f=a.pendingLanes;0!==(f&1)?a===Ak?zk++:(zk=0,Ak=a):zk=0;jg();return null}\nfunction Ik(){if(null!==xk){var a=Dc(yk),b=pk.transition,c=C;try{pk.transition=null;C=16>a?16:a;if(null===xk)var d=!1;else{a=xk;xk=null;yk=0;if(0!==(K&6))throw Error(p(331));var e=K;K|=4;for(V=a.current;null!==V;){var f=V,g=f.child;if(0!==(V.flags&16)){var h=f.deletions;if(null!==h){for(var k=0;k<h.length;k++){var l=h[k];for(V=l;null!==V;){var m=V;switch(m.tag){case 0:case 11:case 15:Qj(8,m,f)}var q=m.child;if(null!==q)q.return=m,V=q;else for(;null!==V;){m=V;var r=m.sibling,y=m.return;Tj(m);if(m===\nl){V=null;break}if(null!==r){r.return=y;V=r;break}V=y}}}var n=f.alternate;if(null!==n){var t=n.child;if(null!==t){n.child=null;do{var J=t.sibling;t.sibling=null;t=J}while(null!==t)}}V=f}}if(0!==(f.subtreeFlags&2064)&&null!==g)g.return=f,V=g;else b:for(;null!==V;){f=V;if(0!==(f.flags&2048))switch(f.tag){case 0:case 11:case 15:Qj(9,f,f.return)}var x=f.sibling;if(null!==x){x.return=f.return;V=x;break b}V=f.return}}var w=a.current;for(V=w;null!==V;){g=V;var u=g.child;if(0!==(g.subtreeFlags&2064)&&null!==\nu)u.return=g,V=u;else b:for(g=w;null!==V;){h=V;if(0!==(h.flags&2048))try{switch(h.tag){case 0:case 11:case 15:Rj(9,h)}}catch(na){W(h,h.return,na)}if(h===g){V=null;break b}var F=h.sibling;if(null!==F){F.return=h.return;V=F;break b}V=h.return}}K=e;jg();if(lc&&\"function\"===typeof lc.onPostCommitFiberRoot)try{lc.onPostCommitFiberRoot(kc,a)}catch(na){}d=!0}return d}finally{C=c,pk.transition=b}}return!1}function Yk(a,b,c){b=Ki(c,b);b=Oi(a,b,1);a=dh(a,b,1);b=L();null!==a&&(Ac(a,1,b),Ek(a,b))}\nfunction W(a,b,c){if(3===a.tag)Yk(a,a,c);else for(;null!==b;){if(3===b.tag){Yk(b,a,c);break}else if(1===b.tag){var d=b.stateNode;if(\"function\"===typeof b.type.getDerivedStateFromError||\"function\"===typeof d.componentDidCatch&&(null===Si||!Si.has(d))){a=Ki(c,a);a=Ri(b,a,1);b=dh(b,a,1);a=L();null!==b&&(Ac(b,1,a),Ek(b,a));break}}b=b.return}}\nfunction Ui(a,b,c){var d=a.pingCache;null!==d&&d.delete(b);b=L();a.pingedLanes|=a.suspendedLanes&c;R===a&&(Z&c)===c&&(4===T||3===T&&(Z&130023424)===Z&&500>B()-gk?Lk(a,0):sk|=c);Ek(a,b)}function Zk(a,b){0===b&&(0===(a.mode&1)?b=1:(b=sc,sc<<=1,0===(sc&130023424)&&(sc=4194304)));var c=L();a=Zg(a,b);null!==a&&(Ac(a,b,c),Ek(a,c))}function vj(a){var b=a.memoizedState,c=0;null!==b&&(c=b.retryLane);Zk(a,c)}\nfunction ck(a,b){var c=0;switch(a.tag){case 13:var d=a.stateNode;var e=a.memoizedState;null!==e&&(c=e.retryLane);break;case 19:d=a.stateNode;break;default:throw Error(p(314));}null!==d&&d.delete(b);Zk(a,c)}var Wk;\nWk=function(a,b,c){if(null!==a)if(a.memoizedProps!==b.pendingProps||Wf.current)Ug=!0;else{if(0===(a.lanes&c)&&0===(b.flags&128))return Ug=!1,zj(a,b,c);Ug=0!==(a.flags&131072)?!0:!1}else Ug=!1,I&&0!==(b.flags&1048576)&&ug(b,ng,b.index);b.lanes=0;switch(b.tag){case 2:var d=b.type;jj(a,b);a=b.pendingProps;var e=Yf(b,H.current);Tg(b,c);e=Xh(null,b,d,a,e,c);var f=bi();b.flags|=1;\"object\"===typeof e&&null!==e&&\"function\"===typeof e.render&&void 0===e.$$typeof?(b.tag=1,b.memoizedState=null,b.updateQueue=\nnull,Zf(d)?(f=!0,cg(b)):f=!1,b.memoizedState=null!==e.state&&void 0!==e.state?e.state:null,ah(b),e.updater=nh,b.stateNode=e,e._reactInternals=b,rh(b,d,a,c),b=kj(null,b,d,!0,f,c)):(b.tag=0,I&&f&&vg(b),Yi(null,b,e,c),b=b.child);return b;case 16:d=b.elementType;a:{jj(a,b);a=b.pendingProps;e=d._init;d=e(d._payload);b.type=d;e=b.tag=$k(d);a=Lg(d,a);switch(e){case 0:b=dj(null,b,d,a,c);break a;case 1:b=ij(null,b,d,a,c);break a;case 11:b=Zi(null,b,d,a,c);break a;case 14:b=aj(null,b,d,Lg(d.type,a),c);break a}throw Error(p(306,\nd,\"\"));}return b;case 0:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:Lg(d,e),dj(a,b,d,e,c);case 1:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:Lg(d,e),ij(a,b,d,e,c);case 3:a:{lj(b);if(null===a)throw Error(p(387));d=b.pendingProps;f=b.memoizedState;e=f.element;bh(a,b);gh(b,d,null,c);var g=b.memoizedState;d=g.element;if(f.isDehydrated)if(f={element:d,isDehydrated:!1,cache:g.cache,pendingSuspenseBoundaries:g.pendingSuspenseBoundaries,transitions:g.transitions},b.updateQueue.baseState=\nf,b.memoizedState=f,b.flags&256){e=Ki(Error(p(423)),b);b=mj(a,b,d,c,e);break a}else if(d!==e){e=Ki(Error(p(424)),b);b=mj(a,b,d,c,e);break a}else for(yg=Lf(b.stateNode.containerInfo.firstChild),xg=b,I=!0,zg=null,c=Ch(b,null,d,c),b.child=c;c;)c.flags=c.flags&-3|4096,c=c.sibling;else{Ig();if(d===e){b=$i(a,b,c);break a}Yi(a,b,d,c)}b=b.child}return b;case 5:return Kh(b),null===a&&Eg(b),d=b.type,e=b.pendingProps,f=null!==a?a.memoizedProps:null,g=e.children,Ef(d,e)?g=null:null!==f&&Ef(d,f)&&(b.flags|=32),\nhj(a,b),Yi(a,b,g,c),b.child;case 6:return null===a&&Eg(b),null;case 13:return pj(a,b,c);case 4:return Ih(b,b.stateNode.containerInfo),d=b.pendingProps,null===a?b.child=Bh(b,null,d,c):Yi(a,b,d,c),b.child;case 11:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:Lg(d,e),Zi(a,b,d,e,c);case 7:return Yi(a,b,b.pendingProps,c),b.child;case 8:return Yi(a,b,b.pendingProps.children,c),b.child;case 12:return Yi(a,b,b.pendingProps.children,c),b.child;case 10:a:{d=b.type._context;e=b.pendingProps;f=b.memoizedProps;\ng=e.value;G(Mg,d._currentValue);d._currentValue=g;if(null!==f)if(He(f.value,g)){if(f.children===e.children&&!Wf.current){b=$i(a,b,c);break a}}else for(f=b.child,null!==f&&(f.return=b);null!==f;){var h=f.dependencies;if(null!==h){g=f.child;for(var k=h.firstContext;null!==k;){if(k.context===d){if(1===f.tag){k=ch(-1,c&-c);k.tag=2;var l=f.updateQueue;if(null!==l){l=l.shared;var m=l.pending;null===m?k.next=k:(k.next=m.next,m.next=k);l.pending=k}}f.lanes|=c;k=f.alternate;null!==k&&(k.lanes|=c);Sg(f.return,\nc,b);h.lanes|=c;break}k=k.next}}else if(10===f.tag)g=f.type===b.type?null:f.child;else if(18===f.tag){g=f.return;if(null===g)throw Error(p(341));g.lanes|=c;h=g.alternate;null!==h&&(h.lanes|=c);Sg(g,c,b);g=f.sibling}else g=f.child;if(null!==g)g.return=f;else for(g=f;null!==g;){if(g===b){g=null;break}f=g.sibling;if(null!==f){f.return=g.return;g=f;break}g=g.return}f=g}Yi(a,b,e.children,c);b=b.child}return b;case 9:return e=b.type,d=b.pendingProps.children,Tg(b,c),e=Vg(e),d=d(e),b.flags|=1,Yi(a,b,d,c),\nb.child;case 14:return d=b.type,e=Lg(d,b.pendingProps),e=Lg(d.type,e),aj(a,b,d,e,c);case 15:return cj(a,b,b.type,b.pendingProps,c);case 17:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:Lg(d,e),jj(a,b),b.tag=1,Zf(d)?(a=!0,cg(b)):a=!1,Tg(b,c),ph(b,d,e),rh(b,d,e,c),kj(null,b,d,!0,a,c);case 19:return yj(a,b,c);case 22:return ej(a,b,c)}throw Error(p(156,b.tag));};function Gk(a,b){return ac(a,b)}\nfunction al(a,b,c,d){this.tag=a;this.key=c;this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null;this.index=0;this.ref=null;this.pendingProps=b;this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null;this.mode=d;this.subtreeFlags=this.flags=0;this.deletions=null;this.childLanes=this.lanes=0;this.alternate=null}function Bg(a,b,c,d){return new al(a,b,c,d)}function bj(a){a=a.prototype;return!(!a||!a.isReactComponent)}\nfunction $k(a){if(\"function\"===typeof a)return bj(a)?1:0;if(void 0!==a&&null!==a){a=a.$$typeof;if(a===Da)return 11;if(a===Ga)return 14}return 2}\nfunction wh(a,b){var c=a.alternate;null===c?(c=Bg(a.tag,b,a.key,a.mode),c.elementType=a.elementType,c.type=a.type,c.stateNode=a.stateNode,c.alternate=a,a.alternate=c):(c.pendingProps=b,c.type=a.type,c.flags=0,c.subtreeFlags=0,c.deletions=null);c.flags=a.flags&14680064;c.childLanes=a.childLanes;c.lanes=a.lanes;c.child=a.child;c.memoizedProps=a.memoizedProps;c.memoizedState=a.memoizedState;c.updateQueue=a.updateQueue;b=a.dependencies;c.dependencies=null===b?null:{lanes:b.lanes,firstContext:b.firstContext};\nc.sibling=a.sibling;c.index=a.index;c.ref=a.ref;return c}\nfunction yh(a,b,c,d,e,f){var g=2;d=a;if(\"function\"===typeof a)bj(a)&&(g=1);else if(\"string\"===typeof a)g=5;else a:switch(a){case ya:return Ah(c.children,e,f,b);case za:g=8;e|=8;break;case Aa:return a=Bg(12,c,b,e|2),a.elementType=Aa,a.lanes=f,a;case Ea:return a=Bg(13,c,b,e),a.elementType=Ea,a.lanes=f,a;case Fa:return a=Bg(19,c,b,e),a.elementType=Fa,a.lanes=f,a;case Ia:return qj(c,e,f,b);default:if(\"object\"===typeof a&&null!==a)switch(a.$$typeof){case Ba:g=10;break a;case Ca:g=9;break a;case Da:g=11;\nbreak a;case Ga:g=14;break a;case Ha:g=16;d=null;break a}throw Error(p(130,null==a?a:typeof a,\"\"));}b=Bg(g,c,b,e);b.elementType=a;b.type=d;b.lanes=f;return b}function Ah(a,b,c,d){a=Bg(7,a,d,b);a.lanes=c;return a}function qj(a,b,c,d){a=Bg(22,a,d,b);a.elementType=Ia;a.lanes=c;a.stateNode={isHidden:!1};return a}function xh(a,b,c){a=Bg(6,a,null,b);a.lanes=c;return a}\nfunction zh(a,b,c){b=Bg(4,null!==a.children?a.children:[],a.key,b);b.lanes=c;b.stateNode={containerInfo:a.containerInfo,pendingChildren:null,implementation:a.implementation};return b}\nfunction bl(a,b,c,d,e){this.tag=b;this.containerInfo=a;this.finishedWork=this.pingCache=this.current=this.pendingChildren=null;this.timeoutHandle=-1;this.callbackNode=this.pendingContext=this.context=null;this.callbackPriority=0;this.eventTimes=zc(0);this.expirationTimes=zc(-1);this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0;this.entanglements=zc(0);this.identifierPrefix=d;this.onRecoverableError=e;this.mutableSourceEagerHydrationData=\nnull}function cl(a,b,c,d,e,f,g,h,k){a=new bl(a,b,c,h,k);1===b?(b=1,!0===f&&(b|=8)):b=0;f=Bg(3,null,null,b);a.current=f;f.stateNode=a;f.memoizedState={element:d,isDehydrated:c,cache:null,transitions:null,pendingSuspenseBoundaries:null};ah(f);return a}function dl(a,b,c){var d=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:wa,key:null==d?null:\"\"+d,children:a,containerInfo:b,implementation:c}}\nfunction el(a){if(!a)return Vf;a=a._reactInternals;a:{if(Vb(a)!==a||1!==a.tag)throw Error(p(170));var b=a;do{switch(b.tag){case 3:b=b.stateNode.context;break a;case 1:if(Zf(b.type)){b=b.stateNode.__reactInternalMemoizedMergedChildContext;break a}}b=b.return}while(null!==b);throw Error(p(171));}if(1===a.tag){var c=a.type;if(Zf(c))return bg(a,c,b)}return b}\nfunction fl(a,b,c,d,e,f,g,h,k){a=cl(c,d,!0,a,e,f,g,h,k);a.context=el(null);c=a.current;d=L();e=lh(c);f=ch(d,e);f.callback=void 0!==b&&null!==b?b:null;dh(c,f,e);a.current.lanes=e;Ac(a,e,d);Ek(a,d);return a}function gl(a,b,c,d){var e=b.current,f=L(),g=lh(e);c=el(c);null===b.context?b.context=c:b.pendingContext=c;b=ch(f,g);b.payload={element:a};d=void 0===d?null:d;null!==d&&(b.callback=d);a=dh(e,b,g);null!==a&&(mh(a,e,g,f),eh(a,e,g));return g}\nfunction hl(a){a=a.current;if(!a.child)return null;switch(a.child.tag){case 5:return a.child.stateNode;default:return a.child.stateNode}}function il(a,b){a=a.memoizedState;if(null!==a&&null!==a.dehydrated){var c=a.retryLane;a.retryLane=0!==c&&c<b?c:b}}function jl(a,b){il(a,b);(a=a.alternate)&&il(a,b)}function kl(){return null}var ll=\"function\"===typeof reportError?reportError:function(a){console.error(a)};function ml(a){this._internalRoot=a}\nnl.prototype.render=ml.prototype.render=function(a){var b=this._internalRoot;if(null===b)throw Error(p(409));gl(a,b,null,null)};nl.prototype.unmount=ml.prototype.unmount=function(){var a=this._internalRoot;if(null!==a){this._internalRoot=null;var b=a.containerInfo;Sk(function(){gl(null,a,null,null)});b[uf]=null}};function nl(a){this._internalRoot=a}\nnl.prototype.unstable_scheduleHydration=function(a){if(a){var b=Hc();a={blockedOn:null,target:a,priority:b};for(var c=0;c<Qc.length&&0!==b&&b<Qc[c].priority;c++);Qc.splice(c,0,a);0===c&&Vc(a)}};function ol(a){return!(!a||1!==a.nodeType&&9!==a.nodeType&&11!==a.nodeType)}function pl(a){return!(!a||1!==a.nodeType&&9!==a.nodeType&&11!==a.nodeType&&(8!==a.nodeType||\" react-mount-point-unstable \"!==a.nodeValue))}function ql(){}\nfunction rl(a,b,c,d,e){if(e){if(\"function\"===typeof d){var f=d;d=function(){var a=hl(g);f.call(a)}}var g=fl(b,d,a,0,null,!1,!1,\"\",ql);a._reactRootContainer=g;a[uf]=g.current;sf(8===a.nodeType?a.parentNode:a);Sk();return g}for(;e=a.lastChild;)a.removeChild(e);if(\"function\"===typeof d){var h=d;d=function(){var a=hl(k);h.call(a)}}var k=cl(a,0,!1,null,null,!1,!1,\"\",ql);a._reactRootContainer=k;a[uf]=k.current;sf(8===a.nodeType?a.parentNode:a);Sk(function(){gl(b,k,c,d)});return k}\nfunction sl(a,b,c,d,e){var f=c._reactRootContainer;if(f){var g=f;if(\"function\"===typeof e){var h=e;e=function(){var a=hl(g);h.call(a)}}gl(b,g,a,e)}else g=rl(c,b,a,e,d);return hl(g)}Ec=function(a){switch(a.tag){case 3:var b=a.stateNode;if(b.current.memoizedState.isDehydrated){var c=tc(b.pendingLanes);0!==c&&(Cc(b,c|1),Ek(b,B()),0===(K&6)&&(Hj=B()+500,jg()))}break;case 13:Sk(function(){var b=Zg(a,1);if(null!==b){var c=L();mh(b,a,1,c)}}),jl(a,1)}};\nFc=function(a){if(13===a.tag){var b=Zg(a,134217728);if(null!==b){var c=L();mh(b,a,134217728,c)}jl(a,134217728)}};Gc=function(a){if(13===a.tag){var b=lh(a),c=Zg(a,b);if(null!==c){var d=L();mh(c,a,b,d)}jl(a,b)}};Hc=function(){return C};Ic=function(a,b){var c=C;try{return C=a,b()}finally{C=c}};\nyb=function(a,b,c){switch(b){case \"input\":bb(a,c);b=c.name;if(\"radio\"===c.type&&null!=b){for(c=a;c.parentNode;)c=c.parentNode;c=c.querySelectorAll(\"input[name=\"+JSON.stringify(\"\"+b)+'][type=\"radio\"]');for(b=0;b<c.length;b++){var d=c[b];if(d!==a&&d.form===a.form){var e=Db(d);if(!e)throw Error(p(90));Wa(d);bb(d,e)}}}break;case \"textarea\":ib(a,c);break;case \"select\":b=c.value,null!=b&&fb(a,!!c.multiple,b,!1)}};Gb=Rk;Hb=Sk;\nvar tl={usingClientEntryPoint:!1,Events:[Cb,ue,Db,Eb,Fb,Rk]},ul={findFiberByHostInstance:Wc,bundleType:0,version:\"18.2.0\",rendererPackageName:\"react-dom\"};\nvar vl={bundleType:ul.bundleType,version:ul.version,rendererPackageName:ul.rendererPackageName,rendererConfig:ul.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:ua.ReactCurrentDispatcher,findHostInstanceByFiber:function(a){a=Zb(a);return null===a?null:a.stateNode},findFiberByHostInstance:ul.findFiberByHostInstance||\nkl,findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:\"18.2.0-next-9e3b772b8-20220608\"};if(\"undefined\"!==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var wl=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!wl.isDisabled&&wl.supportsFiber)try{kc=wl.inject(vl),lc=wl}catch(a){}}exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=tl;\nexports.createPortal=function(a,b){var c=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!ol(b))throw Error(p(200));return dl(a,b,null,c)};exports.createRoot=function(a,b){if(!ol(a))throw Error(p(299));var c=!1,d=\"\",e=ll;null!==b&&void 0!==b&&(!0===b.unstable_strictMode&&(c=!0),void 0!==b.identifierPrefix&&(d=b.identifierPrefix),void 0!==b.onRecoverableError&&(e=b.onRecoverableError));b=cl(a,1,!1,null,null,c,!1,d,e);a[uf]=b.current;sf(8===a.nodeType?a.parentNode:a);return new ml(b)};\nexports.findDOMNode=function(a){if(null==a)return null;if(1===a.nodeType)return a;var b=a._reactInternals;if(void 0===b){if(\"function\"===typeof a.render)throw Error(p(188));a=Object.keys(a).join(\",\");throw Error(p(268,a));}a=Zb(b);a=null===a?null:a.stateNode;return a};exports.flushSync=function(a){return Sk(a)};exports.hydrate=function(a,b,c){if(!pl(b))throw Error(p(200));return sl(null,a,b,!0,c)};\nexports.hydrateRoot=function(a,b,c){if(!ol(a))throw Error(p(405));var d=null!=c&&c.hydratedSources||null,e=!1,f=\"\",g=ll;null!==c&&void 0!==c&&(!0===c.unstable_strictMode&&(e=!0),void 0!==c.identifierPrefix&&(f=c.identifierPrefix),void 0!==c.onRecoverableError&&(g=c.onRecoverableError));b=fl(b,null,a,1,null!=c?c:null,e,!1,f,g);a[uf]=b.current;sf(a);if(d)for(a=0;a<d.length;a++)c=d[a],e=c._getVersion,e=e(c._source),null==b.mutableSourceEagerHydrationData?b.mutableSourceEagerHydrationData=[c,e]:b.mutableSourceEagerHydrationData.push(c,\ne);return new nl(b)};exports.render=function(a,b,c){if(!pl(b))throw Error(p(200));return sl(null,a,b,!1,c)};exports.unmountComponentAtNode=function(a){if(!pl(a))throw Error(p(40));return a._reactRootContainer?(Sk(function(){sl(null,null,a,!1,function(){a._reactRootContainer=null;a[uf]=null})}),!0):!1};exports.unstable_batchedUpdates=Rk;\nexports.unstable_renderSubtreeIntoContainer=function(a,b,c,d){if(!pl(c))throw Error(p(200));if(null==a||void 0===a._reactInternals)throw Error(p(38));return sl(a,b,c,!1,d)};exports.version=\"18.2.0-next-9e3b772b8-20220608\";\n","'use strict';\n\nvar m = require('react-dom');\nif (process.env.NODE_ENV === 'production') {\n  exports.createRoot = m.createRoot;\n  exports.hydrateRoot = m.hydrateRoot;\n} else {\n  var i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n  exports.createRoot = function(c, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.createRoot(c, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n  exports.hydrateRoot = function(c, h, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.hydrateRoot(c, h, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n}\n","'use strict';\n\nfunction checkDCE() {\n  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\n  if (\n    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' ||\n    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function'\n  ) {\n    return;\n  }\n  if (process.env.NODE_ENV !== 'production') {\n    // This branch is unreachable because this function is only called\n    // in production, but the condition is true only in development.\n    // Therefore if the branch is still here, dead code elimination wasn't\n    // properly applied.\n    // Don't change the message. React DevTools relies on it. Also make sure\n    // this message doesn't occur elsewhere in this function, or it will cause\n    // a false positive.\n    throw new Error('^_^');\n  }\n  try {\n    // Verify that the code above has been dead code eliminated (DCE'd).\n    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);\n  } catch (err) {\n    // DevTools shouldn't crash React, no matter what.\n    // We should still report in case we break this code.\n    console.error(err);\n  }\n}\n\nif (process.env.NODE_ENV === 'production') {\n  // DCE check should happen before ReactDOM bundle executes so that\n  // DevTools can report bad minification during injection.\n  checkDCE();\n  module.exports = require('./cjs/react-dom.production.min.js');\n} else {\n  module.exports = require('./cjs/react-dom.development.js');\n}\n","/**\n * @license React\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var f=require(\"react\"),k=Symbol.for(\"react.element\"),l=Symbol.for(\"react.fragment\"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};\nfunction q(c,a,g){var b,d={},e=null,h=null;void 0!==g&&(e=\"\"+g);void 0!==a.key&&(e=\"\"+a.key);void 0!==a.ref&&(h=a.ref);for(b in a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}exports.Fragment=l;exports.jsx=q;exports.jsxs=q;\n","/**\n * @license React\n * react.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var l=Symbol.for(\"react.element\"),n=Symbol.for(\"react.portal\"),p=Symbol.for(\"react.fragment\"),q=Symbol.for(\"react.strict_mode\"),r=Symbol.for(\"react.profiler\"),t=Symbol.for(\"react.provider\"),u=Symbol.for(\"react.context\"),v=Symbol.for(\"react.forward_ref\"),w=Symbol.for(\"react.suspense\"),x=Symbol.for(\"react.memo\"),y=Symbol.for(\"react.lazy\"),z=Symbol.iterator;function A(a){if(null===a||\"object\"!==typeof a)return null;a=z&&a[z]||a[\"@@iterator\"];return\"function\"===typeof a?a:null}\nvar B={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},C=Object.assign,D={};function E(a,b,e){this.props=a;this.context=b;this.refs=D;this.updater=e||B}E.prototype.isReactComponent={};\nE.prototype.setState=function(a,b){if(\"object\"!==typeof a&&\"function\"!==typeof a&&null!=a)throw Error(\"setState(...): takes an object of state variables to update or a function which returns an object of state variables.\");this.updater.enqueueSetState(this,a,b,\"setState\")};E.prototype.forceUpdate=function(a){this.updater.enqueueForceUpdate(this,a,\"forceUpdate\")};function F(){}F.prototype=E.prototype;function G(a,b,e){this.props=a;this.context=b;this.refs=D;this.updater=e||B}var H=G.prototype=new F;\nH.constructor=G;C(H,E.prototype);H.isPureReactComponent=!0;var I=Array.isArray,J=Object.prototype.hasOwnProperty,K={current:null},L={key:!0,ref:!0,__self:!0,__source:!0};\nfunction M(a,b,e){var d,c={},k=null,h=null;if(null!=b)for(d in void 0!==b.ref&&(h=b.ref),void 0!==b.key&&(k=\"\"+b.key),b)J.call(b,d)&&!L.hasOwnProperty(d)&&(c[d]=b[d]);var g=arguments.length-2;if(1===g)c.children=e;else if(1<g){for(var f=Array(g),m=0;m<g;m++)f[m]=arguments[m+2];c.children=f}if(a&&a.defaultProps)for(d in g=a.defaultProps,g)void 0===c[d]&&(c[d]=g[d]);return{$$typeof:l,type:a,key:k,ref:h,props:c,_owner:K.current}}\nfunction N(a,b){return{$$typeof:l,type:a.type,key:b,ref:a.ref,props:a.props,_owner:a._owner}}function O(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===l}function escape(a){var b={\"=\":\"=0\",\":\":\"=2\"};return\"$\"+a.replace(/[=:]/g,function(a){return b[a]})}var P=/\\/+/g;function Q(a,b){return\"object\"===typeof a&&null!==a&&null!=a.key?escape(\"\"+a.key):b.toString(36)}\nfunction R(a,b,e,d,c){var k=typeof a;if(\"undefined\"===k||\"boolean\"===k)a=null;var h=!1;if(null===a)h=!0;else switch(k){case \"string\":case \"number\":h=!0;break;case \"object\":switch(a.$$typeof){case l:case n:h=!0}}if(h)return h=a,c=c(h),a=\"\"===d?\".\"+Q(h,0):d,I(c)?(e=\"\",null!=a&&(e=a.replace(P,\"$&/\")+\"/\"),R(c,b,e,\"\",function(a){return a})):null!=c&&(O(c)&&(c=N(c,e+(!c.key||h&&h.key===c.key?\"\":(\"\"+c.key).replace(P,\"$&/\")+\"/\")+a)),b.push(c)),1;h=0;d=\"\"===d?\".\":d+\":\";if(I(a))for(var g=0;g<a.length;g++){k=\na[g];var f=d+Q(k,g);h+=R(k,b,e,f,c)}else if(f=A(a),\"function\"===typeof f)for(a=f.call(a),g=0;!(k=a.next()).done;)k=k.value,f=d+Q(k,g++),h+=R(k,b,e,f,c);else if(\"object\"===k)throw b=String(a),Error(\"Objects are not valid as a React child (found: \"+(\"[object Object]\"===b?\"object with keys {\"+Object.keys(a).join(\", \")+\"}\":b)+\"). If you meant to render a collection of children, use an array instead.\");return h}\nfunction S(a,b,e){if(null==a)return a;var d=[],c=0;R(a,d,\"\",\"\",function(a){return b.call(e,a,c++)});return d}function T(a){if(-1===a._status){var b=a._result;b=b();b.then(function(b){if(0===a._status||-1===a._status)a._status=1,a._result=b},function(b){if(0===a._status||-1===a._status)a._status=2,a._result=b});-1===a._status&&(a._status=0,a._result=b)}if(1===a._status)return a._result.default;throw a._result;}\nvar U={current:null},V={transition:null},W={ReactCurrentDispatcher:U,ReactCurrentBatchConfig:V,ReactCurrentOwner:K};exports.Children={map:S,forEach:function(a,b,e){S(a,function(){b.apply(this,arguments)},e)},count:function(a){var b=0;S(a,function(){b++});return b},toArray:function(a){return S(a,function(a){return a})||[]},only:function(a){if(!O(a))throw Error(\"React.Children.only expected to receive a single React element child.\");return a}};exports.Component=E;exports.Fragment=p;\nexports.Profiler=r;exports.PureComponent=G;exports.StrictMode=q;exports.Suspense=w;exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=W;\nexports.cloneElement=function(a,b,e){if(null===a||void 0===a)throw Error(\"React.cloneElement(...): The argument must be a React element, but you passed \"+a+\".\");var d=C({},a.props),c=a.key,k=a.ref,h=a._owner;if(null!=b){void 0!==b.ref&&(k=b.ref,h=K.current);void 0!==b.key&&(c=\"\"+b.key);if(a.type&&a.type.defaultProps)var g=a.type.defaultProps;for(f in b)J.call(b,f)&&!L.hasOwnProperty(f)&&(d[f]=void 0===b[f]&&void 0!==g?g[f]:b[f])}var f=arguments.length-2;if(1===f)d.children=e;else if(1<f){g=Array(f);\nfor(var m=0;m<f;m++)g[m]=arguments[m+2];d.children=g}return{$$typeof:l,type:a.type,key:c,ref:k,props:d,_owner:h}};exports.createContext=function(a){a={$$typeof:u,_currentValue:a,_currentValue2:a,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null};a.Provider={$$typeof:t,_context:a};return a.Consumer=a};exports.createElement=M;exports.createFactory=function(a){var b=M.bind(null,a);b.type=a;return b};exports.createRef=function(){return{current:null}};\nexports.forwardRef=function(a){return{$$typeof:v,render:a}};exports.isValidElement=O;exports.lazy=function(a){return{$$typeof:y,_payload:{_status:-1,_result:a},_init:T}};exports.memo=function(a,b){return{$$typeof:x,type:a,compare:void 0===b?null:b}};exports.startTransition=function(a){var b=V.transition;V.transition={};try{a()}finally{V.transition=b}};exports.unstable_act=function(){throw Error(\"act(...) is not supported in production builds of React.\");};\nexports.useCallback=function(a,b){return U.current.useCallback(a,b)};exports.useContext=function(a){return U.current.useContext(a)};exports.useDebugValue=function(){};exports.useDeferredValue=function(a){return U.current.useDeferredValue(a)};exports.useEffect=function(a,b){return U.current.useEffect(a,b)};exports.useId=function(){return U.current.useId()};exports.useImperativeHandle=function(a,b,e){return U.current.useImperativeHandle(a,b,e)};\nexports.useInsertionEffect=function(a,b){return U.current.useInsertionEffect(a,b)};exports.useLayoutEffect=function(a,b){return U.current.useLayoutEffect(a,b)};exports.useMemo=function(a,b){return U.current.useMemo(a,b)};exports.useReducer=function(a,b,e){return U.current.useReducer(a,b,e)};exports.useRef=function(a){return U.current.useRef(a)};exports.useState=function(a){return U.current.useState(a)};exports.useSyncExternalStore=function(a,b,e){return U.current.useSyncExternalStore(a,b,e)};\nexports.useTransition=function(){return U.current.useTransition()};exports.version=\"18.2.0\";\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react.production.min.js');\n} else {\n  module.exports = require('./cjs/react.development.js');\n}\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.min.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n","/**\n * @license React\n * scheduler.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';function f(a,b){var c=a.length;a.push(b);a:for(;0<c;){var d=c-1>>>1,e=a[d];if(0<g(e,b))a[d]=b,a[c]=e,c=d;else break a}}function h(a){return 0===a.length?null:a[0]}function k(a){if(0===a.length)return null;var b=a[0],c=a.pop();if(c!==b){a[0]=c;a:for(var d=0,e=a.length,w=e>>>1;d<w;){var m=2*(d+1)-1,C=a[m],n=m+1,x=a[n];if(0>g(C,c))n<e&&0>g(x,C)?(a[d]=x,a[n]=c,d=n):(a[d]=C,a[m]=c,d=m);else if(n<e&&0>g(x,c))a[d]=x,a[n]=c,d=n;else break a}}return b}\nfunction g(a,b){var c=a.sortIndex-b.sortIndex;return 0!==c?c:a.id-b.id}if(\"object\"===typeof performance&&\"function\"===typeof performance.now){var l=performance;exports.unstable_now=function(){return l.now()}}else{var p=Date,q=p.now();exports.unstable_now=function(){return p.now()-q}}var r=[],t=[],u=1,v=null,y=3,z=!1,A=!1,B=!1,D=\"function\"===typeof setTimeout?setTimeout:null,E=\"function\"===typeof clearTimeout?clearTimeout:null,F=\"undefined\"!==typeof setImmediate?setImmediate:null;\n\"undefined\"!==typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);function G(a){for(var b=h(t);null!==b;){if(null===b.callback)k(t);else if(b.startTime<=a)k(t),b.sortIndex=b.expirationTime,f(r,b);else break;b=h(t)}}function H(a){B=!1;G(a);if(!A)if(null!==h(r))A=!0,I(J);else{var b=h(t);null!==b&&K(H,b.startTime-a)}}\nfunction J(a,b){A=!1;B&&(B=!1,E(L),L=-1);z=!0;var c=y;try{G(b);for(v=h(r);null!==v&&(!(v.expirationTime>b)||a&&!M());){var d=v.callback;if(\"function\"===typeof d){v.callback=null;y=v.priorityLevel;var e=d(v.expirationTime<=b);b=exports.unstable_now();\"function\"===typeof e?v.callback=e:v===h(r)&&k(r);G(b)}else k(r);v=h(r)}if(null!==v)var w=!0;else{var m=h(t);null!==m&&K(H,m.startTime-b);w=!1}return w}finally{v=null,y=c,z=!1}}var N=!1,O=null,L=-1,P=5,Q=-1;\nfunction M(){return exports.unstable_now()-Q<P?!1:!0}function R(){if(null!==O){var a=exports.unstable_now();Q=a;var b=!0;try{b=O(!0,a)}finally{b?S():(N=!1,O=null)}}else N=!1}var S;if(\"function\"===typeof F)S=function(){F(R)};else if(\"undefined\"!==typeof MessageChannel){var T=new MessageChannel,U=T.port2;T.port1.onmessage=R;S=function(){U.postMessage(null)}}else S=function(){D(R,0)};function I(a){O=a;N||(N=!0,S())}function K(a,b){L=D(function(){a(exports.unstable_now())},b)}\nexports.unstable_IdlePriority=5;exports.unstable_ImmediatePriority=1;exports.unstable_LowPriority=4;exports.unstable_NormalPriority=3;exports.unstable_Profiling=null;exports.unstable_UserBlockingPriority=2;exports.unstable_cancelCallback=function(a){a.callback=null};exports.unstable_continueExecution=function(){A||z||(A=!0,I(J))};\nexports.unstable_forceFrameRate=function(a){0>a||125<a?console.error(\"forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported\"):P=0<a?Math.floor(1E3/a):5};exports.unstable_getCurrentPriorityLevel=function(){return y};exports.unstable_getFirstCallbackNode=function(){return h(r)};exports.unstable_next=function(a){switch(y){case 1:case 2:case 3:var b=3;break;default:b=y}var c=y;y=b;try{return a()}finally{y=c}};exports.unstable_pauseExecution=function(){};\nexports.unstable_requestPaint=function(){};exports.unstable_runWithPriority=function(a,b){switch(a){case 1:case 2:case 3:case 4:case 5:break;default:a=3}var c=y;y=a;try{return b()}finally{y=c}};\nexports.unstable_scheduleCallback=function(a,b,c){var d=exports.unstable_now();\"object\"===typeof c&&null!==c?(c=c.delay,c=\"number\"===typeof c&&0<c?d+c:d):c=d;switch(a){case 1:var e=-1;break;case 2:e=250;break;case 5:e=1073741823;break;case 4:e=1E4;break;default:e=5E3}e=c+e;a={id:u++,callback:b,priorityLevel:a,startTime:c,expirationTime:e,sortIndex:-1};c>d?(a.sortIndex=c,f(t,a),null===h(r)&&a===h(t)&&(B?(E(L),L=-1):B=!0,K(H,c-d))):(a.sortIndex=e,f(r,a),A||z||(A=!0,I(J)));return a};\nexports.unstable_shouldYield=M;exports.unstable_wrapCallback=function(a){var b=y;return function(){var c=y;y=b;try{return a.apply(this,arguments)}finally{y=c}}};\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/scheduler.production.min.js');\n} else {\n  module.exports = require('./cjs/scheduler.development.js');\n}\n","// A library of seedable RNGs implemented in Javascript.\n//\n// Usage:\n//\n// var seedrandom = require('seedrandom');\n// var random = seedrandom(1); // or any seed.\n// var x = random();       // 0 <= x < 1.  Every bit is random.\n// var x = random.quick(); // 0 <= x < 1.  32 bits of randomness.\n\n// alea, a 53-bit multiply-with-carry generator by Johannes Baagøe.\n// Period: ~2^116\n// Reported to pass all BigCrush tests.\nvar alea = require('./lib/alea');\n\n// xor128, a pure xor-shift generator by George Marsaglia.\n// Period: 2^128-1.\n// Reported to fail: MatrixRank and LinearComp.\nvar xor128 = require('./lib/xor128');\n\n// xorwow, George Marsaglia's 160-bit xor-shift combined plus weyl.\n// Period: 2^192-2^32\n// Reported to fail: CollisionOver, SimpPoker, and LinearComp.\nvar xorwow = require('./lib/xorwow');\n\n// xorshift7, by François Panneton and Pierre L'ecuyer, takes\n// a different approach: it adds robustness by allowing more shifts\n// than Marsaglia's original three.  It is a 7-shift generator\n// with 256 bits, that passes BigCrush with no systmatic failures.\n// Period 2^256-1.\n// No systematic BigCrush failures reported.\nvar xorshift7 = require('./lib/xorshift7');\n\n// xor4096, by Richard Brent, is a 4096-bit xor-shift with a\n// very long period that also adds a Weyl generator. It also passes\n// BigCrush with no systematic failures.  Its long period may\n// be useful if you have many generators and need to avoid\n// collisions.\n// Period: 2^4128-2^32.\n// No systematic BigCrush failures reported.\nvar xor4096 = require('./lib/xor4096');\n\n// Tyche-i, by Samuel Neves and Filipe Araujo, is a bit-shifting random\n// number generator derived from ChaCha, a modern stream cipher.\n// https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf\n// Period: ~2^127\n// No systematic BigCrush failures reported.\nvar tychei = require('./lib/tychei');\n\n// The original ARC4-based prng included in this library.\n// Period: ~2^1600\nvar sr = require('./seedrandom');\n\nsr.alea = alea;\nsr.xor128 = xor128;\nsr.xorwow = xorwow;\nsr.xorshift7 = xorshift7;\nsr.xor4096 = xor4096;\nsr.tychei = tychei;\n\nmodule.exports = sr;\n","// A port of an algorithm by Johannes Baagøe <baagoe@baagoe.com>, 2010\n// http://baagoe.com/en/RandomMusings/javascript/\n// https://github.com/nquinlan/better-random-numbers-for-javascript-mirror\n// Original work is under MIT license -\n\n// Copyright (C) 2010 by Johannes Baagøe <baagoe@baagoe.org>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\n\n(function(global, module, define) {\n\nfunction Alea(seed) {\n  var me = this, mash = Mash();\n\n  me.next = function() {\n    var t = 2091639 * me.s0 + me.c * 2.3283064365386963e-10; // 2^-32\n    me.s0 = me.s1;\n    me.s1 = me.s2;\n    return me.s2 = t - (me.c = t | 0);\n  };\n\n  // Apply the seeding algorithm from Baagoe.\n  me.c = 1;\n  me.s0 = mash(' ');\n  me.s1 = mash(' ');\n  me.s2 = mash(' ');\n  me.s0 -= mash(seed);\n  if (me.s0 < 0) { me.s0 += 1; }\n  me.s1 -= mash(seed);\n  if (me.s1 < 0) { me.s1 += 1; }\n  me.s2 -= mash(seed);\n  if (me.s2 < 0) { me.s2 += 1; }\n  mash = null;\n}\n\nfunction copy(f, t) {\n  t.c = f.c;\n  t.s0 = f.s0;\n  t.s1 = f.s1;\n  t.s2 = f.s2;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  var xg = new Alea(seed),\n      state = opts && opts.state,\n      prng = xg.next;\n  prng.int32 = function() { return (xg.next() * 0x100000000) | 0; }\n  prng.double = function() {\n    return prng() + (prng() * 0x200000 | 0) * 1.1102230246251565e-16; // 2^-53\n  };\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nfunction Mash() {\n  var n = 0xefc8249d;\n\n  var mash = function(data) {\n    data = String(data);\n    for (var i = 0; i < data.length; i++) {\n      n += data.charCodeAt(i);\n      var h = 0.02519603282416938 * n;\n      n = h >>> 0;\n      h -= n;\n      h *= n;\n      n = h >>> 0;\n      h -= n;\n      n += h * 0x100000000; // 2^32\n    }\n    return (n >>> 0) * 2.3283064365386963e-10; // 2^-32\n  };\n\n  return mash;\n}\n\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.alea = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n\n","// A Javascript implementaion of the \"Tyche-i\" prng algorithm by\n// Samuel Neves and Filipe Araujo.\n// See https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this, strseed = '';\n\n  // Set up generator function.\n  me.next = function() {\n    var b = me.b, c = me.c, d = me.d, a = me.a;\n    b = (b << 25) ^ (b >>> 7) ^ c;\n    c = (c - d) | 0;\n    d = (d << 24) ^ (d >>> 8) ^ a;\n    a = (a - b) | 0;\n    me.b = b = (b << 20) ^ (b >>> 12) ^ c;\n    me.c = c = (c - d) | 0;\n    me.d = (d << 16) ^ (c >>> 16) ^ a;\n    return me.a = (a - b) | 0;\n  };\n\n  /* The following is non-inverted tyche, which has better internal\n   * bit diffusion, but which is about 25% slower than tyche-i in JS.\n  me.next = function() {\n    var a = me.a, b = me.b, c = me.c, d = me.d;\n    a = (me.a + me.b | 0) >>> 0;\n    d = me.d ^ a; d = d << 16 ^ d >>> 16;\n    c = me.c + d | 0;\n    b = me.b ^ c; b = b << 12 ^ d >>> 20;\n    me.a = a = a + b | 0;\n    d = d ^ a; me.d = d = d << 8 ^ d >>> 24;\n    me.c = c = c + d | 0;\n    b = b ^ c;\n    return me.b = (b << 7 ^ b >>> 25);\n  }\n  */\n\n  me.a = 0;\n  me.b = 0;\n  me.c = 2654435769 | 0;\n  me.d = 1367130551;\n\n  if (seed === Math.floor(seed)) {\n    // Integer seed.\n    me.a = (seed / 0x100000000) | 0;\n    me.b = seed | 0;\n  } else {\n    // String seed.\n    strseed += seed;\n  }\n\n  // Mix in string seed, then discard an initial batch of 64 values.\n  for (var k = 0; k < strseed.length + 20; k++) {\n    me.b ^= strseed.charCodeAt(k) | 0;\n    me.next();\n  }\n}\n\nfunction copy(f, t) {\n  t.a = f.a;\n  t.b = f.b;\n  t.c = f.c;\n  t.d = f.d;\n  return t;\n};\n\nfunction impl(seed, opts) {\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.tychei = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n\n","// A Javascript implementaion of the \"xor128\" prng algorithm by\n// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this, strseed = '';\n\n  me.x = 0;\n  me.y = 0;\n  me.z = 0;\n  me.w = 0;\n\n  // Set up generator function.\n  me.next = function() {\n    var t = me.x ^ (me.x << 11);\n    me.x = me.y;\n    me.y = me.z;\n    me.z = me.w;\n    return me.w ^= (me.w >>> 19) ^ t ^ (t >>> 8);\n  };\n\n  if (seed === (seed | 0)) {\n    // Integer seed.\n    me.x = seed;\n  } else {\n    // String seed.\n    strseed += seed;\n  }\n\n  // Mix in string seed, then discard an initial batch of 64 values.\n  for (var k = 0; k < strseed.length + 64; k++) {\n    me.x ^= strseed.charCodeAt(k) | 0;\n    me.next();\n  }\n}\n\nfunction copy(f, t) {\n  t.x = f.x;\n  t.y = f.y;\n  t.z = f.z;\n  t.w = f.w;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xor128 = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n\n","// A Javascript implementaion of Richard Brent's Xorgens xor4096 algorithm.\n//\n// This fast non-cryptographic random number generator is designed for\n// use in Monte-Carlo algorithms. It combines a long-period xorshift\n// generator with a Weyl generator, and it passes all common batteries\n// of stasticial tests for randomness while consuming only a few nanoseconds\n// for each prng generated.  For background on the generator, see Brent's\n// paper: \"Some long-period random number generators using shifts and xors.\"\n// http://arxiv.org/pdf/1004.3115v1.pdf\n//\n// Usage:\n//\n// var xor4096 = require('xor4096');\n// random = xor4096(1);                        // Seed with int32 or string.\n// assert.equal(random(), 0.1520436450538547); // (0, 1) range, 53 bits.\n// assert.equal(random.int32(), 1806534897);   // signed int32, 32 bits.\n//\n// For nonzero numeric keys, this impelementation provides a sequence\n// identical to that by Brent's xorgens 3 implementaion in C.  This\n// implementation also provides for initalizing the generator with\n// string seeds, or for saving and restoring the state of the generator.\n//\n// On Chrome, this prng benchmarks about 2.1 times slower than\n// Javascript's built-in Math.random().\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this;\n\n  // Set up generator function.\n  me.next = function() {\n    var w = me.w,\n        X = me.X, i = me.i, t, v;\n    // Update Weyl generator.\n    me.w = w = (w + 0x61c88647) | 0;\n    // Update xor generator.\n    v = X[(i + 34) & 127];\n    t = X[i = ((i + 1) & 127)];\n    v ^= v << 13;\n    t ^= t << 17;\n    v ^= v >>> 15;\n    t ^= t >>> 12;\n    // Update Xor generator array state.\n    v = X[i] = v ^ t;\n    me.i = i;\n    // Result is the combination.\n    return (v + (w ^ (w >>> 16))) | 0;\n  };\n\n  function init(me, seed) {\n    var t, v, i, j, w, X = [], limit = 128;\n    if (seed === (seed | 0)) {\n      // Numeric seeds initialize v, which is used to generates X.\n      v = seed;\n      seed = null;\n    } else {\n      // String seeds are mixed into v and X one character at a time.\n      seed = seed + '\\0';\n      v = 0;\n      limit = Math.max(limit, seed.length);\n    }\n    // Initialize circular array and weyl value.\n    for (i = 0, j = -32; j < limit; ++j) {\n      // Put the unicode characters into the array, and shuffle them.\n      if (seed) v ^= seed.charCodeAt((j + 32) % seed.length);\n      // After 32 shuffles, take v as the starting w value.\n      if (j === 0) w = v;\n      v ^= v << 10;\n      v ^= v >>> 15;\n      v ^= v << 4;\n      v ^= v >>> 13;\n      if (j >= 0) {\n        w = (w + 0x61c88647) | 0;     // Weyl.\n        t = (X[j & 127] ^= (v + w));  // Combine xor and weyl to init array.\n        i = (0 == t) ? i + 1 : 0;     // Count zeroes.\n      }\n    }\n    // We have detected all zeroes; make the key nonzero.\n    if (i >= 128) {\n      X[(seed && seed.length || 0) & 127] = -1;\n    }\n    // Run the generator 512 times to further mix the state before using it.\n    // Factoring this as a function slows the main generator, so it is just\n    // unrolled here.  The weyl generator is not advanced while warming up.\n    i = 127;\n    for (j = 4 * 128; j > 0; --j) {\n      v = X[(i + 34) & 127];\n      t = X[i = ((i + 1) & 127)];\n      v ^= v << 13;\n      t ^= t << 17;\n      v ^= v >>> 15;\n      t ^= t >>> 12;\n      X[i] = v ^ t;\n    }\n    // Storing state as object members is faster than using closure variables.\n    me.w = w;\n    me.X = X;\n    me.i = i;\n  }\n\n  init(me, seed);\n}\n\nfunction copy(f, t) {\n  t.i = f.i;\n  t.w = f.w;\n  t.X = f.X.slice();\n  return t;\n};\n\nfunction impl(seed, opts) {\n  if (seed == null) seed = +(new Date);\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (state.X) copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xor4096 = impl;\n}\n\n})(\n  this,                                     // window object or global\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n","// A Javascript implementaion of the \"xorshift7\" algorithm by\n// François Panneton and Pierre L'ecuyer:\n// \"On the Xorgshift Random Number Generators\"\n// http://saluc.engr.uconn.edu/refs/crypto/rng/panneton05onthexorshift.pdf\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this;\n\n  // Set up generator function.\n  me.next = function() {\n    // Update xor generator.\n    var X = me.x, i = me.i, t, v, w;\n    t = X[i]; t ^= (t >>> 7); v = t ^ (t << 24);\n    t = X[(i + 1) & 7]; v ^= t ^ (t >>> 10);\n    t = X[(i + 3) & 7]; v ^= t ^ (t >>> 3);\n    t = X[(i + 4) & 7]; v ^= t ^ (t << 7);\n    t = X[(i + 7) & 7]; t = t ^ (t << 13); v ^= t ^ (t << 9);\n    X[i] = v;\n    me.i = (i + 1) & 7;\n    return v;\n  };\n\n  function init(me, seed) {\n    var j, w, X = [];\n\n    if (seed === (seed | 0)) {\n      // Seed state array using a 32-bit integer.\n      w = X[0] = seed;\n    } else {\n      // Seed state using a string.\n      seed = '' + seed;\n      for (j = 0; j < seed.length; ++j) {\n        X[j & 7] = (X[j & 7] << 15) ^\n            (seed.charCodeAt(j) + X[(j + 1) & 7] << 13);\n      }\n    }\n    // Enforce an array length of 8, not all zeroes.\n    while (X.length < 8) X.push(0);\n    for (j = 0; j < 8 && X[j] === 0; ++j);\n    if (j == 8) w = X[7] = -1; else w = X[j];\n\n    me.x = X;\n    me.i = 0;\n\n    // Discard an initial 256 values.\n    for (j = 256; j > 0; --j) {\n      me.next();\n    }\n  }\n\n  init(me, seed);\n}\n\nfunction copy(f, t) {\n  t.x = f.x.slice();\n  t.i = f.i;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  if (seed == null) seed = +(new Date);\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (state.x) copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xorshift7 = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n","// A Javascript implementaion of the \"xorwow\" prng algorithm by\n// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this, strseed = '';\n\n  // Set up generator function.\n  me.next = function() {\n    var t = (me.x ^ (me.x >>> 2));\n    me.x = me.y; me.y = me.z; me.z = me.w; me.w = me.v;\n    return (me.d = (me.d + 362437 | 0)) +\n       (me.v = (me.v ^ (me.v << 4)) ^ (t ^ (t << 1))) | 0;\n  };\n\n  me.x = 0;\n  me.y = 0;\n  me.z = 0;\n  me.w = 0;\n  me.v = 0;\n\n  if (seed === (seed | 0)) {\n    // Integer seed.\n    me.x = seed;\n  } else {\n    // String seed.\n    strseed += seed;\n  }\n\n  // Mix in string seed, then discard an initial batch of 64 values.\n  for (var k = 0; k < strseed.length + 64; k++) {\n    me.x ^= strseed.charCodeAt(k) | 0;\n    if (k == strseed.length) {\n      me.d = me.x << 10 ^ me.x >>> 4;\n    }\n    me.next();\n  }\n}\n\nfunction copy(f, t) {\n  t.x = f.x;\n  t.y = f.y;\n  t.z = f.z;\n  t.w = f.w;\n  t.v = f.v;\n  t.d = f.d;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xorwow = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n\n","/*\nCopyright 2019 David Bau.\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n*/\n\n(function (global, pool, math) {\n//\n// The following constants are related to IEEE 754 limits.\n//\n\nvar width = 256,        // each RC4 output is 0 <= x < 256\n    chunks = 6,         // at least six RC4 outputs for each double\n    digits = 52,        // there are 52 significant digits in a double\n    rngname = 'random', // rngname: name for Math.random and Math.seedrandom\n    startdenom = math.pow(width, chunks),\n    significance = math.pow(2, digits),\n    overflow = significance * 2,\n    mask = width - 1,\n    nodecrypto;         // node.js crypto module, initialized at the bottom.\n\n//\n// seedrandom()\n// This is the seedrandom function described above.\n//\nfunction seedrandom(seed, options, callback) {\n  var key = [];\n  options = (options == true) ? { entropy: true } : (options || {});\n\n  // Flatten the seed string or build one from local entropy if needed.\n  var shortseed = mixkey(flatten(\n    options.entropy ? [seed, tostring(pool)] :\n    (seed == null) ? autoseed() : seed, 3), key);\n\n  // Use the seed to initialize an ARC4 generator.\n  var arc4 = new ARC4(key);\n\n  // This function returns a random double in [0, 1) that contains\n  // randomness in every bit of the mantissa of the IEEE 754 value.\n  var prng = function() {\n    var n = arc4.g(chunks),             // Start with a numerator n < 2 ^ 48\n        d = startdenom,                 //   and denominator d = 2 ^ 48.\n        x = 0;                          //   and no 'extra last byte'.\n    while (n < significance) {          // Fill up all significant digits by\n      n = (n + x) * width;              //   shifting numerator and\n      d *= width;                       //   denominator and generating a\n      x = arc4.g(1);                    //   new least-significant-byte.\n    }\n    while (n >= overflow) {             // To avoid rounding up, before adding\n      n /= 2;                           //   last byte, shift everything\n      d /= 2;                           //   right using integer math until\n      x >>>= 1;                         //   we have exactly the desired bits.\n    }\n    return (n + x) / d;                 // Form the number within [0, 1).\n  };\n\n  prng.int32 = function() { return arc4.g(4) | 0; }\n  prng.quick = function() { return arc4.g(4) / 0x100000000; }\n  prng.double = prng;\n\n  // Mix the randomness into accumulated entropy.\n  mixkey(tostring(arc4.S), pool);\n\n  // Calling convention: what to return as a function of prng, seed, is_math.\n  return (options.pass || callback ||\n      function(prng, seed, is_math_call, state) {\n        if (state) {\n          // Load the arc4 state from the given state if it has an S array.\n          if (state.S) { copy(state, arc4); }\n          // Only provide the .state method if requested via options.state.\n          prng.state = function() { return copy(arc4, {}); }\n        }\n\n        // If called as a method of Math (Math.seedrandom()), mutate\n        // Math.random because that is how seedrandom.js has worked since v1.0.\n        if (is_math_call) { math[rngname] = prng; return seed; }\n\n        // Otherwise, it is a newer calling convention, so return the\n        // prng directly.\n        else return prng;\n      })(\n  prng,\n  shortseed,\n  'global' in options ? options.global : (this == math),\n  options.state);\n}\n\n//\n// ARC4\n//\n// An ARC4 implementation.  The constructor takes a key in the form of\n// an array of at most (width) integers that should be 0 <= x < (width).\n//\n// The g(count) method returns a pseudorandom integer that concatenates\n// the next (count) outputs from ARC4.  Its return value is a number x\n// that is in the range 0 <= x < (width ^ count).\n//\nfunction ARC4(key) {\n  var t, keylen = key.length,\n      me = this, i = 0, j = me.i = me.j = 0, s = me.S = [];\n\n  // The empty key [] is treated as [0].\n  if (!keylen) { key = [keylen++]; }\n\n  // Set up S using the standard key scheduling algorithm.\n  while (i < width) {\n    s[i] = i++;\n  }\n  for (i = 0; i < width; i++) {\n    s[i] = s[j = mask & (j + key[i % keylen] + (t = s[i]))];\n    s[j] = t;\n  }\n\n  // The \"g\" method returns the next (count) outputs as one number.\n  (me.g = function(count) {\n    // Using instance members instead of closure state nearly doubles speed.\n    var t, r = 0,\n        i = me.i, j = me.j, s = me.S;\n    while (count--) {\n      t = s[i = mask & (i + 1)];\n      r = r * width + s[mask & ((s[i] = s[j = mask & (j + t)]) + (s[j] = t))];\n    }\n    me.i = i; me.j = j;\n    return r;\n    // For robust unpredictability, the function call below automatically\n    // discards an initial batch of values.  This is called RC4-drop[256].\n    // See http://google.com/search?q=rsa+fluhrer+response&btnI\n  })(width);\n}\n\n//\n// copy()\n// Copies internal state of ARC4 to or from a plain object.\n//\nfunction copy(f, t) {\n  t.i = f.i;\n  t.j = f.j;\n  t.S = f.S.slice();\n  return t;\n};\n\n//\n// flatten()\n// Converts an object tree to nested arrays of strings.\n//\nfunction flatten(obj, depth) {\n  var result = [], typ = (typeof obj), prop;\n  if (depth && typ == 'object') {\n    for (prop in obj) {\n      try { result.push(flatten(obj[prop], depth - 1)); } catch (e) {}\n    }\n  }\n  return (result.length ? result : typ == 'string' ? obj : obj + '\\0');\n}\n\n//\n// mixkey()\n// Mixes a string seed into a key that is an array of integers, and\n// returns a shortened string seed that is equivalent to the result key.\n//\nfunction mixkey(seed, key) {\n  var stringseed = seed + '', smear, j = 0;\n  while (j < stringseed.length) {\n    key[mask & j] =\n      mask & ((smear ^= key[mask & j] * 19) + stringseed.charCodeAt(j++));\n  }\n  return tostring(key);\n}\n\n//\n// autoseed()\n// Returns an object for autoseeding, using window.crypto and Node crypto\n// module if available.\n//\nfunction autoseed() {\n  try {\n    var out;\n    if (nodecrypto && (out = nodecrypto.randomBytes)) {\n      // The use of 'out' to remember randomBytes makes tight minified code.\n      out = out(width);\n    } else {\n      out = new Uint8Array(width);\n      (global.crypto || global.msCrypto).getRandomValues(out);\n    }\n    return tostring(out);\n  } catch (e) {\n    var browser = global.navigator,\n        plugins = browser && browser.plugins;\n    return [+new Date, global, plugins, global.screen, tostring(pool)];\n  }\n}\n\n//\n// tostring()\n// Converts an array of charcodes to a string\n//\nfunction tostring(a) {\n  return String.fromCharCode.apply(0, a);\n}\n\n//\n// When seedrandom.js is loaded, we immediately mix a few bits\n// from the built-in RNG into the entropy pool.  Because we do\n// not want to interfere with deterministic PRNG state later,\n// seedrandom will not call math.random on its own again after\n// initialization.\n//\nmixkey(math.random(), pool);\n\n//\n// Nodejs and AMD support: export the implementation as a module using\n// either convention.\n//\nif ((typeof module) == 'object' && module.exports) {\n  module.exports = seedrandom;\n  // When in node.js, try using crypto package for autoseeding.\n  try {\n    nodecrypto = require('crypto');\n  } catch (ex) {}\n} else if ((typeof define) == 'function' && define.amd) {\n  define(function() { return seedrandom; });\n} else {\n  // When included as a plain script, set up Math.seedrandom global.\n  math['seed' + rngname] = seedrandom;\n}\n\n\n// End anonymous scope, and pass initial values.\n})(\n  // global: `self` in browsers (including strict mode and web workers),\n  // otherwise `this` in Node and other environments\n  (typeof self !== 'undefined') ? self : this,\n  [],     // pool: entropy pool starts empty\n  Math    // math: package containing random, pow, and seedrandom\n);\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.amdD = function () {\n\tthrow new Error('define cannot be used indirect');\n};","__webpack_require__.amdO = {};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = function(module) {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","__webpack_require__.p = \"/\";","export default function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}","import _typeof from \"./typeof.js\";\nexport default function _regeneratorRuntime() {\n  \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */\n  _regeneratorRuntime = function _regeneratorRuntime() {\n    return exports;\n  };\n  var exports = {},\n    Op = Object.prototype,\n    hasOwn = Op.hasOwnProperty,\n    defineProperty = Object.defineProperty || function (obj, key, desc) {\n      obj[key] = desc.value;\n    },\n    $Symbol = \"function\" == typeof Symbol ? Symbol : {},\n    iteratorSymbol = $Symbol.iterator || \"@@iterator\",\n    asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\",\n    toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n  function define(obj, key, value) {\n    return Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: !0,\n      configurable: !0,\n      writable: !0\n    }), obj[key];\n  }\n  try {\n    define({}, \"\");\n  } catch (err) {\n    define = function define(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,\n      generator = Object.create(protoGenerator.prototype),\n      context = new Context(tryLocsList || []);\n    return defineProperty(generator, \"_invoke\", {\n      value: makeInvokeMethod(innerFn, self, context)\n    }), generator;\n  }\n  function tryCatch(fn, obj, arg) {\n    try {\n      return {\n        type: \"normal\",\n        arg: fn.call(obj, arg)\n      };\n    } catch (err) {\n      return {\n        type: \"throw\",\n        arg: err\n      };\n    }\n  }\n  exports.wrap = wrap;\n  var ContinueSentinel = {};\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n  var getProto = Object.getPrototypeOf,\n    NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);\n  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function (method) {\n      define(prototype, method, function (arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (\"throw\" !== record.type) {\n        var result = record.arg,\n          value = result.value;\n        return value && \"object\" == _typeof(value) && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) {\n          invoke(\"next\", value, resolve, reject);\n        }, function (err) {\n          invoke(\"throw\", err, resolve, reject);\n        }) : PromiseImpl.resolve(value).then(function (unwrapped) {\n          result.value = unwrapped, resolve(result);\n        }, function (error) {\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n      reject(record.arg);\n    }\n    var previousPromise;\n    defineProperty(this, \"_invoke\", {\n      value: function value(method, arg) {\n        function callInvokeWithMethodAndArg() {\n          return new PromiseImpl(function (resolve, reject) {\n            invoke(method, arg, resolve, reject);\n          });\n        }\n        return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n      }\n    });\n  }\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = \"suspendedStart\";\n    return function (method, arg) {\n      if (\"executing\" === state) throw new Error(\"Generator is already running\");\n      if (\"completed\" === state) {\n        if (\"throw\" === method) throw arg;\n        return doneResult();\n      }\n      for (context.method = method, context.arg = arg;;) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n        if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) {\n          if (\"suspendedStart\" === state) throw state = \"completed\", context.arg;\n          context.dispatchException(context.arg);\n        } else \"return\" === context.method && context.abrupt(\"return\", context.arg);\n        state = \"executing\";\n        var record = tryCatch(innerFn, self, context);\n        if (\"normal\" === record.type) {\n          if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue;\n          return {\n            value: record.arg,\n            done: context.done\n          };\n        }\n        \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg);\n      }\n    };\n  }\n  function maybeInvokeDelegate(delegate, context) {\n    var methodName = context.method,\n      method = delegate.iterator[methodName];\n    if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator[\"return\"] && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel;\n    var record = tryCatch(method, delegate.iterator, context.arg);\n    if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel;\n    var info = record.arg;\n    return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel);\n  }\n  function pushTryEntry(locs) {\n    var entry = {\n      tryLoc: locs[0]\n    };\n    1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);\n  }\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\", delete record.arg, entry.completion = record;\n  }\n  function Context(tryLocsList) {\n    this.tryEntries = [{\n      tryLoc: \"root\"\n    }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);\n  }\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) return iteratorMethod.call(iterable);\n      if (\"function\" == typeof iterable.next) return iterable;\n      if (!isNaN(iterable.length)) {\n        var i = -1,\n          next = function next() {\n            for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;\n            return next.value = undefined, next.done = !0, next;\n          };\n        return next.next = next;\n      }\n    }\n    return {\n      next: doneResult\n    };\n  }\n  function doneResult() {\n    return {\n      value: undefined,\n      done: !0\n    };\n  }\n  return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", {\n    value: GeneratorFunctionPrototype,\n    configurable: !0\n  }), defineProperty(GeneratorFunctionPrototype, \"constructor\", {\n    value: GeneratorFunction,\n    configurable: !0\n  }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) {\n    var ctor = \"function\" == typeof genFun && genFun.constructor;\n    return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name));\n  }, exports.mark = function (genFun) {\n    return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun;\n  }, exports.awrap = function (arg) {\n    return {\n      __await: arg\n    };\n  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    void 0 === PromiseImpl && (PromiseImpl = Promise);\n    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);\n    return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {\n      return result.done ? result.value : iter.next();\n    });\n  }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () {\n    return this;\n  }), define(Gp, \"toString\", function () {\n    return \"[object Generator]\";\n  }), exports.keys = function (val) {\n    var object = Object(val),\n      keys = [];\n    for (var key in object) keys.push(key);\n    return keys.reverse(), function next() {\n      for (; keys.length;) {\n        var key = keys.pop();\n        if (key in object) return next.value = key, next.done = !1, next;\n      }\n      return next.done = !0, next;\n    };\n  }, exports.values = values, Context.prototype = {\n    constructor: Context,\n    reset: function reset(skipTempReset) {\n      if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);\n    },\n    stop: function stop() {\n      this.done = !0;\n      var rootRecord = this.tryEntries[0].completion;\n      if (\"throw\" === rootRecord.type) throw rootRecord.arg;\n      return this.rval;\n    },\n    dispatchException: function dispatchException(exception) {\n      if (this.done) throw exception;\n      var context = this;\n      function handle(loc, caught) {\n        return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught;\n      }\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i],\n          record = entry.completion;\n        if (\"root\" === entry.tryLoc) return handle(\"end\");\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\"),\n            hasFinally = hasOwn.call(entry, \"finallyLoc\");\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);\n            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);\n          } else {\n            if (!hasFinally) throw new Error(\"try statement without catch or finally\");\n            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);\n          }\n        }\n      }\n    },\n    abrupt: function abrupt(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n      finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);\n      var record = finallyEntry ? finallyEntry.completion : {};\n      return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);\n    },\n    complete: function complete(record, afterLoc) {\n      if (\"throw\" === record.type) throw record.arg;\n      return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;\n    },\n    finish: function finish(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;\n      }\n    },\n    \"catch\": function _catch(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (\"throw\" === record.type) {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n      throw new Error(\"illegal catch attempt\");\n    },\n    delegateYield: function delegateYield(iterable, resultName, nextLoc) {\n      return this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel;\n    }\n  }, exports;\n}","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n      args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n      _next(undefined);\n    });\n  };\n}","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (null != _i) {\n    var _s,\n      _e,\n      _x,\n      _r,\n      _arr = [],\n      _n = !0,\n      _d = !1;\n    try {\n      if (_x = (_i = _i.call(arr)).next, 0 === i) {\n        if (Object(_i) !== _i) return;\n        _n = !1;\n      } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);\n    } catch (err) {\n      _d = !0, _e = err;\n    } finally {\n      try {\n        if (!_n && null != _i[\"return\"] && (_r = _i[\"return\"](), Object(_r) !== _r)) return;\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n    return _arr;\n  }\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (!it) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function F() {};\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","import _typeof from \"./typeof.js\";\nimport toPrimitive from \"./toPrimitive.js\";\nexport default function _toPropertyKey(arg) {\n  var key = toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}","import _typeof from \"./typeof.js\";\nexport default function _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}","import toPropertyKey from \"./toPropertyKey.js\";\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, toPropertyKey(descriptor.key), descriptor);\n  }\n}\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Backend, DataToGPUOptions, GPUData, Tensor} from '../tensor';\nimport {DataId} from '../tensor_info';\nimport {BackendValues, DataType, WebGLData, WebGPUData} from '../types';\n\nexport const EPSILON_FLOAT32 = 1e-7;\nexport const EPSILON_FLOAT16 = 1e-4;\n\n// Required information for all backends.\nexport interface BackendTimingInfo {\n  kernelMs: number|{error: string};\n  getExtraProfileInfo?(): string;  // a field for additional timing information\n                                   // e.g. packing / unpacking for WebGL backend\n}\n\nexport interface TensorStorage {\n  read(dataId: DataId): Promise<BackendValues>;\n  readSync(dataId: DataId): BackendValues;\n  disposeData(dataId: DataId, force?: boolean): boolean;\n  write(values: BackendValues, shape: number[], dtype: DataType): DataId;\n  move(\n      dataId: DataId, values: BackendValues, shape: number[], dtype: DataType,\n      refCount: number): void;\n  memory(): {unreliable: boolean;};  // Backend-specific information.\n  /** Returns number of data ids currently in the storage. */\n  numDataIds(): number;\n  refCount(dataId: DataId): number;\n}\n\n/** Convenient class for storing tensor-related data. */\nexport class DataStorage<T> {\n  private data = new WeakMap<DataId, T>();\n  private dataIdsCount = 0;\n\n  constructor(private backend: KernelBackend, private dataMover: DataMover) {}\n\n  get(dataId: DataId) {\n    if (!this.data.has(dataId)) {\n      this.dataMover.moveData(this.backend, dataId);\n    }\n    return this.data.get(dataId);\n  }\n\n  set(dataId: DataId, value: T): void {\n    this.dataIdsCount++;\n    this.data.set(dataId, value);\n  }\n\n  has(dataId: DataId): boolean {\n    return this.data.has(dataId);\n  }\n\n  delete(dataId: DataId): boolean {\n    this.dataIdsCount--;\n    return this.data.delete(dataId);\n  }\n\n  numDataIds(): number {\n    return this.dataIdsCount;\n  }\n}\n\nexport interface DataMover {\n  /**\n   * To be called by backends whenever they see a dataId that they don't own.\n   * Upon calling this method, the mover will fetch the tensor from another\n   * backend and register it with the current active backend.\n   */\n  moveData(backend: KernelBackend, dataId: DataId): void;\n}\n\nexport interface BackendTimer {\n  // check if backend timer is available\n  timerAvailable(): boolean;\n  time(f: () => void): Promise<BackendTimingInfo>;\n}\n\n/**\n * The interface that defines the kernels that should be implemented when\n * adding a new backend. New backends don't need to implement every one of the\n * methods, this can be done gradually (throw an error for unimplemented\n * methods).\n */\nexport class KernelBackend implements TensorStorage, Backend, BackendTimer {\n  refCount(dataId: DataId): number {\n    return notYetImplemented('refCount');\n  }\n  incRef(dataId: DataId): void {\n    return notYetImplemented('incRef');\n  }\n  timerAvailable(): boolean {\n    return true;\n  }\n  time(f: () => void): Promise<BackendTimingInfo> {\n    return notYetImplemented('time');\n  }\n  read(dataId: object): Promise<BackendValues> {\n    return notYetImplemented('read');\n  }\n  readSync(dataId: object): BackendValues {\n    return notYetImplemented('readSync');\n  }\n  readToGPU(dataId: object, options?: DataToGPUOptions): GPUData {\n    return notYetImplemented('readToGPU');\n  }\n  numDataIds(): number {\n    return notYetImplemented('numDataIds');\n  }\n  disposeData(dataId: object, force?: boolean): boolean {\n    return notYetImplemented('disposeData');\n  }\n  write(values: BackendValues, shape: number[], dtype: DataType): DataId {\n    return notYetImplemented('write');\n  }\n  move(\n      dataId: DataId, values: BackendValues, shape: number[], dtype: DataType,\n      refCount: number): void {\n    return notYetImplemented('move');\n  }\n\n  createTensorFromGPUData(\n      values: WebGLData|WebGPUData, shape: number[], dtype: DataType): Tensor {\n    return notYetImplemented('createTensorFromGPUData');\n  }\n\n  memory(): {unreliable: boolean; reasons?: string[]} {\n    return notYetImplemented('memory');\n  }\n  /** Returns the highest precision for floats in bits (e.g. 16 or 32) */\n  floatPrecision(): 16|32 {\n    return notYetImplemented('floatPrecision');\n  }\n  /** Returns the smallest representable number.  */\n  epsilon(): number {\n    return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;\n  }\n  dispose(): void {\n    return notYetImplemented('dispose');\n  }\n}\n\nfunction notYetImplemented(kernelName: string): never {\n  throw new Error(\n      `'${kernelName}' not yet implemented or not found in the registry. ` +\n      `This kernel may not be supported by the tfjs backend you have chosen`);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BackendValues, DataType, DataTypeMap, FlatVector, NumericDataType, TensorLike, TypedArray, WebGLData, WebGPUData} from './types';\n\n/**\n * Shuffles the array in-place using Fisher-Yates algorithm.\n *\n * ```js\n * const a = [1, 2, 3, 4, 5];\n * tf.util.shuffle(a);\n * console.log(a);\n * ```\n *\n * @param array The array to shuffle in-place.\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\n// tslint:disable-next-line:no-any\nexport function shuffle(array: any[]|Uint32Array|Int32Array|\n                        Float32Array): void {\n  let counter = array.length;\n  let index = 0;\n  // While there are elements in the array\n  while (counter > 0) {\n    // Pick a random index\n    index = (Math.random() * counter) | 0;\n    // Decrease counter by 1\n    counter--;\n    // And swap the last element with it\n    swap(array, counter, index);\n  }\n}\n\n/**\n * Shuffles two arrays in-place the same way using Fisher-Yates algorithm.\n *\n * ```js\n * const a = [1,2,3,4,5];\n * const b = [11,22,33,44,55];\n * tf.util.shuffleCombo(a, b);\n * console.log(a, b);\n * ```\n *\n * @param array The first array to shuffle in-place.\n * @param array2 The second array to shuffle in-place with the same permutation\n *     as the first array.\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\nexport function shuffleCombo(\n    // tslint:disable-next-line:no-any\n    array: any[]|Uint32Array|Int32Array|Float32Array,\n    // tslint:disable-next-line:no-any\n    array2: any[]|Uint32Array|Int32Array|Float32Array): void {\n  if (array.length !== array2.length) {\n    throw new Error(\n        `Array sizes must match to be shuffled together ` +\n        `First array length was ${array.length}` +\n        `Second array length was ${array2.length}`);\n  }\n  let counter = array.length;\n  let index = 0;\n  // While there are elements in the array\n  while (counter > 0) {\n    // Pick a random index\n    index = (Math.random() * counter) | 0;\n    // Decrease counter by 1\n    counter--;\n    // And swap the last element of each array with it\n    swap(array, counter, index);\n    swap(array2, counter, index);\n  }\n}\n\n/** Clamps a value to a specified range. */\nexport function clamp(min: number, x: number, max: number): number {\n  return Math.max(min, Math.min(x, max));\n}\n\nexport function nearestLargerEven(val: number): number {\n  return val % 2 === 0 ? val : val + 1;\n}\n\nexport function swap<T>(\n    object: {[index: number]: T}, left: number, right: number) {\n  const temp = object[left];\n  object[left] = object[right];\n  object[right] = temp;\n}\n\nexport function sum(arr: number[]): number {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n}\n\n/**\n * Returns a sample from a uniform [a, b) distribution.\n *\n * @param a The minimum support (inclusive).\n * @param b The maximum support (exclusive).\n * @return A pseudorandom number on the half-open interval [a,b).\n */\nexport function randUniform(a: number, b: number) {\n  const r = Math.random();\n  return (b * r) + (1 - r) * a;\n}\n\n/** Returns the squared Euclidean distance between two vectors. */\nexport function distSquared(a: FlatVector, b: FlatVector): number {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    const diff = Number(a[i]) - Number(b[i]);\n    result += diff * diff;\n  }\n  return result;\n}\n\n/**\n * Asserts that the expression is true. Otherwise throws an error with the\n * provided message.\n *\n * ```js\n * const x = 2;\n * tf.util.assert(x === 2, 'x is not 2');\n * ```\n *\n * @param expr The expression to assert (as a boolean).\n * @param msg A function that returns the message to report when throwing an\n *     error. We use a function for performance reasons.\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\nexport function assert(expr: boolean, msg: () => string) {\n  if (!expr) {\n    throw new Error(typeof msg === 'string' ? msg : msg());\n  }\n}\n\nexport function assertShapesMatch(\n    shapeA: number[], shapeB: number[], errorMessagePrefix = ''): void {\n  assert(\n      arraysEqual(shapeA, shapeB),\n      () => errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);\n}\n\nexport function assertNonNull(a: TensorLike): void {\n  assert(\n      a != null,\n      () => `The input to the tensor constructor must be a non-null value.`);\n}\n\n/**\n * Returns the size (number of elements) of the tensor given its shape.\n *\n * ```js\n * const shape = [3, 4, 2];\n * const size = tf.util.sizeFromShape(shape);\n * console.log(size);\n * ```\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\nexport function sizeFromShape(shape: number[]): number {\n  if (shape.length === 0) {\n    // Scalar.\n    return 1;\n  }\n  let size = shape[0];\n  for (let i = 1; i < shape.length; i++) {\n    size *= shape[i];\n  }\n  return size;\n}\n\nexport function isScalarShape(shape: number[]): boolean {\n  return shape.length === 0;\n}\n\nexport function arraysEqual(n1: FlatVector, n2: FlatVector) {\n  if (n1 === n2) {\n    return true;\n  }\n  if (n1 == null || n2 == null) {\n    return false;\n  }\n\n  if (n1.length !== n2.length) {\n    return false;\n  }\n  for (let i = 0; i < n1.length; i++) {\n    if (n1[i] !== n2[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function isInt(a: number): boolean {\n  return a % 1 === 0;\n}\n\nexport function tanh(x: number): number {\n  // tslint:disable-next-line:no-any\n  if ((Math as any).tanh != null) {\n    // tslint:disable-next-line:no-any\n    return (Math as any).tanh(x);\n  }\n  if (x === Infinity) {\n    return 1;\n  } else if (x === -Infinity) {\n    return -1;\n  } else {\n    const e2x = Math.exp(2 * x);\n    return (e2x - 1) / (e2x + 1);\n  }\n}\n\nexport function sizeToSquarishShape(size: number): [number, number] {\n  const width = Math.ceil(Math.sqrt(size));\n  return [width, Math.ceil(size / width)];\n}\n\n/**\n * Creates a new array with randomized indices to a given quantity.\n *\n * ```js\n * const randomTen = tf.util.createShuffledIndices(10);\n * console.log(randomTen);\n * ```\n *\n * @param number Quantity of how many shuffled indices to create.\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\nexport function createShuffledIndices(n: number): Uint32Array {\n  const shuffledIndices = new Uint32Array(n);\n  for (let i = 0; i < n; ++i) {\n    shuffledIndices[i] = i;\n  }\n  shuffle(shuffledIndices);\n  return shuffledIndices;\n}\n\nexport function rightPad(a: string, size: number): string {\n  if (size <= a.length) {\n    return a;\n  }\n  return a + ' '.repeat(size - a.length);\n}\n\nexport function repeatedTry(\n    checkFn: () => boolean, delayFn = (counter: number) => 0,\n    maxCounter?: number,\n    scheduleFn?: (functionRef: Function, delay: number) =>\n        void): Promise<void> {\n  return new Promise<void>((resolve, reject) => {\n    let tryCount = 0;\n\n    const tryFn = () => {\n      if (checkFn()) {\n        resolve();\n        return;\n      }\n\n      tryCount++;\n\n      const nextBackoff = delayFn(tryCount);\n\n      if (maxCounter != null && tryCount >= maxCounter) {\n        reject();\n        return;\n      }\n\n      if (scheduleFn != null) {\n        scheduleFn(tryFn, nextBackoff);\n      } else {\n        // google3 does not allow assigning another variable to setTimeout.\n        // Don't refactor this so scheduleFn has a default value of setTimeout.\n        setTimeout(tryFn, nextBackoff);\n      }\n    };\n\n    tryFn();\n  });\n}\n\n/**\n * Given the full size of the array and a shape that may contain -1 as the\n * implicit dimension, returns the inferred shape where -1 is replaced.\n * E.g. For shape=[2, -1, 3] and size=24, it will return [2, 4, 3].\n *\n * @param shape The shape, which may contain -1 in some dimension.\n * @param size The full size (number of elements) of the array.\n * @return The inferred shape where -1 is replaced with the inferred size.\n */\nexport function inferFromImplicitShape(\n    shape: number[], size: number): number[] {\n  let shapeProd = 1;\n  let implicitIdx = -1;\n\n  for (let i = 0; i < shape.length; ++i) {\n    if (shape[i] >= 0) {\n      shapeProd *= shape[i];\n    } else if (shape[i] === -1) {\n      if (implicitIdx !== -1) {\n        throw Error(\n            `Shapes can only have 1 implicit size. ` +\n            `Found -1 at dim ${implicitIdx} and dim ${i}`);\n      }\n      implicitIdx = i;\n    } else if (shape[i] < 0) {\n      throw Error(`Shapes can not be < 0. Found ${shape[i]} at dim ${i}`);\n    }\n  }\n\n  if (implicitIdx === -1) {\n    if (size > 0 && size !== shapeProd) {\n      throw Error(`Size(${size}) must match the product of shape ${shape}`);\n    }\n    return shape;\n  }\n\n  if (shapeProd === 0) {\n    throw Error(\n        `Cannot infer the missing size in [${shape}] when ` +\n        `there are 0 elements`);\n  }\n  if (size % shapeProd !== 0) {\n    throw Error(\n        `The implicit shape can't be a fractional number. ` +\n        `Got ${size} / ${shapeProd}`);\n  }\n\n  const newShape = shape.slice();\n  newShape[implicitIdx] = size / shapeProd;\n  return newShape;\n}\n\nexport function parseAxisParam(\n    axis: number|number[], shape: number[]): number[] {\n  const rank = shape.length;\n\n  // Normalize input\n  axis = axis == null ? shape.map((s, i) => i) : [].concat(axis);\n\n  // Check for valid range\n  assert(\n      axis.every(ax => ax >= -rank && ax < rank),\n      () =>\n          `All values in axis param must be in range [-${rank}, ${rank}) but ` +\n          `got axis ${axis}`);\n\n  // Check for only integers\n  assert(\n      axis.every(ax => isInt(ax)),\n      () => `All values in axis param must be integers but ` +\n          `got axis ${axis}`);\n\n  // Handle negative axis.\n  return axis.map(a => a < 0 ? rank + a : a);\n}\n\n/** Reduces the shape by removing all dimensions of shape 1. */\nexport function squeezeShape(shape: number[], axis?: number[]):\n    {newShape: number[], keptDims: number[]} {\n  const newShape: number[] = [];\n  const keptDims: number[] = [];\n  const isEmptyArray = axis != null && Array.isArray(axis) && axis.length === 0;\n  const axes = (axis == null || isEmptyArray) ?\n      null :\n      parseAxisParam(axis, shape).sort();\n  let j = 0;\n  for (let i = 0; i < shape.length; ++i) {\n    if (axes != null) {\n      if (axes[j] === i && shape[i] !== 1) {\n        throw new Error(\n            `Can't squeeze axis ${i} since its dim '${shape[i]}' is not 1`);\n      }\n      if ((axes[j] == null || axes[j] > i) && shape[i] === 1) {\n        newShape.push(shape[i]);\n        keptDims.push(i);\n      }\n      if (axes[j] <= i) {\n        j++;\n      }\n    }\n    if (shape[i] !== 1) {\n      newShape.push(shape[i]);\n      keptDims.push(i);\n    }\n  }\n  return {newShape, keptDims};\n}\n\nexport function getTypedArrayFromDType<D extends NumericDataType>(\n    dtype: D, size: number): DataTypeMap[D] {\n  let values = null;\n  if (dtype == null || dtype === 'float32') {\n    values = new Float32Array(size);\n  } else if (dtype === 'int32') {\n    values = new Int32Array(size);\n  } else if (dtype === 'bool') {\n    values = new Uint8Array(size);\n  } else {\n    throw new Error(`Unknown data type ${dtype}`);\n  }\n  return values as DataTypeMap[D];\n}\n\nexport function getArrayFromDType<D extends DataType>(\n    dtype: D, size: number): DataTypeMap[D] {\n  let values = null;\n  if (dtype == null || dtype === 'float32') {\n    values = new Float32Array(size);\n  } else if (dtype === 'int32') {\n    values = new Int32Array(size);\n  } else if (dtype === 'bool') {\n    values = new Uint8Array(size);\n  } else if (dtype === 'string') {\n    values = new Array<'string'>(size);\n  } else {\n    throw new Error(`Unknown data type ${dtype}`);\n  }\n  return values as DataTypeMap[D];\n}\n\nexport function checkConversionForErrors<D extends DataType>(\n    vals: DataTypeMap[D]|number[], dtype: D): void {\n  for (let i = 0; i < vals.length; i++) {\n    const num = vals[i] as number;\n    if (isNaN(num) || !isFinite(num)) {\n      throw Error(`A tensor of type ${dtype} being uploaded contains ${num}.`);\n    }\n  }\n}\n\n/** Returns true if the dtype is valid. */\nexport function isValidDtype(dtype: DataType): boolean {\n  return dtype === 'bool' || dtype === 'complex64' || dtype === 'float32' ||\n      dtype === 'int32' || dtype === 'string';\n}\n\n/**\n * Returns true if the new type can't encode the old type without loss of\n * precision.\n */\nexport function hasEncodingLoss(oldType: DataType, newType: DataType): boolean {\n  if (newType === 'complex64') {\n    return false;\n  }\n  if (newType === 'float32' && oldType !== 'complex64') {\n    return false;\n  }\n  if (newType === 'int32' && oldType !== 'float32' && oldType !== 'complex64') {\n    return false;\n  }\n  if (newType === 'bool' && oldType === 'bool') {\n    return false;\n  }\n  return true;\n}\n\nexport function bytesPerElement(dtype: DataType): number {\n  if (dtype === 'float32' || dtype === 'int32') {\n    return 4;\n  } else if (dtype === 'complex64') {\n    return 8;\n  } else if (dtype === 'bool') {\n    return 1;\n  } else {\n    throw new Error(`Unknown dtype ${dtype}`);\n  }\n}\n\n/**\n * Returns the approximate number of bytes allocated in the string array - 2\n * bytes per character. Computing the exact bytes for a native string in JS\n * is not possible since it depends on the encoding of the html page that\n * serves the website.\n */\nexport function bytesFromStringArray(arr: Uint8Array[]): number {\n  if (arr == null) {\n    return 0;\n  }\n  let bytes = 0;\n  arr.forEach(x => bytes += x.length);\n  return bytes;\n}\n\n/** Returns true if the value is a string. */\nexport function isString(value: {}): value is string {\n  return typeof value === 'string' || value instanceof String;\n}\n\nexport function isBoolean(value: {}): boolean {\n  return typeof value === 'boolean';\n}\n\nexport function isNumber(value: {}): boolean {\n  return typeof value === 'number';\n}\n\nexport function inferDtype(values: TensorLike|WebGLData|WebGPUData): DataType {\n  if (Array.isArray(values)) {\n    return inferDtype(values[0]);\n  }\n  if (values instanceof Float32Array) {\n    return 'float32';\n  } else if (\n      values instanceof Int32Array || values instanceof Uint8Array ||\n      values instanceof Uint8ClampedArray) {\n    return 'int32';\n  } else if (isNumber(values)) {\n    return 'float32';\n  } else if (isString(values)) {\n    return 'string';\n  } else if (isBoolean(values)) {\n    return 'bool';\n  }\n  return 'float32';\n}\n\nexport function isFunction(f: Function) {\n  return !!(f && f.constructor && f.call && f.apply);\n}\n\nexport function nearestDivisor(size: number, start: number): number {\n  for (let i = start; i < size; ++i) {\n    if (size % i === 0) {\n      return i;\n    }\n  }\n  return size;\n}\n\nexport function computeStrides(shape: number[]): number[] {\n  const rank = shape.length;\n  if (rank < 2) {\n    return [];\n  }\n\n  // Last dimension has implicit stride of 1, thus having D-1 (instead of D)\n  // strides.\n  const strides = new Array(rank - 1);\n  strides[rank - 2] = shape[rank - 1];\n  for (let i = rank - 3; i >= 0; --i) {\n    strides[i] = strides[i + 1] * shape[i + 1];\n  }\n  return strides;\n}\n\nfunction createNestedArray(\n    offset: number, shape: number[], a: TypedArray, isComplex = false) {\n  const ret = new Array();\n  if (shape.length === 1) {\n    const d = shape[0] * (isComplex ? 2 : 1);\n    for (let i = 0; i < d; i++) {\n      ret[i] = a[offset + i];\n    }\n  } else {\n    const d = shape[0];\n    const rest = shape.slice(1);\n    const len = rest.reduce((acc, c) => acc * c) * (isComplex ? 2 : 1);\n    for (let i = 0; i < d; i++) {\n      ret[i] = createNestedArray(offset + i * len, rest, a, isComplex);\n    }\n  }\n  return ret;\n}\n\n// Provide a nested array of TypedArray in given shape.\nexport function toNestedArray(\n    shape: number[], a: TypedArray, isComplex = false) {\n  if (shape.length === 0) {\n    // Scalar type should return a single number.\n    return a[0];\n  }\n  const size = shape.reduce((acc, c) => acc * c) * (isComplex ? 2 : 1);\n  if (size === 0) {\n    // A tensor with shape zero should be turned into empty list.\n    return [];\n  }\n  if (size !== a.length) {\n    throw new Error(`[${shape}] does not match the input size ${a.length}${\n        isComplex ? ' for a complex tensor' : ''}.`);\n  }\n\n  return createNestedArray(0, shape, a, isComplex);\n}\n\nexport function convertBackendValuesAndArrayBuffer(\n    data: BackendValues|ArrayBuffer, dtype: DataType) {\n  // If is type Uint8Array[], return it directly.\n  if (Array.isArray(data)) {\n    return data;\n  }\n  if (dtype === 'float32') {\n    return data instanceof Float32Array ? data : new Float32Array(data);\n  } else if (dtype === 'int32') {\n    return data instanceof Int32Array ? data : new Int32Array(data);\n  } else if (dtype === 'bool' || dtype === 'string') {\n    return Uint8Array.from(new Int32Array(data));\n  } else {\n    throw new Error(`Unknown dtype ${dtype}`);\n  }\n}\n\nexport function makeOnesTypedArray<D extends DataType>(\n    size: number, dtype: D): DataTypeMap[D] {\n  const array = makeZerosTypedArray(size, dtype);\n  for (let i = 0; i < array.length; i++) {\n    array[i] = 1;\n  }\n  return array;\n}\n\nexport function makeZerosTypedArray<D extends DataType>(\n    size: number, dtype: D): DataTypeMap[D] {\n  if (dtype == null || dtype === 'float32' || dtype === 'complex64') {\n    return new Float32Array(size) as DataTypeMap[D];\n  } else if (dtype === 'int32') {\n    return new Int32Array(size) as DataTypeMap[D];\n  } else if (dtype === 'bool') {\n    return new Uint8Array(size) as DataTypeMap[D];\n  } else {\n    throw new Error(`Unknown data type ${dtype}`);\n  }\n}\n\n/**\n * Make nested `TypedArray` filled with zeros.\n * @param shape The shape information for the nested array.\n * @param dtype dtype of the array element.\n */\nexport function makeZerosNestedTypedArray<D extends DataType>(\n    shape: number[], dtype: D) {\n  const size = shape.reduce((prev, curr) => prev * curr, 1);\n  if (dtype == null || dtype === 'float32') {\n    return toNestedArray(shape, new Float32Array(size));\n  } else if (dtype === 'int32') {\n    return toNestedArray(shape, new Int32Array(size));\n  } else if (dtype === 'bool') {\n    return toNestedArray(shape, new Uint8Array(size));\n  } else {\n    throw new Error(`Unknown data type ${dtype}`);\n  }\n}\n\nexport function assertNonNegativeIntegerDimensions(shape: number[]) {\n  shape.forEach(dimSize => {\n    assert(\n        Number.isInteger(dimSize) && dimSize >= 0,\n        () =>\n            `Tensor must have a shape comprised of positive integers but got ` +\n            `shape [${shape}].`);\n  });\n}\n\n/**\n * Computes flat index for a given location (multidimentionsal index) in a\n * Tensor/multidimensional array.\n *\n * @param locs Location in the tensor.\n * @param rank Rank of the tensor.\n * @param strides Tensor strides.\n */\nexport function locToIndex(\n    locs: number[], rank: number, strides: number[]): number {\n  if (rank === 0) {\n    return 0;\n  } else if (rank === 1) {\n    return locs[0];\n  }\n  let index = locs[locs.length - 1];\n  for (let i = 0; i < locs.length - 1; ++i) {\n    index += strides[i] * locs[i];\n  }\n  return index;\n}\n\n/**\n * Computes the location (multidimensional index) in a\n * tensor/multidimentional array for a given flat index.\n *\n * @param index Index in flat array.\n * @param rank Rank of tensor.\n * @param strides Strides of tensor.\n */\nexport function indexToLoc(\n    index: number, rank: number, strides: number[]): number[] {\n  if (rank === 0) {\n    return [];\n  } else if (rank === 1) {\n    return [index];\n  }\n  const locs: number[] = new Array(rank);\n  for (let i = 0; i < locs.length - 1; ++i) {\n    locs[i] = Math.floor(index / strides[i]);\n    index -= locs[i] * strides[i];\n  }\n  locs[locs.length - 1] = index;\n  return locs;\n}\n\n/**\n * This method asserts whether an object is a Promise instance.\n * @param object\n */\n// tslint:disable-next-line: no-any\nexport function isPromise(object: any): object is Promise<unknown> {\n  //  We chose to not use 'obj instanceOf Promise' for two reasons:\n  //  1. It only reliably works for es6 Promise, not other Promise\n  //  implementations.\n  //  2. It doesn't work with framework that uses zone.js. zone.js monkey\n  //  patch the async calls, so it is possible the obj (patched) is\n  //  comparing to a pre-patched Promise.\n  return object && object.then && typeof object.then === 'function';\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Platform} from './platforms/platform';\nimport {isPromise} from './util_base';\n\n// Expects flags from URL in the format ?tfjsflags=FLAG1:1,FLAG2:true.\nconst TENSORFLOWJS_FLAGS_PREFIX = 'tfjsflags';\n\ntype FlagValue = number|boolean;\ntype FlagEvaluationFn = (() => FlagValue)|(() => Promise<FlagValue>);\nexport type Flags = {\n  [featureName: string]: FlagValue\n};\nexport type FlagRegistryEntry = {\n  evaluationFn: FlagEvaluationFn;\n  setHook?: (value: FlagValue) => void;\n};\n\n/**\n * The environment contains evaluated flags as well as the registered platform.\n * This is always used as a global singleton and can be retrieved with\n * `tf.env()`.\n *\n * @doc {heading: 'Environment'}\n */\nexport class Environment {\n  private flags: Flags = {};\n  private flagRegistry: {[flagName: string]: FlagRegistryEntry} = {};\n\n  private urlFlags: Flags = {};\n\n  platformName: string;\n  platform: Platform;\n\n  // Jasmine spies on this in 'environment_test.ts'\n  getQueryParams = getQueryParams;\n\n  // tslint:disable-next-line: no-any\n  constructor(public global: any) {\n    this.populateURLFlags();\n  }\n\n  setPlatform(platformName: string, platform: Platform) {\n    if (this.platform != null) {\n      if (!(env().getBool('IS_TEST') || env().getBool('PROD'))) {\n        console.warn(\n            `Platform ${this.platformName} has already been set. ` +\n            `Overwriting the platform with ${platformName}.`);\n      }\n    }\n    this.platformName = platformName;\n    this.platform = platform;\n  }\n\n  registerFlag(\n      flagName: string, evaluationFn: FlagEvaluationFn,\n      setHook?: (value: FlagValue) => void) {\n    this.flagRegistry[flagName] = {evaluationFn, setHook};\n\n    // Override the flag value from the URL. This has to happen here because\n    // the environment is initialized before flags get registered.\n    if (this.urlFlags[flagName] != null) {\n      const flagValue = this.urlFlags[flagName];\n      if (!(env().getBool('IS_TEST') || env().getBool('PROD'))) {\n        console.warn(\n            `Setting feature override from URL ${flagName}: ${flagValue}.`);\n      }\n      this.set(flagName, flagValue);\n    }\n  }\n\n  async getAsync(flagName: string): Promise<FlagValue> {\n    if (flagName in this.flags) {\n      return this.flags[flagName];\n    }\n\n    this.flags[flagName] = await this.evaluateFlag(flagName);\n    return this.flags[flagName];\n  }\n\n  get(flagName: string): FlagValue {\n    if (flagName in this.flags) {\n      return this.flags[flagName];\n    }\n\n    const flagValue = this.evaluateFlag(flagName);\n    if (isPromise(flagValue)) {\n      throw new Error(\n          `Flag ${flagName} cannot be synchronously evaluated. ` +\n          `Please use getAsync() instead.`);\n    }\n\n    this.flags[flagName] = flagValue;\n    return this.flags[flagName];\n  }\n\n  getNumber(flagName: string): number {\n    return this.get(flagName) as number;\n  }\n\n  getBool(flagName: string): boolean {\n    return this.get(flagName) as boolean;\n  }\n\n  getFlags(): Flags {\n    return this.flags;\n  }\n  // For backwards compatibility.\n  get features(): Flags {\n    return this.flags;\n  }\n\n  set(flagName: string, value: FlagValue): void {\n    if (this.flagRegistry[flagName] == null) {\n      throw new Error(\n          `Cannot set flag ${flagName} as it has not been registered.`);\n    }\n    this.flags[flagName] = value;\n    if (this.flagRegistry[flagName].setHook != null) {\n      this.flagRegistry[flagName].setHook(value);\n    }\n  }\n\n  private evaluateFlag(flagName: string): FlagValue|Promise<FlagValue> {\n    if (this.flagRegistry[flagName] == null) {\n      throw new Error(\n          `Cannot evaluate flag '${flagName}': no evaluation function found.`);\n    }\n    return this.flagRegistry[flagName].evaluationFn();\n  }\n\n  setFlags(flags: Flags) {\n    this.flags = Object.assign({}, flags);\n  }\n\n  reset() {\n    this.flags = {};\n    this.urlFlags = {};\n    this.populateURLFlags();\n  }\n\n  private populateURLFlags(): void {\n    if (typeof this.global === 'undefined' ||\n        typeof this.global.location === 'undefined' ||\n        typeof this.global.location.search === 'undefined') {\n      return;\n    }\n\n    const urlParams = this.getQueryParams(this.global.location.search);\n    if (TENSORFLOWJS_FLAGS_PREFIX in urlParams) {\n      const keyValues = urlParams[TENSORFLOWJS_FLAGS_PREFIX].split(',');\n      keyValues.forEach(keyValue => {\n        const [key, value] = keyValue.split(':') as [string, string];\n        this.urlFlags[key] = parseValue(key, value);\n      });\n    }\n  }\n}\n\nexport function getQueryParams(queryString: string): {[key: string]: string} {\n  const params = {};\n  queryString.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g, (s, ...t) => {\n    decodeParam(params, t[0], t[1]);\n    return t.join('=');\n  });\n  return params;\n}\n\nfunction decodeParam(\n    params: {[key: string]: string}, name: string, value?: string) {\n  params[decodeURIComponent(name)] = decodeURIComponent(value || '');\n}\n\nfunction parseValue(flagName: string, value: string): FlagValue {\n  value = value.toLowerCase();\n  if (value === 'true' || value === 'false') {\n    return value === 'true';\n  } else if (`${+ value}` === value) {\n    return +value;\n  }\n  throw new Error(\n      `Could not parse value flag value ${value} for flag ${flagName}.`);\n}\n\n/**\n * Returns the current environment (a global singleton).\n *\n * The environment object contains the evaluated feature values as well as the\n * active platform.\n *\n * @doc {heading: 'Environment'}\n */\nexport function env() {\n  return ENV;\n}\n\nexport let ENV: Environment = null;\nexport function setEnvironmentGlobal(environment: Environment) {\n  ENV = environment;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Note that the identifier globalNameSpace is scoped to this module, but will\n// always resolve to the same global object regardless of how the module is\n// resolved.\n// tslint:disable-next-line:no-any\nlet globalNameSpace: {_tfGlobals: Map<string, any>};\n// tslint:disable-next-line:no-any\nexport function getGlobalNamespace(): {_tfGlobals: Map<string, any>} {\n  if (globalNameSpace == null) {\n    // tslint:disable-next-line:no-any\n    let ns: any;\n    if (typeof (window) !== 'undefined') {\n      ns = window;\n    } else if (typeof (global) !== 'undefined') {\n      ns = global;\n    } else if (typeof (process) !== 'undefined') {\n      ns = process;\n    } else if (typeof (self) !== 'undefined') {\n      ns = self;\n    } else {\n      throw new Error('Could not find a global object');\n    }\n    globalNameSpace = ns;\n  }\n  return globalNameSpace;\n}\n\n// tslint:disable-next-line:no-any\nfunction getGlobalMap(): Map<string, any> {\n  const ns = getGlobalNamespace();\n  if (ns._tfGlobals == null) {\n    ns._tfGlobals = new Map();\n  }\n  return ns._tfGlobals;\n}\n\n/**\n * Returns a globally accessible 'singleton' object.\n *\n * @param key the name of the object\n * @param init a function to initialize to initialize this object\n *             the first time it is fetched.\n */\nexport function getGlobal<T>(key: string, init: () => T): T {\n  const globalMap = getGlobalMap();\n  if (globalMap.has(key)) {\n    return globalMap.get(key);\n  } else {\n    const singleton = init();\n    globalMap.set(key, singleton);\n    return globalMap.get(key);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Allow UpperCamelCase variable names\n// tslint:disable: variable-name\n// Unfortunately just enabling PascalCase per file (tslint:enable:\n// allow-pascal-case) doesn't work.\nimport { NamedTensorInfoMap } from './kernel_registry';\nimport { TensorInfo } from './tensor_info';\nimport {ExplicitPadding} from './ops/conv_util';\nimport {Activation} from './ops/fused_types';\nimport {DataType, PixelData} from './types';\n\nexport const Abs = 'Abs';\nexport type AbsInputs = UnaryInputs;\n\nexport const Acos = 'Acos';\nexport type AcosInputs = UnaryInputs;\n\nexport const Acosh = 'Acosh';\nexport type AcoshInputs = UnaryInputs;\n\nexport const Add = 'Add';\nexport type AddInputs = BinaryInputs;\n\nexport const AddN = 'AddN';\nexport type AddNInputs = TensorInfo[];\n\nexport const All = 'All';\nexport type AllInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface AllAttrs {\n  axis: number|number[];\n  keepDims: boolean;\n}\n\nexport const Any = 'Any';\nexport type AnyInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface AnyAttrs {\n  axis: number|number[];\n  keepDims: boolean;\n}\n\nexport const ArgMax = 'ArgMax';\nexport type ArgMaxInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface ArgMaxAttrs {\n  axis: number;\n}\n\nexport const ArgMin = 'ArgMin';\nexport type ArgMinInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface ArgMinAttrs {\n  axis: number;\n}\n\nexport const Asin = 'Asin';\nexport type AsinInputs = UnaryInputs;\n\nexport const Asinh = 'Asinh';\nexport type AsinhInputs = UnaryInputs;\n\nexport const Atan = 'Atan';\nexport type AtanInputs = UnaryInputs;\n\nexport const Atanh = 'Atanh';\nexport type AtanhInputs = UnaryInputs;\n\nexport const Atan2 = 'Atan2';\nexport type Atan2Inputs = BinaryInputs;\n\nexport const AvgPool = 'AvgPool';\nexport type AvgPoolInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface AvgPoolAttrs {\n  filterSize: [number, number]|number;\n  strides: [number, number]|number;\n  pad: 'valid'|'same'|number|ExplicitPadding;\n  dimRoundingMode?: 'floor'|'round'|'ceil';\n}\n\nexport const AvgPoolGrad = 'AvgPoolGrad';\nexport type AvgPoolGradInputs = Pick<NamedTensorInfoMap, 'dy'|'input'>;\nexport interface AvgPoolGradAttrs {\n  filterSize: [number, number]|number;\n  strides: [number, number]|number;\n  pad: 'valid'|'same'|number|ExplicitPadding;\n}\n\nexport const AvgPool3D = 'AvgPool3D';\nexport type AvgPool3DInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface AvgPool3DAttrs {\n  filterSize: [number, number, number]|number;\n  strides: [number, number, number]|number;\n  pad: 'valid'|'same'|number;\n  dimRoundingMode?: 'floor'|'round'|'ceil';\n  dataFormat: 'NDHWC'|'NCDHW';\n}\n\nexport const AvgPool3DGrad = 'AvgPool3DGrad';\nexport type AvgPool3DGradInputs = Pick<NamedTensorInfoMap, 'dy'|'input'>;\nexport interface AvgPool3DGradAttrs {\n  filterSize: [number, number, number]|number;\n  strides: [number, number, number]|number;\n  pad: 'valid'|'same'|number;\n  dimRoundingMode?: 'floor'|'round'|'ceil';\n}\n\nexport const BatchMatMul = 'BatchMatMul';\nexport type BatchMatMulInputs = Pick<NamedTensorInfoMap, 'a'|'b'>;\nexport interface BatchMatMulAttrs {\n  transposeA: boolean;\n  transposeB: boolean;\n}\n\nexport const BatchToSpaceND = 'BatchToSpaceND';\nexport type BatchToSpaceNDInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface BatchToSpaceNDAttrs {\n  blockShape: number[];\n  crops: number[][];\n}\n\nexport type BinaryInputs = Pick<NamedTensorInfoMap, 'a'|'b'>;\n\nexport const Bincount = 'Bincount';\nexport type BincountInputs = Pick<NamedTensorInfoMap, 'x'|'weights'>;\nexport interface BincountAttrs {\n  size: number;\n}\n\nexport const BroadcastTo = 'BroadcastTo';\nexport type BroadcastToInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface BroadCastToAttrs {\n  shape: number[];\n  inputShape: number[];  // for gradient\n}\n\nexport const BroadcastArgs = 'BroadcastArgs';\nexport type BroadcastArgsInputs = Pick<NamedTensorInfoMap, 's0'|'s1'>;\n\nexport const Cast = 'Cast';\nexport type CastInputs = UnaryInputs;\nexport interface CastAttrs {\n  dtype: DataType;\n}\n\nexport const Ceil = 'Ceil';\nexport type CeilInputs = UnaryInputs;\n\nexport const ClipByValue = 'ClipByValue';\nexport type ClipByValueInputs = UnaryInputs;\nexport interface ClipByValueAttrs {\n  clipValueMin: number;\n  clipValueMax: number;\n}\n\nexport const Complex = 'Complex';\nexport type ComplexInputs = Pick<NamedTensorInfoMap, 'real'|'imag'>;\n\nexport const ComplexAbs = 'ComplexAbs';\nexport type ComplexAbsInputs = UnaryInputs;\n\nexport const Concat = 'Concat';\nexport type ConcatInputs = TensorInfo[];\nexport interface ConcatAttrs {\n  axis: number;\n}\n\nexport const Conv2D = 'Conv2D';\nexport type Conv2DInputs = Pick<NamedTensorInfoMap, 'x'|'filter'>;\nexport interface Conv2DAttrs {\n  strides: [number, number]|number;\n  pad: 'valid'|'same'|number|ExplicitPadding;\n  dataFormat: 'NHWC'|'NCHW';\n  dilations: [number, number]|number;\n  dimRoundingMode?: 'floor'|'round'|'ceil';\n}\n\nexport const Conv2DBackpropFilter = 'Conv2DBackpropFilter';\nexport type Conv2DBackpropFilterInputs = Pick<NamedTensorInfoMap, 'x'|'dy'>;\nexport interface Conv2DBackpropFilterAttrs {\n  strides: [number, number]|number;\n  pad: 'valid'|'same'|number|ExplicitPadding;\n  dataFormat: 'NHWC'|'NCHW';\n  dimRoundingMode?: 'floor'|'round'|'ceil';\n  filterShape: [number, number, number, number];\n}\n\nexport const Conv2DBackpropInput = 'Conv2DBackpropInput';\nexport type Conv2DBackpropInputInputs = Pick<NamedTensorInfoMap, 'dy'|'filter'>;\nexport interface Conv2DBackpropInputAttrs {\n  strides: [number, number]|number;\n  pad: 'valid'|'same'|number|ExplicitPadding;\n  dataFormat: 'NHWC'|'NCHW';\n  dimRoundingMode?: 'floor'|'round'|'ceil';\n  inputShape: [number, number, number, number];\n}\n\nexport const Conv3D = 'Conv3D';\nexport type Conv3DInputs = Pick<NamedTensorInfoMap, 'x'|'filter'>;\nexport interface Conv3DAttrs {\n  strides: [number, number, number]|number;\n  pad: 'valid'|'same';\n  dataFormat: 'NDHWC'|'NCDHW';\n  dilations: [number, number, number]|number;\n}\n\nexport const Conv3DBackpropFilterV2 = 'Conv3DBackpropFilterV2';\nexport type Conv3DBackpropFilterV2Inputs = Pick<NamedTensorInfoMap, 'x'|'dy'>;\n\nexport interface Conv3DBackpropFilterV2Attrs {\n  strides: [number, number, number]|number;\n  pad: 'valid'|'same';\n  filterShape: [number, number, number, number, number];\n}\n\nexport const Conv3DBackpropInputV2 = 'Conv3DBackpropInputV2';\nexport type Conv3DBackpropInputV2Inputs =\n    Pick<NamedTensorInfoMap, 'dy'|'filter'>;\nexport interface Conv3DBackpropInputV2Attrs {\n  strides: [number, number, number]|number;\n  pad: 'valid'|'same';\n  inputShape: [number, number, number, number, number];\n}\n\nexport const Cos = 'Cos';\nexport type CosInputs = UnaryInputs;\n\nexport const Cosh = 'Cosh';\nexport type CoshInputs = UnaryInputs;\n\nexport const Cumprod = 'Cumprod';\nexport type CumprodInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface CumprodAttrs {\n  axis: number;\n  exclusive: boolean;\n  reverse: boolean;\n}\n\nexport const Cumsum = 'Cumsum';\nexport type CumsumInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface CumsumAttrs {\n  axis: number;\n  exclusive: boolean;\n  reverse: boolean;\n}\n\nexport const CropAndResize = 'CropAndResize';\nexport type CropAndResizeInputs =\n    Pick<NamedTensorInfoMap, 'image'|'boxes'|'boxInd'>;\nexport interface CropAndResizeAttrs {\n  cropSize: [number, number];\n  method: 'bilinear'|'nearest';\n  extrapolationValue: number;\n}\n\nexport const DenseBincount = 'DenseBincount';\nexport type DenseBincountInputs = Pick<NamedTensorInfoMap, 'x'|'weights'>;\nexport interface DenseBincountAttrs {\n  size: number;\n  binaryOutput?: boolean;\n}\n\nexport const DepthToSpace = 'DepthToSpace';\nexport type DepthToSpaceInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface DepthToSpaceAttrs {\n  blockSize: number;\n  dataFormat: 'NHWC'|'NCHW';\n}\n\nexport const DepthwiseConv2dNative = 'DepthwiseConv2dNative';\nexport type DepthwiseConv2dNativeInputs =\n    Pick<NamedTensorInfoMap, 'x'|'filter'>;\nexport interface DepthwiseConv2dNativeAttrs {\n  strides: [number, number]|number;\n  pad: 'valid'|'same'|number|ExplicitPadding;\n  dataFormat: 'NHWC'|'NCHW';\n  dilations: [number, number]|number;\n  dimRoundingMode?: 'floor'|'round'|'ceil';\n}\n\nexport const DepthwiseConv2dNativeBackpropFilter =\n    'DepthwiseConv2dNativeBackpropFilter';\nexport type DepthwiseConv2dNativeBackpropFilterInputs =\n    Pick<NamedTensorInfoMap, 'x'|'dy'>;\nexport interface DepthwiseConv2dNativeBackpropFilterAttrs {\n  strides: [number, number]|number;\n  dilations: [number, number]|number;\n  pad: 'valid'|'same'|number|ExplicitPadding;\n  dimRoundingMode?: 'floor'|'round'|'ceil';\n  filterShape: [number, number, number, number];\n}\n\nexport const DepthwiseConv2dNativeBackpropInput =\n    'DepthwiseConv2dNativeBackpropInput';\nexport type DepthwiseConv2dNativeBackpropInputInputs =\n    Pick<NamedTensorInfoMap, 'dy'|'filter'>;\nexport interface DepthwiseConv2dNativeBackpropInputAttrs {\n  strides: [number, number]|number;\n  dilations: [number, number]|number;\n  pad: 'valid'|'same'|number|ExplicitPadding;\n  dimRoundingMode?: 'floor'|'round'|'ceil';\n  inputShape: [number, number, number, number];\n}\n\nexport const Diag = 'Diag';\nexport type DiagInputs = Pick<NamedTensorInfoMap, 'x'>;\n\nexport const Dilation2D = 'Dilation2D';\nexport type Dilation2DInputs = Pick<NamedTensorInfoMap, 'x'|'filter'>;\nexport interface Dilation2DAttrs {\n  strides: [number, number]|number;\n  pad: 'valid'|'same'|number;\n  dilations: [number, number]|number;\n}\n\nexport const Dilation2DBackpropInput = 'Dilation2DBackpropInput';\nexport type Dilation2DBackpropInputInputs =\n    Pick<NamedTensorInfoMap, 'x'|'filter'|'dy'>;\n\nexport const Dilation2DBackpropFilter = 'Dilation2DBackpropFilter';\nexport type Dilation2DBackpropFilterInputs =\n    Pick<NamedTensorInfoMap, 'x'|'filter'|'dy'>;\n\nexport const RealDiv = 'RealDiv';\nexport type RealDivInputs = BinaryInputs;\n\nexport const Einsum = 'Einsum';\nexport type EinsumInputs = TensorInfo[];\nexport interface EinsumAttrs {\n  equation: string;\n}\n\nexport const Elu = 'Elu';\nexport type EluInputs = Pick<NamedTensorInfoMap, 'x'>;\n\nexport const EluGrad = 'EluGrad';\nexport type EluGradInputs = Pick<NamedTensorInfoMap, 'dy'|'y'>;\n\nexport const Erf = 'Erf';\nexport type ErfInputs = UnaryInputs;\n\nexport const Equal = 'Equal';\nexport type EqualInputs = BinaryInputs;\n\nexport const Exp = 'Exp';\nexport type ExpInputs = UnaryInputs;\n\nexport const ExpandDims = 'ExpandDims';\nexport type ExpandDimsInputs = Pick<NamedTensorInfoMap, 'input'>;\nexport interface ExpandDimsAttrs {\n  dim: number;\n}\n\nexport const Expm1 = 'Expm1';\nexport type Expm1Inputs = UnaryInputs;\n\nexport const FFT = 'FFT';\nexport type FFTInputs = Pick<NamedTensorInfoMap, 'input'>;\n\nexport const Fill = 'Fill';\nexport interface FillAttrs {\n  shape: number[];\n  value: number|string;\n  dtype: DataType;\n}\n\nexport const FlipLeftRight = 'FlipLeftRight';\nexport type FlipLeftRightInputs = Pick<NamedTensorInfoMap, 'image'>;\n\nexport const Floor = 'Floor';\nexport type FloorInputs = UnaryInputs;\n\nexport const FloorDiv = 'FloorDiv';\nexport type FloorDivInputs = BinaryInputs;\n\nexport const FusedBatchNorm = 'FusedBatchNorm';\nexport type FusedBatchNormInputs =\n    Pick<NamedTensorInfoMap, 'x'|'scale'|'offset'|'mean'|'variance'>;\nexport interface FusedBatchNormAttrs {\n  varianceEpsilon: number;\n}\n\nexport const GatherV2 = 'GatherV2';\nexport type GatherV2Inputs = Pick<NamedTensorInfoMap, 'x'|'indices'>;\nexport interface GatherV2Attrs {\n  axis: number;\n  batchDims: number;\n}\n\nexport const GatherNd = 'GatherNd';\nexport type GatherNdInputs = Pick<NamedTensorInfoMap, 'params'|'indices'>;\n\nexport const Greater = 'Greater';\nexport type GreaterInputs = BinaryInputs;\n\nexport const GreaterEqual = 'GreaterEqual';\nexport type GreaterEqualInputs = BinaryInputs;\n\nexport const Identity = 'Identity';\nexport type IdentityInputs = Pick<NamedTensorInfoMap, 'x'>;\n\nexport const IFFT = 'IFFT';\nexport type IFFTInputs = Pick<NamedTensorInfoMap, 'input'>;\n\nexport const Imag = 'Imag';\nexport type ImagInputs = Pick<NamedTensorInfoMap, 'input'>;\n\nexport const IsFinite = 'IsFinite';\nexport type IsFiniteInputs = UnaryInputs;\n\nexport const IsInf = 'IsInf';\nexport type IsInfInputs = UnaryInputs;\n\nexport const IsNan = 'IsNan';\nexport type IsNanInputs = UnaryInputs;\n\nexport const LeakyRelu = 'LeakyRelu';\nexport type LeakyReluInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface LeakyReluAttrs {\n  alpha: number;\n}\n\nexport const Less = 'Less';\nexport type LessInputs = BinaryInputs;\n\nexport const LessEqual = 'LessEqual';\nexport type LessEqualInputs = BinaryInputs;\n\nexport const LinSpace = 'LinSpace';\nexport interface LinSpaceAttrs {\n  start: number;\n  stop: number;\n  num: number;\n}\nexport const Log = 'Log';\nexport type LogInputs = UnaryInputs;\n\nexport const Log1p = 'Log1p';\nexport type Log1pInputs = UnaryInputs;\n\nexport const LogicalAnd = 'LogicalAnd';\nexport type LogicalAndInputs = BinaryInputs;\n\nexport const LogicalNot = 'LogicalNot';\nexport type LogicalNotInputs = Pick<NamedTensorInfoMap, 'x'>;\n\nexport const LogicalOr = 'LogicalOr';\nexport type LogicalOrInputs = BinaryInputs;\n\nexport const LogicalXor = 'LogicalXor';\nexport type LogicalXorInputs = BinaryInputs;\n\nexport const LogSoftmax = 'LogSoftmax';\nexport type LogSoftmaxInputs = Pick<NamedTensorInfoMap, 'logits'>;\nexport interface LogSoftmaxAttrs {\n  axis: number;\n}\n\nexport const LowerBound = 'LowerBound';\nexport type LowerBoundInputs =\n    Pick<NamedTensorInfoMap, 'sortedSequence'|'values'>;\n\nexport const LRN = 'LRN';\nexport type LRNInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface LRNAttrs {\n  depthRadius: number;\n  bias: number;\n  alpha: number;\n  beta: number;\n}\n\nexport const LRNGrad = 'LRNGrad';\nexport type LRNGradInputs = Pick<NamedTensorInfoMap, 'x'|'y'|'dy'>;\nexport interface LRNGradAttrs {\n  depthRadius: number;\n  bias: number;\n  alpha: number;\n  beta: number;\n}\n\nexport const Max = 'Max';\nexport type MaxInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface MaxAttrs {\n  reductionIndices: number|number[];\n  keepDims: boolean;\n}\n\nexport const Maximum = 'Maximum';\nexport type MaximumInputs = BinaryInputs;\n\nexport const MaxPool = 'MaxPool';\nexport type MaxPoolInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface MaxPoolAttrs {\n  filterSize: [number, number]|number;\n  strides: [number, number]|number;\n  pad: 'valid'|'same'|number|ExplicitPadding;\n  dimRoundingMode?: 'floor'|'round'|'ceil';\n}\n\nexport const MaxPoolGrad = 'MaxPoolGrad';\nexport type MaxPoolGradInputs = Pick<NamedTensorInfoMap, 'dy'|'input'|'output'>;\nexport interface MaxPoolGradAttrs {\n  filterSize: [number, number]|number;\n  strides: [number, number]|number;\n  pad: 'valid'|'same'|number|ExplicitPadding;\n  dimRoundingMode?: 'floor'|'round'|'ceil';\n}\n\nexport const MaxPool3D = 'MaxPool3D';\nexport type MaxPool3DInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface MaxPool3DAttrs {\n  filterSize: [number, number, number]|number;\n  strides: [number, number, number]|number;\n  pad: 'valid'|'same'|number;\n  dataFormat: 'NDHWC'|'NCDHW';\n  dimRoundingMode?: 'floor'|'round'|'ceil';\n}\n\nexport const MaxPool3DGrad = 'MaxPool3DGrad';\nexport type MaxPool3DGradInputs =\n    Pick<NamedTensorInfoMap, 'dy'|'input'|'output'>;\nexport interface MaxPool3DGradAttrs {\n  filterSize: [number, number, number]|number;\n  strides: [number, number, number]|number;\n  pad: 'valid'|'same'|number;\n  dimRoundingMode?: 'floor'|'round'|'ceil';\n}\n\nexport const MaxPoolWithArgmax = 'MaxPoolWithArgmax';\nexport type MaxPoolWithArgmaxInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface MaxPoolWithArgmaxAttrs {\n  filterSize: [number, number]|number;\n  strides: [number, number]|number;\n  pad: 'valid'|'same'|number;\n  includeBatchInIndex: boolean;\n}\n\nexport const Mean = 'Mean';\nexport type MeanInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface MeanAttrs {\n  axis: number|number[];\n  keepDims: boolean;\n}\n\nexport const Min = 'Min';\nexport type MinInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface MinAttrs {\n  axis: number|number[];\n  keepDims: boolean;\n}\n\nexport const Minimum = 'Minimum';\nexport type MinimumInputs = BinaryInputs;\n\nexport const MirrorPad = 'MirrorPad';\nexport type MirrorPadInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface MirrorPadAttrs {\n  paddings: Array<[number, number]>;\n  mode: 'reflect'|'symmetric';\n}\n\nexport const Mod = 'Mod';\nexport type ModInputs = BinaryInputs;\n\nexport const Multinomial = 'Multinomial';\nexport type MultinomialInputs = Pick<NamedTensorInfoMap, 'logits'>;\nexport interface MultinomialAttrs {\n  numSamples: number;\n  seed: number;\n  normalized: boolean;\n}\n\nexport const Multiply = 'Multiply';\nexport type MultiplyInputs = BinaryInputs;\n\nexport const Neg = 'Neg';\nexport type NegInputs = UnaryInputs;\n\nexport const NotEqual = 'NotEqual';\nexport type NotEqualInputs = BinaryInputs;\n\nexport const NonMaxSuppressionV3 = 'NonMaxSuppressionV3';\nexport type NonMaxSuppressionV3Inputs =\n    Pick<NamedTensorInfoMap, 'boxes'|'scores'>;\nexport interface NonMaxSuppressionV3Attrs {\n  maxOutputSize: number;\n  iouThreshold: number;\n  scoreThreshold: number;\n}\n\nexport const NonMaxSuppressionV4 = 'NonMaxSuppressionV4';\nexport type NonMaxSuppressionV4Inputs =\n    Pick<NamedTensorInfoMap, 'boxes'|'scores'>;\nexport interface NonMaxSuppressionV4Attrs {\n  maxOutputSize: number;\n  iouThreshold: number;\n  scoreThreshold: number;\n  padToMaxOutputSize: boolean;\n}\n\nexport const NonMaxSuppressionV5 = 'NonMaxSuppressionV5';\nexport type NonMaxSuppressionV5Inputs =\n    Pick<NamedTensorInfoMap, 'boxes'|'scores'>;\nexport interface NonMaxSuppressionV5Attrs {\n  maxOutputSize: number;\n  iouThreshold: number;\n  scoreThreshold: number;\n  softNmsSigma: number;\n}\n\nexport const OnesLike = 'OnesLike';\nexport type OnesLikeInputs = UnaryInputs;\n\nexport const OneHot = 'OneHot';\nexport type OneHotInputs = Pick<NamedTensorInfoMap, 'indices'>;\nexport interface OneHotAttrs {\n  depth: number;\n  onValue: number;\n  offValue: number;\n  dtype: DataType;\n}\n\nexport const Pack = 'Pack';\nexport type PackInputs = TensorInfo[];\nexport interface PackAttrs {\n  axis: number;\n}\n\nexport const PadV2 = 'PadV2';\nexport type PadV2Inputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface PadV2Attrs {\n  paddings: Array<[number, number]>;\n  constantValue: number;\n}\n\nexport const Pool = 'Pool';\nexport type PoolInputs = Pick<NamedTensorInfoMap, 'input'>;\n\nexport const Pow = 'Pow';\nexport type PowInputs = BinaryInputs;\n\nexport const Prelu = 'Prelu';\nexport type PreluInputs = Pick<NamedTensorInfoMap, 'x'|'alpha'>;\n\nexport const Prod = 'Prod';\nexport type ProdInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface ProdAttrs {\n  axis: number|number[];\n  keepDims: boolean;\n}\n\nexport const RaggedGather = 'RaggedGather';\nexport type RaggedGatherInputs = {\n  paramsNestedSplits: TensorInfo[]\n}&Pick<NamedTensorInfoMap, 'paramsDenseValues'|'indices'>;\nexport interface RaggedGatherAttrs {\n  outputRaggedRank: number;\n}\n\nexport const RaggedRange = 'RaggedRange';\nexport type RaggedRangeInputs =\n    Pick<NamedTensorInfoMap, 'starts'|'limits'|'deltas'>;\n\nexport const RaggedTensorToTensor = 'RaggedTensorToTensor';\nexport type RaggedTensorToTensorInputs =\n    Pick<NamedTensorInfoMap, 'shape'|'values'|'defaultValue'>&\n    {rowPartitionTensors: TensorInfo[]};\nexport interface RaggedTensorToTensorAttrs {\n  rowPartitionTypes: string[];\n}\n\nexport const Range = 'Range';\nexport interface RangeAttrs {\n  start: number;\n  stop: number;\n  step: number;\n  dtype: 'float32'|'int32';\n}\n\nexport const Real = 'Real';\nexport type RealInputs = Pick<NamedTensorInfoMap, 'input'>;\n\nexport const Reciprocal = 'Reciprocal';\nexport type ReciprocalInputs = UnaryInputs;\n\nexport const Relu = 'Relu';\nexport type ReluInputs = Pick<NamedTensorInfoMap, 'x'>;\n\nexport const Reshape = 'Reshape';\nexport type ReshapeInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface ReshapeAttrs {\n  shape: number[];\n}\n\nexport const ResizeNearestNeighbor = 'ResizeNearestNeighbor';\nexport type ResizeNearestNeighborInputs = Pick<NamedTensorInfoMap, 'images'>;\nexport interface ResizeNearestNeighborAttrs {\n  alignCorners: boolean;\n  halfPixelCenters: boolean;\n  size: [number, number];\n}\n\nexport const ResizeNearestNeighborGrad = 'ResizeNearestNeighborGrad';\nexport type ResizeNearestNeighborGradInputs =\n    Pick<NamedTensorInfoMap, 'images'|'dy'>;\nexport type ResizeNearestNeighborGradAttrs = ResizeNearestNeighborAttrs;\n\nexport const ResizeBilinear = 'ResizeBilinear';\nexport type ResizeBilinearInputs = Pick<NamedTensorInfoMap, 'images'>;\nexport interface ResizeBilinearAttrs {\n  alignCorners: boolean;\n  halfPixelCenters: boolean;\n  size: [number, number];\n}\n\nexport const ResizeBilinearGrad = 'ResizeBilinearGrad';\nexport type ResizeBilinearGradInputs = Pick<NamedTensorInfoMap, 'images'|'dy'>;\nexport type ResizeBilinearGradAttrs = ResizeBilinearAttrs;\n\nexport const Relu6 = 'Relu6';\nexport type Relu6Inputs = Pick<NamedTensorInfoMap, 'x'>;\n\nexport const Reverse = 'Reverse';\nexport type ReverseInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface ReverseAttrs {\n  dims: number|number[];\n}\n\nexport const Round = 'Round';\nexport type RoundInputs = UnaryInputs;\n\nexport const Rsqrt = 'Rsqrt';\nexport type RsqrtInputs = UnaryInputs;\n\nexport const ScatterNd = 'ScatterNd';\nexport type ScatterNdInputs = Pick<NamedTensorInfoMap, 'indices'|'updates'>;\nexport interface ScatterNdAttrs {\n  shape: number[];\n}\n\nexport const SearchSorted = 'SearchSorted';\nexport type SearchSortedInputs =\n    Pick<NamedTensorInfoMap, 'sortedSequence'|'values'>;\nexport interface SearchSortedAttrs {\n  side: 'left'|'right';\n}\n\nexport const Select = 'Select';\nexport type SelectInputs = Pick<NamedTensorInfoMap, 'condition'|'t'|'e'>;\n\nexport const Selu = 'Selu';\nexport type SeluInputs = Pick<NamedTensorInfoMap, 'x'>;\n\nexport const Slice = 'Slice';\nexport type SliceInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface SliceAttrs {\n  begin: number|number[];\n  size: number|number[];\n}\nexport const Sin = 'Sin';\nexport type SinInputs = UnaryInputs;\n\nexport const Sinh = 'Sinh';\nexport type SinhInputs = UnaryInputs;\n\nexport const Sign = 'Sign';\nexport type SignInputs = UnaryInputs;\n\nexport const Sigmoid = 'Sigmoid';\nexport type SigmoidInputs = UnaryInputs;\n\nexport const Softplus = 'Softplus';\nexport type SoftplusInputs = UnaryInputs;\n\nexport const Sqrt = 'Sqrt';\nexport type SqrtInputs = UnaryInputs;\n\nexport const Sum = 'Sum';\nexport type SumInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface SumAttrs {\n  axis: number|number[];\n  keepDims: boolean;\n}\n\nexport const SpaceToBatchND = 'SpaceToBatchND';\nexport type SpaceToBatchNDInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface SpaceToBatchNDAttrs {\n  blockShape: number[];\n  paddings: number[][];\n}\n\nexport const SplitV = 'SplitV';\nexport type SplitVInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface SplitVAttrs {\n  numOrSizeSplits: number[]|number;\n  axis: number;\n}\n\nexport const Softmax = 'Softmax';\nexport type SoftmaxInputs = Pick<NamedTensorInfoMap, 'logits'>;\nexport interface SoftmaxAttrs {\n  dim: number;\n}\n\nexport const SparseFillEmptyRows = 'SparseFillEmptyRows';\nexport type SparseFillEmptyRowsInputs =\n    Pick<NamedTensorInfoMap, 'indices'|'values'|'denseShape'|'defaultValue'>;\n\nexport const SparseReshape = 'SparseReshape';\nexport type SparseReshapeInputs =\n    Pick<NamedTensorInfoMap, 'inputIndices'|'inputShape'|'newShape'>;\n\nexport const SparseSegmentMean = 'SparseSegmentMean';\nexport type SparseSegmentMeanInputs =\n    Pick<NamedTensorInfoMap, 'data'|'indices'|'segmentIds'>;\n\nexport const SparseSegmentSum = 'SparseSegmentSum';\nexport type SparseSegmentSumInputs =\n    Pick<NamedTensorInfoMap, 'data'|'indices'|'segmentIds'>;\n\nexport const SparseToDense = 'SparseToDense';\nexport type SparseToDenseInputs =\n    Pick<NamedTensorInfoMap, 'sparseIndices'|'sparseValues'|'defaultValue'>;\nexport interface SparseToDenseAttrs {\n  outputShape: number[];\n}\n\nexport const SquaredDifference = 'SquaredDifference';\nexport type SquaredDifferenceInputs = BinaryInputs;\n\nexport const Square = 'Square';\nexport type SquareInputs = Pick<NamedTensorInfoMap, 'x'>;\n\nexport const StridedSlice = 'StridedSlice';\nexport type StridedSliceInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface StridedSliceAttrs {\n  begin: number[];\n  end: number[];\n  strides: number[];\n  beginMask: number;\n  endMask: number;\n  ellipsisMask: number;\n  newAxisMask: number;\n  shrinkAxisMask: number;\n}\n\nexport const StringNGrams = 'StringNGrams';\nexport type StringNGramsInputs = Pick<NamedTensorInfoMap, 'data'|'dataSplits'>;\nexport interface StringNGramsAttrs {\n  separator: string;\n  nGramWidths: number[];\n  leftPad: string;\n  rightPad: string;\n  padWidth: number;\n  preserveShortSequences: boolean;\n}\n\nexport const StringSplit = 'StringSplit';\nexport type StringSplitInputs = Pick<NamedTensorInfoMap, 'input'|'delimiter'>;\nexport interface StringSplitAttrs {\n  skipEmpty: boolean;\n}\n\nexport const StringToHashBucketFast = 'StringToHashBucketFast';\nexport type StringToHashBucketFastInputs = Pick<NamedTensorInfoMap, 'input'>;\nexport interface StringToHashBucketFastAttrs {\n  numBuckets: number;\n}\n\nexport const Sub = 'Sub';\nexport type SubInputs = BinaryInputs;\n\nexport const Tan = 'Tan';\nexport type TanInputs = UnaryInputs;\n\nexport const Tanh = 'Tanh';\nexport type TanhInputs = UnaryInputs;\n\nexport const Tile = 'Tile';\nexport type TileInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface TileAttrs {\n  reps: number[];\n}\n\nexport const TopK = 'TopK';\nexport type TopKInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface TopKAttrs {\n  k: number;\n  sorted: boolean;\n}\n\nexport const Transform = 'Transform';\nexport type TransformInputs = Pick<NamedTensorInfoMap, 'image'|'transforms'>;\nexport interface TransformAttrs {\n  interpolation: 'nearest'|'bilinear';\n  fillMode: 'constant'|'reflect'|'wrap'|'nearest';\n  fillValue: number;\n  outputShape?: [number, number];\n}\n\nexport const Transpose = 'Transpose';\nexport type TransposeInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface TransposeAttrs {\n  perm: number[];\n}\n\nexport const Unique = 'Unique';\nexport type UniqueInputs = Pick<NamedTensorInfoMap, 'x'>;\nexport interface UniqueAttrs {\n  axis: number;\n}\n\nexport type UnaryInputs = Pick<NamedTensorInfoMap, 'x'>;\n\nexport const Unpack = 'Unpack';\nexport type UnpackInputs = Pick<NamedTensorInfoMap, 'value'>;\nexport interface UnpackAttrs {\n  axis: number;\n}\n\nexport const UnsortedSegmentSum = 'UnsortedSegmentSum';\nexport type UnsortedSegmentSumInputs =\n    Pick<NamedTensorInfoMap, 'x'|'segmentIds'>;\nexport interface UnsortedSegmentSumAttrs {\n  numSegments: number;\n}\n\nexport const UpperBound = 'UpperBound';\nexport type UpperBoundInputs =\n    Pick<NamedTensorInfoMap, 'sortedSequence'|'values'>;\n\nexport const ZerosLike = 'ZerosLike';\nexport type ZerosLikeInputs = UnaryInputs;\n\n/**\n * TensorFlow.js-only kernels\n */\nexport const Step = 'Step';\nexport type StepInputs = UnaryInputs;\nexport interface StepAttrs {\n  alpha: number;\n}\n\nexport const FromPixels = 'FromPixels';\nexport interface FromPixelsInputs {\n  pixels: PixelData|ImageData|HTMLImageElement|HTMLCanvasElement|\n      HTMLVideoElement|ImageBitmap;\n}\nexport interface FromPixelsAttrs {\n  numChannels: number;\n}\n\nexport const RotateWithOffset = 'RotateWithOffset';\nexport type RotateWithOffsetInputs = Pick<NamedTensorInfoMap, 'image'>;\nexport interface RotateWithOffsetAttrs {\n  radians: number;\n  fillValue: number|[number, number, number];\n  center: number|[number, number];\n}\n\nexport const _FusedMatMul = '_FusedMatMul';\n// tslint:disable-next-line: class-name\nexport interface _FusedMatMulInputs extends NamedTensorInfoMap {\n  a: TensorInfo;\n  b: TensorInfo;\n  bias?: TensorInfo;\n  preluActivationWeights?: TensorInfo;\n}\n// tslint:disable-next-line: class-name\nexport interface _FusedMatMulAttrs {\n  transposeA: boolean;\n  transposeB: boolean;\n  activation: Activation;\n  leakyreluAlpha?: number;\n}\n\nexport const FusedConv2D = 'FusedConv2D';\nexport interface FusedConv2DInputs extends NamedTensorInfoMap {\n  x: TensorInfo;\n  filter: TensorInfo;\n  bias?: TensorInfo;\n  preluActivationWeights?: TensorInfo;\n}\nexport interface FusedConv2DAttrs {\n  strides: [number, number]|number;\n  pad: 'valid'|'same'|number|ExplicitPadding;\n  dataFormat: 'NHWC'|'NCHW';\n  dilations: [number, number]|number;\n  dimRoundingMode: 'floor'|'round'|'ceil';\n  activation: Activation;\n  leakyreluAlpha?: number;\n}\n\nexport const FusedDepthwiseConv2D = 'FusedDepthwiseConv2D';\nexport interface FusedDepthwiseConv2DInputs extends NamedTensorInfoMap {\n  x: TensorInfo;\n  filter: TensorInfo;\n  bias?: TensorInfo;\n  preluActivationWeights?: TensorInfo;\n}\nexport interface FusedDepthwiseConv2DAttrs {\n  strides: [number, number]|number;\n  pad: 'valid'|'same'|number|ExplicitPadding;\n  dataFormat: 'NHWC'|'NCHW';\n  dilations: [number, number]|number;\n  dimRoundingMode: 'floor'|'round'|'ceil';\n  activation: Activation;\n  leakyreluAlpha?: number;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env} from './environment';\n\nexport function warn(...msg: Array<{}>): void {\n  if (!(env().getBool('IS_TEST') || env().getBool('PROD'))) {\n    console.warn(...msg);\n  }\n}\n\nexport function log(...msg: Array<{}>): void {\n  if (!(env().getBool('IS_TEST') || env().getBool('PROD'))) {\n    console.log(...msg);\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {env} from './environment';\nimport {getGlobal} from './global_util';\nimport * as log from './log';\nimport {NamedGradientMap} from './tape';\nimport {Tensor} from './tensor';\nimport {TensorInfo} from './tensor_info';\nimport {RecursiveArray} from './types';\n\nconst kernelRegistry =\n  getGlobal('kernelRegistry', () => new Map<`${string}_${string}`,\n    KernelConfig>());\nconst gradRegistry =\n  getGlobal('gradRegistry', () => new Map<string, GradConfig>());\n\ntype AttributeValue =\n  number | number[] | boolean | boolean[] | string | string[] | NamedAttrMap;\n\n/** These are extra non-tensor/primitive params passed to kernel functions. */\nexport type Attribute = AttributeValue | RecursiveArray<AttributeValue>;\n\n/** Specifies the code to run when executing a kernel. */\nexport type KernelFunc = (params: {\n  inputs: NamedTensorInfoMap,\n  backend: {},\n  attrs?: NamedAttrMap,\n}) => TensorInfo | TensorInfo[];\n\n/** The function to run when computing a gradient during backprop. */\nexport type GradFunc =\n  (dy: Tensor | Tensor[], saved: Tensor[], attrs: NamedAttrMap) =>\n    NamedGradientMap;\n\n/** Function that gets called after the backend initializes. */\nexport type KernelSetupFunc = (backend: {}) => void;\n/** Function that gets called right before the backend is disposed. */\nexport type KernelDisposeFunc = KernelSetupFunc;\n\n/** Config object for registering a kernel in the global registry. */\nexport interface KernelConfig {\n  kernelName: string;\n  backendName: string;\n  kernelFunc: KernelFunc;\n  setupFunc?: KernelSetupFunc;\n  disposeFunc?: KernelDisposeFunc;\n}\n\n/** Config object for registering a gradient in the global registry. */\nexport interface GradConfig {\n  kernelName: string;\n  inputsToSave?: string[];\n  // When saveAllInputs is true, all inputs will be saved. Only use this flag\n  // if inputs is an array of Tensors.\n  saveAllInputs?: boolean;\n  outputsToSave?: boolean[];\n  gradFunc: GradFunc;\n}\n\nexport interface NamedTensorInfoMap {\n  [name: string]: TensorInfo|undefined;\n}\n\nexport interface NamedAttrMap {\n  [name: string]: Attribute;\n}\n\n/**\n * Returns the kernel function (code) associated with the provided names.\n *\n * @param kernelName The official name of the kernel.\n * @param backendName The official name of the backend.\n */\nexport function getKernel(\n    kernelName: string, backendName: string): KernelConfig {\n  const key = makeKey(kernelName, backendName);\n  return kernelRegistry.get(key);\n}\n\n/**\n * Returns the registered gradient info associated with the provided kernel.\n * @param kernelName The official TF kernel name.\n */\nexport function getGradient(kernelName: string): GradConfig {\n  return gradRegistry.get(kernelName);\n}\n\nexport function getKernelsForBackend(backendName: string): KernelConfig[] {\n  const it = kernelRegistry.entries();\n  const result: KernelConfig[] = [];\n\n  while (true) {\n    const {done, value} = it.next();\n    if (done) {\n      break;\n    }\n    const [key, config] = value;\n    const [backend, ] = key.split('_');\n    if (backend === backendName) {\n      result.push(config);\n    }\n  }\n  return result;\n}\n\n/**\n * Registers the function (forward pass) for the kernel in a global registry.\n *\n * @param config A config object with the following properties:\n * - `kernelName` The official name of the kernel.\n * - `backendName` The official name of the backend.\n * - `kernelFunc` The function to run during the forward pass of the kernel.\n * - `setupFunc` Optional. Gets called once, after the backend initializes.\n * - `disposeFunc` Optional. Gets called once, right before the backend is\n * disposed.\n */\nexport function registerKernel(config: KernelConfig) {\n  const {kernelName, backendName} = config;\n  const key = makeKey(kernelName, backendName);\n  if (kernelRegistry.has(key)) {\n    log.warn(\n        `The kernel '${kernelName}' for backend ` +\n        `'${backendName}' is already registered`);\n  }\n  kernelRegistry.set(key, config);\n}\n\n/**\n * Registers a gradient function for a given kernel in the global registry,\n * to be used during the back-propagation of that kernel.\n *\n * @param config An object with the following properties:\n * - `kernelName` The name of the kernel that the gradient function is for.\n * - `gradFunc` The function to run during back-propagation.\n */\nexport function registerGradient(config: GradConfig) {\n  const {kernelName} = config;\n\n  if (gradRegistry.has(kernelName)) {\n    // TODO (yassogba) after 3.0 assess whether we need to keep this gated\n    // to debug mode.\n    if (env().getBool('DEBUG')) {\n      log.warn(`Overriding the gradient for '${kernelName}'`);\n    }\n  }\n  gradRegistry.set(kernelName, config);\n}\n\n/**\n * Removes the kernel function from the registry.\n *\n * @param kernelName The official name of the kernel.\n * @param backendName The official name of the backend.\n *\n */\nexport function unregisterKernel(\n    kernelName: string, backendName: string): void {\n  const key = makeKey(kernelName, backendName);\n  if (!kernelRegistry.has(key)) {\n    throw new Error(\n        `The kernel '${kernelName}' for backend ` +\n        `'${backendName}' is not registered`);\n  }\n  kernelRegistry.delete(key);\n}\n\n/** Removes the registered gradient from the global registry. */\nexport function unregisterGradient(kernelName: string): void {\n  if (!gradRegistry.has(kernelName)) {\n    throw new Error(\n        `The gradient '${kernelName}' for backend is not registered`);\n  }\n  gradRegistry.delete(kernelName);\n}\n\n/**\n * Finds kernels that have already been registered to a backend and re-registers\n * them for a new backend. Useful for registering custom backends.\n * @param registeredBackendName Already registered backend.\n * @param newBackendName New backend.\n */\nexport function copyRegisteredKernels(\n    registeredBackendName: string, newBackendName: string): void {\n  const kernels = getKernelsForBackend(registeredBackendName);\n  kernels.forEach(kernelConfig => {\n    const newKernelConfig =\n        Object.assign({}, kernelConfig, {backendName: newBackendName});\n    registerKernel(newKernelConfig);\n  });\n}\n\nfunction makeKey(kernelName: string,\n                 backendName: string): `${string}_${string}` {\n  return `${backendName}_${kernelName}`;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Workaround for allowing cjs module to be included in bundle created by\n// rollup.\nimport * as LongExports from 'long';\n// tslint:disable-next-line\nconst Long: LongExports.LongConstructor =\n    // tslint:disable-next-line\n    (LongExports as any).default || LongExports;\n\nexport function hexToLong(hex: string): Long {\n  return Long.fromString(hex, true, 16);\n}\n\n// Some primes between 2^63 and 2^64 for various uses.\n// Hex 0xc3a5c85c97cb3127\nconst k0: Long = hexToLong('c3a5c85c97cb3127');\n// Hex 0xb492b66fbe98f273\nconst k1: Long = hexToLong('b492b66fbe98f273');\n// Hex 0x9ae16a3b2f90404f\nconst k2: Long = hexToLong('9ae16a3b2f90404f');\n\nfunction shiftMix(val: Long): Long {\n  return val.xor(val.shru(47));\n}\n\nfunction fetch(s: Uint8Array, offset: number, numBytes: number): Long {\n  const bytes = s.slice(offset, offset + numBytes);\n  return Long.fromBytes(Array.from(bytes), true, true);\n}\n\nfunction fetch64(s: Uint8Array, offset: number): Long {\n  return fetch(s, offset, 8);\n}\n\nfunction fetch32(s: Uint8Array, offset: number): Long {\n  return fetch(s, offset, 4);\n}\n\nfunction rotate64(val: Long, shift: number): Long {\n  // Avoid shifting by 64: doing so yields an undefined result.\n  return shift === 0 ? val : val.shru(shift).or(val.shl(64 - shift));\n}\n\nfunction hashLen16(u: Long, v: Long, mul = hexToLong('9ddfea08eb382d69')) {\n  // Murmur-inspired hashing.\n  let a = u.xor(v).mul(mul);\n  a = a.xor(a.shru(47));\n  let b = v.xor(a).mul(mul);\n  b = b.xor(b.shru(47));\n  b = b.mul(mul);\n  return b;\n}\n\n// Return a 16-byte hash for 48 bytes.  Quick and dirty.\n// Callers do best to use \"random-looking\" values for a and b.\nfunction weakHashLen32WithSeeds(\n    w: Long, x: Long, y: Long, z: Long, a: Long, b: Long) {\n  a = a.add(w);\n  b = rotate64(b.add(a).add(z), 21);\n  const c = a;\n  a = a.add(x);\n  a = a.add(y);\n  b = b.add(rotate64(a, 44));\n  return [a.add(z), b.add(c)];\n}\n\nfunction weakHashLen32WithSeedsStr(\n    s: Uint8Array, offset: number, a: Long, b: Long) {\n  return weakHashLen32WithSeeds(\n      fetch64(s, offset), fetch64(s, offset + 8), fetch64(s, offset + 16),\n      fetch64(s, offset + 24), a, b);\n}\n\nfunction hashLen0to16(s: Uint8Array, len = s.length): Long {\n  if (len >= 8) {\n    const mul = k2.add(len * 2);\n    const a = fetch64(s, 0).add(k2);\n    const b = fetch64(s, len - 8);\n    const c = rotate64(b, 37).mul(mul).add(a);\n    const d = rotate64(a, 25).add(b).mul(mul);\n    return hashLen16(c, d, mul);\n  }\n  if (len >= 4) {\n    const mul = k2.add(len * 2);\n    const a = fetch32(s, 0);\n    return hashLen16(a.shl(3).add(len), fetch32(s, len - 4), mul);\n  }\n  if (len > 0) {\n    const a = s[0];\n    const b = s[len >> 1];\n    const c = s[len - 1];\n    const y = a + (b << 8);\n    const z = len + (c << 2);\n    return shiftMix(k2.mul(y).xor(k0.mul(z))).mul(k2);\n  }\n  return k2;\n}\n\nfunction hashLen17to32(s: Uint8Array, len = s.length): Long {\n  const mul = k2.add(len * 2);\n  const a = fetch64(s, 0).mul(k1);\n  const b = fetch64(s, 8);\n  const c = fetch64(s, len - 8).mul(mul);\n  const d = fetch64(s, len - 16).mul(k2);\n  return hashLen16(\n      rotate64(a.add(b), 43).add(rotate64(c, 30)).add(d),\n      a.add(rotate64(b.add(k2), 18)).add(c), mul);\n}\n\nfunction hashLen33to64(s: Uint8Array, len = s.length): Long {\n  const mul = k2.add(len * 2);\n  const a = fetch64(s, 0).mul(k2);\n  const b = fetch64(s, 8);\n  const c = fetch64(s, len - 8).mul(mul);\n  const d = fetch64(s, len - 16).mul(k2);\n  const y = rotate64(a.add(b), 43).add(rotate64(c, 30)).add(d);\n  const z = hashLen16(y, a.add(rotate64(b.add(k2), 18)).add(c), mul);\n  const e = fetch64(s, 16).mul(mul);\n  const f = fetch64(s, 24);\n  const g = y.add(fetch64(s, len - 32)).mul(mul);\n  const h = z.add(fetch64(s, len - 24)).mul(mul);\n  return hashLen16(\n      rotate64(e.add(f), 43).add(rotate64(g, 30)).add(h),\n      e.add(rotate64(f.add(a), 18)).add(g), mul);\n}\n\nexport function fingerPrint64(s: Uint8Array, len = s.length): Long {\n  const seed: Long = Long.fromNumber(81, true);\n  if (len <= 32) {\n    if (len <= 16) {\n      return hashLen0to16(s, len);\n    } else {\n      return hashLen17to32(s, len);\n    }\n  } else if (len <= 64) {\n    return hashLen33to64(s, len);\n  }\n\n  // For strings over 64 bytes we loop.  Internal state consists of\n  // 56 bytes: v, w, x, y, and z.\n  let x = seed;\n  let y = seed.mul(k1).add(113);\n\n  let z = shiftMix(y.mul(k2).add(113)).mul(k2);\n  let v = [Long.UZERO, Long.UZERO];\n  let w = [Long.UZERO, Long.UZERO];\n  x = x.mul(k2).add(fetch64(s, 0));\n\n  let offset = 0;\n  // Set end so that after the loop we have 1 to 64 bytes left to process.\n  const end = ((len - 1) >> 6) * 64;\n  const last64 = end + ((len - 1) & 63) - 63;\n\n  do {\n    x = rotate64(x.add(y).add(v[0]).add(fetch64(s, offset + 8)), 37).mul(k1);\n    y = rotate64(y.add(v[1]).add(fetch64(s, offset + 48)), 42).mul(k1);\n    x = x.xor(w[1]);\n    y = y.add(v[0]).add(fetch64(s, offset + 40));\n    z = rotate64(z.add(w[0]), 33).mul(k1);\n    v = weakHashLen32WithSeedsStr(s, offset, v[1].mul(k1), x.add(w[0]));\n    w = weakHashLen32WithSeedsStr(\n        s, offset + 32, z.add(w[1]), y.add(fetch64(s, offset + 16)));\n\n    [z, x] = [x, z];\n    offset += 64;\n  } while (offset !== end);\n  const mul = k1.add(z.and(0xff).shl(1));\n  // Point to the last 64 bytes of input.\n  offset = last64;\n\n  w[0] = w[0].add((len - 1) & 63);\n  v[0] = v[0].add(w[0]);\n  w[0] = w[0].add(v[0]);\n\n  x = rotate64(x.add(y).add(v[0]).add(fetch64(s, offset + 8)), 37).mul(mul);\n  y = rotate64(y.add(v[1]).add(fetch64(s, offset + 48)), 42).mul(mul);\n  x = x.xor(w[1].mul(9));\n  y = y.add(v[0].mul(9).add(fetch64(s, offset + 40)));\n  z = rotate64(z.add(w[0]), 33).mul(mul);\n  v = weakHashLen32WithSeedsStr(s, offset, v[1].mul(mul), x.add(w[0]));\n  w = weakHashLen32WithSeedsStr(\n      s, offset + 32, z.add(w[1]), y.add(fetch64(s, offset + 16)));\n\n  [z, x] = [x, z];\n\n  return hashLen16(\n      hashLen16(v[0], w[0], mul).add(shiftMix(y).mul(k0)).add(z),\n      hashLen16(v[1], w[1], mul).add(x), mul);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env} from './environment';\nimport {BackendValues, DataType, RecursiveArray, TensorLike, TypedArray} from './types';\nimport * as base from './util_base';\nexport * from './util_base';\nexport * from './hash_util';\n\n/**\n * Create typed array for scalar value. Used for storing in `DataStorage`.\n */\nexport function createScalarValue(\n    value: DataType, dtype: DataType): BackendValues {\n  if (dtype === 'string') {\n    return encodeString(value);\n  }\n\n  return toTypedArray([value], dtype);\n}\n\nfunction noConversionNeeded(a: TensorLike, dtype: DataType): boolean {\n  return (a instanceof Float32Array && dtype === 'float32') ||\n      (a instanceof Int32Array && dtype === 'int32') ||\n      (a instanceof Uint8Array && dtype === 'bool');\n}\n\nexport function toTypedArray(a: TensorLike, dtype: DataType): TypedArray {\n  if (dtype === 'string') {\n    throw new Error('Cannot convert a string[] to a TypedArray');\n  }\n  if (Array.isArray(a)) {\n    a = flatten(a);\n  }\n\n  if (env().getBool('DEBUG')) {\n    base.checkConversionForErrors(a as number[], dtype);\n  }\n  if (noConversionNeeded(a, dtype)) {\n    return a as TypedArray;\n  }\n  if (dtype == null || dtype === 'float32' || dtype === 'complex64') {\n    return new Float32Array(a as number[]);\n  } else if (dtype === 'int32') {\n    return new Int32Array(a as number[]);\n  } else if (dtype === 'bool') {\n    const bool = new Uint8Array((a as number[]).length);\n    for (let i = 0; i < bool.length; ++i) {\n      if (Math.round((a as number[])[i]) !== 0) {\n        bool[i] = 1;\n      }\n    }\n    return bool;\n  } else {\n    throw new Error(`Unknown data type ${dtype}`);\n  }\n}\n\n/**\n * Returns the current high-resolution time in milliseconds relative to an\n * arbitrary time in the past. It works across different platforms (node.js,\n * browsers).\n *\n * ```js\n * console.log(tf.util.now());\n * ```\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\nexport function now(): number {\n  return env().platform.now();\n}\n\n/**\n * Returns a platform-specific implementation of\n * [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).\n *\n * If `fetch` is defined on the global object (`window`, `process`, etc.),\n * `tf.util.fetch` returns that function.\n *\n * If not, `tf.util.fetch` returns a platform-specific solution.\n *\n * ```js\n * const resource = await tf.util.fetch('https://unpkg.com/@tensorflow/tfjs');\n * // handle response\n * ```\n *\n * @doc {heading: 'Util'}\n */\nexport function fetch(\n    path: string, requestInits?: RequestInit): Promise<Response> {\n  return env().platform.fetch(path, requestInits);\n}\n\n/**\n * Encodes the provided string into bytes using the provided encoding scheme.\n *\n * @param s The string to encode.\n * @param encoding The encoding scheme. Defaults to utf-8.\n *\n * @doc {heading: 'Util'}\n */\nexport function encodeString(s: string, encoding = 'utf-8'): Uint8Array {\n  encoding = encoding || 'utf-8';\n  return env().platform.encode(s, encoding);\n}\n\n/**\n * Decodes the provided bytes into a string using the provided encoding scheme.\n * @param bytes The bytes to decode.\n *\n * @param encoding The encoding scheme. Defaults to utf-8.\n *\n * @doc {heading: 'Util'}\n */\nexport function decodeString(bytes: Uint8Array, encoding = 'utf-8'): string {\n  encoding = encoding || 'utf-8';\n  return env().platform.decode(bytes, encoding);\n}\n\nexport function isTypedArray(a: {}): a is Float32Array|Int32Array|Uint8Array|\n    Uint8ClampedArray {\n  return env().platform.isTypedArray(a);\n}\n\n// NOTE: We explicitly type out what T extends instead of any so that\n// util.flatten on a nested array of number doesn't try to infer T as a\n// number[][], causing us to explicitly type util.flatten<number>().\n/**\n *  Flattens an arbitrarily nested array.\n *\n * ```js\n * const a = [[1, 2], [3, 4], [5, [6, [7]]]];\n * const flat = tf.util.flatten(a);\n * console.log(flat);\n * ```\n *\n *  @param arr The nested array to flatten.\n *  @param result The destination array which holds the elements.\n *  @param skipTypedArray If true, avoids flattening the typed arrays. Defaults\n *      to false.\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\nexport function\nflatten<T extends number|boolean|string|Promise<number>|TypedArray>(\n    arr: T|RecursiveArray<T>, result: T[] = [], skipTypedArray = false): T[] {\n  if (result == null) {\n    result = [];\n  }\n  if (typeof arr === 'boolean' || typeof arr === 'number' ||\n    typeof arr === 'string' || base.isPromise(arr) || arr == null ||\n      isTypedArray(arr) && skipTypedArray) {\n    result.push(arr as T);\n  } else if (Array.isArray(arr) || isTypedArray(arr)) {\n    for (let i = 0; i < arr.length; ++i) {\n      flatten(arr[i], result, skipTypedArray);\n    }\n  } else {\n    let maxIndex = -1;\n    for (const key of Object.keys(arr)) {\n      // 0 or positive integer.\n      if (/^([1-9]+[0-9]*|0)$/.test(key)) {\n        maxIndex = Math.max(maxIndex, Number(key));\n      }\n    }\n    for (let i = 0; i <= maxIndex; i++) {\n      // tslint:disable-next-line: no-unnecessary-type-assertion\n      flatten((arr as RecursiveArray<T>)[i], result, skipTypedArray);\n    }\n  }\n  return result;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BackendTimer, BackendTimingInfo} from './backends/backend';\nimport {env} from './environment';\nimport {Tensor} from './tensor';\nimport {NamedTensorMap} from './tensor_types';\nimport {DataType, DataTypeMap, TypedArray} from './types';\nimport * as util from './util';\n\nexport type KernelProfile = {\n  kernelName: string,\n  outputs: Tensor[],\n  inputs: NamedTensorMap,\n  timeMs: Promise<number|{error: string}>,\n  extraInfo: Promise<string>\n};\n\nexport class Profiler {\n  constructor(private backendTimer: BackendTimer, private logger?: Logger) {\n    if (logger == null) {\n      this.logger = new Logger();\n    }\n  }\n\n  profileKernel(kernelName: string, inputs: NamedTensorMap, f: () => Tensor[]):\n      KernelProfile {\n    let outputs: Tensor[];\n    const holdResultWrapperFn = () => {\n      outputs = f();\n    };\n    let timer: Promise<BackendTimingInfo>;\n    const start = util.now();\n    if (this.backendTimer.timerAvailable()) {\n      timer = this.backendTimer.time(holdResultWrapperFn);\n    } else {\n      holdResultWrapperFn();\n      for (const output of outputs) {\n        output.dataSync();\n      }\n      timer = Promise.resolve({kernelMs: util.now() - start});\n    }\n    if (env().getBool('CHECK_COMPUTATION_FOR_ERRORS')) {\n      for (let i = 0; i < outputs.length; i++) {\n        const output = outputs[i];\n        // Dangling promise here because we don't want to propagate up\n        // asynchronicity.\n        output.data().then(tensorVals => {\n          checkComputationForErrors(tensorVals, output.dtype, kernelName);\n        });\n      }\n    }\n\n    const kernelProfile = {\n      kernelName,\n      outputs,\n      inputs,\n      timeMs: timer.then(timing => timing.kernelMs),\n      extraInfo: timer.then(\n          timing => timing.getExtraProfileInfo != null ?\n              timing.getExtraProfileInfo() :\n              '')\n    };\n    return kernelProfile;\n  }\n\n  logKernelProfile(kernelProfile: KernelProfile): void {\n    const {kernelName, outputs, timeMs, inputs, extraInfo} = kernelProfile;\n\n    outputs.forEach(result => {\n      Promise.all([result.data(), timeMs, extraInfo]).then(valueContainer => {\n        this.logger.logKernelProfile(\n            kernelName, result, valueContainer[0], valueContainer[1], inputs,\n            valueContainer[2]);\n      });\n    });\n  }\n}\n\nexport function checkComputationForErrors<D extends DataType>(\n    vals: DataTypeMap[D], dtype: D, kernelName: string): boolean {\n  if (dtype !== 'float32') {\n    // Only floating point computations will generate NaN values\n    return false;\n  }\n  for (let i = 0; i < vals.length; i++) {\n    const num = vals[i] as number;\n    if (isNaN(num) || !isFinite(num)) {\n      // Throwing custom exception so behavior is testable.\n      console.warn(`Found ${num} in the result of '${kernelName}'`);\n      return true;\n    }\n  }\n  return false;\n}\n\nexport class Logger {\n  logKernelProfile(\n      name: string, result: Tensor, vals: TypedArray,\n      timeMs: number|{error: string}, inputs: NamedTensorMap,\n      extraInfo?: string) {\n    const time = typeof timeMs === 'number' ? util.rightPad(`${timeMs}ms`, 9) :\n                                              timeMs['error'];\n    const paddedName = util.rightPad(name, 25);\n    const rank = result.rank;\n    const size = result.size;\n    const shape = util.rightPad(result.shape.toString(), 14);\n    let inputShapesDescription = '';\n\n    for (const name in inputs) {\n      const input = inputs[name];\n      if (input != null) {\n        // The input might be a non-tensor (e.g HTMLImageElement), in which case\n        // we claim the output shape as input shape.\n        const inputShape = input.shape || result.shape;\n        const inputRank = inputShape.length;\n        inputShapesDescription +=\n            `${name}: ${inputRank}D ${inputRank > 0 ? inputShape : ''} `;\n      }\n    }\n\n    console.log(\n        `%c${paddedName}\\t%c${time}\\t%c${rank}D ${shape}\\t%c${size}\\t%c${\n            inputShapesDescription}\\t%c${extraInfo}`,\n        'font-weight:bold', 'color:red', 'color:blue', 'color: orange',\n        'color: green', 'color: steelblue');\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from './tensor';\nimport {NamedTensorMap} from './tensor_types';\nimport * as util from './util';\n\nexport interface TapeNode {\n  id: number;\n  kernelName: string;\n  outputs: Tensor[];\n  inputs: NamedTensorMap;\n  // Optional params, defined only for ops with gradient impl.\n  gradient?: (dys: Tensor[]) => NamedGradientMap;\n  saved?: Tensor[];\n}\n\nexport type NamedGradientMap = {\n  [inputName: string]: () => Tensor;\n};\n\n/**\n * Computes a list of TapeNodes that connect x to y, filtering everything else\n * out and preserving the order of the original tape elements.\n *\n * @param tape The tape elements to filter.\n * @param xs The input Tensors.\n * @param y The output Tensor.\n */\nexport function getFilteredNodesXToY(\n    tape: TapeNode[], xs: Tensor[], y: Tensor): TapeNode[] {\n  // Forward pass to compute all the nodes and Tensors that are transitively a\n  // function of x.\n  const tensorsFromX: {[tensorId: number]: boolean} = {};\n  const nodesFromX: {[nodeId: number]: boolean} = {};\n  for (let i = 0; i < xs.length; i++) {\n    tensorsFromX[xs[i].id] = true;\n  }\n\n  for (let i = 0; i < tape.length; i++) {\n    const node = tape[i];\n    const nodeInputs = node.inputs;\n    for (const inputName in nodeInputs) {\n      const input = nodeInputs[inputName];\n\n      let anyInputFromX = false;\n      for (let j = 0; j < xs.length; j++) {\n        if (tensorsFromX[input.id]) {\n          node.outputs.forEach(output => tensorsFromX[output.id] = true);\n          anyInputFromX = true;\n          nodesFromX[node.id] = true;\n          break;\n        }\n      }\n\n      if (anyInputFromX) {\n        break;\n      }\n    }\n  }\n\n  // Backward pass to find all of the nodes and Tensors that lead to y.\n  const tensorsLeadToY: {[tensorId: number]: boolean} = {};\n  tensorsLeadToY[y.id] = true;\n  const nodesToY: {[nodeId: number]: boolean} = {};\n\n  for (let i = tape.length - 1; i >= 0; i--) {\n    const node = tape[i];\n    const nodeInputs = node.inputs;\n\n    // If any of the outputs lead to y, mark all of the inputs as leading to y.\n    for (let j = 0; j < node.outputs.length; j++) {\n      if (tensorsLeadToY[node.outputs[j].id]) {\n        for (const inputName in nodeInputs) {\n          tensorsLeadToY[nodeInputs[inputName].id] = true;\n          nodesToY[node.id] = true;\n        }\n        break;\n      }\n    }\n  }\n\n  // Return the paths that come from x and lead to y.\n  const filteredTape: TapeNode[] = [];\n  for (let i = 0; i < tape.length; i++) {\n    const node = tape[i];\n\n    if (nodesFromX[node.id] && nodesToY[node.id]) {\n      // Prune the inputs from the node that aren't a function of x.\n      const prunedInputs: {[inputName: string]: Tensor} = {};\n      for (const inputName in node.inputs) {\n        const nodeInput = node.inputs[inputName];\n        if (tensorsFromX[nodeInput.id]) {\n          prunedInputs[inputName] = nodeInput;\n        }\n      }\n\n      // Copy the node and overwrite inputsAndArgs to the pruned version.\n      const prunedNode = Object.assign({}, node);\n      prunedNode.inputs = prunedInputs;\n      prunedNode.outputs = node.outputs;\n\n      filteredTape.push(prunedNode);\n    }\n  }\n\n  return filteredTape;\n}\n\n/**\n * Backpropagate gradients through the filtered TapeNodes.\n *\n * @param tensorAccumulatedGradientMap A map of Tensor to its gradient. This map\n * is mutated by this method.\n * @param filteredTape The filtered TapeNodes to backprop through.\n */\nexport function backpropagateGradients(\n    tensorAccumulatedGradientMap: {[tensorId: number]: Tensor},\n    filteredTape: TapeNode[], tidy: (f: Function) => Tensor,\n    add: (a: Tensor, b: Tensor) => Tensor) {\n  // Walk the tape backward and keep a map of Tensor to its gradient.\n  for (let i = filteredTape.length - 1; i >= 0; i--) {\n    const node = filteredTape[i];\n\n    const dys: Tensor[] = [];\n    node.outputs.forEach(o => {\n      const gradTensor = tensorAccumulatedGradientMap[o.id];\n      if (gradTensor != null) {\n        dys.push(gradTensor);\n      } else {\n        // This particular output is not in the back-propagation subgraph, so it\n        // does not affect the final output, thus we put null for its dy.\n        dys.push(null);\n      }\n    });\n\n    if (node.gradient == null) {\n      throw new Error(\n          `Cannot compute gradient: gradient function not found ` +\n          `for ${node.kernelName}.`);\n    }\n\n    // Backprop dy through this node and accumulate gradients over the inputs.\n    const inputGradients = node.gradient(dys);\n\n    for (const inputName in node.inputs) {\n      if (!(inputName in inputGradients)) {\n        throw new Error(\n            `Cannot backprop through input ${inputName}. ` +\n            `Available gradients found: ${Object.keys(inputGradients)}.`);\n      }\n\n      // Call the gradient function.\n      const dx = tidy(() => inputGradients[inputName]());\n      if (dx.dtype !== 'float32') {\n        throw new Error(\n            `Error in gradient for op ${\n                node.kernelName}. The gradient of input ` +\n            `${inputName} must have 'float32' dtype, but has '${dx.dtype}'`);\n      }\n      const x = node.inputs[inputName];\n      if (!util.arraysEqual(dx.shape, x.shape)) {\n        throw new Error(\n            `Error in gradient for op ${\n                node.kernelName}. The gradient of input ` +\n            `'${inputName}' has shape '${dx.shape}', which does not match ` +\n            `the shape of the input '${x.shape}'`);\n      }\n\n      if (tensorAccumulatedGradientMap[x.id] == null) {\n        tensorAccumulatedGradientMap[x.id] = dx;\n      } else {\n        const curGradient = tensorAccumulatedGradientMap[x.id];\n        tensorAccumulatedGradientMap[x.id] = add(curGradient, dx);\n        curGradient.dispose();\n      }\n    }\n  }\n}\n","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}","export default function _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}","import _typeof from \"./typeof.js\";\nimport assertThisInitialized from \"./assertThisInitialized.js\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n  return assertThisInitialized(self);\n}","import getPrototypeOf from \"./getPrototypeOf.js\";\nimport isNativeReflectConstruct from \"./isNativeReflectConstruct.js\";\nimport possibleConstructorReturn from \"./possibleConstructorReturn.js\";\nexport default function _createSuper(Derived) {\n  var hasNativeReflectConstruct = isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = getPrototypeOf(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return possibleConstructorReturn(this, result);\n  };\n}","export default function _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, TypedArray} from './types';\nimport {computeStrides, isString, rightPad, sizeFromShape} from './util';\n\n// Maximum number of values before we decide to show ellipsis.\nconst FORMAT_LIMIT_NUM_VALS = 20;\n// Number of first and last values to show when displaying a, b,...,y, z.\nconst FORMAT_NUM_FIRST_LAST_VALS = 3;\n// Number of significant digits to show.\nconst FORMAT_NUM_SIG_DIGITS = 7;\n\nexport function tensorToString(\n    vals: TypedArray|string[], shape: number[], dtype: DataType,\n    verbose: boolean) {\n  const strides = computeStrides(shape);\n  const padPerCol = computeMaxSizePerColumn(vals, shape, dtype, strides);\n  const rank = shape.length;\n  const valsLines = subTensorToString(vals, shape, dtype, strides, padPerCol);\n  const lines = ['Tensor'];\n  if (verbose) {\n    lines.push(`  dtype: ${dtype}`);\n    lines.push(`  rank: ${rank}`);\n    lines.push(`  shape: [${shape}]`);\n    lines.push(`  values:`);\n  }\n  lines.push(valsLines.map(l => '    ' + l).join('\\n'));\n  return lines.join('\\n');\n}\n\nfunction computeMaxSizePerColumn(\n    vals: TypedArray|string[], shape: number[], dtype: DataType,\n    strides: number[]): number[] {\n  const n = sizeFromShape(shape);\n  const numCols = strides[strides.length - 1];\n  const padPerCol = new Array(numCols).fill(0);\n  const rank = shape.length;\n  const valuesOrTuples =\n      dtype === 'complex64' ? createComplexTuples(vals) : vals;\n\n  if (rank > 1) {\n    for (let row = 0; row < n / numCols; row++) {\n      const offset = row * numCols;\n      for (let j = 0; j < numCols; j++) {\n        padPerCol[j] = Math.max(\n            padPerCol[j],\n            valToString(valuesOrTuples[offset + j], 0, dtype).length);\n      }\n    }\n  }\n  return padPerCol;\n}\n\nfunction valToString(\n    val: number|string|[number, number], pad: number, dtype: DataType) {\n  let valStr: string;\n  if (Array.isArray(val)) {\n    valStr = `${parseFloat(val[0].toFixed(FORMAT_NUM_SIG_DIGITS))} + ` +\n        `${parseFloat(val[1].toFixed(FORMAT_NUM_SIG_DIGITS))}j`;\n  } else if (isString(val)) {\n    valStr = `'${val}'`;\n  } else if (dtype === 'bool') {\n    valStr = boolNumToString(val);\n  } else {\n    valStr = parseFloat(val.toFixed(FORMAT_NUM_SIG_DIGITS)).toString();\n  }\n\n  return rightPad(valStr, pad);\n}\n\nfunction boolNumToString(v: number): string {\n  return v === 0 ? 'false' : 'true';\n}\n\nfunction subTensorToString(\n    vals: TypedArray|string[], shape: number[], dtype: DataType,\n    strides: number[], padPerCol: number[], isLast = true): string[] {\n  const storagePerElement = dtype === 'complex64' ? 2 : 1;\n\n  const size = shape[0];\n  const rank = shape.length;\n  if (rank === 0) {\n    if (dtype === 'complex64') {\n      const complexTuple = createComplexTuples(vals);\n      return [valToString(complexTuple[0], 0, dtype)];\n    }\n    if (dtype === 'bool') {\n      return [boolNumToString(vals[0] as number)];\n    }\n    return [vals[0].toString()];\n  }\n\n  if (rank === 1) {\n    if (size > FORMAT_LIMIT_NUM_VALS) {\n      const firstValsSize = FORMAT_NUM_FIRST_LAST_VALS * storagePerElement;\n\n      let firstVals = Array.from<number|string|[number, number]>(\n          vals.slice(0, firstValsSize));\n      let lastVals = Array.from<number|string|[number, number]>(vals.slice(\n          (size - FORMAT_NUM_FIRST_LAST_VALS) * storagePerElement,\n          size * storagePerElement));\n      if (dtype === 'complex64') {\n        firstVals = createComplexTuples(firstVals);\n        lastVals = createComplexTuples(lastVals);\n      }\n      return [\n        '[' +\n        firstVals.map((x, i) => valToString(x, padPerCol[i], dtype))\n            .join(', ') +\n        ', ..., ' +\n        lastVals\n            .map(\n                (x, i) => valToString(\n                    x, padPerCol[size - FORMAT_NUM_FIRST_LAST_VALS + i], dtype))\n            .join(', ') +\n        ']'\n      ];\n    }\n    const displayVals: Array<number|string|[number, number]> =\n        dtype === 'complex64' ? createComplexTuples(vals) :\n                                Array.from<number|string>(vals);\n\n    return [\n      '[' +\n      displayVals.map((x, i) => valToString(x, padPerCol[i], dtype))\n          .join(', ') +\n      ']'\n    ];\n  }\n\n  // The array is rank 2 or more.\n  const subshape = shape.slice(1);\n  const substrides = strides.slice(1);\n  const stride = strides[0] * storagePerElement;\n  const lines: string[] = [];\n  if (size > FORMAT_LIMIT_NUM_VALS) {\n    for (let i = 0; i < FORMAT_NUM_FIRST_LAST_VALS; i++) {\n      const start = i * stride;\n      const end = start + stride;\n      lines.push(...subTensorToString(\n          vals.slice(start, end), subshape, dtype, substrides, padPerCol,\n          false /* isLast */));\n    }\n    lines.push('...');\n    for (let i = size - FORMAT_NUM_FIRST_LAST_VALS; i < size; i++) {\n      const start = i * stride;\n      const end = start + stride;\n      lines.push(...subTensorToString(\n          vals.slice(start, end), subshape, dtype, substrides, padPerCol,\n          i === size - 1 /* isLast */));\n    }\n  } else {\n    for (let i = 0; i < size; i++) {\n      const start = i * stride;\n      const end = start + stride;\n      lines.push(...subTensorToString(\n          vals.slice(start, end), subshape, dtype, substrides, padPerCol,\n          i === size - 1 /* isLast */));\n    }\n  }\n  const sep = rank === 2 ? ',' : '';\n  lines[0] = '[' + (size > 0 ? lines[0] + sep : '');\n  for (let i = 1; i < lines.length - 1; i++) {\n    lines[i] = ' ' + lines[i] + sep;\n  }\n  let newLineSep = ',\\n';\n  for (let i = 2; i < rank; i++) {\n    newLineSep += '\\n';\n  }\n  lines[lines.length - 1] =\n      ' ' + lines[lines.length - 1] + ']' + (isLast ? '' : newLineSep);\n  return lines;\n}\n\nfunction createComplexTuples(vals: Array<{}>|\n                             TypedArray): Array<[number, number]> {\n  const complexTuples: Array<[number, number]> = [];\n  for (let i = 0; i < vals.length; i += 2) {\n    complexTuples.push([vals[i], vals[i + 1]] as [number, number]);\n  }\n  return complexTuples;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Workaround for: https://github.com/bazelbuild/rules_nodejs/issues/1265\n/// <reference types=\"@webgpu/types/dist\" />\n\nimport {getGlobal} from './global_util';\nimport {TensorInfo, DataId} from './tensor_info';\nimport {tensorToString} from './tensor_format';\nimport {ArrayMap, BackendValues, DataType, DataTypeMap, DataValues, NumericDataType, Rank, ShapeMap, SingleValueMap, TypedArray} from './types';\nimport * as util from './util';\nimport {computeStrides, toNestedArray} from './util';\n\nexport interface TensorData<D extends DataType> {\n  dataId?: DataId;\n  values?: DataTypeMap[D];\n}\n\n// This interface mimics KernelBackend (in backend.ts), which would create a\n// circular dependency if imported.\nexport interface Backend {}\n\n/**\n * A mutable object, similar to `tf.Tensor`, that allows users to set values\n * at locations before converting to an immutable `tf.Tensor`.\n *\n * See `tf.buffer` for creating a tensor buffer.\n *\n * @doc {heading: 'Tensors', subheading: 'Classes'}\n */\nexport class TensorBuffer<R extends Rank, D extends DataType = 'float32'> {\n  size: number;\n  shape: ShapeMap[R];\n  strides: number[];\n  values: DataTypeMap[D];\n\n  constructor(shape: ShapeMap[R], public dtype: D, values?: DataTypeMap[D]) {\n    this.shape = shape.slice() as ShapeMap[R];\n    this.size = util.sizeFromShape(shape);\n\n    if (values != null) {\n      const n = values.length;\n      util.assert(\n          n === this.size,\n          () => `Length of values '${n}' does not match the size ` +\n              `inferred by the shape '${this.size}'.`);\n    }\n    if (dtype === 'complex64') {\n      throw new Error(\n          `complex64 dtype TensorBuffers are not supported. Please create ` +\n          `a TensorBuffer for the real and imaginary parts separately and ` +\n          `call tf.complex(real, imag).`);\n    }\n    this.values = values || util.getArrayFromDType(dtype, this.size);\n    this.strides = computeStrides(shape);\n  }\n\n  /**\n   * Sets a value in the buffer at a given location.\n   *\n   * @param value The value to set.\n   * @param locs  The location indices.\n   *\n   * @doc {heading: 'Tensors', subheading: 'Creation'}\n   */\n  set(value: SingleValueMap[D], ...locs: number[]): void {\n    if (locs.length === 0) {\n      locs = [0];\n    }\n    util.assert(\n        locs.length === this.rank,\n        () => `The number of provided coordinates (${locs.length}) must ` +\n            `match the rank (${this.rank})`);\n\n    const index = this.locToIndex(locs);\n    this.values[index] = value as number;\n  }\n\n  /**\n   * Returns the value in the buffer at the provided location.\n   *\n   * @param locs The location indices.\n   *\n   * @doc {heading: 'Tensors', subheading: 'Creation'}\n   */\n  get(...locs: number[]): SingleValueMap[D] {\n    if (locs.length === 0) {\n      locs = [0];\n    }\n    let i = 0;\n    for (const loc of locs) {\n      if (loc < 0 || loc >= this.shape[i]) {\n        const msg = `Requested out of range element at ${locs}. ` +\n            `  Buffer shape=${this.shape}`;\n        throw new Error(msg);\n      }\n      i++;\n    }\n    let index = locs[locs.length - 1];\n    for (let i = 0; i < locs.length - 1; ++i) {\n      index += this.strides[i] * locs[i];\n    }\n    return this.values[index] as SingleValueMap[D];\n  }\n\n  locToIndex(locs: number[]): number {\n    if (this.rank === 0) {\n      return 0;\n    } else if (this.rank === 1) {\n      return locs[0];\n    }\n    let index = locs[locs.length - 1];\n    for (let i = 0; i < locs.length - 1; ++i) {\n      index += this.strides[i] * locs[i];\n    }\n    return index;\n  }\n\n  indexToLoc(index: number): number[] {\n    if (this.rank === 0) {\n      return [];\n    } else if (this.rank === 1) {\n      return [index];\n    }\n    const locs: number[] = new Array(this.shape.length);\n    for (let i = 0; i < locs.length - 1; ++i) {\n      locs[i] = Math.floor(index / this.strides[i]);\n      index -= locs[i] * this.strides[i];\n    }\n    locs[locs.length - 1] = index;\n    return locs;\n  }\n\n  get rank() {\n    return this.shape.length;\n  }\n\n  /**\n   * Creates an immutable `tf.Tensor` object from the buffer.\n   *\n   * @doc {heading: 'Tensors', subheading: 'Creation'}\n   */\n  toTensor(): Tensor<R> {\n    return trackerFn().makeTensor(this.values, this.shape, this.dtype) as\n        Tensor<R>;\n  }\n}\n\nexport interface DataToGPUWebGLOption {\n  customTexShape?: [number, number];\n}\n\nexport type DataToGPUOptions = DataToGPUWebGLOption;\n\nexport interface GPUData {\n  tensorRef: Tensor;\n  texture?: WebGLTexture;\n  buffer?: GPUBuffer;\n  texShape?: [number, number];\n  bufSize?: number;\n}\n\nexport interface TensorTracker {\n  makeTensor(\n      values: DataValues, shape: number[], dtype: DataType,\n      backend?: Backend): Tensor;\n  makeVariable(\n      initialValue: Tensor, trainable?: boolean, name?: string,\n      dtype?: DataType): Variable;\n  incRef(a: Tensor, backend: Backend): void;\n  disposeTensor(t: Tensor): void;\n  disposeVariable(v: Variable): void;\n  read(dataId: DataId): Promise<BackendValues>;\n  readSync(dataId: DataId): BackendValues;\n  readToGPU(dataId: DataId, options?: DataToGPUOptions): GPUData;\n}\n\n/**\n * The Tensor class calls into this handler to delegate chaining operations.\n */\nexport interface OpHandler {\n  cast<T extends Tensor>(x: T, dtype: DataType): T;\n  buffer<R extends Rank, D extends DataType>(\n      shape: ShapeMap[R], dtype: D,\n      values?: DataTypeMap[D]): TensorBuffer<R, D>;\n  print<T extends Tensor>(x: T, verbose: boolean): void;\n  clone<T extends Tensor>(x: T): T;\n  // TODO(yassogba) bring reshape back?\n}\n\n// For tracking tensor creation and disposal.\nlet trackerFn: () => TensorTracker = null;\n// Used by chaining methods to call into ops.\nlet opHandler: OpHandler = null;\n// Used to warn about deprecated methods.\nlet deprecationWarningFn: (msg: string) => void = null;\n// This here so that we can use this method on dev branches and keep the\n// functionality at master.\n// tslint:disable-next-line:no-unused-expression\n[deprecationWarningFn];\n\n/**\n * An external consumer can register itself as the tensor tracker. This way\n * the Tensor class can notify the tracker for every tensor created and\n * disposed.\n */\nexport function setTensorTracker(fn: () => TensorTracker) {\n  trackerFn = fn;\n}\n\n/**\n * An external consumer can register itself as the op handler. This way the\n * Tensor class can have chaining methods that call into ops via the op\n * handler.\n */\nexport function setOpHandler(handler: OpHandler) {\n  opHandler = handler;\n}\n\n/**\n * Sets the deprecation warning function to be used by this file. This way the\n * Tensor class can be a leaf but still use the environment.\n */\nexport function setDeprecationWarningFn(fn: (msg: string) => void) {\n  deprecationWarningFn = fn;\n}\n\n// Declare this namespace to make Tensor class augmentation work in google3.\nexport declare namespace Tensor {}\n/**\n * A `tf.Tensor` object represents an immutable, multidimensional array of\n * numbers that has a shape and a data type.\n *\n * For performance reasons, functions that create tensors do not necessarily\n * perform a copy of the data passed to them (e.g. if the data is passed as a\n * `Float32Array`), and changes to the data will change the tensor. This is not\n * a feature and is not supported. To avoid this behavior, use the tensor before\n * changing the input data or create a copy with `copy = tf.add(yourTensor, 0)`.\n *\n * See `tf.tensor` for details on how to create a `tf.Tensor`.\n *\n * @doc {heading: 'Tensors', subheading: 'Classes'}\n */\nexport class Tensor<R extends Rank = Rank> implements TensorInfo {\n  /** Unique id of this tensor. */\n  readonly id: number;\n  /**\n   * Id of the bucket holding the data for this tensor. Multiple arrays can\n   * point to the same bucket (e.g. when calling array.reshape()).\n   */\n  dataId: DataId;\n  /** The shape of the tensor. */\n  readonly shape: ShapeMap[R];\n  /** Number of elements in the tensor. */\n  readonly size: number;\n  /** The data type for the array. */\n  readonly dtype: DataType;\n  /** The rank type for the array (see `Rank` enum). */\n  readonly rankType: R;\n\n  /** Whether this tensor has been globally kept. */\n  kept = false;\n  /** The id of the scope this tensor is being tracked in. */\n  scopeId: number;\n\n  /**\n   * Number of elements to skip in each dimension when indexing. See\n   * https://docs.scipy.org/doc/numpy/reference/generated/\\\n   * numpy.ndarray.strides.html\n   */\n  readonly strides: number[];\n\n  constructor(shape: ShapeMap[R], dtype: DataType, dataId: DataId, id: number) {\n    this.shape = shape.slice() as ShapeMap[R];\n    this.dtype = dtype || 'float32';\n    this.size = util.sizeFromShape(shape);\n    this.strides = computeStrides(shape);\n    this.dataId = dataId;\n    this.id = id;\n    this.rankType = (this.rank < 5 ? this.rank.toString() : 'higher') as R;\n  }\n\n  get rank(): number {\n    return this.shape.length;\n  }\n\n  /**\n   * Returns a promise of `tf.TensorBuffer` that holds the underlying data.\n   *\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\n   */\n  async buffer<D extends DataType = 'float32'>(): Promise<TensorBuffer<R, D>> {\n    const vals = await this.data<D>();\n    return opHandler.buffer(this.shape, this.dtype as D, vals);\n  }\n\n  /**\n   * Returns a `tf.TensorBuffer` that holds the underlying data.\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\n   */\n  bufferSync<D extends DataType = 'float32'>(): TensorBuffer<R, D> {\n    return opHandler.buffer(this.shape, this.dtype as D, this.dataSync());\n  }\n\n  /**\n   * Returns the tensor data as a nested array. The transfer of data is done\n   * asynchronously.\n   *\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\n   */\n  async array(): Promise<ArrayMap[R]> {\n    const vals = await this.data();\n    return toNestedArray(this.shape, vals, this.dtype === 'complex64') as\n        ArrayMap[R];\n  }\n\n  /**\n   * Returns the tensor data as a nested array. The transfer of data is done\n   * synchronously.\n   *\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\n   */\n  arraySync(): ArrayMap[R] {\n    return toNestedArray(\n               this.shape, this.dataSync(), this.dtype === 'complex64') as\n        ArrayMap[R];\n  }\n\n  /**\n   * Asynchronously downloads the values from the `tf.Tensor`. Returns a\n   * promise of `TypedArray` that resolves when the computation has finished.\n   *\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\n   */\n  async data<D extends DataType = NumericDataType>(): Promise<DataTypeMap[D]> {\n    this.throwIfDisposed();\n    const data = trackerFn().read(this.dataId);\n    if (this.dtype === 'string') {\n      const bytes = await data as Uint8Array[];\n      try {\n        return bytes.map(b => util.decodeString(b)) as DataTypeMap[D];\n      } catch {\n        throw new Error(\n            'Failed to decode the string bytes into utf-8. ' +\n            'To get the original bytes, call tensor.bytes().');\n      }\n    }\n    return data as Promise<DataTypeMap[D]>;\n  }\n\n  /**\n   * Copy the tensor's data to a new GPU resource. Comparing to the `dataSync()`\n   * and `data()`, this method prevents data from being downloaded to CPU.\n   *\n   * For WebGL backend, the data will be stored on a densely packed texture.\n   * This means that the texture will use the RGBA channels to store value.\n   *\n   * For WebGPU backend, the data will be stored on a buffer. There is no\n   * parameter, so can not use a user-defined size to create the buffer.\n   *\n   * @param options:\n   *     For WebGL,\n   *         - customTexShape: Optional. If set, will use the user defined\n   *     texture shape to create the texture.\n   *\n   * @returns For WebGL backend, a GPUData contains the new texture and\n   *     its information.\n   *     {\n   *        tensorRef: The tensor that is associated with this texture,\n   *        texture: WebGLTexture,\n   *        texShape: [number, number] // [height, width]\n   *     }\n   *\n   *     For WebGPU backend, a GPUData contains the new buffer and\n   *     its information.\n   *     {\n   *        tensorRef: The tensor that is associated with this buffer,\n   *        buffer: GPUBuffer,\n   *        bufSize: number\n   *     }\n   *\n   *     Remember to dispose the GPUData after it is used by\n   *     `res.tensorRef.dispose()`.\n   *\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\n   */\n  dataToGPU(options?: DataToGPUOptions): GPUData {\n    this.throwIfDisposed();\n    return trackerFn().readToGPU(this.dataId, options);\n  }\n\n  /**\n   * Synchronously downloads the values from the `tf.Tensor`. This blocks the\n   * UI thread until the values are ready, which can cause performance issues.\n   *\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\n   */\n  dataSync<D extends DataType = NumericDataType>(): DataTypeMap[D] {\n    this.throwIfDisposed();\n    const data = trackerFn().readSync(this.dataId);\n    if (this.dtype === 'string') {\n      try {\n        return (data as Uint8Array[]).map(b => util.decodeString(b)) as\n            DataTypeMap[D];\n      } catch {\n        throw new Error(\n            'Failed to decode the string bytes into utf-8. ' +\n            'To get the original bytes, call tensor.bytes().');\n      }\n    }\n    return data as DataTypeMap[D];\n  }\n\n  /** Returns the underlying bytes of the tensor's data. */\n  async bytes(): Promise<Uint8Array[]|Uint8Array> {\n    this.throwIfDisposed();\n    const data = await trackerFn().read(this.dataId);\n    if (this.dtype === 'string') {\n      return data as Uint8Array[];\n    } else {\n      return new Uint8Array((data as TypedArray).buffer);\n    }\n  }\n\n  /**\n   * Disposes `tf.Tensor` from memory.\n   *\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\n   */\n  dispose(): void {\n    if (this.isDisposed) {\n      return;\n    }\n    trackerFn().disposeTensor(this);\n    this.isDisposedInternal = true;\n  }\n\n  protected isDisposedInternal = false;\n  get isDisposed(): boolean {\n    return this.isDisposedInternal;\n  }\n\n  throwIfDisposed() {\n    if (this.isDisposed) {\n      throw new Error(`Tensor is disposed.`);\n    }\n  }\n\n  /**\n   * Prints the `tf.Tensor`. See `tf.print` for details.\n   *\n   * @param verbose Whether to print verbose information about the tensor,\n   *    including dtype and size.\n   *\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\n   */\n  print(verbose = false): void {\n    return opHandler.print(this, verbose);\n  }\n\n  /**\n   * Returns a copy of the tensor. See `tf.clone` for details.\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\n   */\n  clone<T extends Tensor>(this: T): T {\n    this.throwIfDisposed();\n    return opHandler.clone(this);\n  }\n\n  /**\n   * Returns a human-readable description of the tensor. Useful for logging.\n   *\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\n   */\n  toString(verbose = false): string {\n    const vals = this.dataSync();\n    return tensorToString(vals, this.shape, this.dtype, verbose);\n  }\n\n  cast<T extends this>(dtype: DataType): T {\n    this.throwIfDisposed();\n    return opHandler.cast(this as T, dtype);\n  }\n  variable(trainable = true, name?: string, dtype?: DataType): Variable<R> {\n    this.throwIfDisposed();\n    return trackerFn().makeVariable(this, trainable, name, dtype) as\n        Variable<R>;\n  }\n}\n\nObject.defineProperty(Tensor, Symbol.hasInstance, {\n  value: (instance: Tensor) => {\n    // Implementation note: we should use properties of the object that will be\n    // defined before the constructor body has finished executing (methods).\n    // This is because when this code is transpiled by babel, babel will call\n    // classCallCheck before the constructor body is run.\n    // See https://github.com/tensorflow/tfjs/issues/3384 for backstory.\n    return !!instance && instance.data != null && instance.dataSync != null &&\n        instance.throwIfDisposed != null;\n  }\n});\n\nexport function getGlobalTensorClass() {\n  // Use getGlobal so that we can augment the Tensor class across package\n  // boundaries becase the node resolution alg may result in different modules\n  // being returned for this file depending on the path they are loaded from.\n  return getGlobal('Tensor', () => {\n    return Tensor;\n  });\n}\n\n// Global side effect. Cache global reference to Tensor class\ngetGlobalTensorClass();\n\nexport interface NumericTensor<R extends Rank = Rank> extends Tensor<R> {\n  dtype: NumericDataType;\n  dataSync<D extends DataType = NumericDataType>(): DataTypeMap[D];\n  data<D extends DataType = NumericDataType>(): Promise<DataTypeMap[D]>;\n  dataToGPU(options?: DataToGPUOptions): GPUData;\n}\n\nexport interface StringTensor<R extends Rank = Rank> extends Tensor<R> {\n  dtype: 'string';\n  dataSync<D extends DataType = 'string'>(): DataTypeMap[D];\n  data<D extends DataType = 'string'>(): Promise<DataTypeMap[D]>;\n}\n\n/** @doclink Tensor */\nexport type Scalar = Tensor<Rank.R0>;\n/** @doclink Tensor */\nexport type Tensor1D = Tensor<Rank.R1>;\n/** @doclink Tensor */\nexport type Tensor2D = Tensor<Rank.R2>;\n/** @doclink Tensor */\nexport type Tensor3D = Tensor<Rank.R3>;\n/** @doclink Tensor */\nexport type Tensor4D = Tensor<Rank.R4>;\n/** @doclink Tensor */\nexport type Tensor5D = Tensor<Rank.R5>;\n/** @doclink Tensor */\nexport type Tensor6D = Tensor<Rank.R6>;\n\n/**\n * A mutable `tf.Tensor`, useful for persisting state, e.g. for training.\n *\n * @doc {heading: 'Tensors', subheading: 'Classes'}\n */\nexport class Variable<R extends Rank = Rank> extends Tensor<R> {\n  name: string;\n\n  constructor(\n      initialValue: Tensor<R>, public trainable: boolean, name: string,\n      tensorId: number) {\n    super(\n        initialValue.shape, initialValue.dtype, initialValue.dataId, tensorId);\n    this.name = name;\n  }\n\n  /**\n   * Assign a new `tf.Tensor` to this variable. The new `tf.Tensor` must have\n   * the same shape and dtype as the old `tf.Tensor`.\n   *\n   * @param newValue New tensor to be assigned to this variable.\n   *\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\n   */\n  assign(newValue: Tensor<R>): void {\n    if (newValue.dtype !== this.dtype) {\n      throw new Error(\n          `dtype of the new value (${newValue.dtype}) and ` +\n          `previous value (${this.dtype}) must match`);\n    }\n    if (!util.arraysEqual(newValue.shape, this.shape)) {\n      throw new Error(\n          `shape of the new value (${newValue.shape}) and ` +\n          `previous value (${this.shape}) must match`);\n    }\n    trackerFn().disposeTensor(this);\n    this.dataId = newValue.dataId;\n    trackerFn().incRef(this, null /* backend */);\n  }\n\n  override dispose(): void {\n    trackerFn().disposeVariable(this);\n    this.isDisposedInternal = true;\n  }\n}\n\nObject.defineProperty(Variable, Symbol.hasInstance, {\n  value: (instance: Variable) => {\n    return instance instanceof Tensor && instance.assign != null &&\n        instance.assign instanceof Function;\n  }\n});\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/** @docalias number[] */\nexport interface ShapeMap {\n  R0: number[];\n  R1: [number];\n  R2: [number, number];\n  R3: [number, number, number];\n  R4: [number, number, number, number];\n  R5: [number, number, number, number, number];\n  R6: [number, number, number, number, number, number];\n}\n\n/** @docalias number[] */\nexport interface ArrayMap {\n  R0: number;\n  R1: number[];\n  R2: number[][];\n  R3: number[][][];\n  R4: number[][][][];\n  R5: number[][][][][];\n  R6: number[][][][][][];\n}\n\nexport interface DataTypeMap {\n  float32: Float32Array;\n  int32: Int32Array;\n  bool: Uint8Array;\n  complex64: Float32Array;\n  string: string[];\n}\n\nexport interface SingleValueMap {\n  bool: boolean;\n  int32: number;\n  float32: number;\n  complex64: number;\n  string: string;\n}\n\n/** @docalias 'float32'|'int32'|'bool'|'complex64'|'string' */\nexport type DataType = keyof DataTypeMap;\nexport type NumericDataType = 'float32'|'int32'|'bool'|'complex64';\nexport type TypedArray = Float32Array|Int32Array|Uint8Array;\n/** Tensor data used in tensor creation and user-facing API. */\nexport type DataValues = DataTypeMap[DataType];\n/** The underlying tensor data that gets stored in a backend. */\nexport type BackendValues = Float32Array|Int32Array|Uint8Array|Uint8Array[];\n\nexport enum Rank {\n  R0 = 'R0',\n  R1 = 'R1',\n  R2 = 'R2',\n  R3 = 'R3',\n  R4 = 'R4',\n  R5 = 'R5',\n  R6 = 'R6'\n}\n\nexport type FlatVector = boolean[]|number[]|TypedArray;\nexport type RegularArray<T> =\n    T[]|T[][]|T[][][]|T[][][][]|T[][][][][]|T[][][][][][];\n\n// tslint:disable-next-line:no-any\nexport interface RecursiveArray<T extends any> {\n  [index: number]: T|RecursiveArray<T>;\n}\n\n// Looks for upcasting types. Used, for example, in operations with mixed dtype\n// inputs.\nenum UpcastInt32AndMap {\n  'float32' = 'float32',\n  'int32' = 'int32',\n  'bool' = 'int32',\n  'complex64' = 'complex64'\n}\n\nenum UpcastBoolAndMap {\n  'float32' = 'float32',\n  'int32' = 'int32',\n  'bool' = 'bool',\n  'complex64' = 'complex64'\n}\n\nenum UpcastFloat32AndMap {\n  'float32' = 'float32',\n  'int32' = 'float32',\n  'bool' = 'float32',\n  'complex64' = 'complex64'\n}\n\nenum UpcastComplex64AndMap {\n  'float32' = 'complex64',\n  'int32' = 'complex64',\n  'bool' = 'complex64',\n  'complex64' = 'complex64'\n}\n\nconst upcastTypeMap = {\n  'float32': UpcastFloat32AndMap,\n  'int32': UpcastInt32AndMap,\n  'bool': UpcastBoolAndMap,\n  'complex64': UpcastComplex64AndMap\n};\n\nexport function upcastType(typeA: DataType, typeB: DataType): DataType {\n  if (typeA === 'string' || typeB === 'string') {\n    if (typeA === 'string' && typeB === 'string') {\n      return 'string';\n    }\n    throw new Error(`Can not upcast ${typeA} with ${typeB}`);\n  }\n  return upcastTypeMap[typeA][typeB];\n}\n\n/** Returns the output type after summation. */\nexport function sumOutType(type: DataType): DataType {\n  return upcastType(type, 'int32');\n}\n\n/** @docalias TypedArray|Array */\nexport type TensorLike =\n    TypedArray|number|boolean|string|RecursiveArray<number|number[]|TypedArray>|\n    RecursiveArray<boolean>|RecursiveArray<string>|Uint8Array[];\nexport type ScalarLike = number|boolean|string|Uint8Array;\n/** @docalias TypedArray|Array */\nexport type TensorLike1D = TypedArray|number[]|boolean[]|string[]|Uint8Array[];\n/** @docalias TypedArray|Array */\nexport type TensorLike2D = TypedArray|number[]|number[][]|boolean[]|boolean[][]|\n    string[]|string[][]|Uint8Array[]|Uint8Array[][];\n/** @docalias TypedArray|Array */\nexport type TensorLike3D = TypedArray|number[]|number[][][]|boolean[]|\n    boolean[][][]|string[]|string[][][]|Uint8Array[]|Uint8Array[][][];\n/** @docalias TypedArray|Array */\nexport type TensorLike4D = TypedArray|number[]|number[][][][]|boolean[]|\n    boolean[][][][]|string[]|string[][][][]|Uint8Array[]|Uint8Array[][][][];\n/** @docalias TypedArray|Array */\nexport type TensorLike5D =\n    TypedArray|number[]|number[][][][][]|boolean[]|boolean[][][][][]|string[]|\n    string[][][][][]|Uint8Array[]|Uint8Array[][][][][];\n/** @docalias TypedArray|Array */\nexport type TensorLike6D =\n    TypedArray|number[]|number[][][][][][]|boolean[]|boolean[][][][][][]|\n    string[]|string[][][][][][]|Uint8Array[]|Uint8Array[][][][][];\n\n/** Type for representing image data in Uint8Array type. */\nexport interface PixelData {\n  width: number;\n  height: number;\n  data: Uint8Array;\n}\n\n/**\n * Type for representing all permutations and combinations of 'RGBA' channels.\n */\nexport type WebGLChannels = 'A'|'B'|'G'|'R'|'AB'|'AG'|'AR'|'BA'|'BG'|'BR'|'GA'|\n    'GB'|'GR'|'RA'|'RB'|'RG'|'ABG'|'ABR'|'AGB'|'AGR'|'ARB'|'ARG'|'BAG'|'BAR'|\n    'BGA'|'BGR'|'BRA'|'BRG'|'GAB'|'GAR'|'GBA'|'GBR'|'GRA'|'GRB'|'RAB'|'RAG'|\n    'RBA'|'RBG'|'RGA'|'RGB'|'ABGR'|'ABRG'|'AGBR'|'AGRB'|'ARBG'|'ARGB'|'BAGR'|\n    'BARG'|'BGAR'|'BGRA'|'BRAG'|'BRGA'|'GABR'|'GARB'|'GBAR'|'GBRA'|'GRAB'|\n    'GRBA'|'RABG'|'RAGB'|'RBAG'|'RBGA'|'RGAB'|'RGBA';\n\n/** Type for representing a texture data to create a tensor. */\nexport interface WebGLData {\n  texture: WebGLTexture;\n  height: number;\n  width: number;\n  channels: WebGLChannels;\n}\n\n/**\n * Type for representing a buffer data to create a tensor. Buffer usage should\n * at least support GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC. When\n * zeroCopy is false or undefined (default), this GPUBuffer will be copied to\n * the tensor's resource buffer. When zeroCopy is true, tensor will use this\n * GPUBuffer as tensor's resource buffer, user should not destroy this GPUBuffer\n * until all access is done. If not specified at creating a tensor, tensor type\n * is float32.\n */\nexport interface WebGPUData {\n  buffer: GPUBuffer;\n  zeroCopy?: boolean;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from './tensor';\nimport {TensorContainer, TensorContainerArray} from './tensor_types';\nimport {upcastType} from './types';\nimport {assert} from './util';\n\nexport function makeTypesMatch<T extends Tensor>(a: T, b: T): [T, T] {\n  if (a.dtype === b.dtype) {\n    return [a, b];\n  }\n  const dtype = upcastType(a.dtype, b.dtype);\n  return [a.cast(dtype), b.cast(dtype)];\n}\n\nexport function assertTypesMatch(a: Tensor, b: Tensor): void {\n  assert(\n      a.dtype === b.dtype,\n      () => `The dtypes of the first(${a.dtype}) and` +\n          ` second(${b.dtype}) input must match`);\n}\n\nexport function isTensorInList(tensor: Tensor, tensorList: Tensor[]): boolean {\n  return tensorList.some(x => x.id === tensor.id);\n}\n\n/**\n * Extracts any `Tensor`s found within the provided object.\n *\n * @param container an object that may be a `Tensor` or may directly contain\n *   `Tensor`s, such as a `Tensor[]` or `{key: Tensor, ...}`. In general it\n *   is safe to pass any object here, except that `Promise`s are not\n *   supported.\n * @returns An array of `Tensors` found within the passed object. If the\n *   argument is simply a `Tensor', a list containing that `Tensor` is\n *   returned. If the object is not a `Tensor` or does not\n *   contain `Tensors`, an empty list is returned.\n */\nexport function getTensorsInContainer(result: TensorContainer): Tensor[] {\n  const list: Tensor[] = [];\n  const seen = new Set<{}|void>();\n  walkTensorContainer(result, list, seen);\n  return list;\n}\n\nfunction walkTensorContainer(\n    container: TensorContainer, list: Tensor[], seen: Set<{}|void>): void {\n  if (container == null) {\n    return;\n  }\n  if (container instanceof Tensor) {\n    list.push(container);\n    return;\n  }\n  if (!isIterable(container)) {\n    return;\n  }\n  // Iteration over keys works also for arrays.\n  const iterable = container as TensorContainerArray;\n  for (const k in iterable) {\n    const val = iterable[k];\n    if (!seen.has(val)) {\n      seen.add(val);\n      walkTensorContainer(val, list, seen);\n    }\n  }\n}\n\n// tslint:disable-next-line:no-any\nfunction isIterable(obj: any): boolean {\n  return Array.isArray(obj) || typeof obj === 'object';\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BackendTimingInfo, DataMover, KernelBackend} from './backends/backend';\nimport {Environment, setEnvironmentGlobal} from './environment';\nimport {getGlobalNamespace} from './global_util';\nimport {Add, Cast, Identity} from './kernel_names';\nimport { getGradient, getKernel, getKernelsForBackend, GradFunc, NamedAttrMap } from './kernel_registry';\nimport { TensorInfo } from './tensor_info';\nimport * as log from './log';\nimport {KernelProfile, Profiler} from './profiler';\nimport {backpropagateGradients, getFilteredNodesXToY, TapeNode} from './tape';\nimport {DataToGPUOptions, GPUData, setTensorTracker, Tensor, TensorTracker, Variable} from './tensor';\nimport {DataId} from './tensor_info';\nimport {GradSaveFunc, NamedTensorMap, NamedVariableMap, TensorContainer} from './tensor_types';\nimport {getTensorsInContainer} from './tensor_util';\nimport {BackendValues, DataType, DataValues} from './types';\nimport * as util from './util';\nimport {bytesFromStringArray, makeOnesTypedArray, now, sizeFromShape} from './util';\n\n/**\n * A function that computes an output. The save function is for saving tensors\n * computed in the forward pass, that we need in the backward pass.\n */\nexport type ForwardFunc<T> = (backend: KernelBackend, save?: GradSaveFunc) => T;\n\n/**\n * @docalias (a: Tensor, b: Tensor,..., save?: Function) => {\n *   value: Tensor,\n *   gradFunc: (dy: Tensor, saved?: NamedTensorMap) => Tensor | Tensor[]\n * }\n */\nexport type CustomGradientFunc<T extends Tensor> =\n    (...inputs: Array<Tensor|GradSaveFunc>) => {\n      value: T;\n      gradFunc: (dy: T, saved: Tensor[]) => Tensor | Tensor[];\n    };\n\nexport type MemoryInfo = {\n  numTensors: number; numDataBuffers: number; numBytes: number;\n  unreliable?: boolean; reasons: string[];\n};\n\ntype KernelInfo = {\n  name: string; bytesAdded: number; totalBytesSnapshot: number;\n  tensorsAdded: number;\n  totalTensorsSnapshot: number;\n  inputShapes: number[][];\n  outputShapes: number[][];\n  kernelTimeMs: number | {error: string} | Promise<number|{error: string}>;\n  extraInfo: string | Promise<string>;\n};\n\nexport type ProfileInfo = {\n  newBytes: number; newTensors: number; peakBytes: number;\n  kernels: KernelInfo[];\n  result: TensorContainer;\n  kernelNames: string[];\n};\n\nexport interface TimingInfo extends BackendTimingInfo {\n  wallMs: number;\n}\n\n/** @docalias Function */\nexport type ScopeFn<T extends TensorContainer> = () => T;\n\ninterface ScopeState {\n  track: Tensor[];\n  name: string;\n  id: number;\n}\n\ninterface RegisteredKernelInvocation<I extends NamedTensorMap> {\n  kernelName: string;\n  inputs: I;\n  attrs?: NamedAttrMap;\n}\n\ninterface CustomGradKernelInvocation<T extends Tensor|Tensor[],\n                                               I extends NamedTensorMap> {\n  forwardFunc: ForwardFunc<T>;\n  backwardsFunc: (dy: T, saved: Tensor[]) => {\n    [P in keyof I]: () => I[P]\n  };\n  inputs: I;\n  attrs?: NamedAttrMap;\n}\n\nfunction isRegisteredKernelInvocation<T extends Tensor|Tensor[],\n                                                I extends NamedTensorMap>(\n    kernelInvocation: RegisteredKernelInvocation<I>|\n    CustomGradKernelInvocation<T, I>):\n    kernelInvocation is RegisteredKernelInvocation<I> {\n  return (kernelInvocation as RegisteredKernelInvocation<I>).kernelName != null;\n}\n\nclass EngineState {\n  // Public since optimizers will use it.\n  registeredVariables: NamedVariableMap = {};\n\n  nextTapeNodeId = 0;\n  numBytes = 0;\n  numTensors = 0;\n  numStringTensors = 0;\n  numDataBuffers = 0;\n\n  activeTape: TapeNode[];\n  // Number of nested tf.grad() statements when computing higher-order\n  // gradients. E.g. `1` for first-order gradients and `2` for second-order\n  // gradients. Used to track if the tape should be removed after a backprop.\n  gradientDepth = 0;\n  // Number of nested kernel calls. When kernel depth is greater than 1, we turn\n  // off the tape.\n  kernelDepth = 0;\n\n  // Keep Tensors that parallel the tapes.\n  activeScope: ScopeState;\n  scopeStack: ScopeState[] = [];\n  /**\n   * Keeps track of the number of data moves during a kernel execution. We\n   * maintain a stack since kernels can call other kernels, recursively.\n   */\n  numDataMovesStack: number[] = [];\n  nextScopeId = 0;\n\n  tensorInfo = new WeakMap<DataId, {\n    backend: KernelBackend,\n    bytes: number,\n    dtype: DataType,\n    shape: number[]\n  }>();\n\n  profiling = false;\n  activeProfile: ProfileInfo = {\n    newBytes: 0,\n    newTensors: 0,\n    peakBytes: 0,\n    kernels: [],\n    result: null,\n    get kernelNames():\n        string[] {\n          return Array.from(new Set(this.kernels.map(k => k.name)));\n        }\n  };\n\n  dispose() {\n    for (const variableName in this.registeredVariables) {\n      this.registeredVariables[variableName].dispose();\n    }\n  }\n}\n\nexport class Engine implements TensorTracker, DataMover {\n  state: EngineState;\n  backendName: string;\n  registry: {[id: string]: KernelBackend} = {};\n  registryFactory: {\n    [id: string]: {\n      factory: () => KernelBackend | Promise<KernelBackend>,\n      priority: number\n    }\n  } = {};\n\n  private profiler: Profiler;\n  private backendInstance: KernelBackend;\n  private pendingBackendInit: Promise<boolean>;\n  private pendingBackendInitId = 0;\n\n  constructor(public ENV: Environment) {\n    this.state = new EngineState();\n  }\n\n  async ready(): Promise<void> {\n    if (this.pendingBackendInit != null) {\n      return this.pendingBackendInit.then(() => {});\n    }\n    if (this.backendInstance != null) {\n      return;\n    }\n    const sortedBackends = this.getSortedBackends();\n\n    for (let i = 0; i < sortedBackends.length; i++) {\n      const backendName = sortedBackends[i];\n      const success = await this.initializeBackend(backendName).success;\n      if (success) {\n        await this.setBackend(backendName);\n        return;\n      }\n    }\n\n    throw new Error(\n        `Could not initialize any backends, all backend initializations ` +\n        `failed.`);\n  }\n\n  get backend(): KernelBackend {\n    if (this.pendingBackendInit != null) {\n      throw new Error(\n          `Backend '${this.backendName}' has not yet been initialized. Make ` +\n          `sure to await tf.ready() or await tf.setBackend() before calling ` +\n          `other methods`);\n    }\n    if (this.backendInstance == null) {\n      const {name, asyncInit} = this.initializeBackendsAndReturnBest();\n      if (asyncInit) {\n        throw new Error(\n            `The highest priority backend '${name}' has not yet been ` +\n            `initialized. Make sure to await tf.ready() or ` +\n            `await tf.setBackend() before calling other methods`);\n      }\n      this.setBackend(name);\n    }\n    return this.backendInstance;\n  }\n\n  backendNames(): string[] {\n    return Object.keys(this.registryFactory);\n  }\n\n  findBackend(backendName: string): KernelBackend {\n    if (!(backendName in this.registry)) {\n      // If the backend hasn't been initialized but we have a registry entry for\n      // it, initialize it and return it.\n      if (backendName in this.registryFactory) {\n        const {asyncInit} = this.initializeBackend(backendName);\n        if (asyncInit) {\n          // Backend is not ready yet.\n          return null;\n        }\n      } else {\n        return null;\n      }\n    }\n    return this.registry[backendName];\n  }\n\n  findBackendFactory(backendName: string):\n      () => KernelBackend | Promise<KernelBackend> {\n    if (!(backendName in this.registryFactory)) {\n      return null;\n    }\n    return this.registryFactory[backendName].factory;\n  }\n\n  registerBackend(\n      backendName: string,\n      factory: () => KernelBackend | Promise<KernelBackend>,\n      priority = 1): boolean {\n    if (backendName in this.registryFactory) {\n      log.warn(\n          `${backendName} backend was already registered. ` +\n          `Reusing existing backend factory.`);\n      return false;\n    }\n    this.registryFactory[backendName] = {factory, priority};\n    return true;\n  }\n\n  async setBackend(backendName: string): Promise<boolean> {\n    if (this.registryFactory[backendName] == null) {\n      throw new Error(`Backend name '${backendName}' not found in registry`);\n    }\n    this.backendName = backendName;\n    if (this.registry[backendName] == null) {\n      this.backendInstance = null;\n      const {success, asyncInit} = this.initializeBackend(backendName);\n      const result = asyncInit ? await success : success;\n      if (!result) {\n        return false;\n      }\n    }\n    this.backendInstance = this.registry[backendName];\n    this.setupRegisteredKernels();\n    // Reset the profiler.\n    this.profiler = new Profiler(this.backendInstance);\n\n    return true;\n  }\n\n  private setupRegisteredKernels(): void {\n    const kernels = getKernelsForBackend(this.backendName);\n    kernels.forEach(kernel => {\n      if (kernel.setupFunc != null) {\n        kernel.setupFunc(this.backendInstance);\n      }\n    });\n  }\n\n  private disposeRegisteredKernels(backendName: string): void {\n    const kernels = getKernelsForBackend(backendName);\n    kernels.forEach(kernel => {\n      if (kernel.disposeFunc != null) {\n        kernel.disposeFunc(this.registry[backendName]);\n      }\n    });\n  }\n\n  /**\n   * Initializes a backend by looking up the backend name in the factory\n   * registry and calling the factory method. Returns a boolean representing\n   * whether the initialization of the backend suceeded. Throws an error if\n   * there is no backend in the factory registry.\n   */\n  private initializeBackend(backendName: string):\n      {success: boolean|Promise<boolean>, asyncInit: boolean} {\n    const registryFactoryEntry = this.registryFactory[backendName];\n    if (registryFactoryEntry == null) {\n      throw new Error(\n          `Cannot initialize backend ${backendName}, no registration found.`);\n    }\n\n    try {\n      const backend = registryFactoryEntry.factory();\n      /* Test if the factory returns a promise.\n      Done in a more liberal way than\n      previous 'Promise.resolve(backend)===backend'\n      as we needed to account for custom Promise\n      implementations (e.g. Angular) */\n      if (backend && !(backend instanceof KernelBackend) &&\n          typeof backend.then === 'function') {\n        const promiseId = ++this.pendingBackendInitId;\n        const success =\n            backend\n                .then(backendInstance => {\n                  // Outdated promise. Another backend was set in the meantime.\n                  if (promiseId < this.pendingBackendInitId) {\n                    return false;\n                  }\n                  this.registry[backendName] = backendInstance;\n                  this.pendingBackendInit = null;\n                  return true;\n                })\n                .catch(err => {\n                  // Outdated promise. Another backend was set in the meantime.\n                  if (promiseId < this.pendingBackendInitId) {\n                    return false;\n                  }\n                  this.pendingBackendInit = null;\n                  log.warn(`Initialization of backend ${backendName} failed`);\n                  log.warn(err.stack || err.message);\n                  return false;\n                });\n        this.pendingBackendInit = success;\n        return {success, asyncInit: true};\n      } else {\n        this.registry[backendName] = backend as KernelBackend;\n        return {success: true, asyncInit: false};\n      }\n    } catch (err) {\n      log.warn(`Initialization of backend ${backendName} failed`);\n      log.warn(err.stack || err.message);\n      return {success: false, asyncInit: false};\n    }\n  }\n\n  removeBackend(backendName: string): void {\n    if (!(backendName in this.registryFactory)) {\n      throw new Error(`${backendName} backend not found in registry`);\n    }\n    if (this.backendName === backendName && this.pendingBackendInit != null) {\n      // There is a pending promise of the backend we want to remove. Make it\n      // obsolete.\n      this.pendingBackendInitId++;\n    }\n\n    if (backendName in this.registry) {\n      this.disposeRegisteredKernels(backendName);\n      this.registry[backendName].dispose();\n      delete this.registry[backendName];\n    }\n\n    delete this.registryFactory[backendName];\n\n    // Unset the backend if it is active.\n    if (this.backendName === backendName) {\n      this.pendingBackendInit = null;\n      this.backendName = null;\n      this.backendInstance = null;\n    }\n  }\n\n  private getSortedBackends(): string[] {\n    if (Object.keys(this.registryFactory).length === 0) {\n      throw new Error('No backend found in registry.');\n    }\n    return Object.keys(this.registryFactory).sort((a: string, b: string) => {\n      // Highest priority comes first.\n      return this.registryFactory[b].priority -\n          this.registryFactory[a].priority;\n    });\n  }\n\n  private initializeBackendsAndReturnBest():\n      {name: string, asyncInit: boolean} {\n    const sortedBackends = this.getSortedBackends();\n\n    for (let i = 0; i < sortedBackends.length; i++) {\n      const backendName = sortedBackends[i];\n      const {success, asyncInit} = this.initializeBackend(backendName);\n      if (asyncInit || success) {\n        return {name: backendName, asyncInit};\n      }\n    }\n    throw new Error(\n        `Could not initialize any backends, all backend initializations ` +\n        `failed.`);\n  }\n\n  moveData(backend: KernelBackend, dataId: DataId) {\n    const info = this.state.tensorInfo.get(dataId);\n    const srcBackend = info.backend;\n    const values = this.readSync(dataId);\n    const refCount = srcBackend.refCount(dataId);\n    // Delete the tensor from the old backend and move it to the new\n    // backend.\n    srcBackend.disposeData(dataId, true);\n    info.backend = backend;\n    backend.move(dataId, values, info.shape, info.dtype, refCount);\n    if (this.shouldCheckForMemLeaks()) {\n      // Track the number of moves during a kernel execution to correctly\n      // detect memory leaks.\n      this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1]++;\n    }\n  }\n\n  tidy<T extends TensorContainer>(nameOrFn: string|ScopeFn<T>, fn?: ScopeFn<T>):\n      T {\n    let name: string = null;\n    if (fn == null) {\n      // Called with only 1 argument.\n      if (typeof nameOrFn !== 'function') {\n        throw new Error('Please provide a function to tidy()');\n      }\n      fn = nameOrFn;\n    } else {\n      // Called with 2 arguments.\n      if (typeof nameOrFn !== 'string' && !(nameOrFn instanceof String)) {\n        throw new Error(\n            'When calling with two arguments, the first argument ' +\n            'to tidy() must be a string');\n      }\n      if (typeof fn !== 'function') {\n        throw new Error(\n            'When calling with two arguments, the 2nd argument ' +\n            'to tidy() must be a function');\n      }\n      name = nameOrFn as string;\n      // TODO(nsthorat,smilkov): Do operation logging and performance\n      // profiling.\n    }\n    let result: T;\n    return this.scopedRun(\n        () => this.startScope(name), () => this.endScope(result), () => {\n          result = fn();\n          if (result instanceof Promise) {\n            console.error('Cannot return a Promise inside of tidy.');\n          }\n          return result;\n        });\n  }\n\n  private scopedRun<T>(start: () => void, end: () => void, f: () => T): T {\n    start();\n    try {\n      const res = f();\n      end();\n      return res;\n    } catch (ex) {\n      end();\n      throw ex;\n    }\n  }\n\n  private static nextTensorId = 0;\n  private nextTensorId(): number {\n    return Engine.nextTensorId++;\n  }\n\n  private static nextVariableId = 0;\n  private nextVariableId(): number {\n    return Engine.nextVariableId++;\n  }\n\n  /**\n   * This method is called instead of the public-facing tensor.clone() when\n   * saving a tensor for backwards pass. It makes sure to add the clone\n   * operation to the tape regardless of being called inside a kernel\n   * execution.\n   */\n  private clone(x: Tensor): Tensor {\n    const y: Tensor = ENGINE.runKernel(Identity,\n                                       {x} as unknown as NamedTensorMap);\n    const inputs = {x};\n    const grad = (dy: Tensor) => ({\n      x: () => {\n        const dtype = 'float32';\n        const gradInputs = {x: dy};\n        const attrs = {dtype};\n\n        return ENGINE.runKernel(\n                   Cast, gradInputs as unknown as NamedTensorMap,\n                   // tslint:disable-next-line: no-unnecessary-type-assertion\n                   attrs as unknown as NamedAttrMap) as Tensor;\n      }\n    });\n    const saved: Tensor[] = [];\n    this.addTapeNode(this.state.activeScope.name, inputs, [y], grad, saved, {});\n    return y;\n  }\n\n  /**\n   * Execute a kernel with the given name and return the output tensor.\n   *\n   * @param kernelName The name of the kernel to execute.\n   * @param inputs A map of input names to tensors.\n   * @param attrs A map of attribute names to their values. An attribute is a\n   *     primitive (non-tensor) input to the kernel.\n   * @param inputsToSave A list of tensors, inputs to save for the backprop\n   *     computation.\n   * @param outputsToSave A list of booleans, specifying which output to save\n   *     for the backprop computation. These are booleans since the output\n   * tensors are not visible to the user.\n   */\n  runKernel<T extends Tensor|Tensor[]>(\n      kernelName: string, inputs: NamedTensorMap, attrs?: NamedAttrMap): T {\n    if (this.backendName == null) {\n      // backend has not been initialized yet (backend initialization is lazy\n      // can be deferred until an op/ kernel is run).\n      // The below getter has side effects that will try to initialize the\n      // backend and set properties like this.backendName\n      // tslint:disable-next-line: no-unused-expression\n      this.backend;\n    }\n    const hasKernel = getKernel(kernelName, this.backendName) != null;\n    if (!hasKernel) {\n      throw new Error(`Kernel '${kernelName}' not registered for backend '${\n          this.backendName}'`);\n    }\n    return this.runKernelFunc({kernelName, inputs, attrs});\n  }\n\n  private shouldCheckForMemLeaks(): boolean {\n    return this.ENV.getBool('IS_TEST');\n  }\n\n  private checkKernelForMemLeak(\n      kernelName: string, numDataIdsBefore: number,\n      outInfos: TensorInfo[]): void {\n    const numDataIdsAfter = this.backend.numDataIds();\n\n    // Count the number of data ids associated with the result of the kernel.\n    let numOutputDataIds = 0;\n    outInfos.forEach(info => {\n      // Complex numbers allocate 3 data ids, one for 'real', one for\n      // 'imaginary', and one for the container that holds the former two.\n      numOutputDataIds += (info.dtype === 'complex64' ? 3 : 1);\n    });\n\n    // Account for the number of moves during kernel execution. A \"data move\"\n    // can happen in the middle of a kernel execution, placing a new (key,value)\n    // pair in the data storage. Since data moves have net zero effect (we\n    // always remove the data from the old backend), we have to cancel them out\n    // when detecting memory leaks.\n    const numMoves =\n        this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1];\n    const dataIdsLeaked =\n        numDataIdsAfter - numDataIdsBefore - numOutputDataIds - numMoves;\n    if (dataIdsLeaked > 0) {\n      throw new Error(\n          `Backend '${this.backendName}' has an internal memory leak ` +\n          `(${dataIdsLeaked} data ids) after running '${kernelName}'`);\n    }\n  }\n\n  /**\n   * Internal helper method to execute a kernel Func\n   *\n   * Use `runKernel` to execute kernels from outside of engine.\n   */\n  private runKernelFunc<T extends Tensor|Tensor[], I extends NamedTensorMap>(\n      kernelParams: RegisteredKernelInvocation<I>|\n      CustomGradKernelInvocation<T, I>): T {\n    let outputs: Tensor[];\n    let saved: Tensor[] = [];\n    const isTapeOn = this.isTapeOn();\n\n    const startingBytecount = this.state.numBytes;\n    const startingNumTensors = this.state.numTensors;\n\n    if (this.shouldCheckForMemLeaks()) {\n      this.state.numDataMovesStack.push(0);\n    }\n\n    let kernelFunc: () => Tensor[];\n    if (this.backendName == null) {\n      // backend has not been initialized yet (backend initialization is lazy\n      // can be deferred until an op/ kernel is run).\n      // The below getter has side effects that will try to initialize the\n      // backend and set properties like this.backendName\n      // tslint:disable-next-line: no-unused-expression\n      this.backend;\n    }\n\n    let out: TensorInfo|TensorInfo[];\n\n    const kernelOrScopeName = isRegisteredKernelInvocation(kernelParams) ?\n        kernelParams.kernelName :\n        this.state.activeScope != null ? this.state.activeScope.name : '';\n\n    // Create the kernelFunc from either a registered kernel OR passed in\n    // forward/backward functions (used by custom grad). In this context a\n    // kernelFunc wraps a kernel implementation with some bookkeeping.\n\n    if (isRegisteredKernelInvocation(kernelParams)) {\n      const {kernelName, inputs, attrs} = kernelParams;\n      if (this.backendName == null) {\n        // backend has not been initialized yet (backend initialization is lazy\n        // can be deferred until an op/ kernel is run).\n        // The below getter has side effects that will try to initialize the\n        // backend and set properties like this.backendName\n        // tslint:disable-next-line: no-unused-expression\n        this.backend;\n      }\n      const kernel = getKernel(kernelName, this.backendName);\n      util.assert(\n          kernel != null,\n          () => `Cannot find registered kernel '${kernelName}' for backend '${\n              this.backendName}'`);\n\n      kernelFunc = () => {\n        const numDataIdsBefore = this.backend.numDataIds();\n        out = kernel.kernelFunc({inputs, attrs, backend: this.backend});\n        const outInfos = Array.isArray(out) ? out : [out];\n        if (this.shouldCheckForMemLeaks()) {\n          this.checkKernelForMemLeak(kernelName, numDataIdsBefore, outInfos);\n        }\n\n        const outTensors = outInfos.map((outInfo: TensorInfo|Tensor) => {\n          // todo (yassogba) remove this option (Tensor) when node backend\n          // methods have been modularized and they all return tensorInfo.\n          // TensorInfos do not have a rank attribute.\n          if ((outInfo as Tensor).rank != null) {\n            return outInfo as Tensor;\n          }\n          return this.makeTensorFromTensorInfo(outInfo);\n        });\n\n        // Save any required inputs and outputs.\n\n        // Do not save unless we are recording to the tape. Otherwise it would\n        // cause a mem leak since there would be no backprop for these tensors\n        // (which would otherwise dispose them).\n        if (isTapeOn) {\n          const tensorsToSave =\n              this.getTensorsForGradient(kernelName, inputs, outTensors);\n          saved = this.saveTensorsForBackwardMode(tensorsToSave);\n        }\n        return outTensors;\n      };\n    } else {\n      const {forwardFunc} = kernelParams;\n      // Running a customGrad op.\n      const saveFunc: GradSaveFunc = (tensors) => {\n        // Do not save unless we are recording to the tape. Otherwise it would\n        // cause a mem leak since we would never run backprop, which disposes\n        // the kept tensors.\n        if (!isTapeOn) {\n          return;\n        }\n        saved = tensors.map(tensor => this.keep(this.clone(tensor)));\n      };\n\n      kernelFunc = () => {\n        const numDataIdsBefore = this.backend.numDataIds();\n        out = this.tidy(() => forwardFunc(this.backend, saveFunc));\n        const outs = (Array.isArray(out) ? out : [out]) as Tensor[];\n        if (this.shouldCheckForMemLeaks()) {\n          // Scope name is used to print a more helpful error message if needed.\n          this.checkKernelForMemLeak(kernelOrScopeName, numDataIdsBefore, outs);\n        }\n        return outs;\n      };\n    }\n\n    //\n    // Run the kernelFunc. Optionally profiling it.\n    //\n    const {inputs, attrs} = kernelParams;\n    const backwardsFunc = isRegisteredKernelInvocation(kernelParams) ?\n        null :\n        kernelParams.backwardsFunc;\n\n    let kernelProfile: KernelProfile;\n    this.scopedRun(\n        // Stop recording to a tape when running a kernel.\n        () => this.state.kernelDepth++, () => this.state.kernelDepth--, () => {\n          if (!this.ENV.getBool('DEBUG') && !this.state.profiling) {\n            outputs = kernelFunc();\n          } else {\n            kernelProfile = this.profiler.profileKernel(\n                kernelOrScopeName, inputs, () => kernelFunc());\n            if (this.ENV.getBool('DEBUG')) {\n              this.profiler.logKernelProfile(kernelProfile);\n            }\n            outputs = kernelProfile.outputs;\n          }\n        });\n\n    if (isTapeOn) {\n      this.addTapeNode(\n          kernelOrScopeName, inputs, outputs, backwardsFunc, saved, attrs);\n    }\n\n    if (this.state.profiling) {\n      this.state.activeProfile.kernels.push({\n        name: kernelOrScopeName,\n        bytesAdded: this.state.numBytes - startingBytecount,\n        totalBytesSnapshot: this.state.numBytes,\n        tensorsAdded: this.state.numTensors - startingNumTensors,\n        totalTensorsSnapshot: this.state.numTensors,\n        inputShapes: Object.keys(inputs).map(\n            key => inputs[key] != null ? inputs[key].shape : null),\n        outputShapes: outputs.map(item => item.shape),\n        kernelTimeMs: kernelProfile.timeMs,\n        extraInfo: kernelProfile.extraInfo\n      });\n    }\n    return (Array.isArray(out) ? outputs : outputs[0]) as T;\n  }\n\n  /**\n   * Saves tensors used in forward mode for use in backward mode.\n   *\n   * @param tensors the list of tensors to save.\n   */\n  private saveTensorsForBackwardMode(tensors: Tensor[]): Tensor[] {\n    const saved = tensors.map(tensor => this.keep(this.clone(tensor)));\n    return saved;\n  }\n\n  /**\n   * Returns a list of tensors to save for a given gradient calculation.\n   *\n   * @param kernelName name of kernel to look up gradient for.\n   * @param inputs a map of input tensors.\n   * @param outputs an array of output tensors from forward mode of kernel.\n   */\n  private getTensorsForGradient(\n      kernelName: string, inputs: NamedTensorMap,\n      outputs: Tensor[]): Tensor[]|null {\n    const gradConfig = getGradient(kernelName);\n    if (gradConfig != null) {\n      const inputsToSave: string[] = gradConfig.inputsToSave || [];\n      const outputsToSave: boolean[] = gradConfig.outputsToSave || [];\n\n      // If saveAllInputs is true, all inputs will be saved. Otherwise, inputs\n      // specified in inputsToSave will be saved.\n      let inputTensorsToSave: Tensor[];\n      if (gradConfig.saveAllInputs) {\n        util.assert(\n            Array.isArray(inputs),\n            () => 'saveAllInputs is true, expected inputs to be an array.');\n\n        inputTensorsToSave = Object.keys(inputs).map((key) => inputs[key]);\n      } else {\n        inputTensorsToSave = inputsToSave.map((inputName) => inputs[inputName]);\n      }\n\n      const outputTensorsToSave: Tensor[] =\n          outputs.filter((_, i) => outputsToSave[i]);\n\n      return inputTensorsToSave.concat(outputTensorsToSave);\n    }\n    // We return an empty list rather than throw an error because the kernel we\n    // are looking up may not actually be relevant to backproping through the\n    // overall function\n    //\n    // See 'does not error if irrelevant (pruned) ops are missing grads' test\n    // in gradients_test.ts for an example.\n    return [];\n  }\n\n  /**\n   * Internal method used by public APIs for tensor creation. Makes a new\n   * tensor with the provided shape, dtype and values. It always\n   * creates a new data id and writes the values to the underlying backend.\n   */\n  makeTensor(\n      values: DataValues, shape: number[], dtype: DataType,\n      backend?: KernelBackend): Tensor {\n    if (values == null) {\n      throw new Error('Values passed to engine.makeTensor() are null');\n    }\n    dtype = dtype || 'float32';\n    backend = backend || this.backend;\n    let backendVals = values as BackendValues;\n    if (dtype === 'string' && util.isString(values[0])) {\n      backendVals = (values as string[]).map(d => util.encodeString(d));\n    }\n    const dataId = backend.write(backendVals, shape, dtype);\n    const t = new Tensor(shape, dtype, dataId, this.nextTensorId());\n    this.trackTensor(t, backend);\n\n    // Count bytes for string tensors.\n    if (dtype === 'string') {\n      const info = this.state.tensorInfo.get(dataId);\n      const newBytes = bytesFromStringArray(backendVals as Uint8Array[]);\n      this.state.numBytes += newBytes - info.bytes;\n      info.bytes = newBytes;\n    }\n    return t;\n  }\n\n  /**\n   * Internal method used by backends. Makes a new tensor\n   * that is a wrapper around an existing data id. It doesn't create\n   * a new data id, only increments the ref count used in memory tracking.\n   * @deprecated\n   */\n  makeTensorFromDataId(\n    dataId: DataId, shape: number[], dtype: DataType,\n    backend?: KernelBackend): Tensor {\n    dtype = dtype || 'float32';\n    const tensorInfo: TensorInfo = {dataId, shape, dtype};\n    return this.makeTensorFromTensorInfo(tensorInfo, backend);\n  }\n\n  /**\n   * Internal method used by backends. Makes a new tensor that is a wrapper\n   * around an existing data id in TensorInfo. It doesn't create a new data id,\n   * only increments the ref count used in memory tracking.\n   */\n  makeTensorFromTensorInfo(tensorInfo: TensorInfo, backend?: KernelBackend):\n      Tensor {\n    const {dataId, shape, dtype} = tensorInfo;\n    const t = new Tensor(shape, dtype, dataId, this.nextTensorId());\n    this.trackTensor(t, backend);\n    return t;\n  }\n\n  makeVariable(\n      initialValue: Tensor, trainable = true, name?: string,\n      dtype?: DataType): Variable {\n    name = name || this.nextVariableId().toString();\n    if (dtype != null && dtype !== initialValue.dtype) {\n      initialValue = initialValue.cast(dtype);\n    }\n    const v = new Variable(initialValue, trainable, name, this.nextTensorId());\n    if (this.state.registeredVariables[v.name] != null) {\n      throw new Error(`Variable with name ${v.name} was already registered`);\n    }\n    this.state.registeredVariables[v.name] = v;\n    this.incRef(v, this.backend);\n    return v;\n  }\n\n  trackTensor(a: Tensor, backend: KernelBackend): void {\n    this.state.numTensors++;\n    if (a.dtype === 'string') {\n      this.state.numStringTensors++;\n    }\n    // Bytes for complex numbers are counted by their components. Bytes for\n    // string tensors are counted when writing values.\n    let bytes = 0;\n    if (a.dtype !== 'complex64' && a.dtype !== 'string') {\n      bytes = a.size * util.bytesPerElement(a.dtype);\n    }\n    this.state.numBytes += bytes;\n\n    if (!this.state.tensorInfo.has(a.dataId)) {\n      this.state.numDataBuffers++;\n      this.state.tensorInfo.set(a.dataId, {\n        backend: backend || this.backend,\n        dtype: a.dtype,\n        shape: a.shape,\n        bytes\n      });\n    }\n\n    if (!(a instanceof Variable)) {\n      this.track(a);\n    }\n  }\n\n  // Track the tensor by dataId and increase the refCount for the dataId in the\n  // backend.\n  // TODO(pyu10055): This is currently used by makeVariable method, to increase\n  // refCount on the backend for the dataId. It can potentially be replaced with\n  // Identity op indead of calling backend directly.\n  incRef(a: Tensor, backend: KernelBackend): void {\n    this.trackTensor(a, backend);\n    this.backend.incRef(a.dataId);\n  }\n\n  removeDataId(dataId: DataId, backend: KernelBackend) {\n    if (this.state.tensorInfo.has(dataId) &&\n        this.state.tensorInfo.get(dataId).backend === backend) {\n      this.state.tensorInfo.delete(dataId);\n      this.state.numDataBuffers--;\n    }\n  }\n  disposeTensor(a: Tensor): void {\n    if (!this.state.tensorInfo.has(a.dataId)) {\n      return;\n    }\n    const info = this.state.tensorInfo.get(a.dataId);\n\n    this.state.numTensors--;\n    if (a.dtype === 'string') {\n      this.state.numStringTensors--;\n      this.state.numBytes -= info.bytes;\n    }\n    // Don't count bytes for complex numbers as they are counted by their\n    // components.\n    if (a.dtype !== 'complex64' && a.dtype !== 'string') {\n      const bytes = a.size * util.bytesPerElement(a.dtype);\n      this.state.numBytes -= bytes;\n    }\n\n    // Remove the reference to dataId if backend dispose the data successfully\n    if (info.backend.disposeData(a.dataId)) {\n      this.removeDataId(a.dataId, info.backend);\n    }\n\n    // TODO(nsthorat): Construct an error and save the stack trace for\n    // debugging when in debug mode. Creating a stack trace is too expensive\n    // to do unconditionally.\n  }\n\n  disposeVariables(): void {\n    for (const varName in this.state.registeredVariables) {\n      const v = this.state.registeredVariables[varName];\n      this.disposeVariable(v);\n    }\n  }\n\n  disposeVariable(v: Variable): void {\n    this.disposeTensor(v);\n    if (this.state.registeredVariables[v.name] != null) {\n      delete this.state.registeredVariables[v.name];\n    }\n  }\n\n  memory(): MemoryInfo {\n    const info = this.backend.memory() as MemoryInfo;\n    info.numTensors = this.state.numTensors;\n    info.numDataBuffers = this.state.numDataBuffers;\n    info.numBytes = this.state.numBytes;\n    if (this.state.numStringTensors > 0) {\n      info.unreliable = true;\n      if (info.reasons == null) {\n        info.reasons = [];\n      }\n      info.reasons.push(\n          'Memory usage by string tensors is approximate ' +\n          '(2 bytes per character)');\n    }\n    return info;\n  }\n\n  async profile(query: () => (TensorContainer | Promise<TensorContainer>)):\n      Promise<ProfileInfo> {\n    this.state.profiling = true;\n\n    const startBytes = this.state.numBytes;\n    const startNumTensors = this.state.numTensors;\n\n    this.state.activeProfile.kernels = [];\n    this.state.activeProfile.result = await query();\n\n    this.state.profiling = false;\n\n    this.state.activeProfile.peakBytes = Math.max(\n        ...this.state.activeProfile.kernels.map(d => d.totalBytesSnapshot));\n    this.state.activeProfile.newBytes = this.state.numBytes - startBytes;\n    this.state.activeProfile.newTensors =\n        this.state.numTensors - startNumTensors;\n    for (const kernel of this.state.activeProfile.kernels) {\n      kernel.kernelTimeMs = await kernel.kernelTimeMs;\n      kernel.extraInfo = await kernel.extraInfo;\n    }\n    return this.state.activeProfile;\n  }\n\n  isTapeOn(): boolean {\n    return this.state.gradientDepth > 0 && this.state.kernelDepth === 0;\n  }\n\n  private addTapeNode(\n      kernelName: string, inputs: NamedTensorMap, outputs: Tensor[],\n      gradientsFunc: GradFunc, saved: Tensor[], attrs: NamedAttrMap): void {\n    const tapeNode: TapeNode =\n        {id: this.state.nextTapeNodeId++, kernelName, inputs, outputs, saved};\n\n    const gradConfig = getGradient(kernelName);\n    if (gradConfig != null) {\n      gradientsFunc = gradConfig.gradFunc;\n    }\n    if (gradientsFunc != null) {\n      tapeNode.gradient = (dys: Tensor[]) => {\n        // TODO(smilkov): To optimize back-prop, pass dys that are not used in\n        // the backprop graph to the user as null instead of zeros\n        dys = dys.map((dy, i) => {\n          if (dy == null) {\n            const output = outputs[i];\n            const vals = util.makeZerosTypedArray(output.size, output.dtype);\n            return this.makeTensor(vals, output.shape, output.dtype);\n          }\n          return dy;\n        });\n        // Grad functions of ops with single outputs expect a dy, while ops\n        // with multiple outputs expect dys (array of dy).\n        return gradientsFunc(dys.length > 1 ? dys : dys[0], saved, attrs);\n      };\n    }\n    this.state.activeTape.push(tapeNode);\n  }\n\n  keep<T extends Tensor>(result: T): T {\n    result.kept = true;\n    return result;\n  }\n\n  private startTape() {\n    if (this.state.gradientDepth === 0) {\n      this.state.activeTape = [];\n    }\n    this.state.gradientDepth++;\n  }\n\n  private endTape() {\n    this.state.gradientDepth--;\n  }\n\n  /**\n   * Start a scope. Use this with endScope() to achieve the same functionality\n   * as scope() without the need for a function closure.\n   */\n  startScope(name?: string) {\n    const scopeInfo: ScopeState = {\n      track: [],\n      name: 'unnamed scope',\n      id: this.state.nextScopeId++\n    };\n    if (name) {\n      scopeInfo.name = name;\n    }\n    this.state.scopeStack.push(scopeInfo);\n    this.state.activeScope = scopeInfo;\n  }\n\n  /**\n   * End a scope. Use this with startScope() to achieve the same functionality\n   * as scope() without the need for a function closure.\n   */\n  endScope(result?: TensorContainer) {\n    const tensorsToTrackInParent = getTensorsInContainer(result);\n    const tensorsToTrackInParentSet =\n        new Set(tensorsToTrackInParent.map(t => t.id));\n\n    // Dispose the arrays tracked in this scope.\n    for (let i = 0; i < this.state.activeScope.track.length; i++) {\n      const tensor = this.state.activeScope.track[i];\n      if (!tensor.kept && !tensorsToTrackInParentSet.has(tensor.id)) {\n        tensor.dispose();\n      }\n    }\n\n    const oldScope = this.state.scopeStack.pop();\n    this.state.activeScope = this.state.scopeStack.length === 0 ?\n        null :\n        this.state.scopeStack[this.state.scopeStack.length - 1];\n\n    // Track the current result in the parent scope.\n    tensorsToTrackInParent.forEach(tensor => {\n      // Only track the tensor if was allocated in the inner scope and is not\n      // globally kept.\n      if (!tensor.kept && tensor.scopeId === oldScope.id) {\n        this.track(tensor);\n      }\n    });\n  }\n\n  /**\n   * Returns gradients of `f` with respect to each of the `xs`. The gradients\n   * returned are of the same length as `xs`, but some might be null if `f`\n   * was not a function of that `x`. It also takes optional dy to multiply the\n   * gradient, which defaults to `1`.\n   */\n  gradients<T extends Tensor>(\n      f: () => T, xs: Tensor[], dy?: T,\n      allowNoGradients = false): {value: T, grads: Tensor[]} {\n    util.assert(\n        xs.length > 0, () => 'gradients() received an empty list of xs.');\n    if (dy != null && dy.dtype !== 'float32') {\n      throw new Error(`dy must have 'float32' dtype, but has '${dy.dtype}'`);\n    }\n\n    const y = this.scopedRun(\n        () => this.startTape(), () => this.endTape(),\n        () => this.tidy('forward', f));\n\n    util.assert(\n        y instanceof Tensor,\n        () => 'The result y returned by f() must be a tensor.');\n    // Filter out the nodes that don't connect x => y.\n    const filteredTape = getFilteredNodesXToY(this.state.activeTape, xs, y);\n    if (!allowNoGradients && filteredTape.length === 0 && xs.length > 0) {\n      throw new Error(\n          'Cannot compute gradient of y=f(x) with respect to x. Make sure ' +\n          'that the f you passed encloses all operations that lead from x ' +\n          'to y.');\n    }\n\n    return this.tidy('backward', () => {\n      const accumulatedGradientMap: {[tensorId: number]: Tensor} = {};\n      accumulatedGradientMap[y.id] = (dy == null) ? ones(y.shape) : dy;\n\n      // Backprop gradients through the filtered nodes.\n      backpropagateGradients(\n          accumulatedGradientMap, filteredTape,\n          // Pass the tidy function to avoid circular dep with `tape.ts`.\n          f => this.tidy(f as ScopeFn<Tensor>),\n          // Pass an add function to avoide a circular dep with `tape.ts`.\n          add);\n      const grads = xs.map(x => accumulatedGradientMap[x.id]);\n\n      if (this.state.gradientDepth === 0) {\n        // This means that we are not computing higher-order gradients\n        // and can clean up the tape.\n        this.state.activeTape.forEach(node => {\n          for (const tensor of node.saved) {\n            tensor.dispose();\n          }\n        });\n        this.state.activeTape = null;\n      }\n      return {value: y, grads};\n    });\n  }\n\n  customGrad<T extends Tensor>(f: CustomGradientFunc<T>):\n      (...args: Array<Tensor|GradSaveFunc>) => T {\n    util.assert(\n        util.isFunction(f),\n        () => 'The f passed in customGrad(f) must be a function.');\n    return (...inputs: Tensor[]): T => {\n      util.assert(\n          inputs.every(t => t instanceof Tensor),\n          () => 'The args passed in customGrad(f)(x1, x2,...) must all be ' +\n              'tensors');\n\n      let res: {\n        value: T,\n        gradFunc: (dy: T, saved: Tensor[]) => Tensor | Tensor[],\n      };\n      const inputMap: NamedTensorMap = {};\n      inputs.forEach((input, i) => {\n        inputMap[i] = input;\n      });\n\n      const forwardFunc: ForwardFunc<T> = (_, save) => {\n        res = f(...[...inputs, save]);\n        util.assert(\n            res.value instanceof Tensor,\n            () => 'The function f passed in customGrad(f) must return an ' +\n                'object where `obj.value` is a tensor');\n        util.assert(\n            util.isFunction(res.gradFunc),\n            () => 'The function f passed in customGrad(f) must return an ' +\n                'object where `obj.gradFunc` is a function.');\n        return res.value;\n      };\n\n      const backwardsFunc = (dy: T, saved: Tensor[]) => {\n        const gradRes = res.gradFunc(dy, saved);\n        const grads: Tensor[] = Array.isArray(gradRes) ? gradRes : [gradRes];\n        util.assert(\n            grads.length === inputs.length,\n            () => 'The function f passed in customGrad(f) must return an ' +\n                'object where `obj.gradFunc` is a function that returns ' +\n                'the same number of tensors as inputs passed to f(...).');\n        util.assert(\n            grads.every(t => t instanceof Tensor),\n            () => 'The function f passed in customGrad(f) must return an ' +\n                'object where `obj.gradFunc` is a function that returns ' +\n                'a list of only tensors.');\n        const gradMap: {[key: string]: () => Tensor} = {};\n        grads.forEach((grad, i) => {\n          gradMap[i] = () => grad;\n        });\n        return gradMap;\n      };\n\n      return this.runKernelFunc({\n        forwardFunc,\n        backwardsFunc,\n        inputs: inputMap,\n      });\n    };\n  }\n\n  readSync(dataId: DataId): BackendValues {\n    // Route the read to the correct backend.\n    const info = this.state.tensorInfo.get(dataId);\n    return info.backend.readSync(dataId);\n  }\n  read(dataId: DataId): Promise<BackendValues> {\n    // Route the read to the correct backend.\n    const info = this.state.tensorInfo.get(dataId);\n    return info.backend.read(dataId);\n  }\n\n  readToGPU(dataId: DataId, options?: DataToGPUOptions): GPUData {\n    // Route the read to the correct backend.\n    const info = this.state.tensorInfo.get(dataId);\n    return info.backend.readToGPU(dataId, options);\n  }\n\n  async time(query: () => void): Promise<TimingInfo> {\n    const start = now();\n    const timingInfo = await this.backend.time(query) as TimingInfo;\n    timingInfo.wallMs = now() - start;\n    return timingInfo;\n  }\n\n  /**\n   * Tracks a Tensor in the current scope to be automatically cleaned up\n   * when the current scope ends, and returns the value.\n   *\n   * @param result The Tensor to track in the current scope.\n   */\n  private track<T extends Tensor>(result: T): T {\n    if (this.state.activeScope != null) {\n      result.scopeId = this.state.activeScope.id;\n      this.state.activeScope.track.push(result);\n    }\n\n    return result;\n  }\n\n  get registeredVariables(): NamedVariableMap {\n    return this.state.registeredVariables;\n  }\n\n  /**\n   * Resets the engine state. Removes all backends but does not remove\n   * registered backend factories.\n   */\n  reset(): void {\n    // Make any pending promise obsolete.\n    this.pendingBackendInitId++;\n\n    this.state.dispose();\n    this.ENV.reset();\n    this.state = new EngineState();\n\n    for (const backendName in this.registry) {\n      this.disposeRegisteredKernels(backendName);\n      this.registry[backendName].dispose();\n      delete this.registry[backendName];\n    }\n    this.backendName = null;\n    this.backendInstance = null;\n    this.pendingBackendInit = null;\n  }\n}\n\nfunction ones(shape: number[]): Tensor {\n  const values = makeOnesTypedArray(sizeFromShape(shape), 'float32');\n  return ENGINE.makeTensor(values, shape, 'float32');\n}\n\nexport function getOrMakeEngine(): Engine {\n  const ns = getGlobalNamespace() as unknown as {_tfengine: Engine};\n  if (ns._tfengine == null) {\n    const environment = new Environment(ns);\n    ns._tfengine = new Engine(environment);\n  }\n  setEnvironmentGlobal(ns._tfengine.ENV);\n\n  // Tell the current tensor interface that the global engine is responsible\n  // for tracking.\n  setTensorTracker(() => ns._tfengine);\n  return ns._tfengine;\n}\n\nexport const ENGINE = getOrMakeEngine();\n\n/**\n * A implementation of the add op for use within engine and tape.\n *\n * This allows us to avoid a circular dependency between add.ts and engine.\n * It is exported to be available in tape tests.\n */\nexport function add(a: Tensor, b: Tensor): Tensor {\n  // We duplicate Add here to avoid a circular dependency with add.ts.\n  const inputs = {a, b};\n  return ENGINE.runKernel(Add, inputs as unknown as NamedTensorMap);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// tslint:disable-next-line:no-any\nfunction _isNavigatorDefined(): boolean {\n  return typeof navigator !== 'undefined' && navigator != null;\n}\n\nlet isMobileMockValue: boolean|undefined;\n\nexport function mockIsMobile(value: boolean|undefined) {\n  isMobileMockValue = value;\n}\n\nexport function isMobile(nav?: Navigator): boolean {\n  if (isMobileMockValue !== undefined) {\n    return isMobileMockValue;\n  }\n  if (nav || _isNavigatorDefined()) {\n    if (!nav) {\n      nav = navigator;\n    }\n    if (nav.product === 'ReactNative') {\n      return true;\n    }\n\n    const a = nav.userAgent || nav.vendor ||\n        // tslint:disable-next-line:no-any\n        (typeof window !== 'undefined' ? (window as any).opera : '');\n    // Use `navigator.userAgentData.mobile` as fallback.\n    if (!a) {\n      // tslint:disable-next-line:no-any\n      const navAny = nav as any;\n      return navAny.userAgentData && navAny.userAgentData.mobile;\n    }\n    // tslint:disable-next-line:max-line-length\n    return /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i\n               .test(a) ||\n        // tslint:disable-next-line:max-line-length\n        /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i\n            .test(a.substr(0, 4));\n  }\n  return false;\n}\n\nexport function isBrowser(): boolean {\n  return (typeof window !== 'undefined' && window.document != null) ||\n      //@ts-ignore\n      (typeof WorkerGlobalScope !== 'undefined');\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport './engine';\n\nimport * as device_util from './device_util';\nimport {env} from './environment';\n\nconst ENV = env();\n\n/**\n * This file contains environment-related flag registrations.\n */\n\n/** Whether to enable debug mode. */\nENV.registerFlag('DEBUG', () => false, debugValue => {\n  if (debugValue) {\n    console.warn(\n        'Debugging mode is ON. The output of every math call will ' +\n        'be downloaded to CPU and checked for NaNs. ' +\n        'This significantly impacts performance.');\n  }\n});\n\n/** Whether we are in a browser (as versus, say, node.js) environment. */\nENV.registerFlag('IS_BROWSER', () => device_util.isBrowser());\n\n/** Whether we are in a browser (as versus, say, node.js) environment. */\nENV.registerFlag(\n    'IS_NODE',\n    () => (typeof process !== 'undefined') &&\n        (typeof process.versions !== 'undefined') &&\n        (typeof process.versions.node !== 'undefined'));\n\n/** Whether this browser is Chrome. */\nENV.registerFlag(\n    'IS_CHROME',\n    () => typeof navigator !== 'undefined' && navigator != null &&\n        navigator.userAgent != null && /Chrome/.test(navigator.userAgent) &&\n        /Google Inc/.test(navigator.vendor));\n\n/**\n * True when the environment is \"production\" where we disable safety checks\n * to gain performance.\n */\nENV.registerFlag('PROD', () => false);\n\n/**\n * Whether to do sanity checks when inferring a shape from user-provided\n * values, used when creating a new tensor.\n */\nENV.registerFlag(\n    'TENSORLIKE_CHECK_SHAPE_CONSISTENCY', () => ENV.getBool('DEBUG'));\n\n/** Whether deprecation warnings are enabled. */\nENV.registerFlag('DEPRECATION_WARNINGS_ENABLED', () => true);\n\n/** True if running unit tests. */\nENV.registerFlag('IS_TEST', () => false);\n\n/** Whether to check computation result for errors. */\nENV.registerFlag('CHECK_COMPUTATION_FOR_ERRORS', () => true);\n\n/** Whether the backend needs to wrap input to imageBitmap. */\nENV.registerFlag('WRAP_TO_IMAGEBITMAP', () => false);\n\n/** Whether to enable canvas2d willReadFrequently for GPU backends */\nENV.registerFlag('CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU', () => false);\n\n/** Whether to use setTimeoutCustom */\nENV.registerFlag('USE_SETTIMEOUTCUSTOM', () => false);\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from './engine';\nimport {env} from './environment';\nimport {Tensor} from './tensor';\nimport {DataType, TensorLike, WebGLData, WebGPUData} from './types';\nimport {assert, flatten, inferDtype, isTypedArray, toTypedArray} from './util';\nimport {bytesPerElement} from './util_base';\n\nexport function inferShape(\n    val: TensorLike|WebGLData|WebGPUData, dtype?: DataType): number[] {\n  let firstElem: typeof val = val;\n\n  if (isTypedArray(val)) {\n    return dtype === 'string' ? [] : [val.length];\n  }\n  const isObject = typeof val === 'object';\n  if (isObject) {\n    if ('texture' in val) {\n      const usedChannels = val.channels || 'RGBA';\n      return [val.height, val.width * usedChannels.length];\n    } else if ('buffer' in val && !(val.buffer instanceof ArrayBuffer)) {\n      return [val.buffer.size / (dtype == null ? 4 : bytesPerElement(dtype))];\n    }\n  }\n  if (!Array.isArray(val)) {\n    return [];  // Scalar.\n  }\n  const shape: number[] = [];\n\n  while (Array.isArray(firstElem) ||\n         isTypedArray(firstElem) && dtype !== 'string') {\n    shape.push(firstElem.length);\n    firstElem = firstElem[0];\n  }\n  if (Array.isArray(val) &&\n      env().getBool('TENSORLIKE_CHECK_SHAPE_CONSISTENCY')) {\n    deepAssertShapeConsistency(val, shape, []);\n  }\n\n  return shape;\n}\n\nfunction deepAssertShapeConsistency(\n    val: TensorLike, shape: number[], indices: number[]) {\n  indices = indices || [];\n  if (!(Array.isArray(val)) && !isTypedArray(val)) {\n    assert(\n        shape.length === 0,\n        () => `Element arr[${indices.join('][')}] is a primitive, ` +\n            `but should be an array/TypedArray of ${shape[0]} elements`);\n    return;\n  }\n  assert(\n      shape.length > 0,\n      () => `Element arr[${indices.join('][')}] should be a primitive, ` +\n          `but is an array of ${val.length} elements`);\n  assert(\n      val.length === shape[0],\n      () => `Element arr[${indices.join('][')}] should have ${shape[0]} ` +\n          `elements, but has ${val.length} elements`);\n  const subShape = shape.slice(1);\n  for (let i = 0; i < val.length; ++i) {\n    deepAssertShapeConsistency(val[i], subShape, indices.concat(i));\n  }\n}\n\nfunction assertDtype(\n    expectedDtype: DataType|'numeric'|'string_or_numeric',\n    actualDType: DataType, argName: string, functionName: string) {\n  if (expectedDtype === 'string_or_numeric') {\n    return;\n  }\n  if (expectedDtype == null) {\n    throw new Error(`Expected dtype cannot be null.`);\n  }\n  if (expectedDtype !== 'numeric' && expectedDtype !== actualDType ||\n      expectedDtype === 'numeric' && actualDType === 'string') {\n    throw new Error(\n        `Argument '${argName}' passed to '${functionName}' must ` +\n        `be ${expectedDtype} tensor, but got ${actualDType} tensor`);\n  }\n}\n\nexport function convertToTensor<T extends Tensor>(\n    x: T|TensorLike, argName: string, functionName: string,\n    parseAsDtype: DataType|'numeric'|'string_or_numeric' = 'numeric'): T {\n  if (x instanceof Tensor) {\n    assertDtype(parseAsDtype, x.dtype, argName, functionName);\n    return x;\n  }\n  let inferredDtype = inferDtype(x);\n  // If the user expects a bool/int/float, use that info to update the\n  // inferredDtype when it is not a string.\n  if (inferredDtype !== 'string' &&\n      ['bool', 'int32', 'float32'].indexOf(parseAsDtype) >= 0) {\n    inferredDtype = parseAsDtype as DataType;\n  }\n  assertDtype(parseAsDtype, inferredDtype, argName, functionName);\n\n  if ((x == null) ||\n      (!isTypedArray(x) && !Array.isArray(x) && typeof x !== 'number' &&\n       typeof x !== 'boolean' && typeof x !== 'string')) {\n    const type = x == null ? 'null' : (x as {}).constructor.name;\n    throw new Error(\n        `Argument '${argName}' passed to '${functionName}' must be a ` +\n        `Tensor or TensorLike, but got '${type}'`);\n  }\n  const inferredShape = inferShape(x, inferredDtype);\n  if (!isTypedArray(x) && !Array.isArray(x)) {\n    x = [x] as number[];\n  }\n  const skipTypedArray = true;\n  const values = inferredDtype !== 'string' ?\n      toTypedArray(x, inferredDtype as DataType) :\n      flatten(x as string[], [], skipTypedArray) as string[];\n  return ENGINE.makeTensor(values, inferredShape, inferredDtype) as T;\n}\n\nexport function convertToTensorArray<T extends Tensor>(\n    arg: Array<T|TensorLike>, argName: string, functionName: string,\n    parseAsDtype: DataType|'numeric'|'string_or_numeric' = 'numeric'): T[] {\n  if (!Array.isArray(arg)) {\n    throw new Error(\n        `Argument ${argName} passed to ${functionName} must be a ` +\n        '`Tensor[]` or `TensorLike[]`');\n  }\n  const tensors = arg as T[];\n  return tensors.map(\n      (t, i) =>\n          convertToTensor(t, `${argName}[${i}]`, functionName, parseAsDtype));\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {isPromise} from '../util';\n\nexport const OP_SCOPE_SUFFIX = '__op';\n\n/**\n * Used for wrapping functions that perform math operations on\n * Tensors. The function will be wrapped in a named scope that cleans all\n * memory usage after the function is done.\n */\nexport function op<T extends Function>(f: {[name: string]: T}): T {\n  const keys = Object.keys(f);\n  if (keys.length !== 1) {\n    throw new Error(\n        `Please provide an object with a single key ` +\n        `(operation name) mapping to a function. Got an object with ` +\n        `${keys.length} keys.`);\n  }\n\n  let opName = keys[0];\n  const fn = f[opName];\n\n  // Strip the underscore from the end of the function name.\n  if (opName.endsWith('_')) {\n    opName = opName.substring(0, opName.length - 1);\n  }\n\n  // add an __op suffix to distinguish ops from kernels in tf.profile\n  opName = opName + OP_SCOPE_SUFFIX;\n\n  // tslint:disable-next-line:no-any\n  const f2 = (...args: any[]) => {\n    ENGINE.startScope(opName);\n    try {\n      const result = fn(...args);\n      if (isPromise(result)) {\n        console.error('Cannot return a Promise inside of tidy.');\n      }\n      ENGINE.endScope(result);\n      return result;\n    } catch (ex) {\n      ENGINE.endScope(null);\n      throw ex;\n    }\n  };\n  Object.defineProperty(f2, 'name', {value: opName, configurable: true});\n\n  // tslint:disable-next-line:no-any\n  return f2 as any as T;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {Complex, ComplexInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {op} from './operation';\n\n/**\n * Converts two real numbers to a complex number.\n *\n * Given a tensor `real` representing the real part of a complex number, and a\n * tensor `imag` representing the imaginary part of a complex number, this\n * operation returns complex numbers elementwise of the form [r0, i0, r1, i1],\n * where r represents the real part and i represents the imag part.\n *\n * The input tensors real and imag must have the same shape.\n *\n * ```js\n * const real = tf.tensor1d([2.25, 3.25]);\n * const imag = tf.tensor1d([4.75, 5.75]);\n * const complex = tf.complex(real, imag);\n *\n * complex.print();\n * ```\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nfunction complex_<T extends Tensor>(real: T|TensorLike, imag: T|TensorLike): T {\n  const $real = convertToTensor(real, 'real', 'complex');\n  const $imag = convertToTensor(imag, 'imag', 'complex');\n  util.assertShapesMatch(\n      $real.shape, $imag.shape,\n      `real and imag shapes, ${$real.shape} and ${$imag.shape}, ` +\n          `must match in call to tf.complex().`);\n\n  const inputs: ComplexInputs = {real: $real, imag: $imag};\n  return ENGINE.runKernel(Complex, inputs as unknown as NamedTensorMap);\n}\n\nexport const complex = /* @__PURE__ */ op({complex_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Tensor} from '../tensor';\nimport {TensorLike, TypedArray, WebGLData, WebGPUData} from '../types';\nimport {DataType} from '../types';\nimport {assert, assertNonNegativeIntegerDimensions, flatten, inferDtype, isTypedArray, sizeFromShape, toTypedArray} from '../util';\n\n/** This is shared code across all tensor creation methods. */\nexport function makeTensor(\n    values: TensorLike|WebGLData|WebGPUData, shape: number[],\n    inferredShape: number[], dtype?: DataType): Tensor {\n  if (dtype == null) {\n    dtype = inferDtype(values);\n  } else if (dtype === 'complex64') {\n    throw new Error(\n        `Cannot construct a complex64 tensor directly. ` +\n        `Please use tf.complex(real, imag).`);\n  }\n\n  if (typeof values === 'object' &&\n      ('texture' in values ||\n       ('buffer' in values && !(values.buffer instanceof ArrayBuffer)))) {\n    if (dtype !== 'float32' && dtype !== 'int32') {\n      throw new Error(\n          `Creating tensor from GPU data only supports ` +\n          `'float32'|'int32' dtype, while the dtype is ${dtype}.`);\n    }\n    return ENGINE.backend.createTensorFromGPUData(\n        values as WebGLData | WebGPUData, shape || inferredShape, dtype);\n  }\n\n  if (!isTypedArray(values) && !Array.isArray(values) &&\n      typeof values !== 'number' && typeof values !== 'boolean' &&\n      typeof values !== 'string') {\n    throw new Error(\n        'values passed to tensor(values) must be a number/boolean/string or ' +\n        'an array of numbers/booleans/strings, or a TypedArray');\n  }\n  // Verify that the shape matches the inferred shape.\n  if (shape != null) {\n    assertNonNegativeIntegerDimensions(shape);\n\n    const providedSize = sizeFromShape(shape);\n    const inferredSize = sizeFromShape(inferredShape);\n    assert(\n        providedSize === inferredSize,\n        () =>\n            `Based on the provided shape, [${shape}], the tensor should have ` +\n            `${providedSize} values but has ${inferredSize}`);\n\n    for (let i = 0; i < inferredShape.length; ++i) {\n      const inferred = inferredShape[i];\n      const flatDimsDontMatch = i === inferredShape.length - 1 ?\n          inferred !== sizeFromShape(shape.slice(i)) :\n          true;\n      assert(\n          inferredShape[i] === shape[i] || !flatDimsDontMatch,\n          () => `Error creating a new Tensor. Inferred shape ` +\n              `(${inferredShape}) does not match the provided ` +\n              `shape (${shape}). `);\n    }\n  }\n\n  if (!isTypedArray(values) && !Array.isArray(values)) {\n    values = [values] as number[];\n  }\n\n  shape = shape || inferredShape;\n  values = dtype !== 'string' ?\n      toTypedArray(values, dtype) :\n      flatten(values as string[], [], true) as string[];\n  return ENGINE.makeTensor(values as TypedArray, shape, dtype);\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../tensor';\nimport {inferShape} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport {DataType, Rank, ShapeMap, WebGLData, WebGPUData} from '../types';\n\nimport {makeTensor} from './tensor_ops_util';\n\n/**\n * Creates a `tf.Tensor` with the provided values, shape and dtype.\n *\n * ```js\n * // Pass an array of values to create a vector.\n * tf.tensor([1, 2, 3, 4]).print();\n * ```\n *\n * ```js\n * // Pass a nested array of values to make a matrix or a higher\n * // dimensional tensor.\n * tf.tensor([[1, 2], [3, 4]]).print();\n * ```\n *\n * ```js\n * // Pass a flat array and specify a shape yourself.\n * tf.tensor([1, 2, 3, 4], [2, 2]).print();\n * ```\n *\n * ```js\n * // Pass a `WebGLData` object and specify a shape yourself.\n *\n * // This makes it possible for TF.js applications to avoid GPU / CPU sync.\n * // For example, if your application includes a preprocessing step on the GPU,\n * // you could upload the GPU output directly to TF.js, rather than first\n * // downloading the values.\n *\n * // Example for WebGL2:\n * const customCanvas = document.createElement('canvas');\n * const customBackend = new tf.MathBackendWebGL(customCanvas);\n * tf.registerBackend('custom-webgl', () => customBackend);\n * await tf.setBackend('custom-webgl');\n * const gl = customBackend.gpgpu.gl;\n * const texture = gl.createTexture();\n * const tex2d = gl.TEXTURE_2D;\n * const width = 2;\n * const height = 2;\n *\n * gl.bindTexture(tex2d, texture);\n * gl.texParameteri(tex2d, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n * gl.texParameteri(tex2d, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n * gl.texParameteri(tex2d, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n * gl.texParameteri(tex2d, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n * gl.texImage2D(\n *   tex2d, 0, gl.RGBA32F, // internalFormat\n *   width, height, 0,\n *   gl.RGBA, // textureFormat\n *   gl.FLOAT, // textureType\n *   new Float32Array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n * );\n *\n * // Currently, the `texture` has 4 pixels:\n * // Pixel0 is {R:0, G:1, B:2, A:3}\n * // Pixel1 is {R:4, G:5, B:6, A:7}\n * // Pixel2 is {R:8, G:9, B:10, A:11}\n * // Pixel3 is {R:12, G:13, B:14, A:15}\n *\n * const logicalShape = [height * width * 2];\n * const a = tf.tensor({texture, height, width, channels: 'BR'}, logicalShape);\n * // Tensor value will be [2, 0, 6, 4, 10, 8, 14, 12], since [2, 0] is the\n * // values of 'B' and 'R' channels of Pixel0, [6, 4] is the values of 'B' and\n * 'R'\n * // channels of Pixel1...\n *\n * // For postprocessing on the GPU, it's possible to retrieve the texture\n * // backing any tensor by calling the tensor's `dataToGPU` method like\n * // so:\n *\n * const tex = a.dataToGPU();\n * ```\n *\n * ```js\n * // Pass a `WebGPUData` object and specify a shape yourself.\n *\n * // This makes it possible for TF.js applications to avoid GPU / CPU sync.\n * // For example, if your application includes a preprocessing step on the GPU,\n * // you could upload the GPU output directly to TF.js, rather than first\n * // downloading the values. Unlike WebGL, this optionally supports zero copy\n * // by WebGPUData.zeroCopy. When zeroCopy is false or undefined(default), this\n * // passing GPUBuffer can be destroyed after tensor is created. When zeroCopy\n * // is true, this GPUBuffer is bound directly by the tensor, so do not destroy\n * // this GPUBuffer until all access is done.\n *\n * // Example for WebGPU:\n * function createGPUBufferFromData(device, data, dtype) {\n *   const bytesPerElement = 4;\n *   const sizeInBytes = data.length * bytesPerElement;\n *\n *   const gpuWriteBuffer = device.createBuffer({\n *     mappedAtCreation: true,\n *     size: sizeInBytes,\n *     usage: GPUBufferUsage.MAP_WRITE | GPUBufferUsage.COPY_SRC\n *   });\n *   const arrayBuffer = gpuWriteBuffer.getMappedRange();\n *   if (dtype === 'float32') {\n *     new Float32Array(arrayBuffer).set(data);\n *   } else if (dtype === 'int32') {\n *     new Int32Array(arrayBuffer).set(data);\n *   } else {\n *     throw new Error(\n *         `Creating tensor from GPUBuffer only supports` +\n *         `'float32'|'int32' dtype, while the dtype is ${dtype}.`);\n *   }\n *   gpuWriteBuffer.unmap();\n *\n *   const gpuReadBuffer = device.createBuffer({\n *     mappedAtCreation: false,\n *     size: sizeInBytes,\n *     usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.STORAGE |\n *         GPUBufferUsage.COPY_SRC\n *   });\n *\n *   const copyEncoder = device.createCommandEncoder();\n *   copyEncoder.copyBufferToBuffer(\n *       gpuWriteBuffer, 0, gpuReadBuffer, 0, sizeInBytes);\n *   const copyCommands = copyEncoder.finish();\n *   device.queue.submit([copyCommands]);\n *   gpuWriteBuffer.destroy();\n *   return gpuReadBuffer;\n * }\n *\n * const dtype = 'float32';\n * const device = tf.backend().device;\n * const aData = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];\n * const bData = [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4];\n * const expected = [2, 4, 6, 8, 6, 8, 10, 12, 10, 12, 14, 16, 14, 16, 18, 20];\n * const aBuffer = createGPUBufferFromData(device, aData, dtype);\n * const shape = [aData.length];\n * // To use zeroCopy, use {buffer: aBuffer, zeroCopy: true} instead and destroy\n * // aBuffer untill all access is done.\n * const a = tf.tensor({buffer: aBuffer}, shape, dtype);\n * const b = tf.tensor(bData, shape, dtype);\n * const result = tf.add(a, b);\n * a.dispose();\n * b.dispose();\n * result.dispose();\n * aBuffer.destroy();\n * ```\n * @param values The values of the tensor. Can be nested array of numbers,\n *     or a flat array, or a `TypedArray`, or a `WebGLData` object, or a\n * `WebGPUData` object. If the values are strings, they will be encoded as utf-8\n * and kept as `Uint8Array[]`. If the values is a `WebGLData` object, the dtype\n * could only be 'float32' or 'int32' and the object has to have: 1. texture, a\n * `WebGLTexture`, the texture must share the same `WebGLRenderingContext` with\n * TFJS's WebGL backend (you could create a custom WebGL backend from your\n * texture's canvas) and the internal texture format for the input texture must\n * be floating point or normalized integer; 2. height, the height of the\n * texture; 3. width, the width of the texture; 4. channels, a non-empty subset\n * of 'RGBA', indicating the values of which channels will be passed to the\n * tensor, such as 'R' or 'BR' (The order of the channels affect the order of\n * tensor values. ). (If the values passed from texture is less than the tensor\n * size, zeros will be padded at the rear.). If the values is a `WebGPUData`\n * object, the dtype could only be 'float32' or 'int32 and the object has to\n * have: buffer, a `GPUBuffer`. The buffer must: 1. share the same `GPUDevice`\n * with TFJS's WebGPU backend; 2. buffer.usage should at least support\n * GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC; 3. buffer.size should not\n * be smaller than the byte size of tensor shape. WebGPUData optionally supports\n * zero copy by flag zeroCopy. When zeroCopy is false or undefined(default),\n * this passing GPUBuffer can be destroyed after tensor is created. When\n * zeroCopy is true, this GPUBuffer is bound directly by the tensor, so do not\n * destroy this GPUBuffer until all access is done.\n * @param shape The shape of the tensor. Optional. If not provided,\n *   it is inferred from `values`.\n * @param dtype The data type.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nexport function tensor<R extends Rank>(\n    values: TensorLike|WebGLData|WebGPUData, shape?: ShapeMap[R],\n    dtype?: DataType): Tensor<R> {\n  const inferredShape = inferShape(values, dtype);\n  return makeTensor(values, shape, inferredShape, dtype) as Tensor<R>;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/* Type definitions for exporting and importing of models. */\n\n/**\n * A map from Tensor dtype to number of bytes per element of the Tensor.\n */\nexport const DTYPE_VALUE_SIZE_MAP: {[dtype: string]: number} = {\n  'float32': 4,\n  'float16': 2,\n  'int32': 4,\n  'uint16': 2,\n  'uint8': 1,\n  'bool': 1,\n  'complex64': 8\n};\n\n/**\n * A weight manifest.\n *\n * The weight manifest consists of an ordered list of weight-manifest groups.\n * Each weight-manifest group (\"group\" for short hereafter) consists of a\n * number of weight values stored in a number of paths.\n * See the documentation of `WeightManifestGroupConfig` below for more details.\n */\nexport declare type WeightsManifestConfig = WeightsManifestGroupConfig[];\n\n/**\n * A weight-manifest group.\n *\n * Consists of an ordered list of weight values encoded in binary format,\n * stored in an ordered list of paths.\n */\nexport declare interface WeightsManifestGroupConfig {\n  /**\n   * An ordered list of paths.\n   *\n   * Paths are intentionally abstract in order to be general. For example, they\n   * can be relative URL paths or relative paths on the file system.\n   */\n  paths: string[];\n\n  /**\n   * Specifications of the weights stored in the paths.\n   */\n  weights: WeightsManifestEntry[];\n}\n\n/**\n * Group to which the weight belongs.\n *\n * - 'optimizer': Weight from a stateful optimizer.\n */\nexport type WeightGroup = 'model'|'optimizer';\n\n/**\n * An entry in the weight manifest.\n *\n * The entry contains specification of a weight.\n */\nexport declare interface WeightsManifestEntry {\n  /**\n   * Name of the weight, e.g., 'Dense_1/bias'\n   */\n  name: string;\n\n  /**\n   * Shape of the weight.\n   */\n  shape: number[];\n\n  /**\n   * Data type of the weight.\n   */\n  dtype: 'float32'|'int32'|'bool'|'string'|'complex64';\n\n  /**\n   * Type of the weight.\n   *\n   * Optional.\n   *\n   * The value 'optimizer' indicates the weight belongs to an optimizer\n   * (i.e., used only during model training and not during inference).\n   */\n  group?: WeightGroup;\n\n  /**\n   * Information for dequantization of the weight.\n   */\n  quantization?: {\n    scale?: number,  // The scaling constant to multiply by.\n    min?: number,    // The (possibly nudged) minimum weight to add.\n       dtype: 'uint16'|'uint8'|'float16'  // The dtype of the quantized weights.\n  };\n}\n\n/**\n * Options for saving a model.\n * @innamespace io\n */\nexport interface SaveConfig {\n  /**\n   * Whether to save only the trainable weights of the model, ignoring the\n   * non-trainable ones.\n   */\n  trainableOnly?: boolean;\n\n  /**\n   * Whether the optimizer will be saved (if exists).\n   *\n   * Default: `false`.\n   */\n  includeOptimizer?: boolean;\n}\n\n/**\n * Result of a saving operation.\n */\nexport interface SaveResult {\n  /**\n   * Information about the model artifacts saved.\n   */\n  modelArtifactsInfo: ModelArtifactsInfo;\n\n  /**\n   * HTTP responses from the server that handled the model-saving request (if\n   * any). This is applicable only to server-based saving routes.\n   */\n  responses?: Response[];\n\n  /**\n   * Error messages and related data (if any).\n   */\n  errors?: Array<{}|string>;\n}\n\nexport declare interface ModelArtifactsInfo {\n  /**\n   * Timestamp for when the model is saved.\n   */\n  dateSaved: Date;\n\n  /**\n   * TODO (cais,yassogba) consider removing GraphDef as GraphDefs now\n   * come in a JSON format and none of our IOHandlers support a non json\n   * format. We could conder replacing this with 'Binary' if we want to\n   * allow future handlers to save to non json formats (though they will\n   * probably want more information than 'Binary').\n   * Type of the model topology\n   *\n   * Type of the model topology\n   *\n   * Possible values:\n   *   - JSON: JSON config (human-readable, e.g., Keras JSON).\n   *   - GraphDef: TensorFlow\n   *     [GraphDef](https://www.tensorflow.org/extend/tool_developers/#graphdef)\n   *     protocol buffer (binary).\n   */\n  modelTopologyType: 'JSON'|'GraphDef';\n\n  /**\n   * Size of model topology (Keras JSON or GraphDef), in bytes.\n   */\n  modelTopologyBytes?: number;\n\n  /**\n   * Size of weight specification or manifest, in bytes.\n   */\n  weightSpecsBytes?: number;\n\n  /**\n   * Size of weight value data, in bytes.\n   */\n  weightDataBytes?: number;\n}\n\n/** Model training configuration. */\nexport declare interface TrainingConfig {\n  // TODO(cais): Tighten the typing once keras spec is available to tfjs-core.\n  // See\n  // tslint:disable-next-line:max-line-length\n  // https://github.com/tensorflow/tfjs-layers/blob/master/src/keras_format/training_config.ts\n  /** Optimizer used for the model training. */\n  optimizer_config: {};\n\n  // TODO(cais): Tighten the typing once keras spec is available to tfjs-core.\n  /** Loss function(s) for the model's output(s). */\n  loss: string|string[]|{[key: string]: string};\n\n  // TODO(cais): Tighten the typing once keras spec is available to tfjs-core.\n  /** Metric function(s) for the model's output(s). */\n  metrics?: string[]|{[key: string]: string};\n\n  // TODO(cais): Tighten the typing once keras spec is available to tfjs-core.\n  weighted_metrics?: string[];\n\n  // TODO(cais): Tighten the typing once keras spec is available to tfjs-core.\n  sample_weight_mode?: string;\n\n  loss_weights?: number[]|{[key: string]: number};\n}\n\n/**\n * The serialized artifacts of a model, including topology and weights.\n *\n * The `modelTopology`, `trainingConfig`, `weightSpecs` and `weightData` fields\n * of this interface are optional, in order to support topology- or weights-only\n * saving and loading.\n *\n * Note this interface is used internally in IOHandlers.  For the file format\n * written to disk as `model.json`, see `ModelJSON`.\n */\nexport declare interface ModelArtifacts {\n  /**\n   * Model topology.\n   *\n   * For Keras-style `tf.Model`s, this is a JSON object.\n   * For TensorFlow-style models (e.g., `SavedModel`), this is the JSON\n   * encoding of the `GraphDef` protocol buffer.\n   */\n  modelTopology?: {}|ArrayBuffer;\n\n  /**\n   * Serialized configuration for the model's training.\n   */\n  trainingConfig?: TrainingConfig;\n\n  /**\n   * Weight specifications.\n   *\n   * This corresponds to the weightsData below.\n   */\n  weightSpecs?: WeightsManifestEntry[];\n\n  /**\n   * Binary buffer for all weight values concatenated in the order specified\n   * by `weightSpecs`.\n   */\n  weightData?: ArrayBuffer;\n\n  /**\n   * Hard-coded format name for models saved from TensorFlow.js or converted\n   * by TensorFlow.js Converter.\n   */\n  format?: string;\n\n  /**\n   * What library is responsible for originally generating this artifact.\n   *\n   * Used for debugging purposes. E.g., 'TensorFlow.js v1.0.0'.\n   */\n  generatedBy?: string;\n\n  /**\n   * What library or tool is responsible for converting the original model\n   * to this format, applicable only if the model is output by a converter.\n   *\n   * Used for debugging purposes.  E.g., 'TensorFlow.js Converter v1.0.0'.\n   *\n   * A value of `null` means the model artifacts are generated without any\n   * conversion process (e.g., saved directly from a TensorFlow.js\n   * `tf.LayersModel` instance.)\n   */\n  convertedBy?: string|null;\n\n  /**\n   * Inputs and outputs signature for saved model.\n   */\n  signature?: {};\n\n  /**\n   * User-defined metadata about the model.\n   */\n  userDefinedMetadata?: {[key: string]: {}};\n\n  /**\n   * Initializer for the model.\n   */\n  modelInitializer?: {};\n\n  /**\n   * Inputs and outputs signature for model initializer.\n   */\n  initializerSignature?: {};\n}\n\n/**\n * The on-disk format of the `model.json` file.\n *\n * TF.js 1.0 always populates the optional fields when writing model.json.\n * Prior versions did not provide those fields.\n */\nexport declare interface ModelJSON {\n  /**\n   * Model topology.\n   *\n   * For Keras-style `tf.Model`s, this is a JSON object.\n   * For TensorFlow-style models (e.g., `SavedModel`), this is the JSON\n   * encoding of the `GraphDef` protocol buffer.\n   */\n  modelTopology: {};\n\n  /** Model training configuration. */\n  trainingConfig?: TrainingConfig;\n\n  /**\n   * Weights manifest.\n   *\n   * The weights manifest consists of an ordered list of weight-manifest\n   * groups. Each weight-manifest group consists of a number of weight values\n   * stored in a number of paths. See the documentation of\n   * `WeightsManifestConfig` for more details.\n   */\n  weightsManifest: WeightsManifestConfig;\n\n  /**\n   * Hard-coded format name for models saved from TensorFlow.js or converted\n   * by TensorFlow.js Converter.\n   */\n  format?: string;\n\n  /**\n   * What library is responsible for originally generating this artifact.\n   *\n   * Used for debugging purposes. E.g., 'TensorFlow.js v1.0.0'.\n   */\n  generatedBy?: string;\n\n  /**\n   * What library or tool is responsible for converting the original model\n   * to this format, applicable only if the model is output by a converter.\n   *\n   * Used for debugging purposes.  E.g., 'TensorFlow.js Converter v1.0.0'.\n   *\n   * A value of `null` means the model artifacts are generated without any\n   * conversion process (e.g., saved directly from a TensorFlow.js\n   * `tf.LayersModel` instance.)\n   */\n  convertedBy?: string|null;\n\n  /**\n   * Inputs and outputs signature for saved model.\n   */\n  signature?: {};\n\n  /**\n   * User-defined metadata about the model.\n   */\n  userDefinedMetadata?: {[key: string]: {}};\n\n  /**\n   * Initializer for the model.\n   */\n  modelInitializer?: {};\n\n  /**\n   * Inputs and outputs signature for model initializer.\n   */\n  initializerSignature?: {};\n}\n\n/**\n * Type definition for handlers of loading operations.\n */\nexport type LoadHandler = () => Promise<ModelArtifacts>;\n\n/**\n * Type definition for handlers of saving operations.\n */\nexport type SaveHandler = (modelArtifact: ModelArtifacts) =>\n    Promise<SaveResult>;\n\n/**\n * Interface for a model import/export handler.\n *\n * The `save` and `load` handlers are both optional, in order to allow handlers\n * that support only saving or loading.\n */\n// tslint:disable-next-line:interface-name\nexport interface IOHandler {\n  save?: SaveHandler;\n  load?: LoadHandler;\n}\n\n/**\n * Type definition for handlers of synchronous loading operations.\n */\nexport type LoadHandlerSync = () => ModelArtifacts;\n\n/**\n * Type definition for handlers of synchronous saving operations.\n */\nexport type SaveHandlerSync = (modelArtifact: ModelArtifacts) => SaveResult;\n\n/**\n * Interface for a synchronous model import/export handler.\n *\n * The `save` and `load` handlers are both optional, in order to allow handlers\n * that support only saving or loading.\n */\n// tslint:disable-next-line:interface-name\nexport type IOHandlerSync = {\n  save?: SaveHandlerSync;\n  load?: LoadHandlerSync;\n};\n\n/**\n * An interface for the manager of a model store.\n *\n * A model store is defined as a storage medium on which multiple models can\n * be stored. Each stored model has a unique `path` as its identifier.\n * A `ModelStoreManager` for the store allows actions including\n *\n * - Listing the models stored in the store.\n * - Deleting a model from the store.\n */\nexport interface ModelStoreManager {\n  /**\n   * List all models in the model store.\n   *\n   * @returns A dictionary mapping paths of existing models to their\n   *   model artifacts info. Model artifacts info include type of the model's\n   *   topology, byte sizes of the topology, weights, etc.\n   */\n  listModels(): Promise<{[path: string]: ModelArtifactsInfo}>;\n\n  /**\n   * Remove a model specified by `path`.\n   *\n   * @param path\n   * @returns ModelArtifactsInfo of the deleted model (if and only if deletion\n   *   is successful).\n   * @throws Error if deletion fails, e.g., if no model exists at `path`.\n   */\n  removeModel(path: string): Promise<ModelArtifactsInfo>;\n}\n\n/**\n * Callback for the progress of a long-running action such as an HTTP\n * request for a large binary object.\n *\n * `fraction` should be a number in the [0, 1] interval, indicating how\n * much of the action has completed.\n */\nexport type OnProgressCallback = (fraction: number) => void;\n\n/** @innamespace io */\nexport interface LoadOptions {\n  /**\n   * RequestInit (options) for HTTP requests.\n   *\n   * For detailed information on the supported fields, see\n   * [https://developer.mozilla.org/en-US/docs/Web/API/Request/Request](\n   *     https://developer.mozilla.org/en-US/docs/Web/API/Request/Request)\n   */\n  requestInit?: RequestInit;\n\n  /**\n   * Progress callback.\n   */\n  onProgress?: OnProgressCallback;\n\n  /**\n   * A function used to override the `window.fetch` function.\n   */\n  fetchFunc?: Function;\n\n  /**\n   * Strict loading model: whether extraneous weights or missing\n   * weights should trigger an `Error`.\n   *\n   * If `true`, require that the provided weights exactly match those\n   * required by the layers. `false` means that both extra weights\n   * and missing weights will be silently ignored.\n   *\n   * Default: `true`.\n   */\n  strict?: boolean;\n\n  /**\n   * Path prefix for weight files, by default this is calculated from the\n   * path of the model JSON file.\n   *\n   * For instance, if the path to the model JSON file is\n   * `http://localhost/foo/model.json`, then the default path prefix will be\n   * `http://localhost/foo/`. If a weight file has the path value\n   * `group1-shard1of2` in the weight manifest, then the weight file will be\n   * loaded from `http://localhost/foo/group1-shard1of2` by default. However,\n   * if you provide a `weightPathPrefix` value of\n   * `http://localhost/foo/alt-weights`, then the weight file will be loaded\n   * from the path `http://localhost/foo/alt-weights/group1-shard1of2` instead.\n   */\n  weightPathPrefix?: string;\n\n  /**\n   * Whether the module or model is to be loaded from TF Hub.\n   *\n   * Setting this to `true` allows passing a TF-Hub module URL, omitting the\n   * standard model file name and the query parameters.\n   *\n   * Default: `false`.\n   */\n  fromTFHub?: boolean;\n\n  /**\n   * An async function to convert weight file name to URL. The weight file\n   * names are stored in model.json's weightsManifest.paths field. By default we\n   * consider weight files are colocated with the model.json file. For example:\n   *     model.json URL: https://www.google.com/models/1/model.json\n   *     group1-shard1of1.bin url:\n   *        https://www.google.com/models/1/group1-shard1of1.bin\n   *\n   * With this func you can convert the weight file name to any URL.\n   */\n  weightUrlConverter?: (weightFileName: string) => Promise<string>;\n}\n\n/**\n * Additional options for Platform.fetch\n */\nexport interface RequestDetails {\n  /**\n   * Is this request for a binary file (as opposed to a json file)\n   */\n  isBinary?: boolean;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {complex} from '../ops/complex';\nimport {tensor} from '../ops/tensor';\nimport {NamedTensor, NamedTensorMap} from '../tensor_types';\nimport {TypedArray} from '../types';\nimport {sizeFromShape} from '../util';\n\nimport {DTYPE_VALUE_SIZE_MAP, ModelArtifacts, ModelArtifactsInfo, ModelJSON, WeightGroup, WeightsManifestConfig, WeightsManifestEntry} from './types';\n\n/** Number of bytes reserved for the length of the string. (32bit integer). */\nconst NUM_BYTES_STRING_LENGTH = 4;\n\n/**\n * Encode a map from names to weight values as an ArrayBuffer, along with an\n * `Array` of `WeightsManifestEntry` as specification of the encoded weights.\n *\n * This function does not perform sharding.\n *\n * This function is the reverse of `decodeWeights`.\n *\n * @param tensors A map (\"dict\") from names to tensors.\n * @param group Group to which the weights belong (optional).\n * @returns A `Promise` of\n *   - A flat `ArrayBuffer` with all the binary values of the `Tensor`s\n *     concatenated.\n *   - An `Array` of `WeightManifestEntry`s, carrying information including\n *     tensor names, `dtype`s and shapes.\n * @throws Error: on unsupported tensor `dtype`.\n */\nexport async function encodeWeights(\n    tensors: NamedTensorMap|NamedTensor[], group?: WeightGroup):\n    Promise<{data: ArrayBuffer, specs: WeightsManifestEntry[]}> {\n  // TODO(adarob, cais): Support quantization.\n  const specs: WeightsManifestEntry[] = [];\n  const dataPromises: Array<Promise<TypedArray>> = [];\n\n  const names: string[] = Array.isArray(tensors) ?\n      tensors.map(tensor => tensor.name) :\n      Object.keys(tensors);\n\n  for (let i = 0; i < names.length; ++i) {\n    const name = names[i];\n    const t = Array.isArray(tensors) ? tensors[i].tensor : tensors[name];\n    if (t.dtype !== 'float32' && t.dtype !== 'int32' && t.dtype !== 'bool' &&\n        t.dtype !== 'string' && t.dtype !== 'complex64') {\n      throw new Error(`Unsupported dtype in weight '${name}': ${t.dtype}`);\n    }\n    const spec: WeightsManifestEntry = {name, shape: t.shape, dtype: t.dtype};\n    if (t.dtype === 'string') {\n      const utf8bytes = new Promise<TypedArray>(async resolve => {\n        const vals = await t.bytes() as Uint8Array[];\n        const totalNumBytes = vals.reduce((p, c) => p + c.length, 0) +\n            NUM_BYTES_STRING_LENGTH * vals.length;\n        const bytes = new Uint8Array(totalNumBytes);\n        let offset = 0;\n        for (let i = 0; i < vals.length; i++) {\n          const val = vals[i];\n          const bytesOfLength =\n              new Uint8Array(new Uint32Array([val.length]).buffer);\n          bytes.set(bytesOfLength, offset);\n          offset += NUM_BYTES_STRING_LENGTH;\n          bytes.set(val, offset);\n          offset += val.length;\n        }\n        resolve(bytes);\n      });\n      dataPromises.push(utf8bytes);\n    } else {\n      dataPromises.push(t.data());\n    }\n    if (group != null) {\n      spec.group = group;\n    }\n    specs.push(spec);\n  }\n\n  const tensorValues = await Promise.all(dataPromises);\n  return {data: concatenateTypedArrays(tensorValues), specs};\n}\n\n/**\n * Decode flat ArrayBuffer as weights.\n *\n * This function does not handle sharding.\n *\n * This function is the reverse of `encodeWeights`.\n *\n * @param buffer A flat ArrayBuffer carrying the binary values of the tensors\n *   concatenated in the order specified in `specs`.\n * @param specs Specifications of the names, dtypes and shapes of the tensors\n *   whose value are encoded by `buffer`.\n * @return A map from tensor name to tensor value, with the names corresponding\n *   to names in `specs`.\n * @throws Error, if any of the tensors has unsupported dtype.\n */\nexport function decodeWeights(\n    buffer: ArrayBuffer, specs: WeightsManifestEntry[]): NamedTensorMap {\n  // TODO(adarob, cais): Support quantization.\n  const out: NamedTensorMap = {};\n  let float16Decode: (buffer: Uint16Array) => Float32Array | undefined;\n  let offset = 0;\n  for (const spec of specs) {\n    const name = spec.name;\n    const dtype = spec.dtype;\n    const shape = spec.shape;\n    const size = sizeFromShape(shape);\n    let values: TypedArray|string[]|Uint8Array[];\n\n    if ('quantization' in spec) {\n      const quantization = spec.quantization;\n      if (quantization.dtype === 'uint8' || quantization.dtype === 'uint16') {\n        if (!('min' in quantization && 'scale' in quantization)) {\n          throw new Error(\n              `Weight ${spec.name} with quantization ${quantization.dtype} ` +\n              `doesn't have corresponding metadata min and scale.`);\n        }\n      } else if (quantization.dtype === 'float16') {\n        if (dtype !== 'float32') {\n          throw new Error(\n              `Weight ${spec.name} is quantized with ${quantization.dtype} ` +\n              `which only supports weights of type float32 not ${dtype}.`);\n        }\n      } else {\n        throw new Error(\n            `Weight ${spec.name} has unknown ` +\n            `quantization dtype ${quantization.dtype}. ` +\n            `Supported quantization dtypes are: ` +\n            `'uint8', 'uint16', and 'float16'.`);\n      }\n      const quantizationSizeFactor = DTYPE_VALUE_SIZE_MAP[quantization.dtype];\n      const byteBuffer =\n          buffer.slice(offset, offset + size * quantizationSizeFactor);\n      const quantizedArray = (quantization.dtype === 'uint8') ?\n          new Uint8Array(byteBuffer) :\n          new Uint16Array(byteBuffer);\n      if (dtype === 'float32') {\n        if (quantization.dtype === 'uint8' || quantization.dtype === 'uint16') {\n          values = new Float32Array(quantizedArray.length);\n          for (let i = 0; i < quantizedArray.length; i++) {\n            const v = quantizedArray[i];\n            values[i] = v * quantization.scale + quantization.min;\n          }\n        } else if (quantization.dtype === 'float16') {\n          if (float16Decode === undefined) {\n            float16Decode = getFloat16Decoder();\n          }\n          values = float16Decode(quantizedArray as Uint16Array);\n        } else {\n          throw new Error(\n              `Unsupported quantization type ${quantization.dtype} ` +\n              `for weight type float32.`);\n        }\n      } else if (dtype === 'int32') {\n        if (quantization.dtype !== 'uint8' && quantization.dtype !== 'uint16') {\n          throw new Error(\n              `Unsupported quantization type ${quantization.dtype} ` +\n              `for weight type int32.`);\n        }\n        values = new Int32Array(quantizedArray.length);\n        for (let i = 0; i < quantizedArray.length; i++) {\n          const v = quantizedArray[i];\n          values[i] = Math.round(v * quantization.scale + quantization.min);\n        }\n      } else {\n        throw new Error(`Unsupported dtype in weight '${name}': ${dtype}`);\n      }\n      offset += size * quantizationSizeFactor;\n    } else if (dtype === 'string') {\n      const size = sizeFromShape(spec.shape);\n      values = [];\n      for (let i = 0; i < size; i++) {\n        const byteLength = new Uint32Array(\n            buffer.slice(offset, offset + NUM_BYTES_STRING_LENGTH))[0];\n        offset += NUM_BYTES_STRING_LENGTH;\n        const bytes = new Uint8Array(buffer.slice(offset, offset + byteLength));\n        (values as Uint8Array[]).push(bytes);\n        offset += byteLength;\n      }\n    } else {\n      const dtypeFactor = DTYPE_VALUE_SIZE_MAP[dtype];\n      const byteBuffer = buffer.slice(offset, offset + size * dtypeFactor);\n\n      if (dtype === 'float32') {\n        values = new Float32Array(byteBuffer);\n      } else if (dtype === 'int32') {\n        values = new Int32Array(byteBuffer);\n      } else if (dtype === 'bool') {\n        values = new Uint8Array(byteBuffer);\n      } else if (dtype === 'complex64') {\n        values = new Float32Array(byteBuffer);\n        const real = new Float32Array(values.length / 2);\n        const image = new Float32Array(values.length / 2);\n        for (let i = 0; i < real.length; i++) {\n          real[i] = values[i * 2];\n          image[i] = values[i * 2 + 1];\n        }\n        const realTensor = tensor(real, shape, 'float32');\n        const imageTensor = tensor(image, shape, 'float32');\n        out[name] = complex(realTensor, imageTensor);\n        realTensor.dispose();\n        imageTensor.dispose();\n      } else {\n        throw new Error(`Unsupported dtype in weight '${name}': ${dtype}`);\n      }\n      offset += size * dtypeFactor;\n    }\n    if (dtype !== 'complex64') {\n      out[name] = tensor(values, shape, dtype);\n    }\n  }\n  return out;\n}\n\n/**\n * Concatenate TypedArrays into an ArrayBuffer.\n */\nexport function concatenateTypedArrays(xs: TypedArray[]): ArrayBuffer {\n  // TODO(adarob, cais): Support quantization.\n  if (xs === null) {\n    throw new Error(`Invalid input value: ${JSON.stringify(xs)}`);\n  }\n\n  let totalByteLength = 0;\n\n  // `normalizedXs` is here for this reason: a `TypedArray`'s `buffer'\n  // can have a different byte length from that of the `TypedArray` itself,\n  // for example, when the `TypedArray` is created from an offset in an\n  // `ArrayBuffer`. `normliazedXs` holds `TypedArray`s whose `buffer`s match\n  // the `TypedArray` in byte length. If an element of `xs` does not show\n  // this property, a new `TypedArray` that satisfy this property will be\n  // constructed and pushed into `normalizedXs`.\n  const normalizedXs: TypedArray[] = [];\n  xs.forEach((x: TypedArray) => {\n    totalByteLength += x.byteLength;\n    // tslint:disable:no-any\n    normalizedXs.push(\n        x.byteLength === x.buffer.byteLength ? x :\n                                               new (x.constructor as any)(x));\n    if (!(x as any instanceof Float32Array || x as any instanceof Int32Array ||\n          x as any instanceof Uint8Array)) {\n      throw new Error(`Unsupported TypedArray subtype: ${x.constructor.name}`);\n    }\n    // tslint:enable:no-any\n  });\n\n  const y = new Uint8Array(totalByteLength);\n  let offset = 0;\n  normalizedXs.forEach((x: TypedArray) => {\n    y.set(new Uint8Array(x.buffer), offset);\n    offset += x.byteLength;\n  });\n\n  return y.buffer;\n}\n\n// Use Buffer on Node.js instead of Blob/atob/btoa\nconst useNodeBuffer = typeof Buffer !== 'undefined' &&\n    (typeof Blob === 'undefined' || typeof atob === 'undefined' ||\n     typeof btoa === 'undefined');\n\n/**\n * Calculate the byte length of a JavaScript string.\n *\n * Note that a JavaScript string can contain wide characters, therefore the\n * length of the string is not necessarily equal to the byte length.\n *\n * @param str Input string.\n * @returns Byte length.\n */\nexport function stringByteLength(str: string): number {\n  if (useNodeBuffer) {\n    return Buffer.byteLength(str);\n  }\n  return new Blob([str]).size;\n}\n\n/**\n * Encode an ArrayBuffer as a base64 encoded string.\n *\n * @param buffer `ArrayBuffer` to be converted.\n * @returns A string that base64-encodes `buffer`.\n */\nexport function arrayBufferToBase64String(buffer: ArrayBuffer): string {\n  if (useNodeBuffer) {\n    return Buffer.from(buffer).toString('base64');\n  }\n  const buf = new Uint8Array(buffer);\n  let s = '';\n  for (let i = 0, l = buf.length; i < l; i++) {\n    s += String.fromCharCode(buf[i]);\n  }\n  return btoa(s);\n}\n\n/**\n * Decode a base64 string as an ArrayBuffer.\n *\n * @param str Base64 string.\n * @returns Decoded `ArrayBuffer`.\n */\nexport function base64StringToArrayBuffer(str: string): ArrayBuffer {\n  if (useNodeBuffer) {\n    const buf = Buffer.from(str, 'base64');\n    return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);\n  }\n  const s = atob(str);\n  const buffer = new Uint8Array(s.length);\n  for (let i = 0; i < s.length; ++i) {\n    buffer.set([s.charCodeAt(i)], i);\n  }\n  return buffer.buffer;\n}\n\n/**\n * Concatenate a number of ArrayBuffers into one.\n *\n * @param buffers A number of array buffers to concatenate.\n * @returns Result of concatenating `buffers` in order.\n */\nexport function concatenateArrayBuffers(buffers: ArrayBuffer[]): ArrayBuffer {\n  if (buffers.length === 1) {\n    return buffers[0];\n  }\n\n  let totalByteLength = 0;\n  buffers.forEach((buffer: ArrayBuffer) => {\n    totalByteLength += buffer.byteLength;\n  });\n\n  const temp = new Uint8Array(totalByteLength);\n  let offset = 0;\n  buffers.forEach((buffer: ArrayBuffer) => {\n    temp.set(new Uint8Array(buffer), offset);\n    offset += buffer.byteLength;\n  });\n  return temp.buffer;\n}\n\n/**\n * Get the basename of a path.\n *\n * Behaves in a way analogous to Linux's basename command.\n *\n * @param path\n */\nexport function basename(path: string): string {\n  const SEPARATOR = '/';\n  path = path.trim();\n  while (path.endsWith(SEPARATOR)) {\n    path = path.slice(0, path.length - 1);\n  }\n  const items = path.split(SEPARATOR);\n  return items[items.length - 1];\n}\n\n/**\n * Create `ModelJSON` from `ModelArtifacts`.\n *\n * @param artifacts Model artifacts, describing the model and its weights.\n * @param manifest Weight manifest, describing where the weights of the\n *     `ModelArtifacts` are stored, and some metadata about them.\n * @returns Object representing the `model.json` file describing the model\n *     artifacts and weights\n */\nexport function getModelJSONForModelArtifacts(\n    artifacts: ModelArtifacts, manifest: WeightsManifestConfig): ModelJSON {\n  const result: ModelJSON = {\n    modelTopology: artifacts.modelTopology,\n    format: artifacts.format,\n    generatedBy: artifacts.generatedBy,\n    convertedBy: artifacts.convertedBy,\n    weightsManifest: manifest\n  };\n  if (artifacts.signature != null) {\n    result.signature = artifacts.signature;\n  }\n  if (artifacts.userDefinedMetadata != null) {\n    result.userDefinedMetadata = artifacts.userDefinedMetadata;\n  }\n  if (artifacts.modelInitializer != null) {\n    result.modelInitializer = artifacts.modelInitializer;\n  }\n  if (artifacts.initializerSignature != null) {\n    result.initializerSignature = artifacts.initializerSignature;\n  }\n  if (artifacts.trainingConfig != null) {\n    result.trainingConfig = artifacts.trainingConfig;\n  }\n  return result;\n}\n\n/**\n * Create `ModelArtifacts` from a JSON file and weights.\n *\n * @param modelJSON Object containing the parsed JSON of `model.json`\n * @param weightSpecs The list of WeightsManifestEntry for the model. Must be\n *     passed if the modelJSON has a weightsManifest.\n * @param weightData An ArrayBuffer of weight data for the model corresponding\n *     to the weights in weightSpecs. Must be passed if the modelJSON has a\n *     weightsManifest.\n * @returns A Promise of the `ModelArtifacts`, as described by the JSON file.\n */\nexport function getModelArtifactsForJSONSync(\n    modelJSON: ModelJSON, weightSpecs?: WeightsManifestEntry[],\n    weightData?: ArrayBuffer): ModelArtifacts {\n\n  const modelArtifacts: ModelArtifacts = {\n    modelTopology: modelJSON.modelTopology,\n    format: modelJSON.format,\n    generatedBy: modelJSON.generatedBy,\n    convertedBy: modelJSON.convertedBy\n  };\n\n  if (modelJSON.trainingConfig != null) {\n    modelArtifacts.trainingConfig = modelJSON.trainingConfig;\n  }\n  if (modelJSON.weightsManifest != null) {\n    if (!weightSpecs) {\n      throw new Error('modelJSON has weightsManifest but weightSpecs is null');\n    }\n    if (!weightData) {\n      throw new Error('modelJSON has weightsManifest but weightData is null');\n    }\n    modelArtifacts.weightSpecs = weightSpecs;\n    modelArtifacts.weightData = weightData;\n  }\n  if (modelJSON.signature != null) {\n    modelArtifacts.signature = modelJSON.signature;\n  }\n  if (modelJSON.userDefinedMetadata != null) {\n    modelArtifacts.userDefinedMetadata = modelJSON.userDefinedMetadata;\n  }\n  if (modelJSON.modelInitializer != null) {\n    modelArtifacts.modelInitializer = modelJSON.modelInitializer;\n  }\n  if (modelJSON.initializerSignature != null) {\n    modelArtifacts.initializerSignature = modelJSON.initializerSignature;\n  }\n\n  return modelArtifacts;\n}\n\n/**\n * Create `ModelArtifacts` from a JSON file.\n *\n * @param modelJSON Object containing the parsed JSON of `model.json`\n * @param loadWeights Function that takes the JSON file's weights manifest,\n *     reads weights from the listed path(s), and returns a Promise of the\n *     weight manifest entries along with the weights data.\n * @returns A Promise of the `ModelArtifacts`, as described by the JSON file.\n */\nexport async function getModelArtifactsForJSON(\n    modelJSON: ModelJSON,\n    loadWeights: (weightsManifest: WeightsManifestConfig) => Promise<[\n      /* weightSpecs */ WeightsManifestEntry[], /* weightData */ ArrayBuffer\n    ]>): Promise<ModelArtifacts> {\n  let weightSpecs: WeightsManifestEntry[] | undefined;\n  let weightData: ArrayBuffer | undefined;\n\n  if (modelJSON.weightsManifest != null) {\n    [weightSpecs, weightData] = await loadWeights(modelJSON.weightsManifest);\n  }\n\n  return getModelArtifactsForJSONSync(modelJSON, weightSpecs, weightData);\n}\n\n/**\n * Populate ModelArtifactsInfo fields for a model with JSON topology.\n * @param modelArtifacts\n * @returns A ModelArtifactsInfo object.\n */\nexport function getModelArtifactsInfoForJSON(modelArtifacts: ModelArtifacts):\n    ModelArtifactsInfo {\n  if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n    throw new Error('Expected JSON model topology, received ArrayBuffer.');\n  }\n\n  return {\n    dateSaved: new Date(),\n    modelTopologyType: 'JSON',\n    modelTopologyBytes: modelArtifacts.modelTopology == null ?\n        0 :\n        stringByteLength(JSON.stringify(modelArtifacts.modelTopology)),\n    weightSpecsBytes: modelArtifacts.weightSpecs == null ?\n        0 :\n        stringByteLength(JSON.stringify(modelArtifacts.weightSpecs)),\n    weightDataBytes: modelArtifacts.weightData == null ?\n        0 :\n        modelArtifacts.weightData.byteLength,\n  };\n}\n\n/**\n * Concatenate the weights stored in a WeightsManifestConfig into a list of\n * WeightsManifestEntry\n *\n * @param weightsManifest The WeightsManifestConfig to extract weights from.\n * @returns A list of WeightsManifestEntry of the weights in the weightsManifest\n */\nexport function getWeightSpecs(weightsManifest: WeightsManifestConfig):\n    WeightsManifestEntry[] {\n  const weightSpecs: WeightsManifestEntry[] = [];\n  for (const entry of weightsManifest) {\n    weightSpecs.push(...entry.weights);\n  }\n  return weightSpecs;\n}\n\n/**\n * Computes mantisa table for casting Float16 to Float32\n * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n *\n * @returns Uint32Array, 2048 mantissa lookup values.\n */\nfunction computeFloat16MantisaTable(): Uint32Array {\n  const convertMantissa = (i: number): number => {\n    let m = i << 13;\n    let e = 0;\n\n    while ((m & 0x00800000) === 0) {\n      e -= 0x00800000;\n      m <<= 1;\n    }\n    m &= ~0x00800000;\n    e += 0x38800000;\n\n    return m | e;\n  };\n\n  const mantisaTable = new Uint32Array(2048);\n\n  mantisaTable[0] = 0;\n  for (let i = 1; i < 1024; i++) {\n    mantisaTable[i] = convertMantissa(i);\n  }\n  for (let i = 1024; i < 2048; i++) {\n    mantisaTable[i] = 0x38000000 + ((i - 1024) << 13);\n  }\n\n  return mantisaTable;\n}\n\n/**\n * Computes exponent table for casting Float16 to Float32\n * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n *\n * @returns Uint32Array, 64 exponent lookup values.\n */\nfunction computeFloat16ExponentTable(): Uint32Array {\n  const exponentTable = new Uint32Array(64);\n\n  exponentTable[0] = 0;\n  exponentTable[31] = 0x47800000;\n  exponentTable[32] = 0x80000000;\n  exponentTable[63] = 0xc7800000;\n  for (let i = 1; i < 31; i++) {\n    exponentTable[i] = i << 23;\n  }\n  for (let i = 33; i < 63; i++) {\n    exponentTable[i] = 0x80000000 + ((i - 32) << 23);\n  }\n\n  return exponentTable;\n}\n\n/**\n * Computes offset table for casting Float16 to Float32\n * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n *\n * @returns Uint32Array, 6d offset values.\n */\nfunction computeFloat16OffsetTable(): Uint32Array {\n  const offsetTable = new Uint32Array(64);\n\n  for (let i = 0; i < 64; i++) {\n    offsetTable[i] = 1024;\n  }\n  offsetTable[0] = offsetTable[32] = 0;\n\n  return offsetTable;\n}\n\n/**\n * Retrieve a Float16 decoder which will decode a ByteArray of Float16 values\n * to a Float32Array.\n *\n * @returns Function (buffer: Uint16Array) => Float32Array which decodes\n *          the Uint16Array of Float16 bytes to a Float32Array.\n */\nexport function getFloat16Decoder(): (buffer: Uint16Array) => Float32Array {\n  // Algorithm is based off of\n  // http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n\n  // Cache lookup tables\n  const mantisaTable = computeFloat16MantisaTable();\n  const exponentTable = computeFloat16ExponentTable();\n  const offsetTable = computeFloat16OffsetTable();\n\n  return (quantizedArray: Uint16Array) => {\n    const buffer = new ArrayBuffer(4 * quantizedArray.length);\n    const bufferUint32View = new Uint32Array(buffer);\n    for (let index = 0; index < quantizedArray.length; index++) {\n      const float16Bits = quantizedArray[index];\n      const float32Bits =\n          mantisaTable[offsetTable[float16Bits >> 10] + (float16Bits & 0x3ff)] +\n          exponentTable[float16Bits >> 10];\n      bufferUint32View[index] = float32Bits;\n    }\n    return new Float32Array(buffer);\n  };\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IOHandler, LoadOptions} from './types';\n\nexport type IORouter = (url: string|string[], loadOptions?: LoadOptions) =>\n    IOHandler;\n\nexport class IORouterRegistry {\n  // Singleton instance.\n  private static instance: IORouterRegistry;\n\n  private saveRouters: IORouter[];\n  private loadRouters: IORouter[];\n\n  private constructor() {\n    this.saveRouters = [];\n    this.loadRouters = [];\n  }\n\n  private static getInstance(): IORouterRegistry {\n    if (IORouterRegistry.instance == null) {\n      IORouterRegistry.instance = new IORouterRegistry();\n    }\n    return IORouterRegistry.instance;\n  }\n\n  /**\n   * Register a save-handler router.\n   *\n   * @param saveRouter A function that maps a URL-like string onto an instance\n   * of `IOHandler` with the `save` method defined or `null`.\n   */\n  static registerSaveRouter(saveRouter: IORouter) {\n    IORouterRegistry.getInstance().saveRouters.push(saveRouter);\n  }\n\n  /**\n   * Register a load-handler router.\n   *\n   * @param loadRouter A function that maps a URL-like string onto an instance\n   * of `IOHandler` with the `load` method defined or `null`.\n   */\n  static registerLoadRouter(loadRouter: IORouter) {\n    IORouterRegistry.getInstance().loadRouters.push(loadRouter);\n  }\n\n  /**\n   * Look up IOHandler for saving, given a URL-like string.\n   *\n   * @param url\n   * @returns If only one match is found, an instance of IOHandler with the\n   * `save` method defined. If no match is found, `null`.\n   * @throws Error, if more than one match is found.\n   */\n  static getSaveHandlers(url: string|string[]): IOHandler[] {\n    return IORouterRegistry.getHandlers(url, 'save');\n  }\n\n  /**\n   * Look up IOHandler for loading, given a URL-like string.\n   *\n   * @param url\n   * @param loadOptions Optional, custom load options.\n   * @returns All valid handlers for `url`, given the currently registered\n   *   handler routers.\n   */\n  static getLoadHandlers(url: string|string[], loadOptions?: LoadOptions):\n      IOHandler[] {\n    return IORouterRegistry.getHandlers(url, 'load', loadOptions);\n  }\n\n  private static getHandlers(\n      url: string|string[], handlerType: 'save'|'load',\n      loadOptions?: LoadOptions): IOHandler[] {\n    const validHandlers: IOHandler[] = [];\n    const routers = handlerType === 'load' ?\n        IORouterRegistry.getInstance().loadRouters :\n        IORouterRegistry.getInstance().saveRouters;\n    routers.forEach(router => {\n      const handler = router(url, loadOptions);\n      if (handler !== null) {\n        validHandlers.push(handler);\n      }\n    });\n    return validHandlers;\n  }\n}\n\nexport const registerSaveRouter = (loudRouter: IORouter) =>\n    IORouterRegistry.registerSaveRouter(loudRouter);\nexport const registerLoadRouter = (loudRouter: IORouter) =>\n    IORouterRegistry.registerLoadRouter(loudRouter);\nexport const getSaveHandlers = (url: string|string[]) =>\n    IORouterRegistry.getSaveHandlers(url);\nexport const getLoadHandlers =\n    (url: string|string[], loadOptions?: LoadOptions) =>\n        IORouterRegistry.getLoadHandlers(url, loadOptions);\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport '../flags';\n\nimport {env} from '../environment';\n\nimport {getModelArtifactsInfoForJSON} from './io_utils';\nimport {IORouter, IORouterRegistry} from './router_registry';\nimport {IOHandler, ModelArtifacts, ModelArtifactsInfo, ModelStoreManager, SaveResult} from './types';\n\nconst DATABASE_NAME = 'tensorflowjs';\nconst DATABASE_VERSION = 1;\n\n// Model data and ModelArtifactsInfo (metadata) are stored in two separate\n// stores for efficient access of the list of stored models and their metadata.\n// 1. The object store for model data: topology, weights and weight manifests.\nconst MODEL_STORE_NAME = 'models_store';\n// 2. The object store for ModelArtifactsInfo, including meta-information such\n//    as the type of topology (JSON vs binary), byte size of the topology, byte\n//    size of the weights, etc.\nconst INFO_STORE_NAME = 'model_info_store';\n\n/**\n * Delete the entire database for tensorflow.js, including the models store.\n */\nexport async function deleteDatabase(): Promise<void> {\n  const idbFactory = getIndexedDBFactory();\n\n  return new Promise<void>((resolve, reject) => {\n    const deleteRequest = idbFactory.deleteDatabase(DATABASE_NAME);\n    deleteRequest.onsuccess = () => resolve();\n    deleteRequest.onerror = error => reject(error);\n  });\n}\n\nfunction getIndexedDBFactory(): IDBFactory {\n  if (!env().getBool('IS_BROWSER')) {\n    // TODO(cais): Add more info about what IOHandler subtypes are available.\n    //   Maybe point to a doc page on the web and/or automatically determine\n    //   the available IOHandlers and print them in the error message.\n    throw new Error(\n        'Failed to obtain IndexedDB factory because the current environment' +\n        'is not a web browser.');\n  }\n  // tslint:disable-next-line:no-any\n  const theWindow: any = typeof window === 'undefined' ? self : window;\n  const factory = theWindow.indexedDB || theWindow.mozIndexedDB ||\n      theWindow.webkitIndexedDB || theWindow.msIndexedDB ||\n      theWindow.shimIndexedDB;\n  if (factory == null) {\n    throw new Error(\n        'The current browser does not appear to support IndexedDB.');\n  }\n  return factory;\n}\n\nfunction setUpDatabase(openRequest: IDBRequest) {\n  const db = openRequest.result as IDBDatabase;\n  db.createObjectStore(MODEL_STORE_NAME, {keyPath: 'modelPath'});\n  db.createObjectStore(INFO_STORE_NAME, {keyPath: 'modelPath'});\n}\n\n/**\n * IOHandler subclass: Browser IndexedDB.\n *\n * See the doc string of `browserIndexedDB` for more details.\n */\nexport class BrowserIndexedDB implements IOHandler {\n  protected readonly indexedDB: IDBFactory;\n  protected readonly modelPath: string;\n\n  static readonly URL_SCHEME = 'indexeddb://';\n\n  constructor(modelPath: string) {\n    this.indexedDB = getIndexedDBFactory();\n\n    if (modelPath == null || !modelPath) {\n      throw new Error(\n          'For IndexedDB, modelPath must not be null, undefined or empty.');\n    }\n    this.modelPath = modelPath;\n  }\n\n  async save(modelArtifacts: ModelArtifacts): Promise<SaveResult> {\n    // TODO(cais): Support saving GraphDef models.\n    if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n      throw new Error(\n          'BrowserLocalStorage.save() does not support saving model topology ' +\n          'in binary formats yet.');\n    }\n\n    return this.databaseAction(this.modelPath, modelArtifacts) as\n        Promise<SaveResult>;\n  }\n\n  async load(): Promise<ModelArtifacts> {\n    return this.databaseAction(this.modelPath) as Promise<ModelArtifacts>;\n  }\n\n  /**\n   * Perform database action to put model artifacts into or read model artifacts\n   * from IndexedDB object store.\n   *\n   * Whether the action is put or get depends on whether `modelArtifacts` is\n   * specified. If it is specified, the action will be put; otherwise the action\n   * will be get.\n   *\n   * @param modelPath A unique string path for the model.\n   * @param modelArtifacts If specified, it will be the model artifacts to be\n   *   stored in IndexedDB.\n   * @returns A `Promise` of `SaveResult`, if the action is put, or a `Promise`\n   *   of `ModelArtifacts`, if the action is get.\n   */\n  private databaseAction(modelPath: string, modelArtifacts?: ModelArtifacts):\n      Promise<ModelArtifacts|SaveResult> {\n    return new Promise<ModelArtifacts|SaveResult>((resolve, reject) => {\n      const openRequest = this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);\n      openRequest.onupgradeneeded = () => setUpDatabase(openRequest);\n\n      openRequest.onsuccess = () => {\n        const db = openRequest.result;\n\n        if (modelArtifacts == null) {\n          // Read model out from object store.\n          const modelTx = db.transaction(MODEL_STORE_NAME, 'readonly');\n          const modelStore = modelTx.objectStore(MODEL_STORE_NAME);\n          const getRequest = modelStore.get(this.modelPath);\n          getRequest.onsuccess = () => {\n            if (getRequest.result == null) {\n              db.close();\n              return reject(new Error(\n                  `Cannot find model with path '${this.modelPath}' ` +\n                  `in IndexedDB.`));\n            } else {\n              resolve(getRequest.result.modelArtifacts);\n            }\n          };\n          getRequest.onerror = error => {\n            db.close();\n            return reject(getRequest.error);\n          };\n          modelTx.oncomplete = () => db.close();\n        } else {\n          // Put model into object store.\n          const modelArtifactsInfo: ModelArtifactsInfo =\n              getModelArtifactsInfoForJSON(modelArtifacts);\n          // First, put ModelArtifactsInfo into info store.\n          const infoTx = db.transaction(INFO_STORE_NAME, 'readwrite');\n          let infoStore = infoTx.objectStore(INFO_STORE_NAME);\n          const putInfoRequest =\n              infoStore.put({modelPath: this.modelPath, modelArtifactsInfo});\n          let modelTx: IDBTransaction;\n          putInfoRequest.onsuccess = () => {\n            // Second, put model data into model store.\n            modelTx = db.transaction(MODEL_STORE_NAME, 'readwrite');\n            const modelStore = modelTx.objectStore(MODEL_STORE_NAME);\n            const putModelRequest = modelStore.put({\n              modelPath: this.modelPath,\n              modelArtifacts,\n              modelArtifactsInfo\n            });\n            putModelRequest.onsuccess = () => resolve({modelArtifactsInfo});\n            putModelRequest.onerror = error => {\n              // If the put-model request fails, roll back the info entry as\n              // well.\n              infoStore = infoTx.objectStore(INFO_STORE_NAME);\n              const deleteInfoRequest = infoStore.delete(this.modelPath);\n              deleteInfoRequest.onsuccess = () => {\n                db.close();\n                return reject(putModelRequest.error);\n              };\n              deleteInfoRequest.onerror = error => {\n                db.close();\n                return reject(putModelRequest.error);\n              };\n            };\n          };\n          putInfoRequest.onerror = error => {\n            db.close();\n            return reject(putInfoRequest.error);\n          };\n          infoTx.oncomplete = () => {\n            if (modelTx == null) {\n              db.close();\n            } else {\n              modelTx.oncomplete = () => db.close();\n            }\n          };\n        }\n      };\n      openRequest.onerror = error => reject(openRequest.error);\n    });\n  }\n}\n\nexport const indexedDBRouter: IORouter = (url: string|string[]) => {\n  if (!env().getBool('IS_BROWSER')) {\n    return null;\n  } else {\n    if (!Array.isArray(url) && url.startsWith(BrowserIndexedDB.URL_SCHEME)) {\n      return browserIndexedDB(url.slice(BrowserIndexedDB.URL_SCHEME.length));\n    } else {\n      return null;\n    }\n  }\n};\nIORouterRegistry.registerSaveRouter(indexedDBRouter);\nIORouterRegistry.registerLoadRouter(indexedDBRouter);\n\n/**\n * Creates a browser IndexedDB IOHandler for saving and loading models.\n *\n * ```js\n * const model = tf.sequential();\n * model.add(\n *     tf.layers.dense({units: 1, inputShape: [100], activation: 'sigmoid'}));\n *\n * const saveResult = await model.save('indexeddb://MyModel'));\n * console.log(saveResult);\n * ```\n *\n * @param modelPath A unique identifier for the model to be saved. Must be a\n *   non-empty string.\n * @returns An instance of `BrowserIndexedDB` (sublcass of `IOHandler`),\n *   which can be used with, e.g., `tf.Model.save`.\n */\nexport function browserIndexedDB(modelPath: string): IOHandler {\n  return new BrowserIndexedDB(modelPath);\n}\n\nfunction maybeStripScheme(key: string) {\n  return key.startsWith(BrowserIndexedDB.URL_SCHEME) ?\n      key.slice(BrowserIndexedDB.URL_SCHEME.length) :\n      key;\n}\n\nexport class BrowserIndexedDBManager implements ModelStoreManager {\n  private indexedDB: IDBFactory;\n\n  constructor() {\n    this.indexedDB = getIndexedDBFactory();\n  }\n\n  async listModels(): Promise<{[path: string]: ModelArtifactsInfo}> {\n    return new Promise<{[path: string]: ModelArtifactsInfo}>(\n        (resolve, reject) => {\n          const openRequest =\n              this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);\n          openRequest.onupgradeneeded = () => setUpDatabase(openRequest);\n\n          openRequest.onsuccess = () => {\n            const db = openRequest.result;\n            const tx = db.transaction(INFO_STORE_NAME, 'readonly');\n            const store = tx.objectStore(INFO_STORE_NAME);\n            // tslint:disable:max-line-length\n            // Need to cast `store` as `any` here because TypeScript's DOM\n            // library does not have the `getAll()` method even though the\n            // method is supported in the latest version of most mainstream\n            // browsers:\n            // https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/getAll\n            // tslint:enable:max-line-length\n            // tslint:disable-next-line:no-any\n            const getAllInfoRequest = (store as any).getAll() as IDBRequest;\n            getAllInfoRequest.onsuccess = () => {\n              const out: {[path: string]: ModelArtifactsInfo} = {};\n              for (const item of getAllInfoRequest.result) {\n                out[item.modelPath] = item.modelArtifactsInfo;\n              }\n              resolve(out);\n            };\n            getAllInfoRequest.onerror = error => {\n              db.close();\n              return reject(getAllInfoRequest.error);\n            };\n            tx.oncomplete = () => db.close();\n          };\n          openRequest.onerror = error => reject(openRequest.error);\n        });\n  }\n\n  async removeModel(path: string): Promise<ModelArtifactsInfo> {\n    path = maybeStripScheme(path);\n    return new Promise<ModelArtifactsInfo>((resolve, reject) => {\n      const openRequest = this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);\n      openRequest.onupgradeneeded = () => setUpDatabase(openRequest);\n\n      openRequest.onsuccess = () => {\n        const db = openRequest.result;\n        const infoTx = db.transaction(INFO_STORE_NAME, 'readwrite');\n        const infoStore = infoTx.objectStore(INFO_STORE_NAME);\n\n        const getInfoRequest = infoStore.get(path);\n        let modelTx: IDBTransaction;\n        getInfoRequest.onsuccess = () => {\n          if (getInfoRequest.result == null) {\n            db.close();\n            return reject(new Error(\n                `Cannot find model with path '${path}' ` +\n                `in IndexedDB.`));\n          } else {\n            // First, delete the entry in the info store.\n            const deleteInfoRequest = infoStore.delete(path);\n            const deleteModelData = () => {\n              // Second, delete the entry in the model store.\n              modelTx = db.transaction(MODEL_STORE_NAME, 'readwrite');\n              const modelStore = modelTx.objectStore(MODEL_STORE_NAME);\n              const deleteModelRequest = modelStore.delete(path);\n              deleteModelRequest.onsuccess = () =>\n                  resolve(getInfoRequest.result.modelArtifactsInfo);\n              deleteModelRequest.onerror = error =>\n                  reject(getInfoRequest.error);\n            };\n            // Proceed with deleting model data regardless of whether deletion\n            // of info data succeeds or not.\n            deleteInfoRequest.onsuccess = deleteModelData;\n            deleteInfoRequest.onerror = error => {\n              deleteModelData();\n              db.close();\n              return reject(getInfoRequest.error);\n            };\n          }\n        };\n        getInfoRequest.onerror = error => {\n          db.close();\n          return reject(getInfoRequest.error);\n        };\n\n        infoTx.oncomplete = () => {\n          if (modelTx == null) {\n            db.close();\n          } else {\n            modelTx.oncomplete = () => db.close();\n          }\n        };\n      };\n      openRequest.onerror = error => reject(openRequest.error);\n    });\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport '../flags';\nimport {env} from '../environment';\n\nimport {assert} from '../util';\nimport {arrayBufferToBase64String, base64StringToArrayBuffer, getModelArtifactsInfoForJSON} from './io_utils';\nimport {IORouter, IORouterRegistry} from './router_registry';\nimport {IOHandler, ModelArtifacts, ModelArtifactsInfo, ModelJSON, ModelStoreManager, SaveResult} from './types';\n\nconst PATH_SEPARATOR = '/';\nconst PATH_PREFIX = 'tensorflowjs_models';\nconst INFO_SUFFIX = 'info';\nconst MODEL_TOPOLOGY_SUFFIX = 'model_topology';\nconst WEIGHT_SPECS_SUFFIX = 'weight_specs';\nconst WEIGHT_DATA_SUFFIX = 'weight_data';\nconst MODEL_METADATA_SUFFIX = 'model_metadata';\n\n/**\n * Purge all tensorflow.js-saved model artifacts from local storage.\n *\n * @returns Paths of the models purged.\n */\nexport function purgeLocalStorageArtifacts(): string[] {\n  if (!env().getBool('IS_BROWSER') || typeof window === 'undefined' ||\n      typeof window.localStorage === 'undefined') {\n    throw new Error(\n        'purgeLocalStorageModels() cannot proceed because local storage is ' +\n        'unavailable in the current environment.');\n  }\n  const LS = window.localStorage;\n  const purgedModelPaths: string[] = [];\n  for (let i = 0; i < LS.length; ++i) {\n    const key = LS.key(i);\n    const prefix = PATH_PREFIX + PATH_SEPARATOR;\n    if (key.startsWith(prefix) && key.length > prefix.length) {\n      LS.removeItem(key);\n      const modelName = getModelPathFromKey(key);\n      if (purgedModelPaths.indexOf(modelName) === -1) {\n        purgedModelPaths.push(modelName);\n      }\n    }\n  }\n  return purgedModelPaths;\n}\n\ntype LocalStorageKeys = {\n  /** Key of the localStorage entry storing `ModelArtifactsInfo`. */\n  info: string,\n  /**\n   * Key of the localStorage entry storing the 'modelTopology' key of\n   * `model.json`\n   */\n  topology: string,\n  /**\n   * Key of the localStorage entry storing the `weightsManifest.weights` entries\n   * of `model.json`\n   */\n  weightSpecs: string,\n  /** Key of the localStorage entry storing the weight data in Base64 */\n  weightData: string,\n  /**\n   * Key of the localStorage entry storing the remaining fields of `model.json`\n   * @see {@link ModelMetadata}\n   */\n  modelMetadata: string,\n};\n\ntype ModelMetadata = Omit<ModelJSON, 'modelTopology'|'weightsManifest'>;\n\nfunction getModelKeys(path: string): LocalStorageKeys {\n  return {\n    info: [PATH_PREFIX, path, INFO_SUFFIX].join(PATH_SEPARATOR),\n    topology: [PATH_PREFIX, path, MODEL_TOPOLOGY_SUFFIX].join(PATH_SEPARATOR),\n    weightSpecs: [PATH_PREFIX, path, WEIGHT_SPECS_SUFFIX].join(PATH_SEPARATOR),\n    weightData: [PATH_PREFIX, path, WEIGHT_DATA_SUFFIX].join(PATH_SEPARATOR),\n    modelMetadata:\n        [PATH_PREFIX, path, MODEL_METADATA_SUFFIX].join(PATH_SEPARATOR)\n  };\n}\n\nfunction removeItems(keys: LocalStorageKeys): void {\n  for (const key of Object.values(keys)) {\n    window.localStorage.removeItem(key);\n  }\n}\n\n/**\n * Get model path from a local-storage key.\n *\n * E.g., 'tensorflowjs_models/my/model/1/info' --> 'my/model/1'\n *\n * @param key\n */\nfunction getModelPathFromKey(key: string) {\n  const items = key.split(PATH_SEPARATOR);\n  if (items.length < 3) {\n    throw new Error(`Invalid key format: ${key}`);\n  }\n  return items.slice(1, items.length - 1).join(PATH_SEPARATOR);\n}\n\nfunction maybeStripScheme(key: string) {\n  return key.startsWith(BrowserLocalStorage.URL_SCHEME) ?\n      key.slice(BrowserLocalStorage.URL_SCHEME.length) :\n      key;\n}\n\n/**\n * IOHandler subclass: Browser Local Storage.\n *\n * See the doc string to `browserLocalStorage` for more details.\n */\nexport class BrowserLocalStorage implements IOHandler {\n  protected readonly LS: Storage;\n  protected readonly modelPath: string;\n  protected readonly keys: LocalStorageKeys;\n\n  static readonly URL_SCHEME = 'localstorage://';\n\n  constructor(modelPath: string) {\n    if (!env().getBool('IS_BROWSER') || typeof window === 'undefined' ||\n        typeof window.localStorage === 'undefined') {\n      // TODO(cais): Add more info about what IOHandler subtypes are\n      // available.\n      //   Maybe point to a doc page on the web and/or automatically determine\n      //   the available IOHandlers and print them in the error message.\n      throw new Error(\n          'The current environment does not support local storage.');\n    }\n    this.LS = window.localStorage;\n\n    if (modelPath == null || !modelPath) {\n      throw new Error(\n          'For local storage, modelPath must not be null, undefined or empty.');\n    }\n    this.modelPath = modelPath;\n    this.keys = getModelKeys(this.modelPath);\n  }\n\n  /**\n   * Save model artifacts to browser local storage.\n   *\n   * See the documentation to `browserLocalStorage` for details on the saved\n   * artifacts.\n   *\n   * @param modelArtifacts The model artifacts to be stored.\n   * @returns An instance of SaveResult.\n   */\n  async save(modelArtifacts: ModelArtifacts): Promise<SaveResult> {\n    if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n      throw new Error(\n          'BrowserLocalStorage.save() does not support saving model topology ' +\n          'in binary formats yet.');\n    } else {\n      const topology = JSON.stringify(modelArtifacts.modelTopology);\n      const weightSpecs = JSON.stringify(modelArtifacts.weightSpecs);\n\n      const modelArtifactsInfo: ModelArtifactsInfo =\n          getModelArtifactsInfoForJSON(modelArtifacts);\n\n      try {\n        this.LS.setItem(this.keys.info, JSON.stringify(modelArtifactsInfo));\n        this.LS.setItem(this.keys.topology, topology);\n        this.LS.setItem(this.keys.weightSpecs, weightSpecs);\n        this.LS.setItem(\n            this.keys.weightData,\n            arrayBufferToBase64String(modelArtifacts.weightData));\n\n        // Note that JSON.stringify doesn't write out keys that have undefined\n        // values, so for some keys, we set undefined instead of a null-ish\n        // value.\n        const metadata: Required<ModelMetadata> = {\n          format: modelArtifacts.format,\n          generatedBy: modelArtifacts.generatedBy,\n          convertedBy: modelArtifacts.convertedBy,\n          signature: modelArtifacts.signature != null ?\n              modelArtifacts.signature :\n              undefined,\n          userDefinedMetadata: modelArtifacts.userDefinedMetadata != null ?\n              modelArtifacts.userDefinedMetadata :\n              undefined,\n          modelInitializer: modelArtifacts.modelInitializer != null ?\n              modelArtifacts.modelInitializer :\n              undefined,\n          initializerSignature: modelArtifacts.initializerSignature != null ?\n              modelArtifacts.initializerSignature :\n              undefined,\n          trainingConfig: modelArtifacts.trainingConfig != null ?\n              modelArtifacts.trainingConfig :\n              undefined\n        };\n        this.LS.setItem(this.keys.modelMetadata, JSON.stringify(metadata));\n\n        return {modelArtifactsInfo};\n      } catch (err) {\n        // If saving failed, clean up all items saved so far.\n        removeItems(this.keys);\n\n        throw new Error(\n            `Failed to save model '${this.modelPath}' to local storage: ` +\n            `size quota being exceeded is a possible cause of this failure: ` +\n            `modelTopologyBytes=${modelArtifactsInfo.modelTopologyBytes}, ` +\n            `weightSpecsBytes=${modelArtifactsInfo.weightSpecsBytes}, ` +\n            `weightDataBytes=${modelArtifactsInfo.weightDataBytes}.`);\n      }\n    }\n  }\n\n  /**\n   * Load a model from local storage.\n   *\n   * See the documentation to `browserLocalStorage` for details on the saved\n   * artifacts.\n   *\n   * @returns The loaded model (if loading succeeds).\n   */\n  async load(): Promise<ModelArtifacts> {\n    const info =\n        JSON.parse(this.LS.getItem(this.keys.info)) as ModelArtifactsInfo;\n    if (info == null) {\n      throw new Error(\n          `In local storage, there is no model with name '${this.modelPath}'`);\n    }\n\n    if (info.modelTopologyType !== 'JSON') {\n      throw new Error(\n          'BrowserLocalStorage does not support loading non-JSON model ' +\n          'topology yet.');\n    }\n\n    const out: ModelArtifacts = {};\n\n    // Load topology.\n    const topology = JSON.parse(this.LS.getItem(this.keys.topology));\n    if (topology == null) {\n      throw new Error(\n          `In local storage, the topology of model '${this.modelPath}' ` +\n          `is missing.`);\n    }\n    out.modelTopology = topology;\n\n    // Load weight specs.\n    const weightSpecs = JSON.parse(this.LS.getItem(this.keys.weightSpecs));\n    if (weightSpecs == null) {\n      throw new Error(\n          `In local storage, the weight specs of model '${this.modelPath}' ` +\n          `are missing.`);\n    }\n    out.weightSpecs = weightSpecs;\n\n    // Load meta-data fields.\n    const metadataString = this.LS.getItem(this.keys.modelMetadata);\n    if (metadataString != null) {\n      const metadata = JSON.parse(metadataString) as ModelMetadata;\n      out.format = metadata.format;\n      out.generatedBy = metadata.generatedBy;\n      out.convertedBy = metadata.convertedBy;\n      if (metadata.signature != null) {\n        out.signature = metadata.signature;\n      }\n      if (metadata.userDefinedMetadata != null) {\n        out.userDefinedMetadata = metadata.userDefinedMetadata;\n      }\n      if (metadata.modelInitializer != null) {\n        out.modelInitializer = metadata.modelInitializer;\n      }\n      if (metadata.initializerSignature != null) {\n        out.initializerSignature = metadata.initializerSignature;\n      }\n      if (metadata.trainingConfig != null) {\n        out.trainingConfig = metadata.trainingConfig;\n      }\n    }\n\n    // Load weight data.\n    const weightDataBase64 = this.LS.getItem(this.keys.weightData);\n    if (weightDataBase64 == null) {\n      throw new Error(\n          `In local storage, the binary weight values of model ` +\n          `'${this.modelPath}' are missing.`);\n    }\n    out.weightData = base64StringToArrayBuffer(weightDataBase64);\n\n    return out;\n  }\n}\n\nexport const localStorageRouter: IORouter = (url: string|string[]) => {\n  if (!env().getBool('IS_BROWSER')) {\n    return null;\n  } else {\n    if (!Array.isArray(url) && url.startsWith(BrowserLocalStorage.URL_SCHEME)) {\n      return browserLocalStorage(\n          url.slice(BrowserLocalStorage.URL_SCHEME.length));\n    } else {\n      return null;\n    }\n  }\n};\nIORouterRegistry.registerSaveRouter(localStorageRouter);\nIORouterRegistry.registerLoadRouter(localStorageRouter);\n\n/**\n * Factory function for local storage IOHandler.\n *\n * This `IOHandler` supports both `save` and `load`.\n *\n * For each model's saved artifacts, four items are saved to local storage.\n *   - `${PATH_SEPARATOR}/${modelPath}/info`: Contains meta-info about the\n *     model, such as date saved, type of the topology, size in bytes, etc.\n *   - `${PATH_SEPARATOR}/${modelPath}/topology`: Model topology. For Keras-\n *     style models, this is a stringized JSON.\n *   - `${PATH_SEPARATOR}/${modelPath}/weight_specs`: Weight specs of the\n *     model, can be used to decode the saved binary weight values (see\n *     item below).\n *   - `${PATH_SEPARATOR}/${modelPath}/weight_data`: Concatenated binary\n *     weight values, stored as a base64-encoded string.\n *\n * Saving may throw an `Error` if the total size of the artifacts exceed the\n * browser-specific quota.\n *\n * @param modelPath A unique identifier for the model to be saved. Must be a\n *   non-empty string.\n * @returns An instance of `IOHandler`, which can be used with, e.g.,\n *   `tf.Model.save`.\n */\nexport function browserLocalStorage(modelPath: string): IOHandler {\n  return new BrowserLocalStorage(modelPath);\n}\n\nexport class BrowserLocalStorageManager implements ModelStoreManager {\n  private readonly LS: Storage;\n\n  constructor() {\n    assert(\n        env().getBool('IS_BROWSER'),\n        () => 'Current environment is not a web browser');\n    assert(\n        typeof window === 'undefined' ||\n            typeof window.localStorage !== 'undefined',\n        () => 'Current browser does not appear to support localStorage');\n    this.LS = window.localStorage;\n  }\n\n  async listModels(): Promise<{[path: string]: ModelArtifactsInfo}> {\n    const out: {[path: string]: ModelArtifactsInfo} = {};\n    const prefix = PATH_PREFIX + PATH_SEPARATOR;\n    const suffix = PATH_SEPARATOR + INFO_SUFFIX;\n    for (let i = 0; i < this.LS.length; ++i) {\n      const key = this.LS.key(i);\n      if (key.startsWith(prefix) && key.endsWith(suffix)) {\n        const modelPath = getModelPathFromKey(key);\n        out[modelPath] = JSON.parse(this.LS.getItem(key)) as ModelArtifactsInfo;\n      }\n    }\n    return out;\n  }\n\n  async removeModel(path: string): Promise<ModelArtifactsInfo> {\n    path = maybeStripScheme(path);\n    const keys = getModelKeys(path);\n    if (this.LS.getItem(keys.info) == null) {\n      throw new Error(`Cannot find model at path '${path}'`);\n    }\n    const info = JSON.parse(this.LS.getItem(keys.info)) as ModelArtifactsInfo;\n    removeItems(keys);\n    return info;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * Classes and functions for model management across multiple storage mediums.\n *\n * Supported client actions:\n * - Listing models on all registered storage mediums.\n * - Remove model by URL from any registered storage mediums, by using URL\n *   string.\n * - Moving or copying model from one path to another in the same medium or from\n *   one medium to another, by using URL strings.\n */\n\nimport {assert} from '../util';\n\nimport {IORouterRegistry} from './router_registry';\nimport {ModelArtifactsInfo, ModelStoreManager} from './types';\n\nconst URL_SCHEME_SUFFIX = '://';\n\nexport class ModelStoreManagerRegistry {\n  // Singleton instance.\n  private static instance: ModelStoreManagerRegistry;\n\n  private managers: {[scheme: string]: ModelStoreManager};\n\n  private constructor() {\n    this.managers = {};\n  }\n\n  private static getInstance(): ModelStoreManagerRegistry {\n    if (ModelStoreManagerRegistry.instance == null) {\n      ModelStoreManagerRegistry.instance = new ModelStoreManagerRegistry();\n    }\n    return ModelStoreManagerRegistry.instance;\n  }\n\n  /**\n   * Register a save-handler router.\n   *\n   * @param saveRouter A function that maps a URL-like string onto an instance\n   * of `IOHandler` with the `save` method defined or `null`.\n   */\n  static registerManager(scheme: string, manager: ModelStoreManager) {\n    assert(scheme != null, () => 'scheme must not be undefined or null.');\n    if (scheme.endsWith(URL_SCHEME_SUFFIX)) {\n      scheme = scheme.slice(0, scheme.indexOf(URL_SCHEME_SUFFIX));\n    }\n    assert(scheme.length > 0, () => 'scheme must not be an empty string.');\n    const registry = ModelStoreManagerRegistry.getInstance();\n    assert(\n        registry.managers[scheme] == null,\n        () => `A model store manager is already registered for scheme '${\n            scheme}'.`);\n    registry.managers[scheme] = manager;\n  }\n\n  static getManager(scheme: string): ModelStoreManager {\n    const manager = ModelStoreManagerRegistry.getInstance().managers[scheme];\n    if (manager == null) {\n      throw new Error(`Cannot find model manager for scheme '${scheme}'`);\n    }\n    return manager;\n  }\n\n  static getSchemes(): string[] {\n    return Object.keys(ModelStoreManagerRegistry.getInstance().managers);\n  }\n}\n\n/**\n * Helper method for parsing a URL string into a scheme and a path.\n *\n * @param url E.g., 'localstorage://my-model'\n * @returns A dictionary with two fields: scheme and path.\n *   Scheme: e.g., 'localstorage' in the example above.\n *   Path: e.g., 'my-model' in the example above.\n */\nfunction parseURL(url: string): {scheme: string, path: string} {\n  if (url.indexOf(URL_SCHEME_SUFFIX) === -1) {\n    throw new Error(\n        `The url string provided does not contain a scheme. ` +\n        `Supported schemes are: ` +\n        `${ModelStoreManagerRegistry.getSchemes().join(',')}`);\n  }\n  return {\n    scheme: url.split(URL_SCHEME_SUFFIX)[0],\n    path: url.split(URL_SCHEME_SUFFIX)[1],\n  };\n}\n\nasync function cloneModelInternal(\n    sourceURL: string, destURL: string,\n    deleteSource = false): Promise<ModelArtifactsInfo> {\n  assert(\n      sourceURL !== destURL,\n      () => `Old path and new path are the same: '${sourceURL}'`);\n\n  const loadHandlers = IORouterRegistry.getLoadHandlers(sourceURL);\n  assert(\n      loadHandlers.length > 0,\n      () => `Copying failed because no load handler is found for source URL ${\n          sourceURL}.`);\n  assert(\n      loadHandlers.length < 2,\n      () => `Copying failed because more than one (${loadHandlers.length}) ` +\n          `load handlers for source URL ${sourceURL}.`);\n  const loadHandler = loadHandlers[0];\n\n  const saveHandlers = IORouterRegistry.getSaveHandlers(destURL);\n  assert(\n      saveHandlers.length > 0,\n      () => `Copying failed because no save handler is found for destination ` +\n          `URL ${destURL}.`);\n  assert(\n      saveHandlers.length < 2,\n      () => `Copying failed because more than one (${loadHandlers.length}) ` +\n          `save handlers for destination URL ${destURL}.`);\n  const saveHandler = saveHandlers[0];\n\n  const sourceScheme = parseURL(sourceURL).scheme;\n  const sourcePath = parseURL(sourceURL).path;\n  const sameMedium = sourceScheme === parseURL(sourceURL).scheme;\n\n  const modelArtifacts = await loadHandler.load();\n\n  // If moving within the same storage medium, remove the old model as soon as\n  // the loading is done. Without doing this, it is possible that the combined\n  // size of the two models will cause the cloning to fail.\n  if (deleteSource && sameMedium) {\n    await ModelStoreManagerRegistry.getManager(sourceScheme)\n        .removeModel(sourcePath);\n  }\n\n  const saveResult = await saveHandler.save(modelArtifacts);\n\n  // If moving between mediums, the deletion is done after the save succeeds.\n  // This guards against the case in which saving to the destination medium\n  // fails.\n  if (deleteSource && !sameMedium) {\n    await ModelStoreManagerRegistry.getManager(sourceScheme)\n        .removeModel(sourcePath);\n  }\n\n  return saveResult.modelArtifactsInfo;\n}\n\n/**\n * List all models stored in registered storage mediums.\n *\n * For a web browser environment, the registered mediums are Local Storage and\n * IndexedDB.\n *\n * ```js\n * // First create and save a model.\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * await model.save('localstorage://demo/management/model1');\n *\n * // Then list existing models.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Delete the model.\n * await tf.io.removeModel('localstorage://demo/management/model1');\n *\n * // List models again.\n * console.log(JSON.stringify(await tf.io.listModels()));\n * ```\n *\n * @returns A `Promise` of a dictionary mapping URLs of existing models to\n * their model artifacts info. URLs include medium-specific schemes, e.g.,\n *   'indexeddb://my/model/1'. Model artifacts info include type of the\n * model's topology, byte sizes of the topology, weights, etc.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Management',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nasync function listModels(): Promise<{[url: string]: ModelArtifactsInfo}> {\n  const schemes = ModelStoreManagerRegistry.getSchemes();\n  const out: {[url: string]: ModelArtifactsInfo} = {};\n  for (const scheme of schemes) {\n    const schemeOut =\n        await ModelStoreManagerRegistry.getManager(scheme).listModels();\n    for (const path in schemeOut) {\n      const url = scheme + URL_SCHEME_SUFFIX + path;\n      out[url] = schemeOut[path];\n    }\n  }\n  return out;\n}\n\n/**\n * Remove a model specified by URL from a registered storage medium.\n *\n * ```js\n * // First create and save a model.\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * await model.save('localstorage://demo/management/model1');\n *\n * // Then list existing models.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Delete the model.\n * await tf.io.removeModel('localstorage://demo/management/model1');\n *\n * // List models again.\n * console.log(JSON.stringify(await tf.io.listModels()));\n * ```\n *\n * @param url A URL to a stored model, with a scheme prefix, e.g.,\n *   'localstorage://my-model-1', 'indexeddb://my/model/2'.\n * @returns ModelArtifactsInfo of the deleted model (if and only if deletion\n *   is successful).\n * @throws Error if deletion fails, e.g., if no model exists at `path`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Management',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nasync function removeModel(url: string): Promise<ModelArtifactsInfo> {\n  const schemeAndPath = parseURL(url);\n  const manager = ModelStoreManagerRegistry.getManager(schemeAndPath.scheme);\n  return manager.removeModel(schemeAndPath.path);\n}\n\n/**\n * Copy a model from one URL to another.\n *\n * This function supports:\n *\n * 1. Copying within a storage medium, e.g.,\n *    `tf.io.copyModel('localstorage://model-1', 'localstorage://model-2')`\n * 2. Copying between two storage mediums, e.g.,\n *    `tf.io.copyModel('localstorage://model-1', 'indexeddb://model-1')`\n *\n * ```js\n * // First create and save a model.\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * await model.save('localstorage://demo/management/model1');\n *\n * // Then list existing models.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Copy the model, from Local Storage to IndexedDB.\n * await tf.io.copyModel(\n *     'localstorage://demo/management/model1',\n *     'indexeddb://demo/management/model1');\n *\n * // List models again.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Remove both models.\n * await tf.io.removeModel('localstorage://demo/management/model1');\n * await tf.io.removeModel('indexeddb://demo/management/model1');\n * ```\n *\n * @param sourceURL Source URL of copying.\n * @param destURL Destination URL of copying.\n * @returns ModelArtifactsInfo of the copied model (if and only if copying\n *   is successful).\n * @throws Error if copying fails, e.g., if no model exists at `sourceURL`, or\n *   if `oldPath` and `newPath` are identical.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Management',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nasync function copyModel(\n    sourceURL: string, destURL: string): Promise<ModelArtifactsInfo> {\n  const deleteSource = false;\n  return cloneModelInternal(sourceURL, destURL, deleteSource);\n}\n\n/**\n * Move a model from one URL to another.\n *\n * This function supports:\n *\n * 1. Moving within a storage medium, e.g.,\n *    `tf.io.moveModel('localstorage://model-1', 'localstorage://model-2')`\n * 2. Moving between two storage mediums, e.g.,\n *    `tf.io.moveModel('localstorage://model-1', 'indexeddb://model-1')`\n *\n * ```js\n * // First create and save a model.\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * await model.save('localstorage://demo/management/model1');\n *\n * // Then list existing models.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Move the model, from Local Storage to IndexedDB.\n * await tf.io.moveModel(\n *     'localstorage://demo/management/model1',\n *     'indexeddb://demo/management/model1');\n *\n * // List models again.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Remove the moved model.\n * await tf.io.removeModel('indexeddb://demo/management/model1');\n * ```\n *\n * @param sourceURL Source URL of moving.\n * @param destURL Destination URL of moving.\n * @returns ModelArtifactsInfo of the copied model (if and only if copying\n *   is successful).\n * @throws Error if moving fails, e.g., if no model exists at `sourceURL`, or\n *   if `oldPath` and `newPath` are identical.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Management',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nasync function moveModel(\n    sourceURL: string, destURL: string): Promise<ModelArtifactsInfo> {\n  const deleteSource = true;\n  return cloneModelInternal(sourceURL, destURL, deleteSource);\n}\n\nexport {moveModel, copyModel, removeModel, listModels};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport '../flags';\n\nimport {env} from '../environment';\nimport {BrowserIndexedDB, BrowserIndexedDBManager} from '../io/indexed_db';\nimport {BrowserLocalStorage, BrowserLocalStorageManager} from '../io/local_storage';\nimport {ModelStoreManagerRegistry} from '../io/model_management';\n\nimport {Platform} from './platform';\n\nexport class PlatformBrowser implements Platform {\n  // According to the spec, the built-in encoder can do only UTF-8 encoding.\n  // https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder/TextEncoder\n  private textEncoder: TextEncoder;\n\n  // For setTimeoutCustom\n  private readonly messageName = 'setTimeoutCustom';\n  private functionRefs: Function[] = [];\n  private handledMessageCount = 0;\n  private hasEventListener = false;\n\n  fetch(path: string, init?: RequestInit): Promise<Response> {\n    return fetch(path, init);\n  }\n\n  now(): number {\n    return performance.now();\n  }\n\n  encode(text: string, encoding: string): Uint8Array {\n    if (encoding !== 'utf-8' && encoding !== 'utf8') {\n      throw new Error(\n          `Browser's encoder only supports utf-8, but got ${encoding}`);\n    }\n    if (this.textEncoder == null) {\n      this.textEncoder = new TextEncoder();\n    }\n    return this.textEncoder.encode(text);\n  }\n  decode(bytes: Uint8Array, encoding: string): string {\n    return new TextDecoder(encoding).decode(bytes);\n  }\n\n  // If the setTimeout nesting level is greater than 5 and timeout is less\n  // than 4ms, timeout will be clamped to 4ms, which hurts the perf.\n  // Interleaving window.postMessage and setTimeout will trick the browser and\n  // avoid the clamp.\n  setTimeoutCustom(functionRef: Function, delay: number): void {\n    if (typeof window === 'undefined' ||\n        !env().getBool('USE_SETTIMEOUTCUSTOM')) {\n      setTimeout(functionRef, delay);\n      return;\n    }\n\n    this.functionRefs.push(functionRef);\n    setTimeout(() => {\n      window.postMessage(\n          {name: this.messageName, index: this.functionRefs.length - 1}, '*');\n    }, delay);\n\n    if (!this.hasEventListener) {\n      this.hasEventListener = true;\n      window.addEventListener('message', (event: MessageEvent) => {\n        if (event.source === window && event.data.name === this.messageName) {\n          event.stopPropagation();\n          const functionRef = this.functionRefs[event.data.index];\n          functionRef();\n          this.handledMessageCount++;\n          if (this.handledMessageCount === this.functionRefs.length) {\n            this.functionRefs = [];\n            this.handledMessageCount = 0;\n          }\n        }\n      }, true);\n    }\n  }\n\n  isTypedArray(a: unknown): a is Uint8Array | Float32Array | Int32Array\n    | Uint8ClampedArray {\n    return a instanceof Float32Array || a instanceof Int32Array ||\n      a instanceof Uint8Array || a instanceof Uint8ClampedArray;\n  }\n}\n\nif (env().get('IS_BROWSER')) {\n  env().setPlatform('browser', new PlatformBrowser());\n\n  // Register LocalStorage IOHandler\n  try {\n    ModelStoreManagerRegistry.registerManager(\n        BrowserLocalStorage.URL_SCHEME, new BrowserLocalStorageManager());\n  } catch (err) {\n  }\n\n  // Register IndexedDB IOHandler\n  try {\n    ModelStoreManagerRegistry.registerManager(\n        BrowserIndexedDB.URL_SCHEME, new BrowserIndexedDBManager());\n  } catch (err) {\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {env} from '../environment';\nimport {Platform} from './platform';\n\n// We are wrapping this within an object so it can be stubbed by Jasmine.\nexport const getNodeFetch = {\n  // tslint:disable-next-line:no-require-imports\n  importFetch: () => require('node-fetch')\n};\n\ntype FetchFn = (url: string, init?: RequestInit) => Promise<Response>;\nlet systemFetch: FetchFn;\n// These getters and setters are for testing so we don't export a mutable\n// variable.\nexport function resetSystemFetch() {\n  systemFetch = null;\n}\nexport function setSystemFetch(fetchFn: FetchFn) {\n  systemFetch = fetchFn;\n}\nexport function getSystemFetch(): FetchFn {\n  return systemFetch;\n}\n\nexport class PlatformNode implements Platform {\n  private textEncoder: TextEncoder;\n  // tslint:disable-next-line:no-any\n  util: any;\n\n  constructor() {\n    // tslint:disable-next-line:no-require-imports\n    this.util = require('util');\n    // According to the spec, the built-in encoder can do only UTF-8 encoding.\n    // https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder/TextEncoder\n    this.textEncoder = new this.util.TextEncoder();\n  }\n\n  fetch(path: string, requestInits?: RequestInit): Promise<Response> {\n    if (env().global.fetch != null) {\n      return env().global.fetch(path, requestInits);\n    }\n\n    if (systemFetch == null) {\n      systemFetch = getNodeFetch.importFetch();\n    }\n    return systemFetch(path, requestInits);\n  }\n\n  now(): number {\n    const time = process.hrtime();\n    return time[0] * 1000 + time[1] / 1000000;\n  }\n\n  encode(text: string, encoding: string): Uint8Array {\n    if (encoding !== 'utf-8' && encoding !== 'utf8') {\n      throw new Error(\n          `Node built-in encoder only supports utf-8, but got ${encoding}`);\n    }\n    return this.textEncoder.encode(text);\n  }\n  decode(bytes: Uint8Array, encoding: string): string {\n    if (bytes.length === 0) {\n      return '';\n    }\n    return new this.util.TextDecoder(encoding).decode(bytes);\n  }\n  isTypedArray(a: unknown): a is Float32Array | Int32Array | Uint8Array\n    | Uint8ClampedArray {\n    return this.util.types.isFloat32Array(a)\n      || this.util.types.isInt32Array(a)\n      || this.util.types.isUint8Array(a)\n      || this.util.types.isUint8ClampedArray(a);\n  }\n}\n\nif (env().get('IS_NODE') && !env().get('IS_BROWSER')) {\n  env().setPlatform('node', new PlatformNode());\n}\n","/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorBuffer} from '../tensor';\nimport {DataType, DataTypeMap, Rank, ShapeMap} from '../types';\nimport * as util from '../util';\n\n/**\n * Creates an empty `tf.TensorBuffer` with the specified `shape` and `dtype`.\n *\n * The values are stored in CPU as `TypedArray`. Fill the buffer using\n * `buffer.set()`, or by modifying directly `buffer.values`.\n *\n * When done, call `buffer.toTensor()` to get an immutable `tf.Tensor` with\n * those values.\n *\n * ```js\n * // Create a buffer and set values at particular indices.\n * const buffer = tf.buffer([2, 2]);\n * buffer.set(3, 0, 0);\n * buffer.set(5, 1, 0);\n *\n * // Convert the buffer back to a tensor.\n * buffer.toTensor().print();\n * ```\n *\n * @param shape An array of integers defining the output tensor shape.\n * @param dtype The dtype of the buffer. Defaults to 'float32'.\n * @param values The values of the buffer as `TypedArray`. Defaults to\n * zeros.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nexport function buffer<R extends Rank, D extends DataType = 'float32'>(\n    shape: ShapeMap[R], dtype: D = 'float32' as D,\n    values?: DataTypeMap[D]): TensorBuffer<R, D> {\n  dtype = dtype || 'float32' as D;\n  util.assertNonNegativeIntegerDimensions(shape);\n  return new TensorBuffer<R, D>(shape, dtype, values);\n}\n","/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {Cast, CastAttrs, CastInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {DataType, TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {op} from './operation';\n\n/**\n * Casts a `tf.Tensor` to a new dtype.\n *\n * ```js\n * const x = tf.tensor1d([1.5, 2.5, 3]);\n * tf.cast(x, 'int32').print();\n * ```\n * @param x The input tensor to be casted.\n * @param dtype The dtype to cast the input tensor to.\n *\n * @doc {heading: 'Tensors', subheading: 'Transformations'}\n */\nfunction cast_<T extends Tensor>(x: T|TensorLike, dtype: DataType): T {\n  const $x = convertToTensor(x, 'x', 'cast');\n\n  // Sanity checks.\n  if (!util.isValidDtype(dtype)) {\n    throw new Error(`Failed to cast to unknown dtype ${dtype}`);\n  }\n  if (dtype === 'string' && $x.dtype !== 'string' ||\n      dtype !== 'string' && $x.dtype === 'string') {\n    throw new Error('Only strings can be casted to strings');\n  }\n\n  const inputs: CastInputs = {x: $x};\n  const attrs: CastAttrs = {dtype};\n\n  return ENGINE.runKernel(\n      Cast, inputs as unknown as NamedTensorMap,\n      attrs as unknown as NamedAttrMap);\n}\n\nexport const cast = /* @__PURE__ */ op({cast_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Identity, IdentityInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Creates a new tensor with the same values and shape as the specified\n * tensor.\n *\n * ```js\n * const x = tf.tensor([1, 2]);\n *\n * x.clone().print();\n * ```\n *\n * @param x The tensor to clone.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nfunction clone_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'clone', 'string_or_numeric');\n  const inputs: IdentityInputs = {x: $x};\n\n  // Note this op is called tf.identity in python. Hence the kernel name used\n  // here.\n  return ENGINE.runKernel(Identity, inputs as unknown as NamedTensorMap);\n}\n\nexport const clone = /* @__PURE__ */ op({clone_});\n","/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../tensor';\n\n/**\n * Prints information about the `tf.Tensor` including its data.\n *\n * ```js\n * const verbose = true;\n * tf.tensor2d([1, 2, 3, 4], [2, 2]).print(verbose);\n * ```\n * @param x The tensor to be printed.\n * @param verbose Whether to print verbose information about the ` Tensor`,\n * including dtype and size.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nexport function print<T extends Tensor>(x: T, verbose = false): void {\n  console.log(x.toString(verbose));\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelBackend} from './backends/backend';\nimport {ENGINE, Engine, MemoryInfo, ProfileInfo, ScopeFn, TimingInfo} from './engine';\nimport {env} from './environment';\n\nimport {Platform} from './platforms/platform';\nimport {setDeprecationWarningFn, Tensor} from './tensor';\nimport {TensorContainer} from './tensor_types';\nimport {getTensorsInContainer} from './tensor_util';\n\n/**\n * Enables production mode which disables correctness checks in favor of\n * performance.\n *\n * @doc {heading: 'Environment'}\n */\nexport function enableProdMode(): void {\n  env().set('PROD', true);\n}\n\n/**\n * Enables debug mode which will log information about all executed kernels:\n * the elapsed time of the kernel execution, as well as the rank, shape, and\n * size of the output tensor.\n *\n * Debug mode will significantly slow down your application as it will\n * download the result of every operation to the CPU. This should not be used in\n * production. Debug mode does not affect the timing information of the kernel\n * execution as we do not measure download time in the kernel execution time.\n *\n * See also: `tf.profile`, `tf.memory`.\n *\n * @doc {heading: 'Environment'}\n */\nexport function enableDebugMode(): void {\n  env().set('DEBUG', true);\n}\n\n/** Globally disables deprecation warnings */\nexport function disableDeprecationWarnings(): void {\n  env().set('DEPRECATION_WARNINGS_ENABLED', false);\n  console.warn(`TensorFlow.js deprecation warnings have been disabled.`);\n}\n\n/** Warn users about deprecated functionality. */\nexport function deprecationWarn(msg: string) {\n  if (env().getBool('DEPRECATION_WARNINGS_ENABLED')) {\n    console.warn(\n        msg + ' You can disable deprecation warnings with ' +\n        'tf.disableDeprecationWarnings().');\n  }\n}\nsetDeprecationWarningFn(deprecationWarn);\n\n/**\n * Dispose all variables kept in backend engine.\n *\n * @doc {heading: 'Environment'}\n */\nexport function disposeVariables(): void {\n  ENGINE.disposeVariables();\n}\n\n/**\n * It returns the global engine that keeps track of all tensors and backends.\n *\n * @doc {heading: 'Environment'}\n */\nexport function engine(): Engine {\n  return ENGINE;\n}\n\n/**\n * Returns memory info at the current time in the program. The result is an\n * object with the following properties:\n *\n * - `numBytes`: Number of bytes allocated (undisposed) at this time.\n * - `numTensors`: Number of unique tensors allocated.\n * - `numDataBuffers`: Number of unique data buffers allocated\n *   (undisposed) at this time, which is ≤ the number of tensors\n *   (e.g. `a.reshape(newShape)` makes a new Tensor that shares the same\n *   data buffer with `a`).\n * - `unreliable`: True if the memory usage is unreliable. See `reasons` when\n *    `unreliable` is true.\n * - `reasons`: `string[]`, reasons why the memory is unreliable, present if\n *    `unreliable` is true.\n *\n * WebGL Properties:\n * - `numBytesInGPU`: Number of bytes allocated (undisposed) in the GPU only at\n *     this time.\n *\n * @doc {heading: 'Performance', subheading: 'Memory'}\n */\nexport function memory(): MemoryInfo {\n  return ENGINE.memory();\n}\n\n/**\n * Executes the provided function `f()` and returns a promise that resolves\n * with information about the function's memory use:\n * - `newBytes`: the number of new bytes allocated\n * - `newTensors`: the number of new tensors created\n * - `peakBytes`: the peak number of bytes allocated\n * - `kernels`: an array of objects for each kernel involved that reports\n * their input and output shapes, number of bytes used, and number of new\n * tensors created.\n * - `kernelNames`: an array of unique strings with just the names of the\n * kernels in the `kernels` array.\n *\n * ```js\n * const profile = await tf.profile(() => {\n *   const x = tf.tensor1d([1, 2, 3]);\n *   let x2 = x.square();\n *   x2.dispose();\n *   x2 = x.square();\n *   x2.dispose();\n *   return x;\n * });\n *\n * console.log(`newBytes: ${profile.newBytes}`);\n * console.log(`newTensors: ${profile.newTensors}`);\n * console.log(`byte usage over all kernels: ${profile.kernels.map(k =>\n * k.totalBytesSnapshot)}`);\n * ```\n *\n *\n * @doc {heading: 'Performance', subheading: 'Profile'}\n */\nexport function profile(f: () => (TensorContainer | Promise<TensorContainer>)):\n    Promise<ProfileInfo> {\n  return ENGINE.profile(f);\n}\n\n/**\n * Executes the provided function `fn` and after it is executed, cleans up all\n * intermediate tensors allocated by `fn` except those returned by `fn`.\n * `fn` must not return a Promise (async functions not allowed). The returned\n * result can be a complex object.\n *\n * Using this method helps avoid memory leaks. In general, wrap calls to\n * operations in `tf.tidy` for automatic memory cleanup.\n *\n * NOTE: Variables do *not* get cleaned up when inside a tidy(). If you want to\n * dispose variables, please use `tf.disposeVariables` or call dispose()\n * directly on variables.\n *\n * ```js\n * // y = 2 ^ 2 + 1\n * const y = tf.tidy(() => {\n *   // a, b, and one will be cleaned up when the tidy ends.\n *   const one = tf.scalar(1);\n *   const a = tf.scalar(2);\n *   const b = a.square();\n *\n *   console.log('numTensors (in tidy): ' + tf.memory().numTensors);\n *\n *   // The value returned inside the tidy function will return\n *   // through the tidy, in this case to the variable y.\n *   return b.add(one);\n * });\n *\n * console.log('numTensors (outside tidy): ' + tf.memory().numTensors);\n * y.print();\n * ```\n *\n * @param nameOrFn The name of the closure, or the function to execute.\n *     If a name is provided, the 2nd argument should be the function.\n *     If debug mode is on, the timing and the memory usage of the function\n *     will be tracked and displayed on the console using the provided name.\n * @param fn The function to execute.\n *\n * @doc {heading: 'Performance', subheading: 'Memory'}\n */\nexport function tidy<T extends TensorContainer>(\n    nameOrFn: string|ScopeFn<T>, fn?: ScopeFn<T>): T {\n  return ENGINE.tidy(nameOrFn, fn);\n}\n\n/**\n * Disposes any `tf.Tensor`s found within the provided object.\n *\n * @param container an object that may be a `tf.Tensor` or may directly\n *     contain `tf.Tensor`s, such as a `Tensor[]` or `{key: Tensor, ...}`. If\n *     the object is not a `tf.Tensor` or does not contain `Tensors`, nothing\n *     happens. In general it is safe to pass any object here, except that\n *     `Promise`s are not supported.\n *\n * @doc {heading: 'Performance', subheading: 'Memory'}\n */\nexport function dispose(container: TensorContainer) {\n  const tensors = getTensorsInContainer(container);\n  tensors.forEach(tensor => tensor.dispose());\n}\n\n/**\n * Keeps a `tf.Tensor` generated inside a `tf.tidy` from being disposed\n * automatically.\n *\n * ```js\n * let b;\n * const y = tf.tidy(() => {\n *   const one = tf.scalar(1);\n *   const a = tf.scalar(2);\n *\n *   // b will not be cleaned up by the tidy. a and one will be cleaned up\n *   // when the tidy ends.\n *   b = tf.keep(a.square());\n *\n *   console.log('numTensors (in tidy): ' + tf.memory().numTensors);\n *\n *   // The value returned inside the tidy function will return\n *   // through the tidy, in this case to the variable y.\n *   return b.add(one);\n * });\n *\n * console.log('numTensors (outside tidy): ' + tf.memory().numTensors);\n * console.log('y:');\n * y.print();\n * console.log('b:');\n * b.print();\n * ```\n *\n * @param result The tensor to keep from being disposed.\n *\n * @doc {heading: 'Performance', subheading: 'Memory'}\n */\nexport function keep<T extends Tensor>(result: T): T {\n  return ENGINE.keep(result);\n}\n\n/**\n * Executes `f()` and returns a promise that resolves with timing\n * information.\n *\n * The result is an object with the following properties:\n *\n * - `wallMs`: Wall execution time.\n * - `kernelMs`: Kernel execution time, ignoring data transfer. If using the\n * WebGL backend and the query timer extension is not available, this will\n * return an error object.\n * - On `WebGL` The following additional properties exist:\n *   - `uploadWaitMs`: CPU blocking time on texture uploads.\n *   - `downloadWaitMs`: CPU blocking time on texture downloads (readPixels).\n *\n * ```js\n * const x = tf.randomNormal([20, 20]);\n * const time = await tf.time(() => x.matMul(x));\n *\n * console.log(`kernelMs: ${time.kernelMs}, wallTimeMs: ${time.wallMs}`);\n * ```\n *\n * @param f The function to execute and time.\n *\n * @doc {heading: 'Performance', subheading: 'Timing'}\n */\nexport function time(f: () => void): Promise<TimingInfo> {\n  return ENGINE.time(f);\n}\n\n/**\n * Sets the backend (cpu, webgl, wasm, etc) responsible for creating tensors and\n * executing operations on those tensors. Returns a promise that resolves\n * to a boolean if the backend initialization was successful.\n *\n * Note this disposes the current backend, if any, as well as any tensors\n * associated with it. A new backend is initialized, even if it is of the\n * same type as the previous one.\n *\n * @param backendName The name of the backend. Currently supports\n *     `'webgl'|'cpu'` in the browser, `'tensorflow'` under node.js\n *     (requires tfjs-node), and `'wasm'` (requires tfjs-backend-wasm).\n *\n * @doc {heading: 'Backends'}\n */\nexport function setBackend(backendName: string): Promise<boolean> {\n  return ENGINE.setBackend(backendName);\n}\n\n/**\n * Returns a promise that resolves when the currently selected backend (or the\n * highest priority one) has initialized. Await this promise when you are using\n * a backend that has async initialization.\n *\n * @doc {heading: 'Backends'}\n */\nexport function ready(): Promise<void> {\n  return ENGINE.ready();\n}\n\n/**\n * Returns the current backend name (cpu, webgl, etc). The backend is\n * responsible for creating tensors and executing operations on those tensors.\n *\n * @doc {heading: 'Backends'}\n */\nexport function getBackend(): string {\n  return ENGINE.backendName;\n}\n\n/**\n * Removes a backend and the registered factory.\n *\n * @doc {heading: 'Backends'}\n */\nexport function removeBackend(name: string): void {\n  ENGINE.removeBackend(name);\n}\n\n/**\n * Finds the backend registered under the provided name. Returns null if the\n * name is not in the registry, or the registration hasn't finished yet.\n */\nexport function findBackend(name: string): KernelBackend {\n  return ENGINE.findBackend(name);\n}\n\n/**\n * Finds the backend factory registered under the provided name. Returns a\n * function that produces a new backend when called. Returns null if the name\n * is not in the registry.\n */\nexport function findBackendFactory(name: string): () =>\n    KernelBackend | Promise<KernelBackend> {\n  return ENGINE.findBackendFactory(name);\n}\n\n/**\n * Registers a global backend. The registration should happen when importing\n * a module file (e.g. when importing `backend_webgl.ts`), and is used for\n * modular builds (e.g. custom tfjs bundle with only webgl support).\n *\n * @param factory The backend factory function. When called, it should\n * return a backend instance, or a promise of an instance.\n * @param priority The priority of the backend (higher = more important).\n *     In case multiple backends are registered, the priority is used to find\n *     the best backend. Defaults to 1.\n * @return False if there is already a registered backend under this name, true\n *     if not.\n *\n * @doc {heading: 'Backends'}\n */\nexport function registerBackend(\n    name: string, factory: () => KernelBackend | Promise<KernelBackend>,\n    priority = 1): boolean {\n  return ENGINE.registerBackend(name, factory, priority);\n}\n\n/**\n * Gets the current backend. If no backends have been initialized, this will\n * attempt to initialize the best backend. Will throw an error if the highest\n * priority backend has async initialization, in which case you should call\n * 'await tf.ready()' before running other code.\n *\n * @doc {heading: 'Backends'}\n */\nexport function backend(): KernelBackend {\n  return ENGINE.backend;\n}\n\n/**\n * Sets the global platform.\n *\n * @param platformName The name of this platform.\n * @param platform A platform implementation.\n */\nexport function setPlatform(platformName: string, platform: Platform) {\n  env().setPlatform(platformName, platform);\n}\n","/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Required side effectful code for tfjs-core\n\n// Set up Engine and ENV\nimport {getOrMakeEngine} from './engine';\ngetOrMakeEngine();\n\n// Register backend-agnostic flags.\nimport './flags';\n// Register platforms\nimport './platforms/platform_browser';\nimport './platforms/platform_node';\n\n// Set up OpHandler\nimport {buffer} from './ops/buffer';\nimport {cast} from './ops/cast';\nimport {clone} from './ops/clone';\nimport {print} from './ops/print';\nimport {OpHandler, setOpHandler} from './tensor';\nconst opHandler: OpHandler = {\n  buffer,\n  cast,\n  clone,\n  print\n};\nsetOpHandler(opHandler);\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {Add, AddInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {makeTypesMatch} from '../tensor_util';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Adds two `tf.Tensor`s element-wise, A + B. Supports broadcasting.\n *\n *\n * ```js\n * const a = tf.tensor1d([1, 2, 3, 4]);\n * const b = tf.tensor1d([10, 20, 30, 40]);\n *\n * a.add(b).print();  // or tf.add(a, b)\n * ```\n *\n * ```js\n * // Broadcast add a with b.\n * const a = tf.scalar(5);\n * const b = tf.tensor1d([10, 20, 30, 40]);\n *\n * a.add(b).print();  // or tf.add(a, b)\n * ```\n * @param a The first `tf.Tensor` to add.\n * @param b The second `tf.Tensor` to add. Must have the same type as `a`.\n *\n * @doc {heading: 'Operations', subheading: 'Arithmetic'}\n */\nfunction add_<T extends Tensor>(a: Tensor|TensorLike, b: Tensor|TensorLike): T {\n  let $a = convertToTensor(a, 'a', 'add');\n  let $b = convertToTensor(b, 'b', 'add');\n  [$a, $b] = makeTypesMatch($a, $b);\n\n  const inputs: AddInputs = {a: $a, b: $b};\n\n  return ENGINE.runKernel(Add, inputs as unknown as NamedTensorMap);\n}\n\nexport const add = /* @__PURE__ */ op({add_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {FloorDiv, FloorDivInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {makeTypesMatch} from '../tensor_util';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Divides two `tf.Tensor`s element-wise, A / B. Supports broadcasting.\n * The result is rounded with floor function.\n *\n *\n * ```js\n * const a = tf.tensor1d([1, 4, 9, 16]);\n * const b = tf.tensor1d([1, 2, 3, 4]);\n *\n * a.floorDiv(b).print();  // or tf.div(a, b)\n * ```\n *\n * ```js\n * // Broadcast div a with b.\n * const a = tf.tensor1d([2, 4, 6, 8]);\n * const b = tf.scalar(2);\n *\n * a.floorDiv(b).print();  // or tf.floorDiv(a, b)\n * ```\n *\n * @param a The first tensor as the numerator.\n * @param b The second tensor as the denominator. Must have the same dtype as\n * `a`.\n *\n * @doc {heading: 'Operations', subheading: 'Arithmetic'}\n */\nfunction floorDiv_<T extends Tensor>(\n    a: Tensor|TensorLike, b: Tensor|TensorLike): T {\n  let $a = convertToTensor(a, 'a', 'floorDiv');\n  let $b = convertToTensor(b, 'b', 'floorDiv');\n  [$a, $b] = makeTypesMatch($a, $b);\n\n  const inputs: FloorDivInputs = {a: $a, b: $b};\n\n  return ENGINE.runKernel(FloorDiv, inputs as unknown as NamedTensorMap);\n}\n\nexport const floorDiv = /* @__PURE__ */ op({floorDiv_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {RealDiv, RealDivInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {makeTypesMatch} from '../tensor_util';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {floorDiv} from './floorDiv';\nimport {op} from './operation';\n\n/**\n * Divides two `tf.Tensor`s element-wise, A / B. Supports broadcasting.\n *\n * ```js\n * const a = tf.tensor1d([1, 4, 9, 16]);\n * const b = tf.tensor1d([1, 2, 3, 4]);\n *\n * a.div(b).print();  // or tf.div(a, b)\n * ```\n *\n * ```js\n * // Broadcast div a with b.\n * const a = tf.tensor1d([2, 4, 6, 8]);\n * const b = tf.scalar(2);\n *\n * a.div(b).print();  // or tf.div(a, b)\n * ```\n *\n * @param a The first tensor as the numerator.\n * @param b The second tensor as the denominator. Must have the same dtype as\n * `a`.\n *\n * @doc {heading: 'Operations', subheading: 'Arithmetic'}\n */\nfunction div_<T extends Tensor>(a: Tensor|TensorLike, b: Tensor|TensorLike): T {\n  let $a = convertToTensor(a, 'a', 'div');\n  let $b = convertToTensor(b, 'b', 'div');\n  [$a, $b] = makeTypesMatch($a, $b);\n\n  if ($a.dtype === 'int32' && $b.dtype === 'int32') {\n    return floorDiv($a, $b);\n  }\n\n  const inputs: RealDivInputs = {a: $a, b: $b};\n  const attrs = {};\n\n  // tslint:disable-next-line: no-unnecessary-type-assertion\n  return ENGINE.runKernel(RealDiv,\n                          inputs as unknown as NamedTensorMap, attrs) as T;\n}\n\nexport const div = /* @__PURE__ */ op({div_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Multiply, MultiplyInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {makeTypesMatch} from '../tensor_util';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Multiplies two `tf.Tensor`s element-wise, A * B. Supports broadcasting.\n *\n * We also expose `tf.mulStrict` which has the same signature as this op and\n * asserts that `a` and `b` are the same shape (does not broadcast).\n *\n * ```js\n * const a = tf.tensor1d([1, 2, 3, 4]);\n * const b = tf.tensor1d([2, 3, 4, 5]);\n *\n * a.mul(b).print();  // or tf.mul(a, b)\n * ```\n *\n * ```js\n * // Broadcast mul a with b.\n * const a = tf.tensor1d([1, 2, 3, 4]);\n * const b = tf.scalar(5);\n *\n * a.mul(b).print();  // or tf.mul(a, b)\n * ```\n * @param a The first tensor to multiply.\n * @param b The second tensor to multiply. Must have the same dtype as `a`.\n *\n * @doc {heading: 'Operations', subheading: 'Arithmetic'}\n */\nfunction mul_<T extends Tensor>(a: Tensor|TensorLike, b: Tensor|TensorLike): T {\n  let $a = convertToTensor(a, 'a', 'mul');\n  let $b = convertToTensor(b, 'b', 'mul');\n  [$a, $b] = makeTypesMatch($a, $b);\n\n  const inputs: MultiplyInputs = {a: $a, b: $b};\n\n  return ENGINE.runKernel(Multiply, inputs as unknown as NamedTensorMap);\n}\nexport const mul = /* @__PURE__ */ op({mul_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Sqrt, SqrtInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes square root of the input `tf.Tensor` element-wise: `y = sqrt(x)`\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 4, -1]);\n *\n * x.sqrt().print();  // or tf.sqrt(x)\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction sqrt_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'sqrt', 'float32');\n\n  const inputs: SqrtInputs = {x: $x};\n\n  return ENGINE.runKernel(Sqrt, inputs as unknown as NamedTensorMap);\n}\nexport const sqrt = /* @__PURE__ */ op({sqrt_});\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Tensor} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport {op} from './operation';\n\n/**\n * Computes square of `x` element-wise: `x ^ 2`\n *\n * ```js\n * const x = tf.tensor1d([1, 2, Math.sqrt(2), -1]);\n *\n * x.square().print();  // or tf.square(x)\n * ```\n * @param x The input Tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction square_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'square');\n  const attrs = {};\n  return ENGINE.runKernel('Square', {x: $x}, attrs);\n}\n\nexport const square = /* @__PURE__ */ op({square_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {ZerosLike, ZerosLikeInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Creates a `tf.Tensor` with all elements set to 0 with the same shape as the\n * given tensor.\n *\n * ```js\n * const x = tf.tensor([1, 2]);\n * tf.zerosLike(x).print();\n * ```\n *\n * @param x The tensor of required shape.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nfunction zerosLike_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'zerosLike');\n  const inputs: ZerosLikeInputs = {x: $x};\n  return ENGINE.runKernel(ZerosLike, inputs as unknown as NamedTensorMap);\n}\nexport const zerosLike = /* @__PURE__ */ op({zerosLike_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {CustomGradientFunc, ENGINE} from './engine';\nimport {Scalar, Tensor, Variable} from './tensor';\nimport {NamedTensorMap} from './tensor_types';\nimport {convertToTensor, convertToTensorArray} from './tensor_util_env';\nimport {TensorLike} from './types';\nimport * as util from './util';\n\n/**\n * Provided `f(x)`, returns another function `g(x, dy?)`, which gives the\n * gradient of `f(x)` with respect to `x`.\n *\n * If `dy` is provided, the gradient of `f(x).mul(dy).sum()` with respect to\n * `x` is computed instead. `f(x)` must take a single tensor `x` and return a\n * single tensor `y`. If `f()` takes multiple inputs, use `tf.grads` instead.\n *\n * ```js\n * // f(x) = x ^ 2\n * const f = x => x.square();\n * // f'(x) = 2x\n * const g = tf.grad(f);\n *\n * const x = tf.tensor1d([2, 3]);\n * g(x).print();\n * ```\n *\n * ```js\n * // f(x) = x ^ 3\n * const f = x => x.pow(tf.scalar(3, 'int32'));\n * // f'(x) = 3x ^ 2\n * const g = tf.grad(f);\n * // f''(x) = 6x\n * const gg = tf.grad(g);\n *\n * const x = tf.tensor1d([2, 3]);\n * gg(x).print();\n * ```\n *\n * @param f The function f(x), to compute gradient for.\n *\n * @doc {heading: 'Training', subheading: 'Gradients'}\n */\nfunction grad(f: (x: Tensor) => Tensor): (\n    x: TensorLike|Tensor, dy?: TensorLike|Tensor) => Tensor {\n  util.assert(\n      util.isFunction(f), () => 'The f passed in grad(f) must be a function');\n  return (x: TensorLike|Tensor, dy?: TensorLike|Tensor): Tensor => {\n    // x can be of any dtype, thus null as the last argument.\n    const $x = convertToTensor(x, 'x', 'tf.grad', 'string_or_numeric');\n    const $dy: Tensor =\n        (dy != null) ? convertToTensor(dy, 'dy', 'tf.grad') : null;\n    return ENGINE.tidy(() => {\n      const {value, grads} = ENGINE.gradients(() => f($x), [$x], $dy);\n      if ($dy != null) {\n        util.assertShapesMatch(\n            value.shape, $dy.shape,\n            'The shape of dy passed in grad(f)(x, dy) must match the shape ' +\n                'returned by f(x)');\n      }\n      checkGrads(grads);\n      return grads[0];\n    });\n  };\n}\n\n/**\n * Provided `f(x1, x2,...)`, returns another function `g([x1, x2,...], dy?)`,\n * which gives an array of gradients of `f()` with respect to each input\n * [`x1`,`x2`,...].\n *\n * If `dy` is passed when calling `g()`, the gradient of\n * `f(x1,...).mul(dy).sum()` with respect to each input is computed instead.\n * The provided `f` must take one or more tensors and return a single tensor\n * `y`. If `f()` takes a single input, we recommend using `tf.grad` instead.\n *\n * ```js\n * // f(a, b) = a * b\n * const f = (a, b) => a.mul(b);\n * // df / da = b, df / db = a\n * const g = tf.grads(f);\n *\n * const a = tf.tensor1d([2, 3]);\n * const b = tf.tensor1d([-2, -3]);\n * const [da, db] = g([a, b]);\n * console.log('da');\n * da.print();\n * console.log('db');\n * db.print();\n * ```\n *\n * @param f The function `f(x1, x2,...)` to compute gradients for.\n *\n * @doc {heading: 'Training', subheading: 'Gradients'}\n */\nfunction grads(f: (...args: Tensor[]) => Tensor): (\n    args: Array<Tensor|TensorLike>, dy?: Tensor|TensorLike) => Tensor[] {\n  util.assert(\n      util.isFunction(f), () => 'The f passed in grads(f) must be a function');\n  return (args: Array<Tensor|TensorLike>, dy?: Tensor|TensorLike): Tensor[] => {\n    util.assert(\n        Array.isArray(args),\n        () => 'The args passed in grads(f)(args) must be an array ' +\n            'of `Tensor`s or `TensorLike`s');\n    // args can be of any dtype, thus null as the last argument.\n    const $args =\n        convertToTensorArray(args, 'args', 'tf.grads', 'string_or_numeric');\n    const $dy: Tensor =\n        (dy != null) ? convertToTensor(dy, 'dy', 'tf.grads') : null;\n    return ENGINE.tidy(() => {\n      const {value, grads} = ENGINE.gradients(() => f(...$args), $args, $dy);\n      if ($dy != null) {\n        util.assertShapesMatch(\n            value.shape, $dy.shape,\n            'The shape of dy passed in grads(f)([x1,...], dy) must ' +\n                'match the shape returned by f([x1,...])');\n      }\n      checkGrads(grads);\n      return grads;\n    });\n  };\n}\n\n/**\n * Like `tf.grad`, but also returns the value of `f()`. Useful when `f()`\n * returns a metric you want to show.\n *\n * The result is a rich object with the following properties:\n * - grad: The gradient of `f(x)` w.r.t. `x` (result of `tf.grad`).\n * - value: The value returned by `f(x)`.\n *\n * ```js\n * // f(x) = x ^ 2\n * const f = x => x.square();\n * // f'(x) = 2x\n * const g = tf.valueAndGrad(f);\n *\n * const x = tf.tensor1d([2, 3]);\n * const {value, grad} = g(x);\n *\n * console.log('value');\n * value.print();\n * console.log('grad');\n * grad.print();\n * ```\n *\n * @doc {heading: 'Training', subheading: 'Gradients'}\n */\nfunction valueAndGrad<I extends Tensor, O extends Tensor>(f: (x: I) => O): (\n    x: I, dy?: O) => {\n  value: O;\n  grad: I;\n} {\n  util.assert(\n      util.isFunction(f),\n      () => 'The f passed in valueAndGrad(f) must be a function');\n  return (x: I, dy?: O) => {\n    util.assert(\n        x instanceof Tensor,\n        () => 'The x passed in valueAndGrad(f)(x) must be a tensor');\n    util.assert(\n        dy == null || dy instanceof Tensor,\n        () => 'The dy passed in valueAndGrad(f)(x, dy) must be a tensor');\n    const {grads, value} = ENGINE.gradients(() => f(x), [x], dy);\n    checkGrads(grads);\n    return {grad: grads[0] as I, value};\n  };\n}\n\n/**\n * Like `tf.grads`, but returns also the value of `f()`. Useful when `f()`\n * returns a metric you want to show.\n *\n * The result is a rich object with the following properties:\n * - grads: The gradients of `f()` w.r.t. each input (result of `tf.grads`).\n * - value: The value returned by `f(x)`.\n *\n * ```js\n * // f(a, b) = a * b\n * const f = (a, b) => a.mul(b);\n * // df/da = b, df/db = a\n * const g = tf.valueAndGrads(f);\n *\n * const a = tf.tensor1d([2, 3]);\n * const b = tf.tensor1d([-2, -3]);\n * const {value, grads} = g([a, b]);\n *\n * const [da, db] = grads;\n *\n * console.log('value');\n * value.print();\n *\n * console.log('da');\n * da.print();\n * console.log('db');\n * db.print();\n * ```\n *\n * @doc {heading: 'Training', subheading: 'Gradients'}\n */\nfunction valueAndGrads<O extends Tensor>(f: (...args: Tensor[]) => O): (\n    args: Tensor[], dy?: O) => {\n  grads: Tensor[];\n  value: O;\n} {\n  util.assert(\n      util.isFunction(f),\n      () => 'The f passed in valueAndGrads(f) must be a function');\n  return (args: Tensor[], dy?: O) => {\n    util.assert(\n        Array.isArray(args) && args.every(arg => arg instanceof Tensor),\n        () => 'The args passed in valueAndGrads(f)(args) must be array of ' +\n            'tensors');\n    util.assert(\n        dy == null || dy instanceof Tensor,\n        () => 'The dy passed in valueAndGrads(f)(args, dy) must be a tensor');\n    const res = ENGINE.gradients(() => f(...args), args, dy);\n    if (dy != null) {\n      util.assertShapesMatch(\n          res.value.shape, dy.shape,\n          'The shape of dy passed in valueAndGrads(f)([x1,...], dy) must ' +\n              'match the shape returned by f([x1,...])');\n    }\n    checkGrads(res.grads);\n    return res;\n  };\n}\n\n/**\n * Computes and returns the gradient of f(x) with respect to the list of\n * trainable variables provided by `varList`. If no list is provided, it\n * defaults to all trainable variables.\n *\n * ```js\n * const a = tf.variable(tf.tensor1d([3, 4]));\n * const b = tf.variable(tf.tensor1d([5, 6]));\n * const x = tf.tensor1d([1, 2]);\n *\n * // f(a, b) = a * x ^ 2 + b * x\n * const f = () => a.mul(x.square()).add(b.mul(x)).sum();\n * // df/da = x ^ 2, df/db = x\n * const {value, grads} = tf.variableGrads(f);\n *\n * Object.keys(grads).forEach(varName => grads[varName].print());\n * ```\n *\n * @param f The function to execute. f() should return a scalar.\n * @param varList The list of variables to compute the gradients with respect\n *     to. Defaults to all trainable variables.\n * @returns An object with the following keys and values:\n *   - `value`: The value of the function `f`.\n *   - `grads`: A map from the names of the variables to the gradients.\n *     If the `varList` argument is provided explicitly and contains a subset of\n *     non-trainable variables, this map in the return value will contain keys\n *     that map the names of the non-trainable variables to `null`.\n *\n * @doc {heading: 'Training', subheading: 'Gradients'}\n */\nfunction variableGrads(f: () => Scalar, varList?: Variable[]):\n    {value: Scalar, grads: NamedTensorMap} {\n  util.assert(\n      util.isFunction(f),\n      () => 'The f passed in variableGrads(f) must be a function');\n  util.assert(\n      varList == null ||\n          Array.isArray(varList) && varList.every(v => v instanceof Variable),\n      () =>\n          'The varList passed in variableGrads(f, varList) must be an array ' +\n          'of variables');\n\n  const specifiedVarList = varList != null;\n  if (!specifiedVarList) {\n    // Get all of the trainable variables.\n    varList = [];\n    for (const varName in ENGINE.registeredVariables) {\n      varList.push(ENGINE.registeredVariables[varName]);\n    }\n  }\n\n  const specifiedNonTrainable: Variable[] =\n      specifiedVarList ? varList.filter(variable => !variable.trainable) : null;\n\n  // Prune non-trainable variables.\n  const originalVarCount = varList.length;\n  varList = varList.filter(variable => variable.trainable);\n  util.assert(\n      varList.length > 0,\n      () => `variableGrads() expects at least one of the input variables to ` +\n          `be trainable, but none of the ${originalVarCount} variables is ` +\n          `trainable.`);\n\n  const allowNoGradients = true;\n  const {value, grads} = ENGINE.gradients(f, varList, null, allowNoGradients);\n\n  util.assert(\n      grads.some(g => g != null),\n      () => 'Cannot find a connection between any variable and the result of ' +\n          'the loss function y=f(x). Please make sure the operations that ' +\n          'use variables are inside the function f passed to minimize().');\n  util.assert(\n      value.rank === 0,\n      () => `The f passed in variableGrads(f) must return a scalar, but it ` +\n          `returned a rank-${value.rank} tensor`);\n\n  const namedGrads: NamedTensorMap = {};\n  varList.forEach((v, i) => {\n    if (grads[i] != null) {\n      namedGrads[v.name] = grads[i];\n    }\n  });\n  if (specifiedNonTrainable != null) {\n    // If varList is explicitly provided and contains non-trainable values,\n    // add them to the returned gradients with `null` values.\n    specifiedNonTrainable.forEach(v => namedGrads[v.name] = null);\n  }\n  return {value, grads: namedGrads};\n}\n\n/**\n * Overrides the gradient computation of a function `f`.\n *\n * Takes a function\n * `f(...inputs, save) => {value: Tensor, gradFunc: (dy, saved) => Tensor[]}`\n * and returns another function `g(...inputs)` which takes the same inputs as\n * `f`. When called, `g` returns `f().value`. In backward mode, custom gradients\n * with respect to each input of `f` are computed using `f().gradFunc`.\n *\n * The `save` function passed to `f` should be used for saving tensors needed\n * in the gradient. And the `saved` passed to the `gradFunc` is a\n * `NamedTensorMap`, which contains those saved tensors.\n *\n * ```js\n * const customOp = tf.customGrad((x, save) => {\n *   // Save x to make sure it's available later for the gradient.\n *   save([x]);\n *   // Override gradient of our custom x ^ 2 op to be dy * abs(x);\n *   return {\n *     value: x.square(),\n *     // Note `saved.x` which points to the `x` we saved earlier.\n *     gradFunc: (dy, saved) => [dy.mul(saved[0].abs())]\n *   };\n * });\n *\n * const x = tf.tensor1d([-1, -2, 3]);\n * const dx = tf.grad(x => customOp(x));\n *\n * console.log(`f(x):`);\n * customOp(x).print();\n * console.log(`f'(x):`);\n * dx(x).print();\n * ```\n *\n * @param f The function to evaluate in forward mode, which should return\n *     `{value: Tensor, gradFunc: (dy, saved) => Tensor[]}`, where `gradFunc`\n *     returns the custom gradients of `f` with respect to its inputs.\n *\n * @doc {heading: 'Training', subheading: 'Gradients'}\n */\nfunction customGrad<T extends Tensor>(f: CustomGradientFunc<T>):\n    (...args: Tensor[]) => T {\n  return ENGINE.customGrad(f);\n}\n\nfunction checkGrads(grads: Tensor[]) {\n  const numNullGradients = grads.filter(g => g == null).length;\n  if (numNullGradients > 0) {\n    throw new Error(\n        `Cannot compute gradient of y=f(x) with respect to x. Make sure that\n    the f you passed encloses all operations that lead from x to y.`);\n  }\n}\n\nexport {\n  customGrad,\n  variableGrads,\n  valueAndGrad,\n  valueAndGrads,\n  grad,\n  grads,\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Scalar} from '../tensor';\nimport {DataType} from '../types';\nimport {isTypedArray} from '../util';\nimport {makeTensor} from './tensor_ops_util';\n\n/**\n * Creates rank-0 `tf.Tensor` (scalar) with the provided value and dtype.\n *\n * The same functionality can be achieved with `tf.tensor`, but in general\n * we recommend using `tf.scalar` as it makes the code more readable.\n *\n * ```js\n * tf.scalar(3.14).print();\n * ```\n *\n * @param value The value of the scalar.\n * @param dtype The data type.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nexport function scalar(\n    value: number|boolean|string|Uint8Array, dtype?: DataType): Scalar {\n  if (((isTypedArray(value) && dtype !== 'string') || Array.isArray(value)) &&\n      dtype !== 'complex64') {\n    throw new Error(\n        'Error creating a new Scalar: value must be a primitive ' +\n        '(number|boolean|string)');\n  }\n  if (dtype === 'string' && isTypedArray(value) &&\n      !(value instanceof Uint8Array)) {\n    throw new Error(\n        'When making a scalar from encoded string, ' +\n        'the value must be `Uint8Array`.');\n  }\n  const shape: number[] = [];\n  const inferredShape: number[] = [];\n  return makeTensor(value, shape, inferredShape, dtype) as Scalar;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {assert} from './util';\n\n/**\n * Types to support JSON-esque data structures internally.\n *\n * Internally ConfigDict's use camelCase keys and values where the\n * values are class names to be instantiated.  On the python side, these\n * will be snake_case.  Internally we allow Enums into the values for better\n * type safety, but these need to be converted to raw primitives (usually\n * strings) for round-tripping with python.\n *\n * toConfig returns the TS-friendly representation. model.toJSON() returns\n * the pythonic version as that's the portable format.  If you need to\n * python-ify a non-model level toConfig output, you'll need to use a\n * convertTsToPythonic from serialization_utils in -Layers.\n *\n */\nexport declare type ConfigDictValue =\n    boolean | number | string | null | ConfigDictArray | ConfigDict;\nexport declare interface ConfigDict {\n  [key: string]: ConfigDictValue;\n}\nexport declare interface ConfigDictArray extends Array<ConfigDictValue> {}\n\n/**\n * Type to represent the class-type of Serializable objects.\n *\n * Ie the class prototype with access to the constructor and any\n * static members/methods. Instance methods are not listed here.\n *\n * Source for this idea: https://stackoverflow.com/a/43607255\n */\nexport declare type SerializableConstructor<T extends Serializable> = {\n  // tslint:disable-next-line:no-any\n  new (...args: any[]): T; className: string; fromConfig: FromConfigMethod<T>;\n};\nexport declare type FromConfigMethod<T extends Serializable> =\n    (cls: SerializableConstructor<T>, config: ConfigDict) => T;\n\n/**\n * Serializable defines the serialization contract.\n *\n * TFJS requires serializable classes to return their className when asked\n * to avoid issues with minification.\n */\nexport abstract class Serializable {\n  /**\n   * Return the class name for this class to use in serialization contexts.\n   *\n   * Generally speaking this will be the same thing that constructor.name\n   * would have returned.  However, the class name needs to be robust\n   * against minification for serialization/deserialization to work properly.\n   *\n   * There's also places such as initializers.VarianceScaling, where\n   * implementation details between different languages led to different\n   * class hierarchies and a non-leaf node is used for serialization purposes.\n   */\n  getClassName(): string {\n    return (this.constructor as SerializableConstructor<Serializable>)\n        .className;\n  }\n\n  /**\n   * Return all the non-weight state needed to serialize this object.\n   */\n  abstract getConfig(): ConfigDict;\n\n  /**\n   * Creates an instance of T from a ConfigDict.\n   *\n   * This works for most descendants of serializable.  A few need to\n   * provide special handling.\n   * @param cls A Constructor for the class to instantiate.\n   * @param config The Configuration for the object.\n   */\n  /** @nocollapse */\n  static fromConfig<T extends Serializable>(\n      cls: SerializableConstructor<T>, config: ConfigDict): T {\n    return new cls(config);\n  }\n}\n\n/**\n * Maps string keys to class constructors.\n *\n * Used during (de)serialization from the cross-language JSON format, which\n * requires the class name in the serialization format matches the class\n * names as used in Python, should it exist.\n */\nexport class SerializationMap {\n  private static instance: SerializationMap;\n  classNameMap: {\n    [className: string]:\n        [SerializableConstructor<Serializable>, FromConfigMethod<Serializable>]\n  };\n\n  private constructor() {\n    this.classNameMap = {};\n  }\n\n  /**\n   * Returns the singleton instance of the map.\n   */\n  static getMap(): SerializationMap {\n    if (SerializationMap.instance == null) {\n      SerializationMap.instance = new SerializationMap();\n    }\n    return SerializationMap.instance;\n  }\n\n  /**\n   * Registers the class as serializable.\n   */\n  static register<T extends Serializable>(cls: SerializableConstructor<T>) {\n    SerializationMap.getMap().classNameMap[cls.className] =\n        [cls, cls.fromConfig];\n  }\n}\n\n/**\n * Register a class with the serialization map of TensorFlow.js.\n *\n * This is often used for registering custom Layers, so they can be\n * serialized and deserialized.\n *\n * Example:\n *\n * ```js\n * class MyCustomLayer extends tf.layers.Layer {\n *   static className = 'MyCustomLayer';\n *\n *   constructor(config) {\n *     super(config);\n *   }\n * }\n * tf.serialization.registerClass(MyCustomLayer);\n * ```\n *\n * @param cls The class to be registered. It must have a public static member\n *   called `className` defined and the value must be a non-empty string.\n *\n * @doc {heading: 'Models', subheading: 'Serialization', ignoreCI: true}\n */\nexport function registerClass<T extends Serializable>(\n    cls: SerializableConstructor<T>) {\n  assert(\n      cls.className != null,\n      () => `Class being registered does not have the static className ` +\n          `property defined.`);\n  assert(\n      typeof cls.className === 'string',\n      () => `className is required to be a string, but got type ` +\n          typeof cls.className);\n  assert(\n      cls.className.length > 0,\n      () => `Class being registered has an empty-string as its className, ` +\n          `which is disallowed.`);\n\n  SerializationMap.register(cls);\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {dispose} from '../globals';\nimport {variableGrads} from '../gradients';\nimport {scalar} from '../ops/ops';\nimport {Serializable} from '../serialization';\nimport {Scalar, Variable} from '../tensor';\nimport {NamedTensor, NamedTensorMap} from '../tensor_types';\n\n/**\n * A variable that belongs to an optimizer.\n *\n * The `originalName` field is required for keeping track of the canonical\n * name of the variable, which is usually the name of the model weight that\n * the variable is related to plus a suffix, e.g., 'dense1/kernel/momentum'.\n * The name of the `Variable` object itself cannot be used directly due to\n * possible deduplication: Every `Variable` must have a unique name but more\n * than one optimizer objects of the same type may be created for the same model\n * or the same `Variable`.\n */\nexport interface OptimizerVariable {\n  originalName: string;\n  variable: Variable;\n}\n\n/** @doc {heading: 'Training', subheading: 'Classes', namespace: 'train'} */\nexport abstract class Optimizer extends Serializable {\n  protected iterations_: number;\n\n  /**\n   * Executes `f()` and minimizes the scalar output of `f()` by computing\n   * gradients of y with respect to the list of trainable variables provided by\n   * `varList`. If no list is provided, it defaults to all trainable variables.\n   *\n   * @param f The function to execute and whose output to minimize.\n   * @param returnCost Whether to return the scalar cost value produced by\n   * executing `f()`.\n   * @param varList An optional list of variables to update. If specified, only\n   * the trainable variables in varList will be updated by minimize. Defaults to\n   * all trainable variables.\n   *\n   * @doc {heading: 'Training', subheading: 'Optimizers'}\n   */\n  minimize(f: () => Scalar, returnCost = false, varList?: Variable[]): Scalar\n      |null {\n    const {value, grads} = this.computeGradients(f, varList);\n\n    if (varList != null) {\n      const gradArray: NamedTensor[] =\n          varList.map(v => ({name: v.name, tensor: grads[v.name]}));\n      this.applyGradients(gradArray);\n    } else {\n      this.applyGradients(grads);\n    }\n\n    // Dispose gradients.\n    dispose(grads);\n\n    if (returnCost) {\n      return value;\n    } else {\n      value.dispose();\n      return null;\n    }\n  }\n\n  /**\n   * The number of iterations that this optimizer instance has been invoked for.\n   */\n  get iterations(): number {\n    if (this.iterations_ == null) {\n      this.iterations_ = 0;\n    }\n    return this.iterations_;\n  }\n\n  protected incrementIterations() {\n    this.iterations_ = this.iterations + 1;\n  }\n\n  /**\n   * Executes f() and computes the gradient of the scalar output of f() with\n   * respect to the list of trainable variables provided by `varList`. If no\n   * list is provided, it defaults to all trainable variables.\n   *\n   * @param f The function to execute and whose output to use for computing\n   * gradients with respect to variables.\n   * @param varList An optional list of variables to compute gradients with\n   * respect to. If specified, only the trainable variables in varList will have\n   * gradients computed with respect to. Defaults to all trainable variables.\n   *\n   * @doc {heading: 'Training', subheading: 'Optimizers'}\n   */\n  computeGradients(f: () => Scalar, varList?: Variable[]):\n      {value: Scalar, grads: NamedTensorMap} {\n    return variableGrads(f, varList);\n  }\n\n  /**\n   * Updates variables by using the computed gradients.\n   *\n   * @param variableGradients A mapping of variable name to its gradient value.\n   *\n   * @doc {heading: 'Training', subheading: 'Optimizers'}\n   */\n  abstract applyGradients(variableGradients: NamedTensorMap|\n                          NamedTensor[]): void;\n\n  /**\n   * Dispose the variables (if any) owned by this optimizer instance.\n   */\n  dispose(): void {\n    if (this.iterations_ != null) {\n      dispose(this.iterations_);\n    }\n  }\n\n  async saveIterations(): Promise<NamedTensor> {\n    if (this.iterations_ == null) {\n      this.iterations_ = 0;\n    }\n    return {\n      name: 'iter',  // Named for Python compatibility.\n      // TODO(cais): Use 'int64' type when available.\n      tensor: scalar(this.iterations_, 'int32')\n    };\n  }\n\n  async getWeights(): Promise<NamedTensor[]> {\n    throw new Error('getWeights() is not implemented for this optimizer yet.');\n  }\n\n  async setWeights(weightValues: NamedTensor[]): Promise<void> {\n    throw new Error(\n        `setWeights() is not implemented for this optimizer class ` +\n        `${this.getClassName()}`);\n  }\n\n  /**\n   * Extract the first element of the weight values and set it\n   * as the iterations counter variable of this instance of optimizer.\n   *\n   * @param weightValues\n   * @returns Weight values with the first element consumed and excluded.\n   */\n  protected async extractIterations(weightValues: NamedTensor[]):\n      Promise<NamedTensor[]> {\n    this.iterations_ = (await weightValues[0].tensor.data())[0];\n    return weightValues.slice(1);\n  }\n}\n\nObject.defineProperty(Optimizer, Symbol.hasInstance, {\n  value: (instance: Optimizer) => {\n    return instance.minimize != null && instance.computeGradients != null &&\n        instance.applyGradients != null;\n  }\n});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {dispose, tidy} from '../globals';\nimport {add} from '../ops/add';\nimport {div} from '../ops/div';\nimport {mul} from '../ops/mul';\nimport {sqrt} from '../ops/ops';\nimport {square} from '../ops/square';\nimport {zerosLike} from '../ops/zeros_like';\nimport {ConfigDict, Serializable, SerializableConstructor} from '../serialization';\nimport {NamedTensor, NamedVariableMap} from '../tensor_types';\n\nimport {Optimizer, OptimizerVariable} from './optimizer';\n\n/** @doclink Optimizer */\nexport class AdadeltaOptimizer extends Optimizer {\n  /** @nocollapse */\n  static get className() {\n    // Name matters for Python compatibility.\n    // This is a getter instead of a property because when it's a property, it\n    // prevents the entire class from being tree-shaken.\n    return 'Adadelta';\n  }\n  private accumulatedGrads: OptimizerVariable[] = [];\n  private accumulatedUpdates: OptimizerVariable[] = [];\n\n  constructor(\n      protected learningRate: number, protected rho: number,\n      protected epsilon: number = null) {\n    super();\n\n    if (epsilon == null) {\n      this.epsilon = ENGINE.backend.epsilon();\n    }\n  }\n\n  applyGradients(variableGradients: NamedVariableMap|NamedTensor[]) {\n    const variableNames = Array.isArray(variableGradients) ?\n        variableGradients.map(item => item.name) :\n        Object.keys(variableGradients);\n\n    variableNames.forEach((name, i) => {\n      const value = ENGINE.registeredVariables[name];\n      const trainable = false;\n      if (this.accumulatedGrads[i] == null) {\n        this.accumulatedGrads[i] = {\n          originalName: `${name}/accum_grad`,\n          variable: tidy(() => zerosLike(value).variable(trainable))\n        };\n      }\n      if (this.accumulatedUpdates[i] == null) {\n        this.accumulatedUpdates[i] = {\n          originalName: `${name}/accum_var`,\n          variable: tidy(() => zerosLike(value).variable(trainable))\n        };\n      }\n\n      const gradient = Array.isArray(variableGradients) ?\n          variableGradients[i].tensor :\n          variableGradients[name];\n      if (gradient == null) {\n        return;\n      }\n\n      const accumulatedGrad = this.accumulatedGrads[i].variable;\n      const accumulatedUpdate = this.accumulatedUpdates[i].variable;\n\n      tidy(() => {\n        const newAccumulatedGrad =\n            add(mul(accumulatedGrad, this.rho),\n                mul(square(gradient), 1 - this.rho));\n\n        const updates =\n            mul(div(sqrt(add(accumulatedUpdate, this.epsilon)),\n                    sqrt(add(accumulatedGrad, this.epsilon))),\n                gradient);\n\n        const newAccumulatedUpdate =\n            add(mul(accumulatedUpdate, this.rho),\n                mul(square(updates), 1 - this.rho));\n\n        accumulatedGrad.assign(newAccumulatedGrad);\n        accumulatedUpdate.assign(newAccumulatedUpdate);\n\n        const newValue = add(mul(updates, -this.learningRate), value);\n        value.assign(newValue);\n      });\n    });\n    this.incrementIterations();\n  }\n\n  override dispose(): void {\n    if (this.accumulatedUpdates != null) {\n      dispose(this.accumulatedGrads.map(v => v.variable));\n      dispose(this.accumulatedUpdates.map(v => v.variable));\n    }\n  }\n\n  override async getWeights(): Promise<NamedTensor[]> {\n    // Order matters for Python compatibility.\n    const variables: OptimizerVariable[] =\n        [...this.accumulatedGrads, ...this.accumulatedUpdates];\n    return [await this.saveIterations()].concat(\n        variables.map(v => ({name: v.originalName, tensor: v.variable})));\n  }\n\n  override async setWeights(weightValues: NamedTensor[]): Promise<void> {\n    weightValues = await this.extractIterations(weightValues);\n    const variableCount = weightValues.length / 2;\n    const trainable = false;\n    this.accumulatedGrads =\n        weightValues.slice(0, variableCount).map(v => ({\n                                                   originalName: v.name,\n                                                   variable: v.tensor.variable(\n                                                       trainable)\n                                                 }));\n    this.accumulatedUpdates =\n        weightValues.slice(variableCount, variableCount * 2)\n            .map(v => ({\n                   originalName: v.name,\n                   variable: v.tensor.variable(trainable)\n                 }));\n  }\n\n  getConfig(): ConfigDict {\n    return {\n      'learningRate': this.learningRate,\n      'rho': this.rho,\n      'epsilon': this.epsilon\n    };\n  }\n\n  /** @nocollapse */\n  static override fromConfig<T extends Serializable>(\n      cls: SerializableConstructor<T>, config: ConfigDict): T {\n    return new cls(config['learningRate'], config['rho'], config['epsilon']);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Fill, FillAttrs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {DataType, Rank, ShapeMap} from '../types';\nimport {assertNonNegativeIntegerDimensions} from '../util_base';\n\n/**\n * Creates a `tf.Tensor` filled with a scalar value.\n *\n * ```js\n * tf.fill([2, 2], 4).print();\n * ```\n *\n * @param shape An array of integers defining the output tensor shape.\n * @param value The scalar value to fill the tensor with.\n * @param dtype The type of an element in the resulting tensor. Defaults to\n * 'float'.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nfunction fill<R extends Rank>(\n    shape: ShapeMap[R], value: number|string, dtype?: DataType): Tensor<R> {\n  assertNonNegativeIntegerDimensions(shape);\n\n  const attrs: FillAttrs = {shape, value, dtype};\n\n  return ENGINE.runKernel(Fill, {}, attrs as unknown as NamedAttrMap);\n}\n\nexport {fill};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {dispose, tidy} from '../globals';\nimport {add} from '../ops/add';\nimport {div} from '../ops/div';\nimport {fill} from '../ops/fill';\nimport {mul} from '../ops/mul';\nimport {sqrt} from '../ops/sqrt';\nimport {square} from '../ops/square';\nimport {ConfigDict, Serializable, SerializableConstructor} from '../serialization';\nimport {NamedTensor, NamedVariableMap} from '../tensor_types';\n\nimport {Optimizer, OptimizerVariable} from './optimizer';\n\n/** @doclink Optimizer */\nexport class AdagradOptimizer extends Optimizer {\n  /** @nocollapse */\n  static get className() {\n    // Name matters for Python compatibility.\n    // This is a getter instead of a property because when it's a property, it\n    // prevents the entire class from being tree-shaken.\n    return 'Adagrad';\n  }\n\n  private accumulatedGrads: OptimizerVariable[] = [];\n\n  constructor(\n      protected learningRate: number, private initialAccumulatorValue = 0.1) {\n    super();\n  }\n\n  applyGradients(variableGradients: NamedVariableMap|NamedTensor[]) {\n    const variableNames = Array.isArray(variableGradients) ?\n        variableGradients.map(item => item.name) :\n        Object.keys(variableGradients);\n\n    variableNames.forEach((name, i) => {\n      const value = ENGINE.registeredVariables[name];\n      if (this.accumulatedGrads[i] == null) {\n        const trainable = false;\n        this.accumulatedGrads[i] = {\n          originalName: `${name}/accumulator`,\n          variable: tidy(\n              () => fill(value.shape, this.initialAccumulatorValue)\n                        .variable(trainable))\n        };\n      }\n\n      const gradient = Array.isArray(variableGradients) ?\n          variableGradients[i].tensor :\n          variableGradients[name];\n      if (gradient == null) {\n        return;\n      }\n\n      const accumulatedGrad = this.accumulatedGrads[i].variable;\n\n      tidy(() => {\n        const newAccumulatedGrad = add(accumulatedGrad, square(gradient));\n        accumulatedGrad.assign(newAccumulatedGrad);\n\n        const newValue = add(\n            mul(div(gradient,\n                    sqrt(add(newAccumulatedGrad, ENGINE.backend.epsilon()))),\n                -this.learningRate),\n            value);\n        value.assign(newValue);\n      });\n    });\n    this.incrementIterations();\n  }\n\n  override dispose(): void {\n    if (this.accumulatedGrads != null) {\n      dispose(this.accumulatedGrads.map(v => v.variable));\n    }\n  }\n\n  override async getWeights(): Promise<NamedTensor[]> {\n    // Order matters for Python compatibility.\n    return [await this.saveIterations()].concat(this.accumulatedGrads.map(\n        v => ({name: v.originalName, tensor: v.variable})));\n  }\n\n  override async setWeights(weightValues: NamedTensor[]): Promise<void> {\n    weightValues = await this.extractIterations(weightValues);\n    const trainable = false;\n    this.accumulatedGrads = weightValues.map(\n        v => ({originalName: v.name, variable: v.tensor.variable(trainable)}));\n  }\n\n  getConfig(): ConfigDict {\n    return {\n      'learningRate': this.learningRate,\n      'initialAccumulatorValue': this.initialAccumulatorValue,\n    };\n  }\n\n  /** @nocollapse */\n  static override fromConfig<T extends Serializable>(\n      cls: SerializableConstructor<T>, config: ConfigDict): T {\n    return new cls(config['learningRate'], config['initialAccumulatorValue']);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {Pow, PowInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {makeTypesMatch} from '../tensor_util';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes the power of one `tf.Tensor` to another. Supports broadcasting.\n *\n * Given a `tf.Tensor` x and a `tf.Tensor` y, this operation computes x^y for\n * corresponding elements in x and y. The result's dtype will be the upcasted\n * type of the `base` and `exp` dtypes.\n *\n * ```js\n * const a = tf.tensor([[2, 3], [4, 5]])\n * const b = tf.tensor([[1, 2], [3, 0]]).toInt();\n *\n * a.pow(b).print();  // or tf.pow(a, b)\n * ```\n *\n * ```js\n * const a = tf.tensor([[1, 2], [3, 4]])\n * const b = tf.tensor(2).toInt();\n *\n * a.pow(b).print();  // or tf.pow(a, b)\n * ```\n * We also expose `powStrict` which has the same signature as this op and\n * asserts that `base` and `exp` are the same shape (does not broadcast).\n *\n * @param base The base `tf.Tensor` to pow element-wise.\n * @param exp The exponent `tf.Tensor` to pow element-wise.\n *\n * @doc {heading: 'Operations', subheading: 'Arithmetic'}\n */\nfunction pow_<T extends Tensor>(\n    base: Tensor|TensorLike, exp: Tensor|TensorLike): T {\n  let $base = convertToTensor(base, 'base', 'pow');\n  let $exp = convertToTensor(exp, 'exp', 'pow');\n  [$base, $exp] = makeTypesMatch($base, $exp);\n\n  const inputs: PowInputs = {a: $base, b: $exp};\n\n  return ENGINE.runKernel(Pow, inputs as unknown as NamedTensorMap);\n}\n\nexport const pow = /* @__PURE__ */ op({pow_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {Sub, SubInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {makeTypesMatch} from '../tensor_util';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Subtracts two `tf.Tensor`s element-wise, A - B. Supports broadcasting.\n *\n * ```js\n * const a = tf.tensor1d([10, 20, 30, 40]);\n * const b = tf.tensor1d([1, 2, 3, 4]);\n *\n * a.sub(b).print();  // or tf.sub(a, b)\n * ```\n *\n * ```js\n * // Broadcast subtract a with b.\n * const a = tf.tensor1d([10, 20, 30, 40]);\n * const b = tf.scalar(5);\n *\n * a.sub(b).print();  // or tf.sub(a, b)\n * ```\n * @param a The first `tf.Tensor` to subtract from.\n * @param b The second `tf.Tensor` to be subtracted. Must have the same dtype as\n * `a`.\n *\n * @doc {heading: 'Operations', subheading: 'Arithmetic'}\n */\nfunction sub_<T extends Tensor>(a: Tensor|TensorLike, b: Tensor|TensorLike): T {\n  let $a = convertToTensor(a, 'a', 'sub');\n  let $b = convertToTensor(b, 'b', 'sub');\n  [$a, $b] = makeTypesMatch($a, $b);\n\n  const inputs: SubInputs = {a: $a, b: $b};\n\n  return ENGINE.runKernel(Sub, inputs as unknown as NamedTensorMap);\n}\n\nexport const sub = /* @__PURE__ */ op({sub_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {dispose, tidy} from '../globals';\nimport {add} from '../ops/add';\nimport {div} from '../ops/div';\nimport {mul} from '../ops/mul';\nimport {pow} from '../ops/pow';\nimport {scalar} from '../ops/scalar';\nimport {sqrt} from '../ops/sqrt';\nimport {square} from '../ops/square';\nimport {sub} from '../ops/sub';\nimport {zerosLike} from '../ops/zeros_like';\nimport {ConfigDict, Serializable, SerializableConstructor} from '../serialization';\nimport {Variable} from '../tensor';\nimport {NamedTensor, NamedVariableMap} from '../tensor_types';\n\nimport {Optimizer, OptimizerVariable} from './optimizer';\n\nexport class AdamOptimizer extends Optimizer {\n  /** @nocollapse */\n  static get className() {\n    // Name matters for Python compatibility.\n    // This is a getter instead of a property because when it's a property, it\n    // prevents the entire class from being tree-shaken.\n    return 'Adam';\n  }\n  private accBeta1: Variable;\n  private accBeta2: Variable;\n\n  private accumulatedFirstMoment: OptimizerVariable[] = [];\n  private accumulatedSecondMoment: OptimizerVariable[] = [];\n\n  constructor(\n      protected learningRate: number, protected beta1: number,\n      protected beta2: number, protected epsilon: number = null) {\n    super();\n    tidy(() => {\n      // accB* will be updated by batch.\n      this.accBeta1 = scalar(beta1).variable();\n      this.accBeta2 = scalar(beta2).variable();\n    });\n\n    if (epsilon == null) {\n      this.epsilon = ENGINE.backend.epsilon();\n    }\n  }\n\n  applyGradients(variableGradients: NamedVariableMap|NamedTensor[]) {\n    const varNames = Array.isArray(variableGradients) ?\n        variableGradients.map(v => v.name) :\n        Object.keys(variableGradients);\n    tidy(() => {\n      const oneMinusAccBeta1 = sub(1, this.accBeta1);\n      const oneMinusAccBeta2 = sub(1, this.accBeta2);\n\n      varNames.forEach((name, i) => {\n        const value = ENGINE.registeredVariables[name];\n        const trainable = false;\n        if (this.accumulatedFirstMoment[i] == null) {\n          this.accumulatedFirstMoment[i] = {\n            originalName: `${name}/m`,\n            variable: tidy(() => zerosLike(value).variable(trainable))\n          };\n        }\n        if (this.accumulatedSecondMoment[i] == null) {\n          this.accumulatedSecondMoment[i] = {\n            originalName: `${name}/v`,\n            variable: tidy(() => zerosLike(value).variable(trainable))\n          };\n        }\n\n        const gradient = Array.isArray(variableGradients) ?\n            variableGradients[i].tensor :\n            variableGradients[name];\n        if (gradient == null) {\n          return;\n        }\n\n        const firstMoment = this.accumulatedFirstMoment[i].variable;\n        const secondMoment = this.accumulatedSecondMoment[i].variable;\n\n        const newFirstMoment =\n            add(mul(firstMoment, this.beta1), mul(gradient, 1 - this.beta1));\n        const newSecondMoment =\n            add(mul(secondMoment, this.beta2),\n                mul(square(gradient), 1 - this.beta2));\n\n        const biasCorrectedFirstMoment = div(newFirstMoment, oneMinusAccBeta1);\n        const biasCorrectedSecondMoment =\n            div(newSecondMoment, oneMinusAccBeta2);\n\n        firstMoment.assign(newFirstMoment);\n        secondMoment.assign(newSecondMoment);\n\n        const newValue =\n            add(mul(div(biasCorrectedFirstMoment,\n                        add(sqrt(biasCorrectedSecondMoment), this.epsilon)),\n                    -this.learningRate),\n                value);\n        value.assign(newValue);\n      });\n\n      this.accBeta1.assign(mul(this.accBeta1, this.beta1));\n      this.accBeta2.assign(mul(this.accBeta2, this.beta2));\n    });\n    this.incrementIterations();\n  }\n\n  override dispose(): void {\n    this.accBeta1.dispose();\n    this.accBeta2.dispose();\n\n    if (this.accumulatedFirstMoment != null) {\n      dispose(this.accumulatedFirstMoment.map(v => v.variable));\n    }\n    if (this.accumulatedSecondMoment != null) {\n      dispose(this.accumulatedSecondMoment.map(v => v.variable));\n    }\n  }\n\n  override async getWeights(): Promise<NamedTensor[]> {\n    // Order matters for Python compatibility.\n    const variables: OptimizerVariable[] =\n        [...this.accumulatedFirstMoment, ...this.accumulatedSecondMoment];\n    return [await this.saveIterations()].concat(\n        variables.map(v => ({name: v.originalName, tensor: v.variable})));\n  }\n\n  override async setWeights(weightValues: NamedTensor[]): Promise<void> {\n    weightValues = await this.extractIterations(weightValues);\n    tidy(() => {\n      this.accBeta1.assign(pow(this.beta1, this.iterations_ + 1));\n      this.accBeta2.assign(pow(this.beta2, this.iterations_ + 1));\n    });\n\n    const variableCount = weightValues.length / 2;\n    const trainable = false;\n    this.accumulatedFirstMoment =\n        weightValues.slice(0, variableCount).map(v => ({\n                                                   originalName: v.name,\n                                                   variable: v.tensor.variable(\n                                                       trainable)\n                                                 }));\n    this.accumulatedSecondMoment =\n        weightValues.slice(variableCount, variableCount * 2)\n            .map(v => ({\n                   originalName: v.name,\n                   variable: v.tensor.variable(trainable)\n                 }));\n  }\n\n  getConfig(): ConfigDict {\n    return {\n      'learningRate': this.learningRate,\n      'beta1': this.beta1,\n      'beta2': this.beta2,\n      'epsilon': this.epsilon,\n    };\n  }\n\n  /** @nocollapse */\n  static override fromConfig<T extends Serializable>(\n      cls: SerializableConstructor<T>, config: ConfigDict): T {\n    return new cls(\n        config['learningRate'], config['beta1'], config['beta2'],\n        config['epsilon']);\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Abs, AbsInputs, ComplexAbs, ComplexAbsInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes absolute value element-wise: `abs(x)`\n *\n * ```js\n * const x = tf.tensor1d([-1, 2, -3, 4]);\n *\n * x.abs().print();  // or tf.abs(x)\n * ```\n * @param x The input `tf.Tensor`.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction abs_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'abs');\n\n  if ($x.dtype === 'complex64') {\n    const inputs: ComplexAbsInputs = {x: $x};\n    return ENGINE.runKernel(ComplexAbs, inputs as unknown as NamedTensorMap);\n  } else {\n    const inputs: AbsInputs = {x: $x};\n    return ENGINE.runKernel(Abs, inputs as unknown as NamedTensorMap);\n  }\n}\n\nexport const abs = /* @__PURE__ */ op({abs_});\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * Returns the dimensions in the input shape that are broadcasted to\n * produce the provided output shape.\n *\n * The returned dimensions are 0-indexed and sorted. An example:\n * inShape = [4, 1, 3]\n * outShape = [5, 4, 3, 3]\n * result = [1]. Dimension 1 (2nd dimension of input) gets broadcasted 1 => 3.\n */\nexport function getBroadcastDims(\n    inShape: number[], outShape: number[]): number[] {\n  const inRank = inShape.length;\n  const dims: number[] = [];\n  for (let i = 0; i < inRank; i++) {\n    const dim = inRank - 1 - i;\n    const a = inShape[dim] || 1;\n    const b = outShape[outShape.length - 1 - i] || 1;\n    if (b > 1 && a === 1) {\n      dims.unshift(dim);\n    }\n  }\n  return dims;\n}\n\n/**\n * Returns the axes in the output space that should be reduced to produce\n * the input space.\n */\nexport function getReductionAxes(\n    inShape: number[], outShape: number[]): number[] {\n  const result: number[] = [];\n  for (let i = 0; i < outShape.length; i++) {\n    const inDim = inShape[inShape.length - i - 1];\n    const outAxis = outShape.length - i - 1;\n    const outDim = outShape[outAxis];\n    if (inDim == null || (inDim === 1 && outDim > 1)) {\n      result.unshift(outAxis);\n    }\n  }\n  return result;\n}\n\nexport function assertAndGetBroadcastShape(\n    shapeA: number[], shapeB: number[]): number[] {\n  const result: number[] = [];\n  const l = Math.max(shapeA.length, shapeB.length);\n\n  for (let i = 0; i < l; i++) {\n    let a = shapeA[shapeA.length - i - 1];\n    if (a == null) {\n      a = 1;\n    }\n    let b = shapeB[shapeB.length - i - 1];\n    if (b == null) {\n      b = 1;\n    }\n    if (a === 1) {\n      result.unshift(b);\n    } else if (b === 1) {\n      result.unshift(a);\n    } else if (a !== b) {\n      const errMsg = `Operands could not be broadcast together with shapes ` +\n          `${shapeA} and ${shapeB}.`;\n      throw Error(errMsg);\n    } else {\n      result.unshift(a);\n    }\n  }\n  return result;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Maximum, MaximumInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {makeTypesMatch} from '../tensor_util';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {assertAndGetBroadcastShape} from './broadcast_util';\nimport {cast} from './cast';\nimport {op} from './operation';\n\n/**\n * Returns the max of a and b (`a > b ? a : b`) element-wise.\n * Supports broadcasting.\n *\n * We also expose `tf.maximumStrict` which has the same signature as this op and\n * asserts that `a` and `b` are the same shape (does not broadcast).\n *\n * ```js\n * const a = tf.tensor1d([1, 4, 3, 16]);\n * const b = tf.tensor1d([1, 2, 9, 4]);\n *\n * a.maximum(b).print();  // or tf.maximum(a, b)\n * ```\n *\n * ```js\n * // Broadcast maximum a with b.\n * const a = tf.tensor1d([2, 4, 6, 8]);\n * const b = tf.scalar(5);\n *\n * a.maximum(b).print();  // or tf.maximum(a, b)\n * ```\n *\n * @param a The first tensor.\n * @param b The second tensor. Must have the same type as `a`.\n *\n * @doc {heading: 'Operations', subheading: 'Arithmetic'}\n */\nfunction maximum_<T extends Tensor>(\n    a: Tensor|TensorLike, b: Tensor|TensorLike): T {\n  let $a = convertToTensor(a, 'a', 'maximum');\n  let $b = convertToTensor(b, 'b', 'maximum');\n  [$a, $b] = makeTypesMatch($a, $b);\n\n  if ($a.dtype === 'bool') {\n    $a = cast($a, 'int32');\n    $b = cast($b, 'int32');\n  }\n  assertAndGetBroadcastShape($a.shape, $b.shape);\n\n  const inputs: MaximumInputs = {a: $a, b: $b};\n\n  return ENGINE.runKernel(Maximum, inputs as unknown as NamedTensorMap);\n}\n\nexport const maximum = /* @__PURE__ */ op({maximum_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {dispose, tidy} from '../globals';\nimport {abs} from '../ops/abs';\nimport {add} from '../ops/add';\nimport {div} from '../ops/div';\nimport {maximum} from '../ops/maximum';\nimport {mul} from '../ops/mul';\nimport {scalar} from '../ops/scalar';\nimport {sub} from '../ops/sub';\nimport {zerosLike} from '../ops/zeros_like';\nimport {ConfigDict, Serializable, SerializableConstructor} from '../serialization';\nimport {Variable} from '../tensor';\nimport {NamedTensor, NamedVariableMap} from '../tensor_types';\n\nimport {Optimizer, OptimizerVariable} from './optimizer';\n\nexport class AdamaxOptimizer extends Optimizer {\n  /** @nocollapse */\n  static get className() {\n    // Name matters for Python compatibility.\n    // This is a getter instead of a property because when it's a property, it\n    // prevents the entire class from being tree-shaken.\n    return 'Adamax';\n  }\n  private accBeta1: Variable;\n  private iteration: Variable;\n\n  private accumulatedFirstMoment: OptimizerVariable[] = [];\n  private accumulatedWeightedInfNorm: OptimizerVariable[] = [];\n\n  constructor(\n      protected learningRate: number, protected beta1: number,\n      protected beta2: number, protected epsilon: number = null,\n      protected decay = 0.0) {\n    super();\n\n    tidy(() => {\n      this.iteration = scalar(0).variable();\n      this.accBeta1 = scalar(beta1).variable();\n    });\n\n    if (epsilon == null) {\n      this.epsilon = ENGINE.backend.epsilon();\n    }\n  }\n\n  applyGradients(variableGradients: NamedVariableMap|NamedTensor[]) {\n    const variableNames = Array.isArray(variableGradients) ?\n        variableGradients.map(item => item.name) :\n        Object.keys(variableGradients);\n\n    tidy(() => {\n      const oneMinusAccBeta1 = sub(1, this.accBeta1);\n      const lr =\n          div(-this.learningRate, add(mul(this.iteration, this.decay), 1));\n\n      variableNames.forEach((name, i) => {\n        const value = ENGINE.registeredVariables[name];\n        const trainable = false;\n        if (this.accumulatedFirstMoment[i] == null) {\n          this.accumulatedFirstMoment[i] = {\n            originalName: `${name}/m`,\n            variable: zerosLike(value).variable(trainable)\n          };\n        }\n        if (this.accumulatedWeightedInfNorm[i] == null) {\n          this.accumulatedWeightedInfNorm[i] = {\n            originalName: `${name}/v`,\n            variable: zerosLike(value).variable(trainable)\n          };\n        }\n\n        const gradient = Array.isArray(variableGradients) ?\n            variableGradients[i].tensor :\n            variableGradients[name];\n        if (gradient == null) {\n          return;\n        }\n\n        const firstMoment = this.accumulatedFirstMoment[i].variable;\n        const weightedInfNorm = this.accumulatedWeightedInfNorm[i].variable;\n\n        const newFirstMoment =\n            add(mul(firstMoment, this.beta1), mul(gradient, 1 - this.beta1));\n\n        const ut0 = mul(weightedInfNorm, this.beta2);\n        const ut1 = abs(gradient);\n\n        const newWeightedInfNorm = maximum(ut0, ut1);\n\n        firstMoment.assign(newFirstMoment);\n        weightedInfNorm.assign(newWeightedInfNorm);\n\n        const newValue =\n            add(mul(div(lr, oneMinusAccBeta1),\n                    div(newFirstMoment, add(newWeightedInfNorm, this.epsilon))),\n                value);\n\n        value.assign(newValue);\n      });\n\n      this.iteration.assign(add(this.iteration, 1));\n      this.accBeta1.assign(mul(this.accBeta1, this.beta1));\n    });\n    this.incrementIterations();\n  }\n\n  override dispose(): void {\n    this.accBeta1.dispose();\n    this.iteration.dispose();\n\n    if (this.accumulatedFirstMoment != null) {\n      dispose(this.accumulatedFirstMoment.map(v => v.variable));\n    }\n    if (this.accumulatedWeightedInfNorm != null) {\n      dispose(this.accumulatedWeightedInfNorm.map(v => v.variable));\n    }\n  }\n\n  override async getWeights(): Promise<NamedTensor[]> {\n    throw new Error('getWeights() is not implemented for Adamax yet.');\n  }\n\n  override async setWeights(weightValues: NamedTensor[]): Promise<void> {\n    throw new Error('setWeights() is not implemented for Adamax yet.');\n  }\n\n  getConfig(): ConfigDict {\n    return {\n      'learningRate': this.learningRate,\n      'beta1': this.beta1,\n      'beta2': this.beta2,\n      'epsilon': this.epsilon,\n      'decay': this.decay\n    };\n  }\n\n  /** @nocollapse */\n  static override fromConfig<T extends Serializable>(\n      cls: SerializableConstructor<T>, config: ConfigDict): T {\n    return new cls(\n        config['learningRate'], config['beta1'], config['beta2'],\n        config['epsilon'], config['decay']);\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {keep, tidy} from '../globals';\nimport {add} from '../ops/add';\nimport {mul} from '../ops/mul';\nimport {scalar} from '../ops/scalar';\nimport {ConfigDict, Serializable, SerializableConstructor} from '../serialization';\nimport {Scalar} from '../tensor';\nimport {NamedTensor, NamedTensorMap} from '../tensor_types';\n\nimport {Optimizer} from './optimizer';\n\n/** @doclink Optimizer */\nexport class SGDOptimizer extends Optimizer {\n  /** @nocollapse */\n  static get className() {\n    // Name matters for Python compatibility.\n    // This is a getter instead of a property because when it's a property, it\n    // prevents the entire class from being tree-shaken.\n    return 'SGD';\n  }\n  protected c: Scalar;\n\n  constructor(protected learningRate: number) {\n    super();\n    this.setLearningRate(learningRate);\n  }\n\n  applyGradients(variableGradients: NamedTensorMap|NamedTensor[]) {\n    const varNames = Array.isArray(variableGradients) ?\n        variableGradients.map(v => v.name) :\n        Object.keys(variableGradients);\n    varNames.forEach((name, i) => {\n      const gradient = Array.isArray(variableGradients) ?\n          variableGradients[i].tensor :\n          variableGradients[name];\n      if (gradient == null) {\n        return;\n      }\n      const value = ENGINE.registeredVariables[name];\n      tidy(() => {\n        const newValue = add(mul(this.c, gradient), value);\n        value.assign(newValue);\n      });\n    });\n    this.incrementIterations();\n  }\n\n  /**\n   * Sets the learning rate of the optimizer.\n   */\n  setLearningRate(learningRate: number) {\n    this.learningRate = learningRate;\n    if (this.c != null) {\n      this.c.dispose();\n    }\n    this.c = keep(scalar(-learningRate));\n  }\n\n  override dispose() {\n    this.c.dispose();\n  }\n\n  override async getWeights(): Promise<NamedTensor[]> {\n    return [await this.saveIterations()];\n  }\n\n  override async setWeights(weightValues: NamedTensor[]): Promise<void> {\n    weightValues = await this.extractIterations(weightValues);\n    if (weightValues.length !== 0) {\n      throw new Error('SGD optimizer does not have settable weights.');\n    }\n  }\n\n  getConfig(): ConfigDict {\n    return {'learningRate': this.learningRate};\n  }\n\n  /** @nocollapse */\n  static override fromConfig<T extends Serializable>(\n      cls: SerializableConstructor<T>, config: ConfigDict): T {\n    return new cls(config['learningRate']);\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {dispose, tidy} from '../globals';\nimport {add} from '../ops/add';\nimport {mul} from '../ops/mul';\nimport {scalar} from '../ops/scalar';\nimport {zerosLike} from '../ops/zeros_like';\nimport {ConfigDict, Serializable, SerializableConstructor} from '../serialization';\nimport {Scalar, Tensor} from '../tensor';\nimport {NamedTensor, NamedVariableMap} from '../tensor_types';\n\nimport {OptimizerVariable} from './optimizer';\nimport {SGDOptimizer} from './sgd_optimizer';\n\n/** @doclink Optimizer */\nexport class MomentumOptimizer extends SGDOptimizer {\n  /** @nocollapse */\n  // Name matters for Python compatibility.\n  static override get className() {\n    // Name matters for Python compatibility.\n    // This is a getter instead of a property because when it's a property, it\n    // prevents the entire class from being tree-shaken.\n    return 'Momentum';\n  }\n  private m: Scalar;\n  private accumulations: OptimizerVariable[] = [];\n\n  constructor(\n      protected override learningRate: number, private momentum: number,\n      private useNesterov = false) {\n    super(learningRate);\n    this.m = scalar(this.momentum);\n  }\n\n  override applyGradients(variableGradients: NamedVariableMap|NamedTensor[]) {\n    const variableNames = Array.isArray(variableGradients) ?\n        variableGradients.map(item => item.name) :\n        Object.keys(variableGradients);\n\n    variableNames.forEach((name, i) => {\n      const value = ENGINE.registeredVariables[name];\n      if (this.accumulations[i] == null) {\n        const trainable = false;\n        this.accumulations[i] = {\n          originalName: `${name}/momentum`,\n          variable: tidy(() => zerosLike(value).variable(trainable))\n        };\n      }\n\n      const accumulation = this.accumulations[i].variable;\n      const gradient = Array.isArray(variableGradients) ?\n          variableGradients[i].tensor :\n          variableGradients[name];\n      if (gradient == null) {\n        return;\n      }\n\n      tidy(() => {\n        let newValue: Tensor;\n        const newAccumulation = add(mul(this.m, accumulation), gradient);\n        if (this.useNesterov) {\n          newValue = add(\n              mul(this.c, add(gradient, mul(newAccumulation, this.m))), value);\n        } else {\n          newValue = add(mul(this.c, newAccumulation), value);\n        }\n        accumulation.assign(newAccumulation);\n        value.assign(newValue);\n      });\n    });\n    this.incrementIterations();\n  }\n\n  override dispose(): void {\n    this.m.dispose();\n    if (this.accumulations != null) {\n      dispose(this.accumulations.map(v => v.variable));\n    }\n  }\n\n  /**\n   * Sets the momentum of the optimizer.\n   *\n   * @param momentum\n   */\n  setMomentum(momentum: number) {\n    this.momentum = momentum;\n  }\n\n  override async getWeights(): Promise<NamedTensor[]> {\n    // Order matters for Python compatibility.\n    return [await this.saveIterations()].concat(this.accumulations.map(\n        v => ({name: v.originalName, tensor: v.variable})));\n  }\n\n  override async setWeights(weightValues: NamedTensor[]): Promise<void> {\n    weightValues = await this.extractIterations(weightValues);\n    const trainable = false;\n    this.accumulations = weightValues.map(\n        v => ({originalName: v.name, variable: v.tensor.variable(trainable)}));\n  }\n\n  override getConfig(): ConfigDict {\n    return {\n      'learningRate': this.learningRate,\n      'momentum': this.momentum,\n      'useNesterov': this.useNesterov\n    };\n  }\n\n  /** @nocollapse */\n  static override fromConfig<T extends Serializable>(\n      cls: SerializableConstructor<T>, config: ConfigDict): T {\n    return new cls(\n        config['learningRate'], config['momentum'], config['useNesterov']);\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {dispose, tidy} from '../globals';\nimport {add} from '../ops/add';\nimport {div} from '../ops/div';\nimport {mul} from '../ops/mul';\nimport {sqrt} from '../ops/sqrt';\nimport {square} from '../ops/square';\nimport {sub} from '../ops/sub';\nimport {zerosLike} from '../ops/zeros_like';\nimport {ConfigDict, Serializable, SerializableConstructor} from '../serialization';\nimport {NamedTensor, NamedTensorMap} from '../tensor_types';\n\nimport {Optimizer, OptimizerVariable} from './optimizer';\n\n/** @doclink Optimizer */\nexport class RMSPropOptimizer extends Optimizer {\n  /** @nocollapse */\n  static get className() {\n    // Name matters for Python compatibility.\n    // This is a getter instead of a property because when it's a property, it\n    // prevents the entire class from being tree-shaken.\n    return 'RMSProp';\n  }\n  private centered: boolean;\n\n  private accumulatedMeanSquares: OptimizerVariable[] = [];\n  private accumulatedMoments: OptimizerVariable[] = [];\n  private accumulatedMeanGrads: OptimizerVariable[] = [];\n\n  constructor(\n      protected learningRate: number, protected decay = 0.9,\n      protected momentum = 0.0, protected epsilon: number = null,\n      centered = false) {\n    super();\n\n    this.centered = centered;\n\n    if (epsilon == null) {\n      this.epsilon = ENGINE.backend.epsilon();\n    }\n    if (learningRate == null) {\n      throw new Error(`learningRate for RMSPropOptimizer must be defined.`);\n    }\n  }\n\n  applyGradients(variableGradients: NamedTensorMap|NamedTensor[]) {\n    const variableNames = Array.isArray(variableGradients) ?\n        variableGradients.map(item => item.name) :\n        Object.keys(variableGradients);\n\n    variableNames.forEach((name, i) => {\n      const value = ENGINE.registeredVariables[name];\n      const trainable = false;\n      if (this.accumulatedMeanSquares[i] == null) {\n        this.accumulatedMeanSquares[i] = {\n          originalName: `${name}/rms`,\n          variable: tidy(() => zerosLike(value).variable(trainable))\n        };\n      }\n      if (this.accumulatedMoments[i] == null) {\n        this.accumulatedMoments[i] = {\n          originalName: `${name}/momentum`,\n          variable: tidy(() => zerosLike(value).variable(trainable))\n        };\n      }\n      if (this.accumulatedMeanGrads[i] == null && this.centered) {\n        this.accumulatedMeanGrads[i] = {\n          originalName: `${name}/mg`,\n          variable: tidy(() => zerosLike(value).variable(trainable))\n        };\n      }\n\n      const gradient = Array.isArray(variableGradients) ?\n          variableGradients[i].tensor :\n          variableGradients[name];\n      if (gradient == null) {\n        return;\n      }\n\n      const accumulatedMeanSquare = this.accumulatedMeanSquares[i].variable;\n      const accumulatedMoments = this.accumulatedMoments[i].variable;\n      tidy(() => {\n        const newAccumulatedMeanSquare =\n            add(mul(accumulatedMeanSquare, this.decay),\n                mul(square(gradient), 1 - this.decay));\n\n        if (this.centered) {\n          const accumulatedMeanGrad = this.accumulatedMeanGrads[i].variable;\n          // Centered gradient\n          const newAccumulatedMeanGrad =\n              add(mul(accumulatedMeanGrad, this.decay),\n                  mul(gradient, 1 - this.decay));\n\n          const gradContribution =\n              div(mul(gradient, this.learningRate),\n                  sqrt(\n                      sub(newAccumulatedMeanSquare,\n                          add(square(newAccumulatedMeanGrad), this.epsilon))));\n          const newAccumulatedMoments =\n              add(mul(accumulatedMoments, this.momentum), gradContribution);\n\n          accumulatedMeanSquare.assign(newAccumulatedMeanSquare);\n          accumulatedMeanGrad.assign(newAccumulatedMeanGrad);\n          accumulatedMoments.assign(newAccumulatedMoments);\n\n          const newValue = sub(value, newAccumulatedMoments);\n          value.assign(newValue);\n        } else {\n          // Plain gradient\n          const newAccumulatedMeanSquare =\n              add(mul(accumulatedMeanSquare, this.decay),\n                  mul(square(gradient), 1 - this.decay));\n\n          const newAccumulatedMoments =\n              add(mul(accumulatedMoments, this.momentum),\n                  div(mul(gradient, this.learningRate),\n                      sqrt(add(newAccumulatedMeanSquare, this.epsilon))));\n\n          accumulatedMeanSquare.assign(newAccumulatedMeanSquare);\n          accumulatedMoments.assign(newAccumulatedMoments);\n\n          const newValue = sub(value, newAccumulatedMoments);\n          value.assign(newValue);\n        }\n      });\n    });\n    this.incrementIterations();\n  }\n\n  override dispose(): void {\n    if (this.accumulatedMeanSquares != null) {\n      dispose(this.accumulatedMeanSquares.map(v => v.variable));\n    }\n    if (this.accumulatedMeanGrads != null && this.centered) {\n      dispose(this.accumulatedMeanGrads.map(v => v.variable));\n    }\n    if (this.accumulatedMoments != null) {\n      dispose(this.accumulatedMoments.map(v => v.variable));\n    }\n  }\n\n  override async getWeights(): Promise<NamedTensor[]> {\n    // Order matters for Python compatibility.\n    const variables: OptimizerVariable[] =\n        [...this.accumulatedMeanSquares, ...this.accumulatedMoments];\n    if (this.centered) {\n      variables.push(...this.accumulatedMeanGrads);\n    }\n    return [await this.saveIterations()].concat(\n        variables.map(v => ({name: v.originalName, tensor: v.variable})));\n  }\n\n  override async setWeights(weightValues: NamedTensor[]): Promise<void> {\n    weightValues = await this.extractIterations(weightValues);\n    const variableCount =\n        this.centered ? weightValues.length / 3 : weightValues.length / 2;\n    const trainable = false;\n    this.accumulatedMeanSquares =\n        weightValues.slice(0, variableCount).map(v => ({\n                                                   originalName: v.name,\n                                                   variable: v.tensor.variable(\n                                                       trainable)\n                                                 }));\n    this.accumulatedMoments =\n        weightValues.slice(variableCount, variableCount * 2)\n            .map(v => ({\n                   originalName: v.name,\n                   variable: v.tensor.variable(trainable)\n                 }));\n    if (this.centered) {\n      this.accumulatedMeanGrads =\n          weightValues.slice(variableCount * 2, variableCount * 3)\n              .map(v => ({\n                     originalName: v.name,\n                     variable: v.tensor.variable(trainable)\n                   }));\n    }\n  }\n\n  getConfig(): ConfigDict {\n    return {\n      'learningRate': this.learningRate,\n      'decay': this.decay,\n      'momentum': this.momentum,\n      'epsilon': this.epsilon,\n      'centered': this.centered\n    };\n  }\n\n  /** @nocollapse */\n  static override fromConfig<T extends Serializable>(\n      cls: SerializableConstructor<T>, config: ConfigDict): T {\n    return new cls(\n        config['learningRate'], config['decay'], config['momentum'],\n        config['epsilon'], config['centered']);\n  }\n}\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AdadeltaOptimizer} from './adadelta_optimizer';\nimport {AdagradOptimizer} from './adagrad_optimizer';\nimport {AdamOptimizer} from './adam_optimizer';\nimport {AdamaxOptimizer} from './adamax_optimizer';\nimport {MomentumOptimizer} from './momentum_optimizer';\nimport {RMSPropOptimizer} from './rmsprop_optimizer';\nimport {SGDOptimizer} from './sgd_optimizer';\nimport {registerClass} from '../serialization';\n\nconst OPTIMIZERS = [\n  AdadeltaOptimizer,\n  AdagradOptimizer,\n  AdamOptimizer,\n  AdamaxOptimizer,\n  MomentumOptimizer,\n  RMSPropOptimizer,\n  SGDOptimizer,\n];\n\nexport function registerOptimizers() {\n  for (const optimizer of OPTIMIZERS) {\n    registerClass(optimizer);\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * IOHandlers related to files, such as browser-triggered file downloads,\n * user-selected files in browser.\n */\n\nimport '../flags';\nimport {env} from '../environment';\n\nimport {basename, concatenateArrayBuffers, getModelArtifactsForJSON, getModelArtifactsInfoForJSON, getModelJSONForModelArtifacts} from './io_utils';\nimport {IORouter, IORouterRegistry} from './router_registry';\nimport {IOHandler, ModelArtifacts, ModelJSON, SaveResult, WeightsManifestConfig, WeightsManifestEntry} from './types';\n\nconst DEFAULT_FILE_NAME_PREFIX = 'model';\nconst DEFAULT_JSON_EXTENSION_NAME = '.json';\nconst DEFAULT_WEIGHT_DATA_EXTENSION_NAME = '.weights.bin';\n\nfunction defer<T>(f: () => T): Promise<T> {\n  return new Promise(resolve => setTimeout(resolve)).then(f);\n}\n\nexport class BrowserDownloads implements IOHandler {\n  private readonly modelJsonFileName: string;\n  private readonly weightDataFileName: string;\n  private readonly modelJsonAnchor: HTMLAnchorElement;\n  private readonly weightDataAnchor: HTMLAnchorElement;\n\n  static readonly URL_SCHEME = 'downloads://';\n\n  constructor(fileNamePrefix?: string) {\n    if (!env().getBool('IS_BROWSER')) {\n      // TODO(cais): Provide info on what IOHandlers are available under the\n      //   current environment.\n      throw new Error(\n          'browserDownloads() cannot proceed because the current environment ' +\n          'is not a browser.');\n    }\n\n    if (fileNamePrefix.startsWith(BrowserDownloads.URL_SCHEME)) {\n      fileNamePrefix = fileNamePrefix.slice(BrowserDownloads.URL_SCHEME.length);\n    }\n    if (fileNamePrefix == null || fileNamePrefix.length === 0) {\n      fileNamePrefix = DEFAULT_FILE_NAME_PREFIX;\n    }\n\n    this.modelJsonFileName = fileNamePrefix + DEFAULT_JSON_EXTENSION_NAME;\n    this.weightDataFileName =\n        fileNamePrefix + DEFAULT_WEIGHT_DATA_EXTENSION_NAME;\n  }\n\n  async save(modelArtifacts: ModelArtifacts): Promise<SaveResult> {\n    if (typeof (document) === 'undefined') {\n      throw new Error(\n          'Browser downloads are not supported in ' +\n          'this environment since `document` is not present');\n    }\n    const weightsURL = window.URL.createObjectURL(new Blob(\n        [modelArtifacts.weightData], {type: 'application/octet-stream'}));\n\n    if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n      throw new Error(\n          'BrowserDownloads.save() does not support saving model topology ' +\n          'in binary formats yet.');\n    } else {\n      const weightsManifest: WeightsManifestConfig = [{\n        paths: ['./' + this.weightDataFileName],\n        weights: modelArtifacts.weightSpecs\n      }];\n      const modelJSON: ModelJSON =\n          getModelJSONForModelArtifacts(modelArtifacts, weightsManifest);\n\n      const modelJsonURL = window.URL.createObjectURL(\n          new Blob([JSON.stringify(modelJSON)], {type: 'application/json'}));\n\n      // If anchor elements are not provided, create them without attaching them\n      // to parents, so that the downloaded file names can be controlled.\n      const jsonAnchor = this.modelJsonAnchor == null ?\n          document.createElement('a') :\n          this.modelJsonAnchor;\n      jsonAnchor.download = this.modelJsonFileName;\n      jsonAnchor.href = modelJsonURL;\n      // Trigger downloads by evoking a click event on the download anchors.\n      // When multiple downloads are started synchronously, Firefox will only\n      // save the last one.\n      await defer(() => jsonAnchor.dispatchEvent(new MouseEvent('click')));\n\n      if (modelArtifacts.weightData != null) {\n        const weightDataAnchor = this.weightDataAnchor == null ?\n            document.createElement('a') :\n            this.weightDataAnchor;\n        weightDataAnchor.download = this.weightDataFileName;\n        weightDataAnchor.href = weightsURL;\n        await defer(\n            () => weightDataAnchor.dispatchEvent(new MouseEvent('click')));\n      }\n\n      return {modelArtifactsInfo: getModelArtifactsInfoForJSON(modelArtifacts)};\n    }\n  }\n}\n\nclass BrowserFiles implements IOHandler {\n  private readonly jsonFile: File;\n  private readonly weightsFiles: File[];\n\n  constructor(files: File[]) {\n    if (files == null || files.length < 1) {\n      throw new Error(\n          `When calling browserFiles, at least 1 file is required, ` +\n          `but received ${files}`);\n    }\n    this.jsonFile = files[0];\n    this.weightsFiles = files.slice(1);\n  }\n\n  async load(): Promise<ModelArtifacts> {\n    return new Promise((resolve, reject) => {\n      const jsonReader = new FileReader();\n      jsonReader.onload = (event: Event) => {\n        // tslint:disable-next-line:no-any\n        const modelJSON = JSON.parse((event.target as any).result) as ModelJSON;\n\n        const modelTopology = modelJSON.modelTopology;\n        if (modelTopology == null) {\n          reject(new Error(`modelTopology field is missing from file ${\n              this.jsonFile.name}`));\n          return;\n        }\n\n        const weightsManifest = modelJSON.weightsManifest;\n        if (weightsManifest == null) {\n          reject(new Error(`weightManifest field is missing from file ${\n              this.jsonFile.name}`));\n          return;\n        }\n\n        if (this.weightsFiles.length === 0) {\n          resolve({modelTopology});\n          return;\n        }\n\n        const modelArtifactsPromise = getModelArtifactsForJSON(\n            modelJSON, (weightsManifest) => this.loadWeights(weightsManifest));\n        resolve(modelArtifactsPromise);\n      };\n\n      jsonReader.onerror = error => reject(\n          `Failed to read model topology and weights manifest JSON ` +\n          `from file '${this.jsonFile.name}'. BrowserFiles supports loading ` +\n          `Keras-style tf.Model artifacts only.`);\n      jsonReader.readAsText(this.jsonFile);\n    });\n  }\n\n  private loadWeights(weightsManifest: WeightsManifestConfig): Promise<[\n    /* weightSpecs */ WeightsManifestEntry[], /* weightData */ ArrayBuffer\n  ]> {\n    const weightSpecs: WeightsManifestEntry[] = [];\n    const paths: string[] = [];\n    for (const entry of weightsManifest) {\n      weightSpecs.push(...entry.weights);\n      paths.push(...entry.paths);\n    }\n\n    const pathToFile: {[path: string]: File} =\n        this.checkManifestAndWeightFiles(weightsManifest);\n\n    const promises: Array<Promise<ArrayBuffer>> =\n        paths.map(path => this.loadWeightsFile(path, pathToFile[path]));\n\n    return Promise.all(promises).then(\n        buffers => [weightSpecs, concatenateArrayBuffers(buffers)]);\n  }\n\n  private loadWeightsFile(path: string, file: File): Promise<ArrayBuffer> {\n    return new Promise((resolve, reject) => {\n      const weightFileReader = new FileReader();\n      weightFileReader.onload = (event: Event) => {\n        // tslint:disable-next-line:no-any\n        const weightData = (event.target as any).result as ArrayBuffer;\n        resolve(weightData);\n      };\n      weightFileReader.onerror = error =>\n          reject(`Failed to weights data from file of path '${path}'.`);\n      weightFileReader.readAsArrayBuffer(file);\n    });\n  }\n\n  /**\n   * Check the compatibility between weights manifest and weight files.\n   */\n  private checkManifestAndWeightFiles(manifest: WeightsManifestConfig):\n      {[path: string]: File} {\n    const basenames: string[] = [];\n    const fileNames = this.weightsFiles.map(file => basename(file.name));\n    const pathToFile: {[path: string]: File} = {};\n    for (const group of manifest) {\n      group.paths.forEach(path => {\n        const pathBasename = basename(path);\n        if (basenames.indexOf(pathBasename) !== -1) {\n          throw new Error(\n              `Duplicate file basename found in weights manifest: ` +\n              `'${pathBasename}'`);\n        }\n        basenames.push(pathBasename);\n        if (fileNames.indexOf(pathBasename) === -1) {\n          throw new Error(\n              `Weight file with basename '${pathBasename}' is not provided.`);\n        } else {\n          pathToFile[path] = this.weightsFiles[fileNames.indexOf(pathBasename)];\n        }\n      });\n    }\n\n    if (basenames.length !== this.weightsFiles.length) {\n      throw new Error(\n          `Mismatch in the number of files in weights manifest ` +\n          `(${basenames.length}) and the number of weight files provided ` +\n          `(${this.weightsFiles.length}).`);\n    }\n    return pathToFile;\n  }\n}\n\nexport const browserDownloadsRouter: IORouter = (url: string|string[]) => {\n  if (!env().getBool('IS_BROWSER')) {\n    return null;\n  } else {\n    if (!Array.isArray(url) && url.startsWith(BrowserDownloads.URL_SCHEME)) {\n      return browserDownloads(url.slice(BrowserDownloads.URL_SCHEME.length));\n    } else {\n      return null;\n    }\n  }\n};\nIORouterRegistry.registerSaveRouter(browserDownloadsRouter);\n\n/**\n * Creates an IOHandler that triggers file downloads from the browser.\n *\n * The returned `IOHandler` instance can be used as model exporting methods such\n * as `tf.Model.save` and supports only saving.\n *\n * ```js\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * const saveResult = await model.save('downloads://mymodel');\n * // This will trigger downloading of two files:\n * //   'mymodel.json' and 'mymodel.weights.bin'.\n * console.log(saveResult);\n * ```\n *\n * @param fileNamePrefix Prefix name of the files to be downloaded. For use with\n *   `tf.Model`, `fileNamePrefix` should follow either of the following two\n *   formats:\n *   1. `null` or `undefined`, in which case the default file\n *      names will be used:\n *      - 'model.json' for the JSON file containing the model topology and\n *        weights manifest.\n *      - 'model.weights.bin' for the binary file containing the binary weight\n *        values.\n *   2. A single string or an Array of a single string, as the file name prefix.\n *      For example, if `'foo'` is provided, the downloaded JSON\n *      file and binary weights file will be named 'foo.json' and\n *      'foo.weights.bin', respectively.\n * @param config Additional configuration for triggering downloads.\n * @returns An instance of `BrowserDownloads` `IOHandler`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Loading',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nexport function browserDownloads(fileNamePrefix = 'model'): IOHandler {\n  return new BrowserDownloads(fileNamePrefix);\n}\n\n/**\n * Creates an IOHandler that loads model artifacts from user-selected files.\n *\n * This method can be used for loading from files such as user-selected files\n * in the browser.\n * When used in conjunction with `tf.loadLayersModel`, an instance of\n * `tf.LayersModel` (Keras-style) can be constructed from the loaded artifacts.\n *\n * ```js\n * // Note: This code snippet won't run properly without the actual file input\n * //   elements in the HTML DOM.\n *\n * // Suppose there are two HTML file input (`<input type=\"file\" ...>`)\n * // elements.\n * const uploadJSONInput = document.getElementById('upload-json');\n * const uploadWeightsInput = document.getElementById('upload-weights');\n * const model = await tf.loadLayersModel(tf.io.browserFiles(\n *     [uploadJSONInput.files[0], uploadWeightsInput.files[0]]));\n * ```\n *\n * @param files `File`s to load from. Currently, this function supports only\n *   loading from files that contain Keras-style models (i.e., `tf.Model`s), for\n *   which an `Array` of `File`s is expected (in that order):\n *   - A JSON file containing the model topology and weight manifest.\n *   - Optionally, one or more binary files containing the binary weights.\n *     These files must have names that match the paths in the `weightsManifest`\n *     contained by the aforementioned JSON file, or errors will be thrown\n *     during loading. These weights files have the same format as the ones\n *     generated by `tensorflowjs_converter` that comes with the `tensorflowjs`\n *     Python PIP package. If no weights files are provided, only the model\n *     topology will be loaded from the JSON file above.\n * @returns An instance of `Files` `IOHandler`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Loading',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nexport function browserFiles(files: File[]): IOHandler {\n  return new BrowserFiles(files);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {assert} from '../util';\n\nimport {OnProgressCallback} from './types';\n\n/**\n * Monitor Promise.all progress, fire onProgress callback function.\n *\n * @param promises Promise list going to be monitored\n * @param onProgress Callback function. Fired when a promise resolved.\n * @param startFraction Optional fraction start. Default to 0.\n * @param endFraction Optional fraction end. Default to 1.\n */\nexport function monitorPromisesProgress(\n    promises: Array<Promise<{}|void>>, onProgress: OnProgressCallback,\n    startFraction?: number, endFraction?: number) {\n  checkPromises(promises);\n  startFraction = startFraction == null ? 0 : startFraction;\n  endFraction = endFraction == null ? 1 : endFraction;\n  checkFraction(startFraction, endFraction);\n  let resolvedPromise = 0;\n\n  const registerMonitor = (promise: Promise<{}>) => {\n    promise.then(value => {\n      const fraction = startFraction +\n          ++resolvedPromise / promises.length * (endFraction - startFraction);\n      // pass fraction as parameter to callback function.\n      onProgress(fraction);\n      return value;\n    });\n    return promise;\n  };\n\n  function checkPromises(promises: Array<Promise<{}|void>>): void {\n    assert(\n        promises != null && Array.isArray(promises) && promises.length > 0,\n        () => 'promises must be a none empty array');\n  }\n\n  function checkFraction(startFraction: number, endFraction: number): void {\n    assert(\n        startFraction >= 0 && startFraction <= 1,\n        () => `Progress fraction must be in range [0, 1], but ` +\n            `got startFraction ${startFraction}`);\n    assert(\n        endFraction >= 0 && endFraction <= 1,\n        () => `Progress fraction must be in range [0, 1], but ` +\n            `got endFraction ${endFraction}`);\n    assert(\n        endFraction >= startFraction,\n        () => `startFraction must be no more than endFraction, but ` +\n            `got startFraction ${startFraction} and endFraction ` +\n            `${endFraction}`);\n  }\n\n  return Promise.all(promises.map(registerMonitor));\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env} from '../environment';\n\nimport {NamedTensorMap} from '../tensor_types';\nimport * as util from '../util';\nimport {decodeWeights} from './io_utils';\nimport {monitorPromisesProgress} from './progress';\nimport {DTYPE_VALUE_SIZE_MAP, LoadOptions, WeightsManifestConfig, WeightsManifestEntry} from './types';\n\n/**\n * Reads binary weights data from a number of URLs.\n *\n * @param fetchURLs URLs to send the HTTP requests at, using `fetch` calls.\n * @param requestOptions RequestInit (options) for the HTTP requests.\n * @param fetchFunc Optional overriding value for the `window.fetch` function.\n * @param onProgress Optional, progress callback function, fired periodically\n *   before the load is completed.\n * @returns A `Promise` of an Array of `ArrayBuffer`. The Array has the same\n *   length as `fetchURLs`.\n */\nexport async function loadWeightsAsArrayBuffer(\n    fetchURLs: string[], loadOptions?: LoadOptions): Promise<ArrayBuffer[]> {\n  if (loadOptions == null) {\n    loadOptions = {};\n  }\n\n  const fetchFunc = loadOptions.fetchFunc == null ? env().platform.fetch :\n                                                    loadOptions.fetchFunc;\n\n  // Create the requests for all of the weights in parallel.\n  const requests = fetchURLs.map(\n      fetchURL =>\n          fetchFunc(fetchURL, loadOptions.requestInit, {isBinary: true}));\n\n  const fetchStartFraction = 0;\n  const fetchEndFraction = 0.5;\n\n  const responses = loadOptions.onProgress == null ?\n      await Promise.all(requests) :\n      await monitorPromisesProgress(\n          requests, loadOptions.onProgress, fetchStartFraction,\n          fetchEndFraction);\n\n  const bufferPromises = responses.map(response => response.arrayBuffer());\n\n  const bufferStartFraction = 0.5;\n  const bufferEndFraction = 1;\n\n  const buffers = loadOptions.onProgress == null ?\n      await Promise.all(bufferPromises) :\n      await monitorPromisesProgress(\n          bufferPromises, loadOptions.onProgress, bufferStartFraction,\n          bufferEndFraction);\n  return buffers;\n}\n\n/**\n * Reads a weights manifest JSON configuration, fetches the weights and\n * returns them as `Tensor`s.\n *\n * @param manifest The weights manifest JSON.\n * @param filePathPrefix The path prefix for filenames given in the manifest.\n *     Defaults to the empty string.\n * @param weightNames The names of the weights to be fetched.\n */\nexport async function loadWeights(\n    manifest: WeightsManifestConfig, filePathPrefix = '',\n    weightNames?: string[],\n    requestInit?: RequestInit): Promise<NamedTensorMap> {\n  // TODO(nsthorat): Groups are currently fetched atomically. If you need a\n  // single weight from a group, the whole group will be fetched. At a future\n  // date, we should support fetching only the individual shards within a\n  // group that are needed to reconstruct the requested weight.\n  // TODO(cais): Use `decodeWeights` for implementation.\n\n  const fetchWeights = (fetchUrls: string[]) =>\n      loadWeightsAsArrayBuffer(fetchUrls, {requestInit});\n  const loadWeights = weightsLoaderFactory(fetchWeights);\n\n  return loadWeights(manifest, filePathPrefix, weightNames);\n}\n\n/**\n * Creates a function, which reads a weights manifest JSON configuration,\n * fetches the weight files using the specified function and returns them as\n * `Tensor`s.\n *\n * ```js\n * // example for creating a nodejs weight loader, which reads the weight files\n * // from disk using fs.readFileSync\n *\n * import * as fs from 'fs'\n *\n * const fetchWeightsFromDisk = (filePaths: string[]) =>\n *   filePaths.map(filePath => fs.readFileSync(filePath).buffer)\n *\n * const loadWeights = tf.io.weightsLoaderFactory(fetchWeightsFromDisk)\n *\n * const manifest = JSON.parse(\n *   fs.readFileSync('./my_model-weights_manifest').toString()\n * )\n * const weightMap = await loadWeights(manifest, './')\n * ```\n * @param fetchWeightsFunction The function used for fetching the weight files.\n * @returns Weight loading function.\n */\nexport function weightsLoaderFactory(\n    fetchWeightsFunction: (fetchUrls: string[]) => Promise<ArrayBuffer[]>):\n    (manifest: WeightsManifestConfig, filePathPrefix?: string,\n     weightNames?: string[]) => Promise<NamedTensorMap> {\n  return async(\n             manifest: WeightsManifestConfig, filePathPrefix = '',\n             weightNames?: string[]): Promise<NamedTensorMap> => {\n    // Collect all the groups, weights, and their relative offsets to be\n    // fetched.\n    const groupIndicesToFetchMap = manifest.map(() => false);\n    const groupWeightsToFetch: {\n      [group: number]: Array<{\n        manifestEntry: WeightsManifestEntry; groupOffset: number;\n        sizeBytes: number;\n      }>\n    } = {};\n    const weightsFound =\n        weightNames != null ? weightNames.map(() => false) : [];\n    const allManifestWeightNames: string[] = [];\n    manifest.forEach((manifestGroupConfig, groupIndex) => {\n      let groupOffset = 0;\n      manifestGroupConfig.weights.forEach(weightsEntry => {\n        const rawDtype = ('quantization' in weightsEntry) ?\n            weightsEntry.quantization.dtype :\n            weightsEntry.dtype;\n\n        const weightsBytes = DTYPE_VALUE_SIZE_MAP[rawDtype] *\n            util.sizeFromShape(weightsEntry.shape);\n\n        const enqueueWeightsForFetchingFn = () => {\n          groupIndicesToFetchMap[groupIndex] = true;\n          if (groupWeightsToFetch[groupIndex] == null) {\n            groupWeightsToFetch[groupIndex] = [];\n          }\n\n          groupWeightsToFetch[groupIndex].push({\n            manifestEntry: weightsEntry,\n            groupOffset,\n            sizeBytes: weightsBytes\n          });\n        };\n\n        if (weightNames != null) {\n          weightNames.forEach((weightName, weightIndex) => {\n            if (weightName === weightsEntry.name) {\n              enqueueWeightsForFetchingFn();\n              weightsFound[weightIndex] = true;\n            }\n          });\n        } else {\n          enqueueWeightsForFetchingFn();\n        }\n\n        allManifestWeightNames.push(weightsEntry.name);\n        groupOffset += weightsBytes;\n      });\n    });\n\n    if (!weightsFound.every(found => found)) {\n      const weightsNotFound = weightNames.filter((_, i) => !weightsFound[i]);\n      throw new Error(\n          `Could not find weights in manifest with names: ` +\n          `${weightsNotFound.join(', ')}. \\n` +\n          `Manifest JSON has weights with names: ` +\n          `${allManifestWeightNames.join(', ')}.`);\n    }\n\n    // Convert the one-hot boolean groupId => shouldFetch map to a list of group\n    // IDs.\n    const groupIndicesToFetch =\n        groupIndicesToFetchMap.reduce((accumulator, shouldFetch, i) => {\n          if (shouldFetch) {\n            accumulator.push(i);\n          }\n          return accumulator;\n        }, []);\n\n    const fetchUrls: string[] = [];\n    groupIndicesToFetch.forEach(i => {\n      manifest[i].paths.forEach(filepath => {\n        const fetchUrl = filePathPrefix +\n            (!filePathPrefix.endsWith('/') ? '/' : '') + filepath;\n        fetchUrls.push(fetchUrl);\n      });\n    });\n    const buffers = await fetchWeightsFunction(fetchUrls);\n\n    const weightsTensorMap: NamedTensorMap = {};\n    let bufferIndexOffset = 0;\n    groupIndicesToFetch.forEach(i => {\n      const numBuffers = manifest[i].paths.length;\n\n      let groupBytes = 0;\n      for (let i = 0; i < numBuffers; i++) {\n        groupBytes += buffers[bufferIndexOffset + i].byteLength;\n      }\n\n      // Create a buffer for the whole group.\n      const groupBuffer = new ArrayBuffer(groupBytes);\n      const groupByteBuffer = new Uint8Array(groupBuffer);\n      let groupBufferOffset = 0;\n      for (let i = 0; i < numBuffers; i++) {\n        const buffer = new Uint8Array(buffers[bufferIndexOffset + i]);\n        groupByteBuffer.set(buffer, groupBufferOffset);\n        groupBufferOffset += buffer.byteLength;\n      }\n\n      const weightsEntries = groupWeightsToFetch[i];\n      weightsEntries.forEach(weightsEntry => {\n        const byteBuffer = groupBuffer.slice(\n            weightsEntry.groupOffset,\n            weightsEntry.groupOffset + weightsEntry.sizeBytes);\n        const nameToTensorMap =\n            decodeWeights(byteBuffer, [weightsEntry.manifestEntry]);\n        for (const name in nameToTensorMap) {\n          weightsTensorMap[name] = nameToTensorMap[name];\n        }\n      });\n\n      bufferIndexOffset += numBuffers;\n    });\n\n    return weightsTensorMap;\n  };\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * IOHandler implementations based on HTTP requests in the web browser.\n *\n * Uses [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).\n */\n\nimport {env} from '../environment';\n\nimport {assert} from '../util';\nimport {concatenateArrayBuffers, getModelArtifactsForJSON, getModelArtifactsInfoForJSON, getModelJSONForModelArtifacts, getWeightSpecs} from './io_utils';\nimport {IORouter, IORouterRegistry} from './router_registry';\nimport {IOHandler, LoadOptions, ModelArtifacts, ModelJSON, OnProgressCallback, SaveResult, WeightsManifestConfig, WeightsManifestEntry} from './types';\nimport {loadWeightsAsArrayBuffer} from './weights_loader';\n\nconst OCTET_STREAM_MIME_TYPE = 'application/octet-stream';\nconst JSON_TYPE = 'application/json';\nexport class HTTPRequest implements IOHandler {\n  protected readonly path: string;\n  protected readonly requestInit: RequestInit;\n\n  private readonly fetch: Function;\n  private readonly weightUrlConverter: (weightName: string) => Promise<string>;\n\n  readonly DEFAULT_METHOD = 'POST';\n\n  static readonly URL_SCHEME_REGEX = /^https?:\\/\\//;\n\n  private readonly weightPathPrefix: string;\n  private readonly onProgress: OnProgressCallback;\n\n  constructor(path: string, loadOptions?: LoadOptions) {\n    if (loadOptions == null) {\n      loadOptions = {};\n    }\n    this.weightPathPrefix = loadOptions.weightPathPrefix;\n    this.onProgress = loadOptions.onProgress;\n    this.weightUrlConverter = loadOptions.weightUrlConverter;\n\n    if (loadOptions.fetchFunc != null) {\n      assert(\n          typeof loadOptions.fetchFunc === 'function',\n          () => 'Must pass a function that matches the signature of ' +\n              '`fetch` (see ' +\n              'https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)');\n      this.fetch = loadOptions.fetchFunc;\n    } else {\n      this.fetch = env().platform.fetch;\n    }\n\n    assert(\n        path != null && path.length > 0,\n        () => 'URL path for http must not be null, undefined or ' +\n            'empty.');\n\n    if (Array.isArray(path)) {\n      assert(\n          path.length === 2,\n          () => 'URL paths for http must have a length of 2, ' +\n              `(actual length is ${path.length}).`);\n    }\n    this.path = path;\n\n    if (loadOptions.requestInit != null &&\n        loadOptions.requestInit.body != null) {\n      throw new Error(\n          'requestInit is expected to have no pre-existing body, but has one.');\n    }\n    this.requestInit = loadOptions.requestInit || {};\n  }\n\n  async save(modelArtifacts: ModelArtifacts): Promise<SaveResult> {\n    if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n      throw new Error(\n          'BrowserHTTPRequest.save() does not support saving model topology ' +\n          'in binary formats yet.');\n    }\n\n    const init = Object.assign({method: this.DEFAULT_METHOD}, this.requestInit);\n    init.body = new FormData();\n\n    const weightsManifest: WeightsManifestConfig = [{\n      paths: ['./model.weights.bin'],\n      weights: modelArtifacts.weightSpecs,\n    }];\n    const modelTopologyAndWeightManifest: ModelJSON =\n        getModelJSONForModelArtifacts(modelArtifacts, weightsManifest);\n\n    init.body.append(\n        'model.json',\n        new Blob(\n            [JSON.stringify(modelTopologyAndWeightManifest)],\n            {type: JSON_TYPE}),\n        'model.json');\n\n    if (modelArtifacts.weightData != null) {\n      init.body.append(\n          'model.weights.bin',\n          new Blob([modelArtifacts.weightData], {type: OCTET_STREAM_MIME_TYPE}),\n          'model.weights.bin');\n    }\n\n    const response = await this.fetch(this.path, init);\n\n    if (response.ok) {\n      return {\n        modelArtifactsInfo: getModelArtifactsInfoForJSON(modelArtifacts),\n        responses: [response],\n      };\n    } else {\n      throw new Error(\n          `BrowserHTTPRequest.save() failed due to HTTP response status ` +\n          `${response.status}.`);\n    }\n  }\n\n  /**\n   * Load model artifacts via HTTP request(s).\n   *\n   * See the documentation to `tf.io.http` for details on the saved\n   * artifacts.\n   *\n   * @returns The loaded model artifacts (if loading succeeds).\n   */\n  async load(): Promise<ModelArtifacts> {\n    const modelConfigRequest = await this.fetch(this.path, this.requestInit);\n\n    if (!modelConfigRequest.ok) {\n      throw new Error(\n          `Request to ${this.path} failed with status code ` +\n          `${modelConfigRequest.status}. Please verify this URL points to ` +\n          `the model JSON of the model to load.`);\n    }\n    let modelJSON: ModelJSON;\n    try {\n      modelJSON = await modelConfigRequest.json();\n    } catch (e) {\n      let message = `Failed to parse model JSON of response from ${this.path}.`;\n      // TODO(nsthorat): Remove this after some time when we're comfortable that\n      // .pb files are mostly gone.\n      if (this.path.endsWith('.pb')) {\n        message += ' Your path contains a .pb file extension. ' +\n            'Support for .pb models have been removed in TensorFlow.js 1.0 ' +\n            'in favor of .json models. You can re-convert your Python ' +\n            'TensorFlow model using the TensorFlow.js 1.0 conversion scripts ' +\n            'or you can convert your.pb models with the \\'pb2json\\'' +\n            'NPM script in the tensorflow/tfjs-converter repository.';\n      } else {\n        message += ' Please make sure the server is serving valid ' +\n            'JSON for this request.';\n      }\n      throw new Error(message);\n    }\n\n    // We do not allow both modelTopology and weightsManifest to be missing.\n    const modelTopology = modelJSON.modelTopology;\n    const weightsManifest = modelJSON.weightsManifest;\n    if (modelTopology == null && weightsManifest == null) {\n      throw new Error(\n          `The JSON from HTTP path ${this.path} contains neither model ` +\n          `topology or manifest for weights.`);\n    }\n\n    return getModelArtifactsForJSON(\n        modelJSON, (weightsManifest) => this.loadWeights(weightsManifest));\n  }\n\n  private async loadWeights(weightsManifest: WeightsManifestConfig):\n      Promise<[WeightsManifestEntry[], ArrayBuffer]> {\n    const weightPath = Array.isArray(this.path) ? this.path[1] : this.path;\n    const [prefix, suffix] = parseUrl(weightPath);\n    const pathPrefix = this.weightPathPrefix || prefix;\n\n    const weightSpecs = getWeightSpecs(weightsManifest);\n\n    const fetchURLs: string[] = [];\n    const urlPromises: Array<Promise<string>> = [];\n    for (const weightsGroup of weightsManifest) {\n      for (const path of weightsGroup.paths) {\n        if (this.weightUrlConverter != null) {\n          urlPromises.push(this.weightUrlConverter(path));\n        } else {\n          fetchURLs.push(pathPrefix + path + suffix);\n        }\n      }\n    }\n\n    if (this.weightUrlConverter) {\n      fetchURLs.push(...await Promise.all(urlPromises));\n    }\n\n    const buffers = await loadWeightsAsArrayBuffer(fetchURLs, {\n      requestInit: this.requestInit,\n      fetchFunc: this.fetch,\n      onProgress: this.onProgress\n    });\n    return [weightSpecs, concatenateArrayBuffers(buffers)];\n  }\n}\n\n/**\n * Extract the prefix and suffix of the url, where the prefix is the path before\n * the last file, and suffix is the search params after the last file.\n * ```\n * const url = 'http://tfhub.dev/model/1/tensorflowjs_model.pb?tfjs-format=file'\n * [prefix, suffix] = parseUrl(url)\n * // prefix = 'http://tfhub.dev/model/1/'\n * // suffix = '?tfjs-format=file'\n * ```\n * @param url the model url to be parsed.\n */\nexport function parseUrl(url: string): [string, string] {\n  const lastSlash = url.lastIndexOf('/');\n  const lastSearchParam = url.lastIndexOf('?');\n  const prefix = url.substring(0, lastSlash);\n  const suffix =\n      lastSearchParam > lastSlash ? url.substring(lastSearchParam) : '';\n  return [prefix + '/', suffix];\n}\n\nexport function isHTTPScheme(url: string): boolean {\n  return url.match(HTTPRequest.URL_SCHEME_REGEX) != null;\n}\n\nexport const httpRouter: IORouter =\n    (url: string, loadOptions?: LoadOptions) => {\n      if (typeof fetch === 'undefined' &&\n          (loadOptions == null || loadOptions.fetchFunc == null)) {\n        // `http` uses `fetch` or `node-fetch`, if one wants to use it in\n        // an environment that is not the browser or node they have to setup a\n        // global fetch polyfill.\n        return null;\n      } else {\n        let isHTTP = true;\n        if (Array.isArray(url)) {\n          isHTTP = url.every(urlItem => isHTTPScheme(urlItem));\n        } else {\n          isHTTP = isHTTPScheme(url);\n        }\n        if (isHTTP) {\n          return http(url, loadOptions);\n        }\n      }\n      return null;\n    };\nIORouterRegistry.registerSaveRouter(httpRouter);\nIORouterRegistry.registerLoadRouter(httpRouter);\n\n/**\n * Creates an IOHandler subtype that sends model artifacts to HTTP server.\n *\n * An HTTP request of the `multipart/form-data` mime type will be sent to the\n * `path` URL. The form data includes artifacts that represent the topology\n * and/or weights of the model. In the case of Keras-style `tf.Model`, two\n * blobs (files) exist in form-data:\n *   - A JSON file consisting of `modelTopology` and `weightsManifest`.\n *   - A binary weights file consisting of the concatenated weight values.\n * These files are in the same format as the one generated by\n * [tfjs_converter](https://js.tensorflow.org/tutorials/import-keras.html).\n *\n * The following code snippet exemplifies the client-side code that uses this\n * function:\n *\n * ```js\n * const model = tf.sequential();\n * model.add(\n *     tf.layers.dense({units: 1, inputShape: [100], activation: 'sigmoid'}));\n *\n * const saveResult = await model.save(tf.io.http(\n *     'http://model-server:5000/upload', {requestInit: {method: 'PUT'}}));\n * console.log(saveResult);\n * ```\n *\n * If the default `POST` method is to be used, without any custom parameters\n * such as headers, you can simply pass an HTTP or HTTPS URL to `model.save`:\n *\n * ```js\n * const saveResult = await model.save('http://model-server:5000/upload');\n * ```\n *\n * The following GitHub Gist\n * https://gist.github.com/dsmilkov/1b6046fd6132d7408d5257b0976f7864\n * implements a server based on [flask](https://github.com/pallets/flask) that\n * can receive the request. Upon receiving the model artifacts via the requst,\n * this particular server reconstitutes instances of [Keras\n * Models](https://keras.io/models/model/) in memory.\n *\n *\n * @param path A URL path to the model.\n *   Can be an absolute HTTP path (e.g.,\n *   'http://localhost:8000/model-upload)') or a relative path (e.g.,\n *   './model-upload').\n * @param requestInit Request configurations to be used when sending\n *    HTTP request to server using `fetch`. It can contain fields such as\n *    `method`, `credentials`, `headers`, `mode`, etc. See\n *    https://developer.mozilla.org/en-US/docs/Web/API/Request/Request\n *    for more information. `requestInit` must not have a body, because the\n * body will be set by TensorFlow.js. File blobs representing the model\n * topology (filename: 'model.json') and the weights of the model (filename:\n * 'model.weights.bin') will be appended to the body. If `requestInit` has a\n * `body`, an Error will be thrown.\n * @param loadOptions Optional configuration for the loading. It includes the\n *   following fields:\n *   - weightPathPrefix Optional, this specifies the path prefix for weight\n *     files, by default this is calculated from the path param.\n *   - fetchFunc Optional, custom `fetch` function. E.g., in Node.js,\n *     the `fetch` from node-fetch can be used here.\n *   - onProgress Optional, progress callback function, fired periodically\n *     before the load is completed.\n * @returns An instance of `IOHandler`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Loading',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nexport function http(path: string, loadOptions?: LoadOptions): IOHandler {\n  return new HTTPRequest(path, loadOptions);\n}\n\n/**\n * Deprecated. Use `tf.io.http`.\n * @param path\n * @param loadOptions\n */\nexport function browserHTTPRequest(\n    path: string, loadOptions?: LoadOptions): IOHandler {\n  return http(path, loadOptions);\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * IOHandlers that pass through the in-memory ModelArtifacts format.\n */\n\nimport {IOHandler, IOHandlerSync, LoadHandler, ModelArtifacts, SaveHandler, SaveResult, TrainingConfig, WeightsManifestEntry} from './types';\n\nclass PassthroughLoader implements IOHandlerSync {\n  constructor(private readonly modelArtifacts?: ModelArtifacts) {}\n\n  load(): ModelArtifacts {\n    return this.modelArtifacts;\n  }\n}\n\nclass PassthroughSaver<R extends SaveResult | Promise<SaveResult>> {\n  constructor(\n    private readonly saveHandler: (artifacts: ModelArtifacts) => R) {}\n\n  save(modelArtifacts: ModelArtifacts): R {\n    return this.saveHandler(modelArtifacts);\n  }\n}\n\nclass PassthroughAsync implements IOHandler {\n  load?: LoadHandler;\n  save?: SaveHandler;\n\n  constructor(handler: IOHandlerSync) {\n    if (handler.load) {\n      this.load = () => Promise.resolve(handler.load());\n    }\n    if (handler.save) {\n      this.save = (modelArtifacts: ModelArtifacts) =>\n        Promise.resolve(handler.save(modelArtifacts));\n    }\n  }\n}\n\n/**\n * Creates an IOHandler that loads model artifacts from memory.\n *\n * When used in conjunction with `tf.loadLayersModel`, an instance of\n * `tf.LayersModel` (Keras-style) can be constructed from the loaded artifacts.\n *\n * ```js\n * const model = await tf.loadLayersModel(tf.io.fromMemory(\n *     modelTopology, weightSpecs, weightData));\n * ```\n *\n * @param modelArtifacts a object containing model topology (i.e., parsed from\n *   the JSON format).\n * @param weightSpecs An array of `WeightsManifestEntry` objects describing the\n *   names, shapes, types, and quantization of the weight data. Optional.\n * @param weightData A single `ArrayBuffer` containing the weight data,\n *   concatenated in the order described by the weightSpecs. Optional.\n * @param trainingConfig Model training configuration. Optional.\n *\n * @returns A passthrough `IOHandler` that simply loads the provided data.\n */\nexport function fromMemory(\n    modelArtifacts: {}|ModelArtifacts, weightSpecs?: WeightsManifestEntry[],\n    weightData?: ArrayBuffer, trainingConfig?: TrainingConfig): IOHandler {\n\n  const args = arguments as unknown as Parameters<typeof fromMemory>;\n  return new PassthroughAsync(fromMemorySync(...args));\n}\n\n/**\n * Creates an IOHandler that loads model artifacts from memory.\n *\n * When used in conjunction with `tf.loadLayersModel`, an instance of\n * `tf.LayersModel` (Keras-style) can be constructed from the loaded artifacts.\n *\n * ```js\n * const model = await tf.loadLayersModel(tf.io.fromMemory(\n *     modelTopology, weightSpecs, weightData));\n * ```\n *\n * @param modelArtifacts a object containing model topology (i.e., parsed from\n *   the JSON format).\n * @param weightSpecs An array of `WeightsManifestEntry` objects describing the\n *   names, shapes, types, and quantization of the weight data. Optional.\n * @param weightData A single `ArrayBuffer` containing the weight data,\n *   concatenated in the order described by the weightSpecs. Optional.\n * @param trainingConfig Model training configuration. Optional.\n *\n * @returns A passthrough `IOHandlerSync` that simply loads the provided data.\n */\nexport function fromMemorySync(\n    modelArtifacts: {}|ModelArtifacts, weightSpecs?: WeightsManifestEntry[],\n    weightData?: ArrayBuffer, trainingConfig?: TrainingConfig): IOHandlerSync {\n  if (arguments.length === 1) {\n    const isModelArtifacts =\n        (modelArtifacts as ModelArtifacts).modelTopology != null ||\n        (modelArtifacts as ModelArtifacts).weightSpecs != null;\n    if (isModelArtifacts) {\n      return new PassthroughLoader(modelArtifacts as ModelArtifacts);\n    } else {\n      // Legacy support: with only modelTopology.\n      // TODO(cais): Remove this deprecated API.\n      console.warn(\n          'Please call tf.io.fromMemory() with only one argument. ' +\n          'The argument should be of type ModelArtifacts. ' +\n          'The multi-argument signature of tf.io.fromMemory() has been ' +\n          'deprecated and will be removed in a future release.');\n      return new PassthroughLoader({modelTopology: modelArtifacts as {}});\n    }\n  } else {\n    // Legacy support.\n    // TODO(cais): Remove this deprecated API.\n    console.warn(\n        'Please call tf.io.fromMemory() with only one argument. ' +\n        'The argument should be of type ModelArtifacts. ' +\n        'The multi-argument signature of tf.io.fromMemory() has been ' +\n        'deprecated and will be removed in a future release.');\n    return new PassthroughLoader({\n      modelTopology: modelArtifacts as {},\n      weightSpecs,\n      weightData,\n      trainingConfig\n    });\n  }\n}\n\n/**\n * Creates an IOHandler that passes saved model artifacts to a callback.\n *\n * ```js\n * function handleSave(artifacts) {\n *   // ... do something with the artifacts ...\n *   return {modelArtifactsInfo: {...}, ...};\n * }\n *\n * const saveResult = model.save(tf.io.withSaveHandler(handleSave));\n * ```\n *\n * @param saveHandler A function that accepts a `ModelArtifacts` and returns a\n *     promise that resolves to a `SaveResult`.\n */\nexport function withSaveHandler(\n    saveHandler: (artifacts: ModelArtifacts) =>\n        Promise<SaveResult>): IOHandler {\n  return new PassthroughSaver(saveHandler);\n}\n\n/**\n * Creates an IOHandlerSync that passes saved model artifacts to a callback.\n *\n * ```js\n * function handleSave(artifacts) {\n *   // ... do something with the artifacts ...\n *   return {modelArtifactsInfo: {...}, ...};\n * }\n *\n * const saveResult = model.save(tf.io.withSaveHandler(handleSave));\n * ```\n *\n * @param saveHandler A function that accepts a `ModelArtifacts` and returns a\n *     `SaveResult`.\n */\nexport function withSaveHandlerSync(\n    saveHandler: (artifacts: ModelArtifacts) => SaveResult): IOHandlerSync {\n  return new PassthroughSaver<SaveResult>(saveHandler);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {env} from '../environment';\nimport {FromPixels, FromPixelsAttrs, FromPixelsInputs} from '../kernel_names';\nimport {getKernel, NamedAttrMap} from '../kernel_registry';\nimport {Tensor, Tensor2D, Tensor3D} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {PixelData, TensorLike} from '../types';\n\nimport {cast} from './cast';\nimport {op} from './operation';\nimport {tensor3d} from './tensor3d';\n\nlet fromPixels2DContext: CanvasRenderingContext2D;\n\n/**\n * Creates a `tf.Tensor` from an image.\n *\n * ```js\n * const image = new ImageData(1, 1);\n * image.data[0] = 100;\n * image.data[1] = 150;\n * image.data[2] = 200;\n * image.data[3] = 255;\n *\n * tf.browser.fromPixels(image).print();\n * ```\n *\n * @param pixels The input image to construct the tensor from. The\n * supported image types are all 4-channel. You can also pass in an image\n * object with following attributes:\n * `{data: Uint8Array; width: number; height: number}`\n * @param numChannels The number of channels of the output tensor. A\n * numChannels value less than 4 allows you to ignore channels. Defaults to\n * 3 (ignores alpha channel of input image).\n *\n * @returns A Tensor3D with the shape `[height, width, numChannels]`.\n *\n * Note: fromPixels can be lossy in some cases, same image may result in\n * slightly different tensor values, if rendered by different rendering\n * engines. This means that results from different browsers, or even same\n * browser with CPU and GPU rendering engines can be different. See discussion\n * in details:\n * https://github.com/tensorflow/tfjs/issues/5482\n *\n * @doc {heading: 'Browser', namespace: 'browser', ignoreCI: true}\n */\nfunction fromPixels_(\n    pixels: PixelData|ImageData|HTMLImageElement|HTMLCanvasElement|\n    HTMLVideoElement|ImageBitmap,\n    numChannels = 3): Tensor3D {\n  // Sanity checks.\n  if (numChannels > 4) {\n    throw new Error(\n        'Cannot construct Tensor with more than 4 channels from pixels.');\n  }\n  if (pixels == null) {\n    throw new Error('pixels passed to tf.browser.fromPixels() can not be null');\n  }\n  let isPixelData = false;\n  let isImageData = false;\n  let isVideo = false;\n  let isImage = false;\n  let isCanvasLike = false;\n  let isImageBitmap = false;\n  if ((pixels as PixelData).data instanceof Uint8Array) {\n    isPixelData = true;\n  } else if (\n      typeof (ImageData) !== 'undefined' && pixels instanceof ImageData) {\n    isImageData = true;\n  } else if (\n      typeof (HTMLVideoElement) !== 'undefined' &&\n      pixels instanceof HTMLVideoElement) {\n    isVideo = true;\n  } else if (\n      typeof (HTMLImageElement) !== 'undefined' &&\n      pixels instanceof HTMLImageElement) {\n    isImage = true;\n    // tslint:disable-next-line: no-any\n  } else if ((pixels as any).getContext != null) {\n    isCanvasLike = true;\n  } else if (\n      typeof (ImageBitmap) !== 'undefined' && pixels instanceof ImageBitmap) {\n    isImageBitmap = true;\n  } else {\n    throw new Error(\n        'pixels passed to tf.browser.fromPixels() must be either an ' +\n        `HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData ` +\n        `in browser, or OffscreenCanvas, ImageData in webworker` +\n        ` or {data: Uint32Array, width: number, height: number}, ` +\n        `but was ${(pixels as {}).constructor.name}`);\n  }\n  // If the current backend has 'FromPixels' registered, it has a more\n  // efficient way of handling pixel uploads, so we call that.\n  const kernel = getKernel(FromPixels, ENGINE.backendName);\n  if (kernel != null) {\n    const inputs: FromPixelsInputs = {pixels};\n    const attrs: FromPixelsAttrs = {numChannels};\n    return ENGINE.runKernel(\n        FromPixels, inputs as unknown as NamedTensorMap,\n        attrs as unknown as NamedAttrMap);\n  }\n\n  const [width, height] = isVideo ?\n      [\n        (pixels as HTMLVideoElement).videoWidth,\n        (pixels as HTMLVideoElement).videoHeight\n      ] :\n      [pixels.width, pixels.height];\n  let vals: Uint8ClampedArray|Uint8Array;\n\n  if (isCanvasLike) {\n    vals =\n        // tslint:disable-next-line:no-any\n        (pixels as any).getContext('2d').getImageData(0, 0, width, height).data;\n  } else if (isImageData || isPixelData) {\n    vals = (pixels as PixelData | ImageData).data;\n  } else if (isImage || isVideo || isImageBitmap) {\n    if (fromPixels2DContext == null) {\n      if (typeof document === 'undefined') {\n        if (typeof OffscreenCanvas !== 'undefined' &&\n            typeof OffscreenCanvasRenderingContext2D !== 'undefined') {\n          // @ts-ignore\n          fromPixels2DContext = new OffscreenCanvas(1, 1).getContext('2d');\n        } else {\n          throw new Error(\n              'Cannot parse input in current context. ' +\n              'Reason: OffscreenCanvas Context2D rendering is not supported.');\n        }\n      } else {\n        fromPixels2DContext =\n            document.createElement('canvas').getContext(\n                '2d', {willReadFrequently: true});\n      }\n    }\n    fromPixels2DContext.canvas.width = width;\n    fromPixels2DContext.canvas.height = height;\n    fromPixels2DContext.drawImage(\n        pixels as HTMLVideoElement, 0, 0, width, height);\n    vals = fromPixels2DContext.getImageData(0, 0, width, height).data;\n  }\n  let values: Int32Array;\n  if (numChannels === 4) {\n    values = new Int32Array(vals);\n  } else {\n    const numPixels = width * height;\n    values = new Int32Array(numPixels * numChannels);\n    for (let i = 0; i < numPixels; i++) {\n      for (let channel = 0; channel < numChannels; ++channel) {\n        values[i * numChannels + channel] = vals[i * 4 + channel];\n      }\n    }\n  }\n  const outShape: [number, number, number] = [height, width, numChannels];\n  return tensor3d(values, outShape, 'int32');\n}\n\n// Helper functions for |fromPixelsAsync| to check whether the input can\n// be wrapped into imageBitmap.\nfunction isPixelData(pixels: PixelData|ImageData|HTMLImageElement|\n                     HTMLCanvasElement|HTMLVideoElement|\n                     ImageBitmap): pixels is PixelData {\n  return (pixels != null) && ((pixels as PixelData).data instanceof Uint8Array);\n}\n\nfunction isImageBitmapFullySupported() {\n  return typeof window !== 'undefined' &&\n      typeof (ImageBitmap) !== 'undefined' &&\n      window.hasOwnProperty('createImageBitmap');\n}\n\nfunction isNonEmptyPixels(pixels: PixelData|ImageData|HTMLImageElement|\n                          HTMLCanvasElement|HTMLVideoElement|ImageBitmap) {\n  return pixels != null && pixels.width !== 0 && pixels.height !== 0;\n}\n\nfunction canWrapPixelsToImageBitmap(pixels: PixelData|ImageData|\n                                    HTMLImageElement|HTMLCanvasElement|\n                                    HTMLVideoElement|ImageBitmap) {\n  return isImageBitmapFullySupported() && !(pixels instanceof ImageBitmap) &&\n      isNonEmptyPixels(pixels) && !isPixelData(pixels);\n}\n\n/**\n * Creates a `tf.Tensor` from an image in async way.\n *\n * ```js\n * const image = new ImageData(1, 1);\n * image.data[0] = 100;\n * image.data[1] = 150;\n * image.data[2] = 200;\n * image.data[3] = 255;\n *\n * (await tf.browser.fromPixelsAsync(image)).print();\n * ```\n * This API is the async version of fromPixels. The API will first\n * check |WRAP_TO_IMAGEBITMAP| flag, and try to wrap the input to\n * imageBitmap if the flag is set to true.\n *\n * @param pixels The input image to construct the tensor from. The\n * supported image types are all 4-channel. You can also pass in an image\n * object with following attributes:\n * `{data: Uint8Array; width: number; height: number}`\n * @param numChannels The number of channels of the output tensor. A\n * numChannels value less than 4 allows you to ignore channels. Defaults to\n * 3 (ignores alpha channel of input image).\n *\n * @doc {heading: 'Browser', namespace: 'browser', ignoreCI: true}\n */\nexport async function fromPixelsAsync(\n    pixels: PixelData|ImageData|HTMLImageElement|HTMLCanvasElement|\n    HTMLVideoElement|ImageBitmap,\n    numChannels = 3) {\n  let inputs: PixelData|ImageData|HTMLImageElement|HTMLCanvasElement|\n      HTMLVideoElement|ImageBitmap = null;\n\n  // Check whether the backend needs to wrap |pixels| to imageBitmap and\n  // whether |pixels| can be wrapped to imageBitmap.\n  if (env().getBool('WRAP_TO_IMAGEBITMAP') &&\n      canWrapPixelsToImageBitmap(pixels)) {\n    // Force the imageBitmap creation to not do any premultiply alpha\n    // ops.\n    let imageBitmap;\n\n    try {\n      // wrap in try-catch block, because createImageBitmap may not work\n      // properly in some browsers, e.g.\n      // https://bugzilla.mozilla.org/show_bug.cgi?id=1335594\n      // tslint:disable-next-line: no-any\n      imageBitmap = await (createImageBitmap as any)(\n          pixels as ImageBitmapSource, {premultiplyAlpha: 'none'});\n    } catch (e) {\n      imageBitmap = null;\n    }\n\n    // createImageBitmap will clip the source size.\n    // In some cases, the input will have larger size than its content.\n    // E.g. new Image(10, 10) but with 1 x 1 content. Using\n    // createImageBitmap will clip the size from 10 x 10 to 1 x 1, which\n    // is not correct. We should avoid wrapping such resouce to\n    // imageBitmap.\n    if (imageBitmap != null && imageBitmap.width === pixels.width &&\n        imageBitmap.height === pixels.height) {\n      inputs = imageBitmap;\n    } else {\n      inputs = pixels;\n    }\n  } else {\n    inputs = pixels;\n  }\n\n  return fromPixels_(inputs, numChannels);\n}\n\n/**\n * Draws a `tf.Tensor` of pixel values to a byte array or optionally a\n * canvas.\n *\n * When the dtype of the input is 'float32', we assume values in the range\n * [0-1]. Otherwise, when input is 'int32', we assume values in the range\n * [0-255].\n *\n * Returns a promise that resolves when the canvas has been drawn to.\n *\n * @param img A rank-2 tensor with shape `[height, width]`, or a rank-3 tensor\n * of shape `[height, width, numChannels]`. If rank-2, draws grayscale. If\n * rank-3, must have depth of 1, 3 or 4. When depth of 1, draws\n * grayscale. When depth of 3, we draw with the first three components of\n * the depth dimension corresponding to r, g, b and alpha = 1. When depth of\n * 4, all four components of the depth dimension correspond to r, g, b, a.\n * @param canvas The canvas to draw to.\n *\n * @doc {heading: 'Browser', namespace: 'browser'}\n */\nexport async function toPixels(\n    img: Tensor2D|Tensor3D|TensorLike,\n    canvas?: HTMLCanvasElement): Promise<Uint8ClampedArray> {\n  let $img = convertToTensor(img, 'img', 'toPixels');\n  if (!(img instanceof Tensor)) {\n    // Assume int32 if user passed a native array.\n    const originalImgTensor = $img;\n    $img = cast(originalImgTensor, 'int32');\n    originalImgTensor.dispose();\n  }\n  if ($img.rank !== 2 && $img.rank !== 3) {\n    throw new Error(\n        `toPixels only supports rank 2 or 3 tensors, got rank ${$img.rank}.`);\n  }\n  const [height, width] = $img.shape.slice(0, 2);\n  const depth = $img.rank === 2 ? 1 : $img.shape[2];\n\n  if (depth > 4 || depth === 2) {\n    throw new Error(\n        `toPixels only supports depth of size ` +\n        `1, 3 or 4 but got ${depth}`);\n  }\n\n  if ($img.dtype !== 'float32' && $img.dtype !== 'int32') {\n    throw new Error(\n        `Unsupported type for toPixels: ${$img.dtype}.` +\n        ` Please use float32 or int32 tensors.`);\n  }\n\n  const data = await $img.data();\n  const multiplier = $img.dtype === 'float32' ? 255 : 1;\n  const bytes = new Uint8ClampedArray(width * height * 4);\n\n  for (let i = 0; i < height * width; ++i) {\n    const rgba = [0, 0, 0, 255];\n\n    for (let d = 0; d < depth; d++) {\n      const value = data[i * depth + d];\n\n      if ($img.dtype === 'float32') {\n        if (value < 0 || value > 1) {\n          throw new Error(\n              `Tensor values for a float32 Tensor must be in the ` +\n              `range [0 - 1] but encountered ${value}.`);\n        }\n      } else if ($img.dtype === 'int32') {\n        if (value < 0 || value > 255) {\n          throw new Error(\n              `Tensor values for a int32 Tensor must be in the ` +\n              `range [0 - 255] but encountered ${value}.`);\n        }\n      }\n\n      if (depth === 1) {\n        rgba[0] = value * multiplier;\n        rgba[1] = value * multiplier;\n        rgba[2] = value * multiplier;\n      } else {\n        rgba[d] = value * multiplier;\n      }\n    }\n\n    const j = i * 4;\n    bytes[j + 0] = Math.round(rgba[0]);\n    bytes[j + 1] = Math.round(rgba[1]);\n    bytes[j + 2] = Math.round(rgba[2]);\n    bytes[j + 3] = Math.round(rgba[3]);\n  }\n\n  if (canvas != null) {\n    canvas.width = width;\n    canvas.height = height;\n    const ctx = canvas.getContext('2d');\n    const imageData = new ImageData(bytes, width, height);\n    ctx.putImageData(imageData, 0, 0);\n  }\n  if ($img !== img) {\n    $img.dispose();\n  }\n  return bytes;\n}\n\nexport const fromPixels = /* @__PURE__ */ op({fromPixels_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor3D} from '../tensor';\nimport {inferShape} from '../tensor_util_env';\nimport {TensorLike3D} from '../types';\nimport {DataType} from '../types';\nimport {assertNonNull} from '../util';\nimport {makeTensor} from './tensor_ops_util';\n\n/**\n * Creates rank-3 `tf.Tensor` with the provided values, shape and dtype.\n *\n * The same functionality can be achieved with `tf.tensor`, but in general\n * we recommend using `tf.tensor3d` as it makes the code more readable.\n *\n *  ```js\n * // Pass a nested array.\n * tf.tensor3d([[[1], [2]], [[3], [4]]]).print();\n * ```\n * ```js\n * // Pass a flat array and specify a shape.\n * tf.tensor3d([1, 2, 3, 4], [2, 2, 1]).print();\n * ```\n *\n * @param values The values of the tensor. Can be nested array of numbers,\n *     or a flat array, or a `TypedArray`.\n * @param shape The shape of the tensor. If not provided,  it is inferred from\n *     `values`.\n * @param dtype The data type.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nexport function tensor3d(\n    values: TensorLike3D, shape?: [number, number, number],\n    dtype?: DataType): Tensor3D {\n  assertNonNull(values);\n  if (shape != null && shape.length !== 3) {\n    throw new Error('tensor3d() requires shape to have three numbers');\n  }\n  const inferredShape = inferShape(values, dtype);\n  if (inferredShape.length !== 3 && inferredShape.length !== 1) {\n    throw new Error(\n        'tensor3d() requires values to be number[][][] or flat/TypedArray');\n  }\n  if (inferredShape.length === 1 && shape == null) {\n    throw new Error(\n        'tensor3d() requires shape to be provided when `values` ' +\n        'are a flat array');\n  }\n  return makeTensor(values, shape, inferredShape, dtype) as Tensor3D;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport { TensorInfo } from '../tensor_info';\nimport * as util from '../util';\n\nconst NEW_AXIS = -2;\nconst SHRINK_AXIS = -1;\n\n// Sparse slicing specification\n// if one does foo[3:5, ..., -3], the begin, end and strides will have length\n// of 3.\ninterface StridedSliceSparseSpec {\n  dims: number;\n  numAddAxisAfterEllipsis: number;\n  begin: number[];\n  end: number[];\n  strides: number[];\n  beginMask: number;\n  endMask: number;\n  ellipsisMask: number;\n  newAxisMask: number;\n  shrinkAxisMask: number;\n}\n\n// Dense slicing specification\n// all ellipses and newaxis are expanded out. So if foo[3:5, ..., -3] where foo\n// is 10 dimensional, each array of begin, end, strides will have 10 entries\n// where as the sparse can have length less than the rank of foo.\ninterface StridedSliceDenseSpec {\n  dims: number;\n  beginMask?: number;\n  endMask?: number;\n  beginValid: boolean;\n  endValid: boolean;\n  begin?: number[];\n  end?: number[];\n  strides?: number[];\n  // This array helps construct the final shape of the slice.\n  // The final tensor is reduced in rank whenever a single index e.g. foo[3]\n  // is called for. The final tensor increases in rank with newAxis entries.\n  // If an index in this array is positive, the size of the dimension is\n  // obtained from canonical end-begin.  Otherwise, if it is a NEW_AXIS, it will\n  // be 1. A shrunk dimension is skipped.\n  finalShapeGatherIndices?: number[];\n  // This array has the same size as finalShapeGatherIndices, but it remembers\n  // the sparse index that a dimension comes from, instead of dense index.\n  // A -1 in this vector means the index is not from the sparse input.\n  finalShapeGatherIndicesSparse?: number[];\n  inputShapeGatherIndicesSparse?: number[];\n  // The dense indexed shrink mask is which processing dimensions should be\n  // shrunk. For example, if foo.shape = [10, 10, 10, 10], foo[3, ..., 5] has\n  // sparseShrinkAxisMask of 5 (0101) and denseShrinkAxisMask of 9 (1001),\n  // yielding a final shape [10, 10].\n  shrinkAxisMask?: number;\n}\n\nexport type SliceInfo = {\n  finalShapeSparse: number[],\n  finalShape: number[],\n  isIdentity: boolean,\n  sliceDim0: boolean,\n  isSimpleSlice: boolean,\n  begin: number[],\n  end: number[],\n  strides: number[]\n};\n\nexport function assertParamsValid(\n    input: TensorInfo, begin: number[], size: number[]): void {\n  const inputRank = input.shape.length;\n  util.assert(\n      inputRank === begin.length,\n      () => `Error in slice${inputRank}D: Length of begin ${begin} must ` +\n          `match the rank of the array (${inputRank}).`);\n  util.assert(\n      inputRank === size.length,\n      () => `Error in slice${inputRank}D: Length of size ${size} must ` +\n          `match the rank of the array (${inputRank}).`);\n\n  for (let i = 0; i < inputRank; ++i) {\n    util.assert(\n        begin[i] + size[i] <= input.shape[i],\n        () => `Error in slice${inputRank}D: begin[${i}] + size[${i}] ` +\n            `(${begin[i] + size[i]}) would overflow input.shape[${i}] (${\n                  input.shape[i]})`);\n  }\n}\n\n/** Converts a binary mask to an array of axes. Used in stridedSlice(). */\nexport function maskToAxes(mask: number): number[] {\n  const axes = [];\n  let axis = 0;\n  while (mask > 0) {\n    if (mask & 1) {\n      axes.push(axis);\n    }\n    mask /= 2;\n    axis++;\n  }\n  return axes;\n}\n\n/** Computes the output shape given the strided slice params. */\nexport function computeOutShape(\n    begin: number[], end: number[], strides: number[]): number[] {\n  const size = [];\n  for (let axis = 0; axis < begin.length; axis++) {\n    size[axis] = Math.ceil((end[axis] - begin[axis]) / strides[axis]);\n  }\n  return size;\n}\n\n// Creates full selection at the elided dimensions. If the dimension matches\n// the ellipsis mask, override the current stride value. Otherwise, insert.\nexport function stridesWithElidedDims(\n    strides: number[], ellipsisInsertionIndex: number, numElidedAxes: number,\n    inputShape: number[]): number[] {\n  const newStrides = [...strides];\n  for (let i = newStrides.length; i < inputShape.length; i++) {\n    newStrides.push(1);\n  }\n  for (let i = 0; i < numElidedAxes; i++) {\n    if (i === 0) {\n      newStrides[ellipsisInsertionIndex] = 1;\n    } else {\n      newStrides.splice(\n          ellipsisInsertionIndex, 0 /* num elements to delete */,\n          1 /* element to add */);\n      newStrides.pop();\n    }\n  }\n  return newStrides;\n}\n\nfunction unnormalizeAxis(\n    ellipsisInsertionIndex: number, numElidedAxes: number,\n    normalizedAxis: number): number {\n  if (normalizedAxis <= ellipsisInsertionIndex) {\n    return normalizedAxis;\n  }\n\n  return normalizedAxis - (numElidedAxes - 1);\n}\n\nfunction getElidedAxes(numElidedAxes: number, ellipsisInsertionIndex: number) {\n  const elidedAxes = [];\n  for (let i = 0; i < numElidedAxes; i++) {\n    elidedAxes.push(ellipsisInsertionIndex + i);\n  }\n  return elidedAxes;\n}\n\n// Normalize the start, end and strides.\nexport function getNormalizedAxes(\n    inputShape: number[], ellipsisAxes: number[], numInterpolatedAxes: number,\n    begin: number[], end: number[], strides: number[], beginMask: number,\n    endMask: number,\n    ellipsisMask: number): {begin: number[], end: number[], strides: number[]} {\n  const inputRank = inputShape.length;\n  let normalizedBegin = new Array(inputRank),\n      normalizedEnd = new Array(inputRank),\n      normalizedStrides = new Array(inputRank);\n  if (ellipsisAxes.length && numInterpolatedAxes > 0) {\n    const fullIndex = ellipsisAxes[0];\n\n    // The ellipsis applies to the masked index as well as any dimensions\n    // that are interpolated.\n    const numElidedAxes = numInterpolatedAxes + 1;\n    normalizedBegin = startIndicesWithElidedDims(\n        beginMask, fullIndex, numElidedAxes, begin, inputShape);\n    normalizedEnd = stopIndicesWithElidedDims(\n        endMask, fullIndex, numElidedAxes, end, inputShape);\n    normalizedStrides =\n        stridesWithElidedDims(strides, fullIndex, numElidedAxes, inputShape);\n  } else {\n    for (let axis = 0; axis < inputRank; axis++) {\n      normalizedBegin[axis] = startForAxis(\n          beginMask, begin, strides, inputShape, axis, ellipsisMask);\n      normalizedEnd[axis] =\n          stopForAxis(endMask, end, strides, inputShape, axis, ellipsisMask);\n      normalizedStrides[axis] = stridesForAxis(strides, axis, ellipsisMask);\n    }\n  }\n\n  return {\n    begin: normalizedBegin,\n    end: normalizedEnd,\n    strides: normalizedStrides\n  };\n}\n\n// Creates full selection at the elided dimensions. If the dimension matches\n// the ellipsis mask, override the current start value. Otherwise, insert.\nexport function startIndicesWithElidedDims(\n    beginMask: number, ellipsisInsertionIndex: number, numElidedAxes: number,\n    originalBegin: number[], inputShape: number[]): number[] {\n  const newIndices = [...inputShape];\n  const elidedAxes = getElidedAxes(numElidedAxes, ellipsisInsertionIndex);\n\n  for (let axis = 0; axis < newIndices.length; axis++) {\n    if (elidedAxes.indexOf(axis) > -1) {\n      newIndices[axis] = 0;\n    } else {\n      const originalAxis =\n          unnormalizeAxis(ellipsisInsertionIndex, numElidedAxes, axis);\n      let originalValue = originalBegin[originalAxis];\n      if (beginMask & 1 << originalAxis) {\n        originalValue = 0;\n      }\n\n      newIndices[axis] = originalValue;\n    }\n  }\n  return newIndices;\n}\n\n// Creates full selection at the elided dimensions. If the dimension matches\n// the ellipsis mask, override the current stop value. Otherwise, insert.\nexport function stopIndicesWithElidedDims(\n    endMask: number, ellipsisInsertionIndex: number, numElidedAxes: number,\n    originalEnd: number[], inputShape: number[]): number[] {\n  const newIndices = [...inputShape];\n  const elidedAxes = getElidedAxes(numElidedAxes, ellipsisInsertionIndex);\n\n  for (let axis = 0; axis < newIndices.length; axis++) {\n    if (elidedAxes.indexOf(axis) > -1) {\n      newIndices[axis] = Number.MAX_SAFE_INTEGER;\n    } else {\n      const originalAxis =\n          unnormalizeAxis(ellipsisInsertionIndex, numElidedAxes, axis);\n      let originalValue = originalEnd[originalAxis];\n      if (endMask & 1 << originalAxis) {\n        originalValue = Number.MAX_SAFE_INTEGER;\n      }\n      newIndices[axis] = originalValue;\n    }\n  }\n\n  for (let i = 0; i < newIndices.length; i++) {\n    // Handle negative indices\n    const axisSize = inputShape[i];\n    if (newIndices[i] < 0) {\n      newIndices[i] += axisSize;\n    }\n    newIndices[i] = util.clamp(0, newIndices[i], inputShape[i]);\n  }\n  return newIndices;\n}\n\nexport function stridesForAxis(\n    strides: number[], axis: number, ellipsisMask: number): number {\n  let stride = strides[axis];\n  if (ellipsisMask & (1 << axis) || stride == null) {\n    stride = 1;\n  }\n\n  return stride;\n}\n\nexport function startForAxis(\n    beginMask: number, startIndices: number[], strides: number[],\n    inputShape: number[], axis: number, ellipsisMask: number): number {\n  // Begin with the specified index\n  let start = startIndices[axis];\n  const stride = strides[axis] || 1;\n\n  // Check the axis bit from right of masked axes, or the begin index is not set\n  // for the axis.\n  if (beginMask & 1 << axis || ellipsisMask & 1 << axis || start == null) {\n    if (stride > 0) {\n      // Forward iteration - use the first element. These values will get\n      // clamped below (Note: We could have set them to 0 and axis_size-1, but\n      // use lowest() and max() to maintain symmetry with StopForAxis())\n      start = Number.MIN_SAFE_INTEGER;\n    } else {\n      // Backward iteration - use the last element.\n      start = Number.MAX_SAFE_INTEGER;\n    }\n  }\n\n  // Handle negative indices\n  const axisSize = inputShape[axis];\n  if (start < 0) {\n    start += axisSize;\n  }\n\n  // Clamping\n  start = util.clamp(0, start, axisSize - 1);\n\n  return start;\n}\n\nexport function stopForAxis(\n    endMask: number, stopIndices: number[], strides: number[],\n    inputShape: number[], axis: number, ellipsisMask: number): number {\n  // Begin with the specified index\n  let stop = stopIndices[axis];\n  const stride = strides[axis] || 1;\n\n  // Check the axis bit from right of masked axes, or if the stop index is not\n  // set for this axis.\n  if (endMask & (1 << axis) || ellipsisMask & (1 << axis) || stop == null) {\n    if (stride > 0) {\n      // Forward iteration - use the last element. These values will get\n      // clamped below\n      stop = Number.MAX_SAFE_INTEGER;\n    } else {\n      // Backward iteration - use the first element.\n      stop = Number.MIN_SAFE_INTEGER;\n    }\n  }\n\n  // Handle negative indices\n  const axisSize = inputShape[axis];\n  if (stop < 0) {\n    stop += axisSize;\n  }\n\n  // Clamping\n  // Because the end index points one past the last element, we need slightly\n  // different clamping ranges depending on the direction.\n  if (stride > 0) {\n    // Forward iteration\n    stop = util.clamp(0, stop, axisSize);\n  } else {\n    // Backward iteration\n    stop = util.clamp(-1, stop, axisSize - 1);\n  }\n\n  return stop;\n}\n\n/**\n * Returns true if the slice occupies a continous set of elements in the\n * 'flat' space.\n */\nexport function isSliceContinous(\n    shape: number[], begin: number[], size: number[]) {\n  // Index of the first axis that has size > 1.\n  let firstNonOneAxis = size.length;\n  for (let i = 0; i < size.length; i++) {\n    if (size[i] > 1) {\n      firstNonOneAxis = i;\n      break;\n    }\n  }\n\n  for (let i = firstNonOneAxis + 1; i < size.length; i++) {\n    if (begin[i] > 0 || size[i] !== shape[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function computeFlatOffset(begin: number[], strides: number[]): number {\n  let flatOffset = begin.length > 0 ? begin[begin.length - 1] : 1;\n  for (let i = 0; i < begin.length - 1; i++) {\n    flatOffset += begin[i] * strides[i];\n  }\n  return flatOffset;\n}\n\nexport function parseSliceParams(\n    x: TensorInfo, begin: number|number[], size?: number|number[]) {\n  // The following logic allows for more ergonomic calls.\n  let begin_: number[];\n  const xRank = x.shape.length;\n  if (typeof begin === 'number') {\n    begin_ = [begin, ...new Array(xRank - 1).fill(0)];\n  } else if (begin.length < xRank) {\n    begin_ = begin.concat(new Array(xRank - begin.length).fill(0));\n  } else {\n    begin_ = begin.slice();\n  }\n  begin_.forEach(d => {\n    util.assert(\n        d !== -1, () => 'slice() does not support negative begin indexing.');\n  });\n  let size_: number[];\n  if (size == null) {\n    size_ = new Array(xRank).fill(-1);\n  } else if (typeof size === 'number') {\n    size_ = [size, ...new Array(xRank - 1).fill(-1)];\n  } else if (size.length < xRank) {\n    size_ = size.concat(new Array(xRank - size.length).fill(-1));\n  } else {\n    size_ = size;\n  }\n  size_ = size_.map((d, i) => {\n    if (d >= 0) {\n      return d;\n    } else {\n      util.assert(\n          d === -1,\n          () => `Negative size values should be exactly -1 but got ` +\n              `${d} for the slice() size at index ${i}.`);\n      return x.shape[i] - begin_[i];\n    }\n  });\n  return [begin_, size_];\n}\n\n// Convert the slicing specification from a sparse representation to a dense\n// representation. This means that all ellipses and newaxis are expanded out.\nexport function sliceInfo(\n    xShape: number[], begin: number[], end: number[], strides: number[],\n    beginMask: number, endMask: number, ellipsisMask: number,\n    newAxisMask: number, shrinkAxisMask: number): SliceInfo {\n  let stridesNonNull;\n  if (strides == null) {\n    stridesNonNull = new Array(begin.length);\n    stridesNonNull.fill(1);\n  } else {\n    stridesNonNull = strides;\n  }\n\n  // Only one non-zero bit is allowed in ellipsisMask, which means ellipsisMask\n  // is a power of 2. Use bit compares to ensure ellipsisMask is 0 or a power\n  // of 2. When i is a power of 2, i & (i - 1) is always 0.\n  // Also ref:\n  // https://stackoverflow.com/questions/600293/how-to-check-if-a-number-is-a-power-of-2\n  if (ellipsisMask != null && (ellipsisMask & (ellipsisMask - 1)) !== 0) {\n    throw new Error('Multiple ellipses in slice is not allowed.');\n  }\n\n  // Step 1: Account for ellipsis and new axis.\n  // Check for ellipsis and count how many non-newaxis there are after.\n  let ellipsisSeen = false;\n\n  const sparseSpec: StridedSliceSparseSpec = {\n    dims: stridesNonNull.length,\n    numAddAxisAfterEllipsis: 0,\n    begin: begin.slice(),\n    end: end.slice(),\n    strides: stridesNonNull.slice(),\n    beginMask,\n    endMask,\n    ellipsisMask,\n    newAxisMask,\n    shrinkAxisMask\n  };\n\n  for (let i = 0; i < sparseSpec.dims; i++) {\n    if (ellipsisSeen && ((1 << i) & newAxisMask) !== 0) {\n      sparseSpec.numAddAxisAfterEllipsis++;\n    }\n    if ((1 << i) & ellipsisMask) {\n      ellipsisSeen = true;\n    }\n  }\n  // If no ellipsis insert one at the end.\n  if (!ellipsisSeen) {\n    sparseSpec.ellipsisMask |= (1 << sparseSpec.dims);\n    sparseSpec.dims++;  // this effects loop iteration below\n  }\n\n  // Step 2: Make a sparse spec into a full index spec.\n  //\n  // The sparse spec deos not correspond to the number of dimensions.\n  // Make a dense spec that cooresponds to the number of dimensions.\n  //\n  // For example suppose foo[...,3:] on foo.shape = [2, 2, 3] then we need to\n  // produce the missing beginMask for the first two dimensions i.e. from\n  // beginMaskSpec = 0, endMaskSpec = 2, we achieve beginMask = 6 (110),\n  // endMask = 7 (111).\n  const denseSpec: StridedSliceDenseSpec = {\n    dims: xShape.length,\n    beginMask: 0,\n    endMask: 0,\n    beginValid: false,\n    endValid: false\n  };\n\n  buildDenseSpec(sparseSpec, denseSpec);\n\n  // Step 3: Make implicit ranges (non-zero beginMasks and endMasks) explicit\n  // and bounds check.\n  let isIdentity = true;\n  let sliceDim0 = true;\n  let isSimpleSlice = true;\n  const processingShape = [];\n  const finalShape = [];\n\n  for (let i = 0; i < xShape.length; ++i) {\n    if (denseSpec.strides[i] === 0) {\n      throw Error(`strides[${i}] must be non-zero`);\n    }\n    const shrinkI = !!(denseSpec.shrinkAxisMask & (1 << i));\n    const dimI = xShape[i];\n    if (dimI === -1) {\n      processingShape.push(shrinkI ? 1 : -1);\n      continue;\n    }\n\n    const masks =\n        [denseSpec.beginMask & (1 << i), denseSpec.endMask & (1 << i)];\n    const validRange = [\n      denseSpec.strides[i] > 0 ? 0 : -1,\n      denseSpec.strides[i] > 0 ? dimI : dimI - 1\n    ];\n\n    if (shrinkI && denseSpec.strides[i] <= 0) {\n      throw Error('only stride 1 allowed on non-range indexing.');\n    }\n\n    isSimpleSlice = isSimpleSlice && (denseSpec.strides[i] === 1);\n\n    const beginAndEndMasked =\n        !!((denseSpec.beginMask & (1 << i)) && (denseSpec.endMask & (1 << i)));\n\n    if (denseSpec.beginValid && denseSpec.endValid) {\n      if (shrinkI) {\n        // If we are shrinking, the end index is now possibly incorrect. In\n        // particular foo[-1] produces sparseBegin = -1, sparseEnd = 0.\n        // and canonical puts these to n-1 and 0, which implies a degenerate\n        // interval. Fortunately, it is now safe to re-create end as begin + 1.\n        const xFwd = denseSpec.begin[i] < 0 ? dimI + denseSpec.begin[i] :\n                                              denseSpec.begin[i];\n        denseSpec.begin[i] = xFwd;\n        denseSpec.end[i] = denseSpec.begin[i] + 1;\n        if (xFwd < 0 || xFwd >= dimI) {\n          throw Error(`slice index ${denseSpec.begin[i]} of dimension ${\n              i} out of bounds.`);\n        }\n      } else {\n        denseSpec.begin[i] = canonical(\n            denseSpec.begin[i], 0, denseSpec.strides[i], dimI, masks,\n            validRange);\n        denseSpec.end[i] = canonical(\n            denseSpec.end[i], 1, denseSpec.strides[i], dimI, masks, validRange);\n      }\n      // Update optimization values\n      const takeAllInDimension = denseSpec.strides[i] === 1 &&\n          denseSpec.begin[i] === 0 && denseSpec.end[i] === dimI;\n      isIdentity = isIdentity && takeAllInDimension;\n      sliceDim0 = sliceDim0 &&\n          ((i === 0 && denseSpec.strides[i] === 1) || takeAllInDimension);\n    } else {\n      isIdentity =\n          isIdentity && ((denseSpec.strides[i] === 1) && beginAndEndMasked);\n      sliceDim0 = sliceDim0 &&\n          ((i === 0 && denseSpec.strides[i] === 1) || beginAndEndMasked);\n    }\n    // Compute the processing shape (the intermediate Eigen will produce)\n    let intervalLength;\n    let knownInterval = false;\n    if (denseSpec.beginValid && denseSpec.endValid) {\n      intervalLength = denseSpec.end[i] - denseSpec.begin[i];\n      knownInterval = true;\n    } else if (shrinkI) {\n      // The dimension is still known as 1 for the processingShape, but will be\n      // discarded for the final shape.\n      intervalLength = 1;\n      knownInterval = true;\n    } else if (beginAndEndMasked) {\n      // Even if we don't have values for begin or end, we do know that this\n      // dimension covers the whole interval. If we have shape information for\n      // this dimension, that tells us the interval length.\n      if (dimI >= 0) {\n        if (denseSpec.strides[i] < 0) {\n          intervalLength = -dimI;\n        } else {\n          intervalLength = dimI;\n        }\n        knownInterval = true;\n      }\n    }\n    if (knownInterval) {\n      let sizeI;\n      // Hold zero if the interval is degenerate, otherwise account for\n      // remainder\n      if (intervalLength === 0 ||\n          ((intervalLength < 0) !== (denseSpec.strides[i] < 0))) {\n        sizeI = 0;\n      } else {\n        sizeI = Math.trunc(intervalLength / denseSpec.strides[i]) +\n            (intervalLength % denseSpec.strides[i] !== 0 ? 1 : 0);\n      }\n      processingShape.push(sizeI);\n    } else {\n      processingShape.push(-1);\n    }\n  }\n\n  // Step 4: Compute the final shape\n  //\n  // newAxis will increase dimension by 1 (with a one-size dimension)\n  // slices like foo[3, ...] will reduce dimension by 1.\n  // This cannot be done earlier, because it depends on Step 3.\n  for (let denseDim = 0; denseDim < denseSpec.finalShapeGatherIndices.length;\n       ++denseDim) {\n    const gatherIndex = denseSpec.finalShapeGatherIndices[denseDim];\n    if (gatherIndex >= 0) {\n      finalShape.push(processingShape[gatherIndex]);\n    } else if (gatherIndex === NEW_AXIS) {\n      finalShape.push(1);\n    }\n  }\n\n  const finalShapeSparse = finalShape.filter(\n      (dim, i) => denseSpec.finalShapeGatherIndices[i] !== NEW_AXIS);\n\n  return {\n    finalShapeSparse,\n    finalShape,\n    isIdentity,\n    sliceDim0,\n    isSimpleSlice,\n    begin: denseSpec.begin,\n    end: denseSpec.end,\n    strides: denseSpec.strides\n  };\n}\n\nfunction buildDenseSpec(\n    sparse: StridedSliceSparseSpec, dense: StridedSliceDenseSpec) {\n  dense.beginMask = 0;\n  dense.endMask = 0;\n  dense.shrinkAxisMask = 0;\n\n  let fullIndex = 0;\n  dense.beginValid = sparse.begin != null;\n  dense.endValid = sparse.end != null;\n\n  dense.begin = new Array(dense.dims);\n  dense.end = new Array(dense.dims);\n  dense.strides = new Array(dense.dims);\n  dense.finalShapeGatherIndices = [];\n  dense.finalShapeGatherIndicesSparse = [];\n  dense.inputShapeGatherIndicesSparse = new Array(dense.dims);\n\n  for (let i = 0; i < sparse.dims; i++) {\n    if ((1 << i) & sparse.ellipsisMask) {\n      // Only the bit that has ellipsis will fall in this condition.\n      // Expand the ellipsis into the appropriate indices\n      // Note: this only works because we guaranteed one ellipsis.\n      const nextIndex = Math.min(\n          dense.dims - (sparse.dims - i) + 1 + sparse.numAddAxisAfterEllipsis,\n          dense.dims);\n      for (; fullIndex < nextIndex; fullIndex++) {\n        // newAxis aren't real axis so you have to skip.\n        dense.begin[fullIndex] = 0;\n        dense.end[fullIndex] = 0;\n        dense.strides[fullIndex] = 1;\n        dense.beginMask |= (1 << fullIndex);\n        dense.endMask |= (1 << fullIndex);\n        dense.finalShapeGatherIndices.push(fullIndex);\n        dense.finalShapeGatherIndicesSparse.push(-1);\n        dense.inputShapeGatherIndicesSparse[fullIndex] = i;\n      }\n    } else if ((1 << i) & sparse.newAxisMask) {\n      // Only the bit that has newAxis will fall in this condition.\n      dense.finalShapeGatherIndices.push(NEW_AXIS);\n      dense.finalShapeGatherIndicesSparse.push(-1);\n    } else {\n      if (fullIndex === dense.begin.length) {\n        throw Error(\n            `Index out of range using input dim ${fullIndex}; input ` +\n            `has only ${dense.dims} dims, ${dense.begin.length}.`);\n      }\n\n      // Gather slicing spec into appropriate index.\n      if (sparse.begin != null) {\n        dense.begin[fullIndex] = sparse.begin[i];\n      }\n      if (sparse.end != null) {\n        dense.end[fullIndex] = sparse.end[i];\n      }\n      dense.strides[fullIndex] = sparse.strides[i];\n      if (sparse.beginMask & (1 << i)) {\n        dense.beginMask |= (1 << fullIndex);\n      }\n      if (sparse.endMask & (1 << i)) {\n        dense.endMask |= (1 << fullIndex);\n      }\n      // If shrink, record where to get the dimensionality from (i.e. newAxis)\n      // creates a fake 1 size dimension. Also remember shrink axis (now in\n      // dense form) so we can ignore dense.end below.\n      if (sparse.shrinkAxisMask & (1 << i)) {\n        dense.finalShapeGatherIndices.push(SHRINK_AXIS);\n        dense.finalShapeGatherIndicesSparse.push(-1);\n        dense.shrinkAxisMask |= (1 << fullIndex);\n      } else {\n        dense.finalShapeGatherIndices.push(fullIndex);\n        // Remember that where in the sparse shape the dense dim comes from.\n        dense.finalShapeGatherIndicesSparse.push(i);\n      }\n      dense.inputShapeGatherIndicesSparse[fullIndex] = i;\n      fullIndex++;\n    }\n  }\n}\n\nfunction canonical(\n    x: number, c: number, strideI: number, dimI: number, masks: number[],\n    validRange: number[]) {\n  if (masks[c]) {\n    return strideI > 0 ? validRange[c] : validRange[(c + 1) & 1];\n  } else {\n    const xFwd = x < 0 ? dimI + x : x;  // make negative indices positive\n    return xFwd < validRange[0] ? validRange[0] :\n                                  xFwd > validRange[1] ? validRange[1] : xFwd;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {Acos, AcosInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes acos of the input `tf.Tensor` element-wise: `acos(x)`\n *\n * ```js\n * const x = tf.tensor1d([0, 1, -1, .7]);\n *\n * x.acos().print();  // or tf.acos(x)\n * ```\n * @param x The input tensor.\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction acos_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'acos');\n  const inputs: AcosInputs = {x: $x};\n\n  return ENGINE.runKernel(Acos, inputs as unknown as NamedTensorMap);\n}\nexport const acos = /* @__PURE__ */ op({acos_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Acosh, AcoshInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes the inverse hyperbolic cos of the input `tf.Tensor` element-wise:\n * `acosh(x)`\n *\n * ```js\n * const x = tf.tensor1d([10, 1, 3, 5.7]);\n *\n * x.acosh().print();  // or tf.acosh(x)\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction acosh_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'acosh');\n  const inputs: AcoshInputs = {x: $x};\n\n  return ENGINE.runKernel(Acosh, inputs as unknown as NamedTensorMap);\n}\nexport const acosh = /* @__PURE__ */ op({acosh_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {AddN, AddNInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {op} from './operation';\n\n/**\n * Adds a list of `tf.Tensor`s element-wise, each with the same shape and dtype.\n *\n * ```js\n * const a = tf.tensor1d([1, 2]);\n * const b = tf.tensor1d([3, 4]);\n * const c = tf.tensor1d([5, 6]);\n *\n * tf.addN([a, b, c]).print();\n * ```\n * @param tensors A list of tensors with the same shape and dtype.\n * @doc {heading: 'Operations', subheading: 'Arithmetic'}\n */\nfunction addN_<T extends Tensor>(tensors: Array<T|TensorLike>): T {\n  util.assert(\n      Array.isArray(tensors),\n      () => 'The argument passed to tf.addN() must be a list of tensors');\n  util.assert(\n      tensors.length >= 1,\n      () => `Must pass at least one tensor to tf.addN(), but got ` +\n          `${tensors.length}`);\n\n  const $tensors =\n      tensors.map((t, i) => convertToTensor(t, `tensors${i}`, 'addN'));\n\n  const firstTensor = $tensors[0];\n  $tensors.forEach(t => {\n    if (t.dtype !== firstTensor.dtype) {\n      throw new Error(\n          'All tensors passed to tf.addN() must have the same dtype');\n    }\n  });\n\n  $tensors.forEach(t => {\n    if (!util.arraysEqual(t.shape, firstTensor.shape)) {\n      throw new Error(\n          'All tensors passed to tf.addN() must have the same shape');\n    }\n  });\n\n  const inputs: AddNInputs = $tensors;\n\n  return ENGINE.runKernel(AddN, inputs as unknown as NamedTensorMap);\n}\n\nexport const addN = /* @__PURE__ */ op({addN_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {All, AllAttrs, AllInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes the logical and of elements across dimensions of a `tf.Tensor`.\n *\n * Reduces the input along the dimensions given in `axes`. Unless `keepDims`\n * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in\n * `axes`. If `keepDims` is true, the reduced dimensions are retained with\n * length 1. If `axes` has no entries, all dimensions are reduced, and a\n * `tf.Tensor` with a single element is returned.\n *\n * ```js\n * const x = tf.tensor1d([1, 1, 1], 'bool');\n *\n * x.all().print();  // or tf.all(x)\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 1, 0, 0], [2, 2], 'bool');\n *\n * const axis = 1;\n * x.all(axis).print();  // or tf.all(x, axis)\n * ```\n *\n * @param x The input tensor. Must be of dtype bool.\n * @param axis The dimension(s) to reduce. By default it reduces\n *     all dimensions.\n * @param keepDims If true, retains reduced dimensions with size 1.\n *\n * @doc {heading: 'Operations', subheading: 'Reduction'}\n */\nfunction all_<T extends Tensor>(\n    x: Tensor|TensorLike, axis: number|number[] = null, keepDims = false): T {\n  const $x = convertToTensor(x, 'x', 'all', 'bool');\n\n  const inputs: AllInputs = {x: $x};\n  const attrs: AllAttrs = {axis, keepDims};\n\n  return ENGINE.runKernel(\n      All, inputs as unknown as NamedTensorMap,\n      attrs as unknown as NamedAttrMap);\n}\n\nexport const all = /* @__PURE__ */ op({all_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Any, AnyAttrs, AnyInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes the logical or of elements across dimensions of a `tf.Tensor`.\n *\n * Reduces the input along the dimensions given in `axes`. Unless `keepDims`\n * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in\n * `axes`. If `keepDims` is true, the reduced dimensions are retained with\n * length 1. If `axes` has no entries, all dimensions are reduced, and a\n * `tf.Tensor` with a single element is returned.\n *\n * ```js\n * const x = tf.tensor1d([1, 1, 1], 'bool');\n *\n * x.any().print();  // or tf.any(x)\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 1, 0, 0], [2, 2], 'bool');\n *\n * const axis = 1;\n * x.any(axis).print();  // or tf.any(x, axis)\n * ```\n *\n * @param x The input tensor. Must be of dtype bool.\n * @param axis The dimension(s) to reduce. By default it reduces\n *     all dimensions.\n * @param keepDims If true, retains reduced dimensions with size 1.\n *\n * @doc {heading: 'Operations', subheading: 'Reduction'}\n */\nfunction any_<T extends Tensor>(\n    x: Tensor|TensorLike, axis: number|number[] = null, keepDims = false): T {\n  const $x = convertToTensor(x, 'x', 'any', 'bool');\n\n  const inputs: AnyInputs = {x: $x};\n  const attrs: AnyAttrs = {axis, keepDims};\n\n  return ENGINE.runKernel(\n      Any, inputs as unknown as NamedTensorMap,\n      attrs as unknown as NamedAttrMap);\n}\n\n// tslint:disable-next-line:variable-name\nexport const any = /* @__PURE__ */ op({any_});\n","/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {ArgMax, ArgMaxAttrs, ArgMaxInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Returns the indices of the maximum values along an `axis`.\n *\n * The result has the same shape as `input` with the dimension along `axis`\n * removed.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3]);\n *\n * x.argMax().print();  // or tf.argMax(x)\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 4, 3], [2, 2]);\n *\n * const axis = 1;\n * x.argMax(axis).print();  // or tf.argMax(x, axis)\n * ```\n *\n * @param x The input tensor.\n * @param axis The dimension to reduce. Defaults to 0 (outer-most dimension).\n *\n * @doc {heading: 'Operations', subheading: 'Reduction'}\n */\nfunction argMax_<T extends Tensor>(x: Tensor|TensorLike, axis = 0): T {\n  const $x = convertToTensor(x, 'x', 'argMax');\n\n  const inputs: ArgMaxInputs = {x: $x};\n  const attrs: ArgMaxAttrs = {axis};\n\n  return ENGINE.runKernel(\n      ArgMax, inputs as unknown as NamedTensorMap,\n      attrs as unknown as NamedAttrMap);\n}\n\nexport const argMax = /* @__PURE__ */ op({argMax_});\n","/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {ArgMin, ArgMinAttrs, ArgMinInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Returns the indices of the minimum values along an `axis`.\n *\n * The result has the same shape as `input` with the dimension along `axis`\n * removed.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3]);\n *\n * x.argMin().print();  // or tf.argMin(x)\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 4, 3], [2, 2]);\n *\n * const axis = 1;\n * x.argMin(axis).print();  // or tf.argMin(x, axis)\n * ```\n *\n * @param x The input tensor.\n * @param axis The dimension to reduce. Defaults to 0 (outer-most dimension).\n *\n * @doc {heading: 'Operations', subheading: 'Reduction'}\n */\nfunction argMin_<T extends Tensor>(x: Tensor|TensorLike, axis = 0): T {\n  const $x = convertToTensor(x, 'x', 'argMin');\n\n  const inputs: ArgMinInputs = {x: $x};\n  const attrs: ArgMinAttrs = {axis};\n\n  return ENGINE.runKernel(\n      ArgMin, inputs as unknown as NamedTensorMap,\n      attrs as unknown as NamedAttrMap);\n}\n\nexport const argMin = /* @__PURE__ */ op({argMin_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Asin, AsinInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes asin of the input `tf.Tensor` element-wise: `asin(x)`\n *\n * ```js\n * const x = tf.tensor1d([0, 1, -1, .7]);\n *\n * x.asin().print();  // or tf.asin(x)\n * ```\n * @param x The input tensor.\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction asin_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'asin');\n  const inputs: AsinInputs = {x: $x};\n\n  return ENGINE.runKernel(Asin, inputs as unknown as NamedTensorMap);\n}\nexport const asin = /* @__PURE__ */ op({asin_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Asinh, AsinhInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes inverse hyperbolic sin of the input `tf.Tensor` element-wise:\n * `asinh(x)`\n *\n * ```js\n * const x = tf.tensor1d([0, 1, -1, .7]);\n *\n * x.asinh().print();  // or tf.asinh(x)\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction asinh_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'asinh');\n\n  const inputs: AsinhInputs = {x: $x};\n\n  return ENGINE.runKernel(Asinh, inputs as unknown as NamedTensorMap);\n}\nexport const asinh = /* @__PURE__ */ op({asinh_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Atan, AtanInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes atan of the input `tf.Tensor` element-wise: `atan(x)`\n *\n * ```js\n * const x = tf.tensor1d([0, 1, -1, .7]);\n *\n * x.atan().print();  // or tf.atan(x)\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction atan_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'atan');\n\n  const inputs: AtanInputs = {x: $x};\n\n  return ENGINE.runKernel(Atan, inputs as unknown as NamedTensorMap);\n}\nexport const atan = /* @__PURE__ */ op({atan_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Atan2, Atan2Inputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {makeTypesMatch} from '../tensor_util';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes arctangent of `tf.Tensor`s a / b element-wise: `atan2(a, b)`.\n * Supports broadcasting.\n *\n * ```js\n * const a = tf.tensor1d([1.0, 1.0, -1.0, .7]);\n * const b = tf.tensor1d([2.0, 13.0, 3.5, .21]);\n *\n * tf.atan2(a, b).print()\n * ```\n *\n * @param a The first tensor.\n * @param b The second tensor. Must have the same dtype as `a`.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction atan2_<T extends Tensor>(\n    a: Tensor|TensorLike, b: Tensor|TensorLike): T {\n  let $a = convertToTensor(a, 'a', 'atan2');\n  let $b = convertToTensor(b, 'b', 'atan2');\n  [$a, $b] = makeTypesMatch($a, $b);\n\n  const inputs: Atan2Inputs = {a: $a, b: $b};\n\n  return ENGINE.runKernel(Atan2, inputs as unknown as NamedTensorMap);\n}\n\nexport const atan2 = /* @__PURE__ */ op({atan2_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Atanh, AtanhInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes inverse hyperbolic tan of the input `tf.Tensor` element-wise:\n * `atanh(x)`\n *\n * ```js\n * const x = tf.tensor1d([0, .1, -.1, .7]);\n *\n * x.atanh().print();  // or tf.atanh(x)\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction atanh_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'atanh');\n\n  const inputs: AtanhInputs = {x: $x};\n\n  return ENGINE.runKernel(Atanh, inputs as unknown as NamedTensorMap);\n}\nexport const atanh = /* @__PURE__ */ op({atanh_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as util from '../util';\n\ntype PadType = 'SAME'|'VALID'|'NUMBER'|'EXPLICIT';\n\n// For NHWC should be in the following form:\n//  [[0, 0], [pad_top,pad_bottom], [pad_left, pad_right], [0, 0]]\n// For NCHW should be in the following form:\n//  [[0, 0], [0, 0], [pad_top,pad_bottom], [pad_left, pad_right]]\n// Reference: https://www.tensorflow.org/api_docs/python/tf/nn/conv2d\nexport type ExplicitPadding =\n    [[number, number], [number, number], [number, number], [number, number]];\n\nexport type PadInfo = {\n  top: number,\n  left: number,\n  right: number,\n  bottom: number,\n  type: PadType\n};\n\nexport type PadInfo3D = {\n  top: number,\n  left: number,\n  right: number,\n  bottom: number,\n  front: number,\n  back: number,\n  type: PadType\n};\n\n/**\n * Information about the forward pass of a convolution/pooling operation.\n * It includes input and output shape, strides, filter size and padding\n * information.\n */\nexport type Conv2DInfo = {\n  batchSize: number,\n  inHeight: number,\n  inWidth: number,\n  inChannels: number,\n  outHeight: number,\n  outWidth: number,\n  outChannels: number,\n  dataFormat: 'channelsFirst'|'channelsLast',\n  strideHeight: number,\n  strideWidth: number,\n  dilationHeight: number,\n  dilationWidth: number,\n  filterHeight: number,\n  filterWidth: number,\n  effectiveFilterHeight: number,\n  effectiveFilterWidth: number,\n  padInfo: PadInfo,\n  inShape: [number, number, number, number],\n  outShape: [number, number, number, number],\n  filterShape: [number, number, number, number]\n};\n\n/**\n *\n * @param inputShape Input tensor shape is of the following dimensions:\n *     `[batch, height, width, inChannels]`.\n * @param filterShape The filter shape is of the following dimensions:\n *     `[filterHeight, filterWidth, depth]`.\n * @param strides The strides of the sliding window for each dimension of the\n *     input tensor: `[strideHeight, strideWidth]`.\n *     If `strides` is a single number,\n *     then `strideHeight == strideWidth`.\n * @param pad The type of padding algorithm.\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1*1x1.\n *    - For more info, see this guide:\n *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](\n *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)\n * @param dataFormat The data format of the input and output data.\n *     Defaults to 'NHWC'.\n * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`.\n *     Defaults to `[1, 1]`. If `dilations` is a single number, then\n *     `dilationHeight == dilationWidth`.\n */\nexport function computeDilation2DInfo(\n    inputShape: [number, number, number, number],\n    filterShape: [number, number, number], strides: number|[number, number],\n    pad: 'same'|'valid'|number, dataFormat: 'NHWC' = 'NHWC',\n    dilations: number|[number, number]) {\n  // `computerConv2DInfo` require filterShape to be in the dimension of:\n  // `[filterHeight, filterWidth, depth, outDepth]`, dilation2d doesn't have\n  // outDepth, it should have the same depth as the input.\n  // Input shape: [batch, height, width, inChannels]\n  const inputChannels = inputShape[3];\n  const $filterShape =\n      [...filterShape, inputChannels] as [number, number, number, number];\n  const $dataFormat = convertConv2DDataFormat(dataFormat);\n\n  return computeConv2DInfo(\n      inputShape, $filterShape, strides, dilations, pad,\n      null /* roundingMode */, null /* depthWise */, $dataFormat);\n}\n\nexport function computePool2DInfo(\n    inShape: [number, number, number, number],\n    filterSize: [number, number]|number, strides: number|[number, number],\n    dilations: number|[number, number],\n    pad: 'same'|'valid'|number|ExplicitPadding,\n    roundingMode?: 'floor'|'round'|'ceil',\n    dataFormat: 'channelsFirst'|'channelsLast' = 'channelsLast'): Conv2DInfo {\n  const [filterHeight, filterWidth] = parseTupleParam(filterSize);\n\n  let filterShape: [number, number, number, number];\n  if (dataFormat === 'channelsLast') {\n    filterShape = [filterHeight, filterWidth, inShape[3], inShape[3]];\n  } else if (dataFormat === 'channelsFirst') {\n    filterShape = [filterHeight, filterWidth, inShape[1], inShape[1]];\n  } else {\n    throw new Error(`Unknown dataFormat ${dataFormat}`);\n  }\n\n  return computeConv2DInfo(\n      inShape, filterShape, strides, dilations, pad, roundingMode, false,\n      dataFormat);\n}\n\n/**\n * Computes the information for a forward pass of a pooling3D operation.\n */\nexport function computePool3DInfo(\n    inShape: [number, number, number, number, number],\n    filterSize: number|[number, number, number],\n    strides: number|[number, number, number],\n    dilations: number|[number, number, number], pad: 'same'|'valid'|number,\n    roundingMode?: 'floor'|'round'|'ceil',\n    dataFormat: 'NDHWC'|'NCDHW' = 'NDHWC'): Conv3DInfo {\n  const [filterDepth, filterHeight, filterWidth] = parse3TupleParam(filterSize);\n\n  let filterShape: [number, number, number, number, number];\n  let $dataFormat: 'channelsFirst'|'channelsLast';\n  if (dataFormat === 'NDHWC') {\n    $dataFormat = 'channelsLast';\n    filterShape =\n        [filterDepth, filterHeight, filterWidth, inShape[4], inShape[4]];\n  } else if (dataFormat === 'NCDHW') {\n    $dataFormat = 'channelsFirst';\n    filterShape =\n        [filterDepth, filterHeight, filterWidth, inShape[1], inShape[1]];\n  } else {\n    throw new Error(`Unknown dataFormat ${dataFormat}`);\n  }\n\n  return computeConv3DInfo(\n      inShape, filterShape, strides, dilations, pad, false, $dataFormat,\n      roundingMode);\n}\n\n/**\n * Computes the information for a forward pass of a convolution/pooling\n * operation.\n */\nexport function computeConv2DInfo(\n    inShape: [number, number, number, number],\n    filterShape: [number, number, number, number],\n    strides: number|[number, number], dilations: number|[number, number],\n    pad: 'same'|'valid'|number|ExplicitPadding,\n    roundingMode?: 'floor'|'round'|'ceil', depthwise = false,\n    dataFormat: 'channelsFirst'|'channelsLast' = 'channelsLast'): Conv2DInfo {\n  let [batchSize, inHeight, inWidth, inChannels] = [-1, -1, -1, -1];\n  if (dataFormat === 'channelsLast') {\n    [batchSize, inHeight, inWidth, inChannels] = inShape;\n  } else if (dataFormat === 'channelsFirst') {\n    [batchSize, inChannels, inHeight, inWidth] = inShape;\n  } else {\n    throw new Error(`Unknown dataFormat ${dataFormat}`);\n  }\n\n  const [filterHeight, filterWidth, , filterChannels] = filterShape;\n  const [strideHeight, strideWidth] = parseTupleParam(strides);\n  const [dilationHeight, dilationWidth] = parseTupleParam(dilations);\n\n  const effectiveFilterHeight =\n      getEffectiveFilterSize(filterHeight, dilationHeight);\n  const effectiveFilterWidth =\n      getEffectiveFilterSize(filterWidth, dilationWidth);\n  const {padInfo, outHeight, outWidth} = getPadAndOutInfo(\n      pad, inHeight, inWidth, strideHeight, strideWidth, effectiveFilterHeight,\n      effectiveFilterWidth, roundingMode, dataFormat);\n\n  const outChannels = depthwise ? filterChannels * inChannels : filterChannels;\n\n  let outShape: [number, number, number, number];\n  if (dataFormat === 'channelsFirst') {\n    outShape = [batchSize, outChannels, outHeight, outWidth];\n  } else if (dataFormat === 'channelsLast') {\n    outShape = [batchSize, outHeight, outWidth, outChannels];\n  }\n\n  return {\n    batchSize,\n    dataFormat,\n    inHeight,\n    inWidth,\n    inChannels,\n    outHeight,\n    outWidth,\n    outChannels,\n    padInfo,\n    strideHeight,\n    strideWidth,\n    filterHeight,\n    filterWidth,\n    effectiveFilterHeight,\n    effectiveFilterWidth,\n    dilationHeight,\n    dilationWidth,\n    inShape,\n    outShape,\n    filterShape\n  };\n}\n\n/**\n * Information about the forward pass of a 3D convolution/pooling operation.\n * It includes input and output shape, strides, filter size and padding\n * information.\n */\nexport type Conv3DInfo = {\n  batchSize: number,\n  inDepth: number,\n  inHeight: number,\n  inWidth: number,\n  inChannels: number,\n  outDepth: number,\n  outHeight: number,\n  outWidth: number,\n  outChannels: number,\n  dataFormat: 'channelsFirst'|'channelsLast',\n  strideDepth: number,\n  strideHeight: number,\n  strideWidth: number,\n  dilationDepth: number,\n  dilationHeight: number,\n  dilationWidth: number,\n  filterDepth: number,\n  filterHeight: number,\n  filterWidth: number,\n  effectiveFilterDepth: number,\n  effectiveFilterHeight: number,\n  effectiveFilterWidth: number,\n  padInfo: PadInfo3D,\n  inShape: [number, number, number, number, number],\n  outShape: [number, number, number, number, number],\n  filterShape: [number, number, number, number, number]\n};\n\n/**\n * Computes the information for a forward pass of a 3D convolution/pooling\n * operation.\n */\nexport function computeConv3DInfo(\n    inShape: [number, number, number, number, number],\n    filterShape: [number, number, number, number, number],\n    strides: number|[number, number, number],\n    dilations: number|[number, number, number], pad: 'same'|'valid'|number,\n    depthwise = false,\n    dataFormat: 'channelsFirst'|'channelsLast' = 'channelsLast',\n    roundingMode?: 'floor'|'round'|'ceil'): Conv3DInfo {\n  let [batchSize, inDepth, inHeight, inWidth, inChannels] =\n      [-1, -1, -1, -1, -1];\n  if (dataFormat === 'channelsLast') {\n    [batchSize, inDepth, inHeight, inWidth, inChannels] = inShape;\n  } else if (dataFormat === 'channelsFirst') {\n    [batchSize, inChannels, inDepth, inHeight, inWidth] = inShape;\n  } else {\n    throw new Error(`Unknown dataFormat ${dataFormat}`);\n  }\n\n  const [filterDepth, filterHeight, filterWidth, , filterChannels] =\n      filterShape;\n  const [strideDepth, strideHeight, strideWidth] = parse3TupleParam(strides);\n  const [dilationDepth, dilationHeight, dilationWidth] =\n      parse3TupleParam(dilations);\n\n  const effectiveFilterDepth =\n      getEffectiveFilterSize(filterDepth, dilationDepth);\n  const effectiveFilterHeight =\n      getEffectiveFilterSize(filterHeight, dilationHeight);\n  const effectiveFilterWidth =\n      getEffectiveFilterSize(filterWidth, dilationWidth);\n  const {padInfo, outDepth, outHeight, outWidth} = get3DPadAndOutInfo(\n      pad, inDepth, inHeight, inWidth, strideDepth, strideHeight, strideWidth,\n      effectiveFilterDepth, effectiveFilterHeight, effectiveFilterWidth,\n      roundingMode);\n\n  const outChannels = depthwise ? filterChannels * inChannels : filterChannels;\n\n  let outShape: [number, number, number, number, number];\n  if (dataFormat === 'channelsFirst') {\n    outShape = [batchSize, outChannels, outDepth, outHeight, outWidth];\n  } else if (dataFormat === 'channelsLast') {\n    outShape = [batchSize, outDepth, outHeight, outWidth, outChannels];\n  }\n\n  return {\n    batchSize,\n    dataFormat,\n    inDepth,\n    inHeight,\n    inWidth,\n    inChannels,\n    outDepth,\n    outHeight,\n    outWidth,\n    outChannels,\n    padInfo,\n    strideDepth,\n    strideHeight,\n    strideWidth,\n    filterDepth,\n    filterHeight,\n    filterWidth,\n    effectiveFilterDepth,\n    effectiveFilterHeight,\n    effectiveFilterWidth,\n    dilationDepth,\n    dilationHeight,\n    dilationWidth,\n    inShape,\n    outShape,\n    filterShape\n  };\n}\n\nfunction computeOutputShape2D(\n    inShape: [number, number], fieldSize: number, stride: number,\n    zeroPad?: number, roundingMode?: 'floor'|'round'|'ceil'): [number, number] {\n  if (zeroPad == null) {\n    zeroPad = computeDefaultPad(inShape, fieldSize, stride);\n  }\n  const inputRows = inShape[0];\n  const inputCols = inShape[1];\n\n  const outputRows =\n      round((inputRows - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);\n  const outputCols =\n      round((inputCols - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);\n\n  return [outputRows, outputCols];\n}\n\nfunction computeOutputShape4D(\n    inShape: [number, number, number, number],\n    filterShape: [number, number, number], outChannels: number,\n    strides: [number, number, number], zeroPad?: number,\n    roundingMode?: 'floor'|'round'|'ceil'): [number, number, number, number] {\n  if (zeroPad == null) {\n    zeroPad = computeDefaultPad(inShape, filterShape[0], strides[0]);\n  }\n  const outShape: [number, number, number, number] = [0, 0, 0, outChannels];\n  for (let index = 0; index < 3; index++) {\n    if (inShape[index] + 2 * zeroPad >= filterShape[index]) {\n      outShape[index] = round(\n          (inShape[index] - filterShape[index] + 2 * zeroPad) / strides[index] +\n              1,\n          roundingMode);\n    }\n  }\n  return outShape;\n}\n\nexport function computeDefaultPad(\n    inputShape: [number, number]|[number, number, number, number],\n    fieldSize: number, stride: number, dilation = 1): number {\n  const effectiveFieldSize = getEffectiveFilterSize(fieldSize, dilation);\n  return Math.floor(\n      (inputShape[0] * (stride - 1) - stride + effectiveFieldSize) / 2);\n}\n\nfunction parseTupleParam(param: number|number[]): [number, number, number] {\n  if (typeof param === 'number') {\n    return [param, param, param];\n  }\n  if (param.length === 2) {\n    return [param[0], param[1], 1];\n  }\n  return param as [number, number, number];\n}\n\nfunction parse3TupleParam(param: number|[number, number, number]):\n    [number, number, number] {\n  return typeof param === 'number' ? [param, param, param] : param;\n}\n\n/* See https://www.tensorflow.org/api_docs/python/tf/nn/atrous_conv2d\n * Atrous convolution is equivalent to standard convolution with upsampled\n * filters with effective_filter_height =\n * filter_height + (filter_height - 1) * (dilation - 1)\n * and effective_filter_width =\n * filter_width + (filter_width - 1) * (dilation - 1),\n * produced by inserting dilation - 1 zeros along consecutive elements across\n * the filters' spatial dimensions.\n * When there is a dilation, this converts a filter dimension to the\n * effective filter dimension, so it can be used in a standard convolution.\n */\nfunction getEffectiveFilterSize(filterSize: number, dilation: number) {\n  if (dilation <= 1) {\n    return filterSize;\n  }\n\n  return filterSize + (filterSize - 1) * (dilation - 1);\n}\n\nfunction getPadAndOutInfo(\n    pad: 'same'|'valid'|number|ExplicitPadding, inHeight: number,\n    inWidth: number, strideHeight: number, strideWidth: number,\n    filterHeight: number, filterWidth: number,\n    roundingMode: 'floor'|'round'|'ceil',\n    dataFormat: 'channelsFirst'|\n    'channelsLast'): {padInfo: PadInfo, outHeight: number, outWidth: number} {\n  let padInfo: PadInfo;\n  let outHeight: number;\n  let outWidth: number;\n\n  if (typeof pad === 'number') {\n    const padType = (pad === 0) ? 'VALID' : 'NUMBER';\n    padInfo = {top: pad, bottom: pad, left: pad, right: pad, type: padType};\n    const outShape = computeOutputShape2D(\n        [inHeight, inWidth], filterHeight, strideHeight, pad, roundingMode);\n    outHeight = outShape[0];\n    outWidth = outShape[1];\n  } else if (pad === 'same') {\n    outHeight = Math.ceil(inHeight / strideHeight);\n    outWidth = Math.ceil(inWidth / strideWidth);\n    const padAlongHeight =\n        Math.max(0, (outHeight - 1) * strideHeight + filterHeight - inHeight);\n    const padAlongWidth =\n        Math.max(0, (outWidth - 1) * strideWidth + filterWidth - inWidth);\n    const top = Math.floor(padAlongHeight / 2);\n    const bottom = padAlongHeight - top;\n    const left = Math.floor(padAlongWidth / 2);\n    const right = padAlongWidth - left;\n    padInfo = {top, bottom, left, right, type: 'SAME'};\n  } else if (pad === 'valid') {\n    padInfo = {top: 0, bottom: 0, left: 0, right: 0, type: 'VALID'};\n    outHeight = Math.ceil((inHeight - filterHeight + 1) / strideHeight);\n    outWidth = Math.ceil((inWidth - filterWidth + 1) / strideWidth);\n  } else if (typeof pad === 'object') {\n    const top = dataFormat === 'channelsLast' ? pad[1][0] : pad[2][0];\n    const bottom = dataFormat === 'channelsLast' ? pad[1][1] : pad[2][1];\n    const left = dataFormat === 'channelsLast' ? pad[2][0] : pad[3][0];\n    const right = dataFormat === 'channelsLast' ? pad[2][1] : pad[3][1];\n    const padType = (top === 0 && bottom === 0 && left === 0 && right === 0) ?\n        'VALID' :\n        'EXPLICIT';\n    padInfo = {top, bottom, left, right, type: padType};\n    outHeight = round(\n        (inHeight - filterHeight + top + bottom) / strideHeight + 1,\n        roundingMode);\n    outWidth = round(\n        (inWidth - filterWidth + left + right) / strideWidth + 1, roundingMode);\n  } else {\n    throw Error(`Unknown padding parameter: ${pad}`);\n  }\n  return {padInfo, outHeight, outWidth};\n}\n\nfunction get3DPadAndOutInfo(\n    pad: 'same'|'valid'|number, inDepth: number, inHeight: number,\n    inWidth: number, strideDepth: number, strideHeight: number,\n    strideWidth: number, filterDepth: number, filterHeight: number,\n    filterWidth: number, roundingMode?: 'floor'|'round'|'ceil'): {\n  padInfo: PadInfo3D,\n  outDepth: number,\n  outHeight: number,\n  outWidth: number\n} {\n  let padInfo: PadInfo3D;\n  let outDepth: number;\n  let outHeight: number;\n  let outWidth: number;\n\n  if (pad === 'valid') {\n    pad = 0;\n  }\n\n  if (typeof pad === 'number') {\n    const padType = (pad === 0) ? 'VALID' : 'NUMBER';\n    padInfo = {\n      top: pad,\n      bottom: pad,\n      left: pad,\n      right: pad,\n      front: pad,\n      back: pad,\n      type: padType\n    };\n    const outShape = computeOutputShape4D(\n        [inDepth, inHeight, inWidth, 1],\n        [filterDepth, filterHeight, filterWidth], 1,\n        [strideDepth, strideHeight, strideWidth], pad, roundingMode);\n    outDepth = outShape[0];\n    outHeight = outShape[1];\n    outWidth = outShape[2];\n  } else if (pad === 'same') {\n    outDepth = Math.ceil(inDepth / strideDepth);\n    outHeight = Math.ceil(inHeight / strideHeight);\n    outWidth = Math.ceil(inWidth / strideWidth);\n    const padAlongDepth = (outDepth - 1) * strideDepth + filterDepth - inDepth;\n    const padAlongHeight =\n        (outHeight - 1) * strideHeight + filterHeight - inHeight;\n    const padAlongWidth = (outWidth - 1) * strideWidth + filterWidth - inWidth;\n    const front = Math.floor(padAlongDepth / 2);\n    const back = padAlongDepth - front;\n    const top = Math.floor(padAlongHeight / 2);\n    const bottom = padAlongHeight - top;\n    const left = Math.floor(padAlongWidth / 2);\n    const right = padAlongWidth - left;\n\n    padInfo = {top, bottom, left, right, front, back, type: 'SAME'};\n  } else {\n    throw Error(`Unknown padding parameter: ${pad}`);\n  }\n  return {padInfo, outDepth, outHeight, outWidth};\n}\n\n/**\n * Rounds a value depending on the rounding mode\n * @param value\n * @param roundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n */\nfunction round(value: number, roundingMode?: 'floor'|'round'|'ceil') {\n  if (!roundingMode) {\n    return Math.trunc(value);\n  }\n  switch (roundingMode) {\n    case 'round':\n      // used for Caffe Conv\n      return Math.round(value);\n    case 'ceil':\n      // used for Caffe Pool\n      return Math.ceil(value);\n    case 'floor':\n      return Math.floor(value);\n    default:\n      throw new Error(`Unknown roundingMode ${roundingMode}`);\n  }\n}\n\nexport function tupleValuesAreOne(param: number|number[]): boolean {\n  const [dimA, dimB, dimC] = parseTupleParam(param);\n  return dimA === 1 && dimB === 1 && dimC === 1;\n}\n\nexport function eitherStridesOrDilationsAreOne(\n    strides: number|number[], dilations: number|number[]): boolean {\n  return tupleValuesAreOne(strides) || tupleValuesAreOne(dilations);\n}\n\nexport function stridesOrDilationsArePositive(values: number|\n                                              number[]): boolean {\n  return parseTupleParam(values).every(value => value > 0);\n}\n\n/**\n * Convert Conv2D dataFormat from 'NHWC'|'NCHW' to\n *    'channelsLast'|'channelsFirst'\n * @param dataFormat in 'NHWC'|'NCHW' mode\n * @return dataFormat in 'channelsLast'|'channelsFirst' mode\n * @throws unknown dataFormat\n */\nexport function convertConv2DDataFormat(dataFormat: 'NHWC'|'NCHW'):\n    'channelsLast'|'channelsFirst' {\n  if (dataFormat === 'NHWC') {\n    return 'channelsLast';\n  } else if (dataFormat === 'NCHW') {\n    return 'channelsFirst';\n  } else {\n    throw new Error(`Unknown dataFormat ${dataFormat}`);\n  }\n}\n\n/**\n * Check validity of pad when using dimRoundingMode.\n * @param opDesc A string of op description\n * @param pad The type of padding algorithm.\n *   - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *   - `valid` output will be smaller than input if filter is larger\n *       than 1x1.\n *   - For more info, see this guide:\n *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](\n *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n * @throws unknown padding parameter\n */\nexport function checkPadOnDimRoundingMode(\n    opDesc: string, pad: 'valid'|'same'|number|ExplicitPadding,\n    dimRoundingMode?: 'floor'|'round'|'ceil') {\n  if (dimRoundingMode != null) {\n    if (typeof pad === 'string') {\n      throw Error(\n          `Error in ${opDesc}: pad must be an integer when using ` +\n          `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);\n    } else if (typeof pad === 'number') {\n      util.assert(\n          util.isInt(pad),\n          () => `Error in ${opDesc}: pad must be an integer when using ` +\n              `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);\n    } else if (typeof pad === 'object') {\n      (pad as ExplicitPadding).forEach(p => {\n        p.forEach(v => {\n          util.assert(\n              util.isInt(v),\n              () => `Error in ${opDesc}: pad must be an integer when using ` +\n                  `dimRoundingMode ${dimRoundingMode} but got pad ${v}.`);\n        });\n      });\n    } else {\n      throw Error(`Error in ${opDesc}: Unknown padding parameter: ${pad}`);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Reshape, ReshapeAttrs, ReshapeInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {Rank, ShapeMap, TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Reshapes a `tf.Tensor` to a given shape.\n *\n * Given an input tensor, returns a new tensor with the same values as the\n * input tensor with shape `shape`.\n *\n * If one component of shape is the special value -1, the size of that\n * dimension is computed so that the total size remains constant. In\n * particular, a shape of [-1] flattens into 1-D. At most one component of\n * shape can be -1.\n *\n * If shape is 1-D or higher, then the operation returns a tensor with shape\n * shape filled with the values of tensor. In this case, the number of\n * elements implied by shape must be the same as the number of elements in\n * tensor.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3, 4]);\n * x.reshape([2, 2]).print();\n * ```\n *\n * @param x The input tensor to be reshaped.\n * @param shape An array of integers defining the output tensor shape.\n *\n * @doc {heading: 'Tensors', subheading: 'Transformations'}\n */\nfunction reshape_<R extends Rank>(\n    x: Tensor|TensorLike, shape: ShapeMap[R]): Tensor<R> {\n  const $x = convertToTensor(x, 'x', 'reshape', 'string_or_numeric');\n\n  const inputs: ReshapeInputs = {x: $x};\n  const attrs: ReshapeAttrs = {shape};\n  return ENGINE.runKernel(\n      Reshape, inputs as unknown as NamedTensorMap,\n      attrs as unknown as NamedAttrMap);\n}\nexport const reshape = /* @__PURE__ */ op({reshape_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {AvgPool, AvgPoolAttrs, AvgPoolInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor3D, Tensor4D} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {cast} from './cast';\nimport * as conv_util from './conv_util';\nimport {op} from './operation';\nimport {reshape} from './reshape';\n\n/**\n * Computes the 2D average pooling of an image.\n *\n * @param x The input tensor, of rank 4 or rank 3 of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.\n * @param filterSize The filter size: `[filterHeight, filterWidth]`. If\n *     `filterSize` is a single number, then `filterHeight == filterWidth`.\n * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If\n *     `strides` is a single number, then `strideHeight == strideWidth`.\n * @param pad The type of padding algorithm:\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n *    - For more info, see this guide:\n *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](\n *         https://www.tensorflow.org/api_docs/python/tf/nn/convolution)\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n *\n * @doc {heading: 'Operations', subheading: 'Convolution'}\n */\nfunction avgPool_<T extends Tensor3D|Tensor4D>(\n    x: T|TensorLike, filterSize: [number, number]|number,\n    strides: [number, number]|number,\n    pad: 'valid'|'same'|number|conv_util.ExplicitPadding,\n    dimRoundingMode?: 'floor'|'round'|'ceil'): T {\n  const $x = convertToTensor(x, 'x', 'avgPool', 'float32');\n  const dilations = 1;\n\n  util.assert(\n      conv_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in avgPool: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n\n  let x4D = $x as Tensor4D;\n  let reshapedTo4D = false;\n  if ($x.rank === 3) {\n    reshapedTo4D = true;\n    x4D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);\n  }\n\n  util.assert(\n      x4D.rank === 4,\n      () => `Error in avgPool: x must be rank 4 but got rank ${x4D.rank}.`);\n  conv_util.checkPadOnDimRoundingMode('avgPool', pad, dimRoundingMode);\n  const inputs: AvgPoolInputs = {x: x4D};\n  const attrs: AvgPoolAttrs = {filterSize, strides, pad, dimRoundingMode};\n\n  // tslint:disable-next-line: no-unnecessary-type-assertion\n  let res = ENGINE.runKernel(\n                AvgPool, inputs as unknown as NamedTensorMap,\n                attrs as unknown as NamedAttrMap) as T;\n\n  res = cast(res, $x.dtype);\n\n  if (reshapedTo4D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]) as T;\n  }\n\n  return res;\n}\n\nexport const avgPool = /* @__PURE__ */ op({avgPool_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {AvgPool3D, AvgPool3DAttrs, AvgPool3DInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor4D, Tensor5D} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {cast} from './cast';\nimport {checkPadOnDimRoundingMode} from './conv_util';\nimport {op} from './operation';\nimport {reshape} from './reshape';\n\n/**\n * Computes the 3D average pooling.\n *\n * ```js\n * const x = tf.tensor5d([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 2, 2, 1]);\n * const result = tf.avgPool3d(x, 2, 1, 'valid');\n * result.print();\n * ```\n *\n * @param x The input tensor, of rank 5 or rank 4 of shape\n *     `[batch, depth, height, width, inChannels]`.\n * @param filterSize The filter size:\n *     `[filterDepth, filterHeight, filterWidth]`.\n *     If `filterSize` is a single number,\n *     then `filterDepth == filterHeight == filterWidth`.\n * @param strides The strides of the pooling:\n *     `[strideDepth, strideHeight, strideWidth]`.\n *     If `strides` is a single number,\n *     then `strideDepth == strideHeight == strideWidth`.\n * @param pad The type of padding algorithm.\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1*1x1.\n *    - For more info, see this guide:\n *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](\n *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n * @param dataFormat An optional string from: \"NDHWC\", \"NCDHW\". Defaults to\n *     \"NDHWC\". Specify the data format of the input and output data. With the\n *     default format \"NDHWC\", the data is stored in the order of: [batch,\n *     depth, height, width, channels]. Only \"NDHWC\" is currently supported.\n *\n * @doc {heading: 'Operations', subheading: 'Convolution'}\n */\nfunction avgPool3d_<T extends Tensor4D|Tensor5D>(\n    x: T|TensorLike, filterSize: [number, number, number]|number,\n    strides: [number, number, number]|number, pad: 'valid'|'same'|number,\n    dimRoundingMode?: 'floor'|'round'|'ceil',\n    dataFormat: 'NDHWC'|'NCDHW' = 'NDHWC'): T {\n  const $x = convertToTensor(x, 'x', 'avgPool3d', 'float32');\n\n  let x5D = $x as Tensor5D;\n  let reshapedTo5D = false;\n  if ($x.rank === 4) {\n    reshapedTo5D = true;\n    x5D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2], $x.shape[3]]);\n  }\n\n  util.assert(\n      x5D.rank === 5,\n      () => `Error in avgPool3d: x must be rank 5 but got rank ${x5D.rank}.`);\n  util.assert(\n      dataFormat === 'NDHWC',\n      () => `Error in avgPool3d: Only NDHWC is currently supported, ` +\n          `but got dataFormat of ${dataFormat}`);\n  util.assert(\n      (typeof strides === 'number' && strides > 0) ||\n          (Array.isArray(strides) && strides[0] > 0 && strides[1] > 0 &&\n           strides[2] > 0),\n      () => `Error in avgPool3d: Stride must be > 0, but got '${strides}'`);\n  checkPadOnDimRoundingMode('avgPool3d', pad, dimRoundingMode);\n  const inputs: AvgPool3DInputs = {x: x5D};\n  const attrs:\n      AvgPool3DAttrs = {filterSize, strides, pad, dimRoundingMode, dataFormat};\n\n  // tslint:disable-next-line: no-unnecessary-type-assertion\n  let res = ENGINE.runKernel(\n                AvgPool3D, inputs as unknown as NamedTensorMap,\n                attrs as unknown as NamedAttrMap) as T;\n\n  res = cast(res, x5D.dtype);\n\n  if (reshapedTo5D) {\n    return reshape(\n               res, [res.shape[1], res.shape[2], res.shape[3], res.shape[4]]) as\n        T;\n  }\n\n  return res;\n}\n\nexport const avgPool3d = /* @__PURE__ */ op({avgPool3d_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {Concat, ConcatAttrs, ConcatInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensorArray} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport {assert} from '../util';\n\nimport {clone} from './clone';\nimport {op} from './operation';\n\n/**\n * Concatenates a list of `tf.Tensor`s along a given axis.\n *\n * The tensors ranks and types must match, and their sizes must match in all\n * dimensions except `axis`.\n *\n * Also available are stricter rank-specific methods that assert that\n * `tensors` are of the given rank:\n *   - `tf.concat1d`\n *   - `tf.concat2d`\n *   - `tf.concat3d`\n *   - `tf.concat4d`\n *\n * Except `tf.concat1d` (which does not have axis param), all methods have\n * same signature as this method.\n *\n * ```js\n * const a = tf.tensor1d([1, 2]);\n * const b = tf.tensor1d([3, 4]);\n * a.concat(b).print();  // or a.concat(b)\n * ```\n *\n * ```js\n * const a = tf.tensor1d([1, 2]);\n * const b = tf.tensor1d([3, 4]);\n * const c = tf.tensor1d([5, 6]);\n * tf.concat([a, b, c]).print();\n * ```\n *\n * ```js\n * const a = tf.tensor2d([[1, 2], [10, 20]]);\n * const b = tf.tensor2d([[3, 4], [30, 40]]);\n * const axis = 1;\n * tf.concat([a, b], axis).print();\n * ```\n * @param tensors A list of tensors to concatenate.\n * @param axis The axis to concatenate along. Defaults to 0 (the first dim).\n *\n * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}\n */\nfunction concat_<T extends Tensor>(tensors: Array<T|TensorLike>, axis = 0): T {\n  assert(tensors.length >= 1, () => 'Pass at least one tensor to concat');\n\n  const $tensors =\n      convertToTensorArray(tensors, 'tensors', 'concat', 'string_or_numeric');\n\n  if ($tensors[0].dtype === 'complex64') {\n    $tensors.forEach(tensor => {\n      if (tensor.dtype !== 'complex64') {\n        throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${tensor.dtype}. `);\n      }\n    });\n  }\n\n  if ($tensors.length === 1) {\n    return clone($tensors[0]);\n  }\n\n  const inputs: ConcatInputs = $tensors;\n  const attr: ConcatAttrs = {axis};\n\n  return ENGINE.runKernel(\n      Concat, inputs as unknown as NamedTensorMap,\n      attr as unknown as NamedAttrMap);\n}\n\nexport const concat = /* @__PURE__ */ op({concat_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {BatchMatMul, BatchMatMulAttrs, BatchMatMulInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {makeTypesMatch} from '../tensor_util';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes the dot product of two matrices, A * B. These must be matrices.\n *\n * ```js\n * const a = tf.tensor2d([1, 2], [1, 2]);\n * const b = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * a.matMul(b).print();  // or tf.matMul(a, b)\n * ```\n * @param a First matrix in dot product operation.\n * @param b Second matrix in dot product operation.\n * @param transposeA If true, `a` is transposed before multiplication.\n * @param transposeB If true, `b` is transposed before multiplication.\n *\n * @doc {heading: 'Operations', subheading: 'Matrices'}\n */\nfunction matMul_<T extends Tensor>(\n    a: Tensor|TensorLike, b: Tensor|TensorLike, transposeA = false,\n    transposeB = false): T {\n  let $a = convertToTensor(a, 'a', 'matMul');\n  let $b = convertToTensor(b, 'b', 'matMul');\n  [$a, $b] = makeTypesMatch($a, $b);\n\n  const inputs: BatchMatMulInputs = {a: $a, b: $b};\n  const attrs: BatchMatMulAttrs = {transposeA, transposeB};\n\n  return ENGINE.runKernel(\n      BatchMatMul, inputs as unknown as NamedTensorMap,\n      attrs as unknown as NamedAttrMap);\n}\n\nexport const matMul = /* @__PURE__ */ op({matMul_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Sigmoid, SigmoidInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes sigmoid element-wise, `1 / (1 + exp(-x))`\n *\n * ```js\n * const x = tf.tensor1d([0, -1, 2, -3]);\n *\n * x.sigmoid().print();  // or tf.sigmoid(x)\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction sigmoid_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'sigmoid', 'float32');\n\n  const inputs: SigmoidInputs = {x: $x};\n\n  return ENGINE.runKernel(Sigmoid, inputs as unknown as NamedTensorMap);\n}\nexport const sigmoid = /* @__PURE__ */ op({sigmoid_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Slice, SliceAttrs, SliceInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {Rank, TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Extracts a slice from a `tf.Tensor` starting at coordinates `begin`\n * and is of size `size`.\n *\n * Also available are stricter rank-specific methods with the same signature\n * as this method that assert that `x` is of the given rank:\n *   - `tf.slice1d`\n *   - `tf.slice2d`\n *   - `tf.slice3d`\n *   - `tf.slice4d`\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3, 4]);\n *\n * x.slice([1], [2]).print();\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * x.slice([1, 0], [1, 2]).print();\n * ```\n * @param x The input `tf.Tensor` to slice from.\n * @param begin The coordinates to start the slice from. The length can be\n *     less than the rank of x - the rest of the axes will have implicit 0 as\n *     start. Can also be a single number, in which case it specifies the\n *     first axis.\n * @param size The size of the slice. The length can be less than the rank of\n *     x - the rest of the axes will have implicit -1. A value of -1 requests\n *     the rest of the dimensions in the axis. Can also be a single number,\n *     in which case it specifies the size of the first axis.\n *\n * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}\n */\nfunction slice_<R extends Rank, T extends Tensor<R>>(\n    x: T|TensorLike, begin: number|number[], size?: number|number[]): T {\n  const $x = convertToTensor(x, 'x', 'slice', 'string_or_numeric');\n\n  if ($x.rank === 0) {\n    throw new Error('Slicing scalar is not possible');\n  }\n\n  const inputs: SliceInputs = {x: $x};\n  const attrs: SliceAttrs = {begin, size};\n\n  return ENGINE.runKernel(\n      Slice, inputs as unknown as NamedTensorMap,\n      attrs as unknown as NamedAttrMap);\n}\n\nexport const slice = /* @__PURE__ */ op({slice_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Tanh, TanhInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes hyperbolic tangent of the input `tf.Tensor` element-wise: `tanh(x)`\n *\n * ```js\n * const x = tf.tensor1d([0, 1, -1, 70]);\n *\n * x.tanh().print();  // or tf.tanh(x)\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction tanh_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'tanh', 'float32');\n\n  const inputs: TanhInputs = {x: $x};\n\n  return ENGINE.runKernel(Tanh, inputs as unknown as NamedTensorMap);\n}\nexport const tanh = /* @__PURE__ */ op({tanh_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Scalar, Tensor1D, Tensor2D} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {add} from './add';\nimport {concat} from './concat';\nimport {matMul} from './mat_mul';\nimport {mul} from './mul';\nimport {op} from './operation';\nimport {sigmoid} from './sigmoid';\nimport {slice} from './slice';\nimport {tanh} from './tanh';\n\n/**\n * Computes the next state and output of a BasicLSTMCell.\n *\n * Returns `[newC, newH]`.\n *\n * Derived from tf.contrib.rnn.BasicLSTMCell.\n *\n * @param forgetBias Forget bias for the cell.\n * @param lstmKernel The weights for the cell.\n * @param lstmBias The bias for the cell.\n * @param data The input to the cell.\n * @param c Previous cell state.\n * @param h Previous cell output.\n *\n * @doc {heading: 'Operations', subheading: 'RNN'}\n */\nfunction basicLSTMCell_(\n    forgetBias: Scalar|TensorLike, lstmKernel: Tensor2D|TensorLike,\n    lstmBias: Tensor1D|TensorLike, data: Tensor2D|TensorLike,\n    c: Tensor2D|TensorLike, h: Tensor2D|TensorLike): [Tensor2D, Tensor2D] {\n  const $forgetBias =\n      convertToTensor(forgetBias, 'forgetBias', 'basicLSTMCell');\n  const $lstmKernel =\n      convertToTensor(lstmKernel, 'lstmKernel', 'basicLSTMCell');\n  const $lstmBias = convertToTensor(lstmBias, 'lstmBias', 'basicLSTMCell');\n  const $data = convertToTensor(data, 'data', 'basicLSTMCell');\n  const $c = convertToTensor(c, 'c', 'basicLSTMCell');\n  const $h = convertToTensor(h, 'h', 'basicLSTMCell');\n\n  const combined = concat([$data, $h], 1);\n  const weighted = matMul(combined, $lstmKernel);\n  const res: Tensor2D = add(weighted, $lstmBias);\n\n  // i = input_gate, j = new_input, f = forget_gate, o = output_gate\n  const batchSize = res.shape[0];\n  const sliceCols = res.shape[1] / 4;\n  const sliceSize: [number, number] = [batchSize, sliceCols];\n  const i = slice(res, [0, 0], sliceSize);\n  const j = slice(res, [0, sliceCols], sliceSize);\n  const f = slice(res, [0, sliceCols * 2], sliceSize);\n  const o = slice(res, [0, sliceCols * 3], sliceSize);\n\n  const newC: Tensor2D =\n      add(mul(sigmoid(i), tanh(j)),\n          mul($c, sigmoid(add($forgetBias, f)) as Tensor2D));\n  const newH: Tensor2D = mul(tanh(newC), sigmoid(o));\n  return [newC, newH];\n}\n\nexport const basicLSTMCell = /* @__PURE__ */ op({basicLSTMCell_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {BatchToSpaceND, BatchToSpaceNDAttrs, BatchToSpaceNDInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {op} from './operation';\n\n/**\n * This operation reshapes the \"batch\" dimension 0 into `M + 1` dimensions of\n * shape `blockShape + [batch]`, interleaves these blocks back into the grid\n * defined by the spatial dimensions `[1, ..., M]`, to obtain a result with\n * the same rank as the input. The spatial dimensions of this intermediate\n * result are then optionally cropped according to `crops` to produce the\n * output. This is the reverse of `tf.spaceToBatchND`. See below for a precise\n * description.\n *\n * ```js\n * const x = tf.tensor4d([1, 2, 3, 4], [4, 1, 1, 1]);\n * const blockShape = [2, 2];\n * const crops = [[0, 0], [0, 0]];\n *\n * x.batchToSpaceND(blockShape, crops).print();\n * ```\n *\n * @param x A `tf.Tensor`. N-D with `x.shape` = `[batch] + spatialShape +\n * remainingShape`, where spatialShape has `M` dimensions.\n * @param blockShape A 1-D array. Must have shape `[M]`, all values must\n * be >= 1.\n * @param crops A 2-D array.  Must have shape `[M, 2]`, all values must be >= 0.\n * `crops[i] = [cropStart, cropEnd]` specifies the amount to crop from input\n * dimension `i + 1`, which corresponds to spatial dimension `i`. It is required\n * that `cropStart[i] + cropEnd[i] <= blockShape[i] * inputShape[i + 1]`\n *\n * This operation is equivalent to the following steps:\n *\n * 1. Reshape `x` to `reshaped` of shape: `[blockShape[0], ...,\n * blockShape[M-1], batch / prod(blockShape), x.shape[1], ...,\n * x.shape[N-1]]`\n *\n * 2. Permute dimensions of `reshaped` to produce `permuted` of shape `[batch /\n * prod(blockShape),x.shape[1], blockShape[0], ..., x.shape[M],\n * blockShape[M-1],x.shape[M+1], ..., x.shape[N-1]]`\n *\n * 3. Reshape `permuted` to produce `reshapedPermuted` of shape `[batch /\n * prod(blockShape),x.shape[1] * blockShape[0], ..., x.shape[M] *\n * blockShape[M-1],x.shape[M+1], ..., x.shape[N-1]]`\n *\n * 4. Crop the start and end of dimensions `[1, ..., M]` of `reshapedPermuted`\n * according to `crops` to produce the output of shape: `[batch /\n * prod(blockShape),x.shape[1] * blockShape[0] - crops[0,0] - crops[0,1],\n * ..., x.shape[M] * blockShape[M-1] - crops[M-1,0] -\n * crops[M-1,1],x.shape[M+1], ..., x.shape[N-1]]`\n *\n * @doc {heading: 'Tensors', subheading: 'Transformations'}\n */\nfunction batchToSpaceND_<T extends Tensor>(\n    x: T|TensorLike, blockShape: number[], crops: number[][]): T {\n  const $x = convertToTensor(x, 'x', 'batchToSpaceND');\n  const prod = blockShape.reduce((a, b) => a * b);\n\n  util.assert(\n      $x.rank >= 1 + blockShape.length,\n      () => `input rank is ${$x.rank} but should be > than blockShape.length ${\n          blockShape.length}`);\n\n  util.assert(\n      crops.length === blockShape.length,\n      () => `crops.length is ${\n          crops.length} but should be equal to blockShape.length  ${\n          blockShape.length}`);\n\n  util.assert(\n      $x.shape[0] % prod === 0,\n      () => `input tensor batch is ${\n                $x.shape[0]} but is not divisible by the product of ` +\n          `the elements of blockShape ${blockShape.join(' * ')} === ${prod}`);\n\n  const inputs: BatchToSpaceNDInputs = {x: $x};\n  const attrs: BatchToSpaceNDAttrs = {blockShape, crops};\n\n  return ENGINE.runKernel(\n      BatchToSpaceND, inputs as unknown as NamedTensorMap,\n      attrs as unknown as NamedAttrMap);\n}\n\nexport const batchToSpaceND = /* @__PURE__ */ op({batchToSpaceND_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {FusedBatchNorm, FusedBatchNormAttrs, FusedBatchNormInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor, Tensor1D, Tensor4D} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {Rank, TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {xAs4D} from './batchnorm_util';\nimport {op} from './operation';\nimport {reshape} from './reshape';\n\n/**\n * Batch normalization.\n *\n * As described in\n * [http://arxiv.org/abs/1502.03167](http://arxiv.org/abs/1502.03167).\n *\n * Mean, variance, scale, and offset can be of two shapes:\n *   - The same shape as the input.\n *   - In the common case, the depth dimension is the last dimension of x, so\n *     the values would be a `tf.Tensor1D` of shape [depth].\n *\n * Also available are stricter rank-specific methods with the same signature\n * as this method that assert that parameters passed are of given rank\n *   - `tf.batchNorm2d`\n *   - `tf.batchNorm3d`\n *   - `tf.batchNorm4d`\n *\n * @param x The input Tensor.\n * @param mean A mean Tensor.\n * @param variance A variance Tensor.\n * @param offset An offset Tensor.\n * @param scale A scale Tensor.\n * @param varianceEpsilon A small float number to avoid dividing by 0.\n *\n * @doc {heading: 'Operations', subheading: 'Normalization'}\n */\nfunction batchNorm_<R extends Rank>(\n    x: Tensor<R>|TensorLike, mean: Tensor<R>|Tensor1D|TensorLike,\n    variance: Tensor<R>|Tensor1D|TensorLike,\n    offset?: Tensor<R>|Tensor1D|TensorLike,\n    scale?: Tensor<R>|Tensor1D|TensorLike,\n    varianceEpsilon?: number): Tensor<R> {\n  if (varianceEpsilon == null) {\n    varianceEpsilon = 0.001;\n  }\n  const $x = convertToTensor(x, 'x', 'batchNorm');\n  const $mean = convertToTensor(mean, 'mean', 'batchNorm');\n  const $variance = convertToTensor(variance, 'variance', 'batchNorm');\n  let $scale: Tensor<R>|Tensor1D;\n  if (scale != null) {\n    $scale = convertToTensor(scale, 'scale', 'batchNorm');\n  }\n  let $offset: Tensor<R>|Tensor1D;\n  if (offset != null) {\n    $offset = convertToTensor(offset, 'offset', 'batchNorm');\n  }\n\n  util.assert(\n      $mean.rank === $variance.rank,\n      () => 'Batch normalization gradient requires mean and variance to have ' +\n          'equal ranks.');\n  util.assert(\n      $offset == null || $mean.rank === $offset.rank,\n      () => 'Batch normalization gradient requires mean and offset to have ' +\n          'equal ranks.');\n  util.assert(\n      $scale == null || $mean.rank === $scale.rank,\n      () => 'Batch normalization gradient requires mean and scale to have ' +\n          'equal ranks.');\n\n  const x4D: Tensor4D = xAs4D($x);\n\n  const inputs: FusedBatchNormInputs = {\n    x: x4D,\n    scale: $scale,\n    offset: $offset,\n    mean: $mean,\n    variance: $variance\n  };\n\n  const attrs: FusedBatchNormAttrs = {varianceEpsilon};\n\n  // tslint:disable-next-line: no-unnecessary-type-assertion\n  const res = ENGINE.runKernel(\n                  FusedBatchNorm, inputs as unknown as NamedTensorMap,\n                  attrs as unknown as NamedAttrMap) as Tensor<R>;\n\n  return reshape(res, $x.shape);\n}\n\nexport const batchNorm = /* @__PURE__ */ op({batchNorm_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Tensor, Tensor4D} from '../tensor';\nimport {Rank} from '../types';\nimport {reshape} from './reshape';\n\nexport function xAs4D<R extends Rank>(x: Tensor<R>) {\n  let x4D: Tensor4D;\n  if (x.rank === 0 || x.rank === 1) {\n    x4D = reshape(x, [1, 1, 1, x.size]);\n  } else if (x.rank === 2) {\n    x4D = reshape(x, [1, 1, x.shape[0], x.shape[1]]);\n  } else if (x.rank === 3) {\n    x4D = reshape(x, [1, x.shape[0], x.shape[1], x.shape[2]]);\n  } else {\n    x4D = x as Tensor4D;\n  }\n\n  return x4D;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Tensor1D, Tensor2D} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {batchNorm} from './batchnorm';\nimport {op} from './operation';\n\n/**\n * Batch normalization, strictly for 2D. For the more relaxed version, see\n * `tf.batchNorm`.\n *\n * @param x The input Tensor.\n * @param mean A mean Tensor.\n * @param variance A variance Tensor.\n * @param offset An offset Tensor.\n * @param scale A scale Tensor.\n * @param varianceEpsilon A small float number to avoid dividing by 0.\n */\nfunction batchNorm2d_(\n    x: Tensor2D|TensorLike, mean: Tensor2D|Tensor1D|TensorLike,\n    variance: Tensor2D|Tensor1D|TensorLike,\n    offset?: Tensor2D|Tensor1D|TensorLike, scale?: Tensor2D|Tensor1D|TensorLike,\n    varianceEpsilon?: number): Tensor2D {\n  const $x = convertToTensor(x, 'x', 'batchNorm');\n  const $mean = convertToTensor(mean, 'mean', 'batchNorm');\n  const $variance = convertToTensor(variance, 'variance', 'batchNorm');\n  let $scale: Tensor2D|Tensor1D;\n  if (scale != null) {\n    $scale = convertToTensor(scale, 'scale', 'batchNorm');\n  }\n  let $offset: Tensor2D|Tensor1D;\n  if (offset != null) {\n    $offset = convertToTensor(offset, 'offset', 'batchNorm');\n  }\n  util.assert(\n      $x.rank === 2,\n      () => `Error in batchNorm2D: x must be rank 2 but got rank ` +\n          `${$x.rank}.`);\n  util.assert(\n      $mean.rank === 2 || $mean.rank === 1,\n      () => `Error in batchNorm2D: mean must be rank 2 or rank 1 but ` +\n          `got rank ${$mean.rank}.`);\n  util.assert(\n      $variance.rank === 2 || $variance.rank === 1,\n      () => `Error in batchNorm2D: variance must be rank 2 or rank 1 ` +\n          `but got rank ${$variance.rank}.`);\n  if ($scale != null) {\n    util.assert(\n        $scale.rank === 2 || $scale.rank === 1,\n        () => `Error in batchNorm2D: scale must be rank 2 or rank 1 ` +\n            `but got rank ${$scale.rank}.`);\n  }\n  if ($offset != null) {\n    util.assert(\n        $offset.rank === 2 || $offset.rank === 1,\n        () => `Error in batchNorm2D: offset must be rank 2 or rank 1 ` +\n            `but got rank ${$offset.rank}.`);\n  }\n\n  return batchNorm($x, $mean, $variance, $offset, $scale, varianceEpsilon);\n}\n\nexport const batchNorm2d = /* @__PURE__ */ op({batchNorm2d_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Tensor1D, Tensor3D} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {batchNorm} from './batchnorm';\nimport {op} from './operation';\n\n/**\n * Batch normalization, strictly for 3D. For the more relaxed version, see\n * `tf.batchNorm`.\n *\n * @param x The input Tensor.\n * @param mean A mean Tensor.\n * @param variance A variance Tensor.\n * @param offset An offset Tensor.\n * @param scale A scale Tensor.\n * @param varianceEpsilon A small float number to avoid dividing by 0.\n */\nfunction batchNorm3d_(\n    x: Tensor3D|TensorLike, mean: Tensor3D|Tensor1D|TensorLike,\n    variance: Tensor3D|Tensor1D|TensorLike,\n    offset?: Tensor3D|Tensor1D|TensorLike, scale?: Tensor3D|Tensor1D|TensorLike,\n    varianceEpsilon?: number): Tensor3D {\n  const $x = convertToTensor(x, 'x', 'batchNorm');\n  const $mean = convertToTensor(mean, 'mean', 'batchNorm');\n  const $variance = convertToTensor(variance, 'variance', 'batchNorm');\n  let $scale: Tensor3D|Tensor1D;\n  if (scale != null) {\n    $scale = convertToTensor(scale, 'scale', 'batchNorm');\n  }\n  let $offset: Tensor3D|Tensor1D;\n  if (offset != null) {\n    $offset = convertToTensor(offset, 'offset', 'batchNorm');\n  }\n  util.assert(\n      $x.rank === 3,\n      () => `Error in batchNorm3D: x must be rank 3 but got rank ` +\n          `${$x.rank}.`);\n  util.assert(\n      $mean.rank === 3 || $mean.rank === 1,\n      () => `Error in batchNorm3D: mean must be rank 3 or rank 1 but ` +\n          `got rank ${$mean.rank}.`);\n  util.assert(\n      $variance.rank === 3 || $variance.rank === 1,\n      () => `Error in batchNorm3D: variance must be rank 3 or rank 1 ` +\n          `but got rank ${$variance.rank}.`);\n  if ($scale != null) {\n    util.assert(\n        $scale.rank === 3 || $scale.rank === 1,\n        () => `Error in batchNorm3D: scale must be rank 3 or rank 1 ` +\n            `but got rank ${$scale.rank}.`);\n  }\n  if ($offset != null) {\n    util.assert(\n        $offset.rank === 3 || $offset.rank === 1,\n        () => `Error in batchNorm3D: offset must be rank 3 or rank 1 ` +\n            `but got rank ${$offset.rank}.`);\n  }\n\n  return batchNorm($x, $mean, $variance, $offset, $scale, varianceEpsilon);\n}\n\nexport const batchNorm3d = /* @__PURE__ */ op({batchNorm3d_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Tensor1D, Tensor4D} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {batchNorm} from './batchnorm';\nimport {op} from './operation';\n\n/**\n * Batch normalization, strictly for 4D. For the more relaxed version, see\n * `tf.batchNorm`.\n *\n * @param x The input Tensor.\n * @param mean A mean Tensor.\n * @param variance A variance Tensor.\n * @param offset An offset Tensor.\n * @param scale A scale Tensor.\n * @param varianceEpsilon A small float number to avoid dividing by 0.\n */\nfunction batchNorm4d_(\n    x: Tensor4D|TensorLike, mean: Tensor4D|Tensor1D|TensorLike,\n    variance: Tensor4D|Tensor1D|TensorLike,\n    offset?: Tensor4D|Tensor1D|TensorLike, scale?: Tensor4D|Tensor1D|TensorLike,\n    varianceEpsilon?: number): Tensor4D {\n  const $x = convertToTensor(x, 'x', 'batchNorm');\n  const $mean = convertToTensor(mean, 'mean', 'batchNorm');\n  const $variance = convertToTensor(variance, 'variance', 'batchNorm');\n  let $scale: Tensor4D|Tensor1D;\n  if (scale != null) {\n    $scale = convertToTensor(scale, 'scale', 'batchNorm');\n  }\n  let $offset: Tensor4D|Tensor1D;\n  if (offset != null) {\n    $offset = convertToTensor(offset, 'offset', 'batchNorm');\n  }\n  util.assert(\n      $x.rank === 4,\n      () => `Error in batchNorm4D: x must be rank 4 but got rank ` +\n          `${$x.rank}.`);\n  util.assert(\n      $mean.rank === 4 || $mean.rank === 1,\n      () => `Error in batchNorm4D: mean must be rank 4 or rank 1 but ` +\n          `got rank ${$mean.rank}.`);\n  util.assert(\n      $variance.rank === 4 || $variance.rank === 1,\n      () => `Error in batchNorm4D: variance must be rank 4 or rank 1 ` +\n          `but got rank ${$variance.rank}.`);\n  if ($scale != null) {\n    util.assert(\n        $scale.rank === 4 || $scale.rank === 1,\n        () => `Error in batchNorm4D: scale must be rank 4 or rank 1 ` +\n            `but got rank ${$scale.rank}.`);\n  }\n  if ($offset != null) {\n    util.assert(\n        $offset.rank === 4 || $offset.rank === 1,\n        () => `Error in batchNorm4D: offset must be rank 4 or rank 1 ` +\n            `but got rank ${$offset.rank}.`);\n  }\n  return batchNorm($x, $mean, $variance, $offset, $scale, varianceEpsilon);\n}\n\nexport const batchNorm4d = /* @__PURE__ */ op({batchNorm4d_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Bincount, BincountAttrs, BincountInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor1D} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {op} from './operation';\n\n/**\n * Outputs a vector with length `size` and the same dtype as `weights`.\n *\n * If `weights` are empty, then index `i` stores the number of times the value\n * `i` is counted in `x`. If `weights` are non-empty, then index `i` stores the\n * sum of the value in `weights` at each index where the corresponding value in\n * `x` is `i`.\n *\n * Values in `x` outside of the range [0, size) are ignored.\n *\n * @param x The input int tensor, rank 1.\n * @param weights The weights tensor, must have the same shape as x, or a\n *     length-0 Tensor, in which case it acts as all weights equal to 1.\n * @param size Non-negative integer.\n *\n * @doc {heading: 'Operations', subheading: 'Reduction'}\n */\nfunction bincount_<T extends Tensor1D>(\n    x: T|TensorLike, weights: T|TensorLike, size: number): T {\n  const $x = convertToTensor(x, 'x', 'bincount');\n  const $weights = convertToTensor(weights, 'weights', 'bincount');\n\n  util.assert(\n      $x.dtype === 'int32',\n      () => `Error in bincount: input ` +\n          `dtype must be int32, but got ${$x.dtype}`);\n  util.assert(size >= 0, () => `size must be non-negative, but got ${size}.`);\n  util.assert(\n      $weights.size === $x.size || $weights.size === 0,\n      () => `Error in bincount: weights must have the same size as input or` +\n          `0-length, but got input shape: ${$x.shape}, weights shape: ` +\n          `${$weights.shape}.`);\n\n  const inputs: BincountInputs = {x: $x, weights: $weights};\n  const attrs: BincountAttrs = {size};\n\n  return ENGINE.runKernel(\n      Bincount, inputs as unknown as NamedTensorMap,\n      attrs as unknown as NamedAttrMap);\n}\n\nexport const bincount = /* @__PURE__ */ op({bincount_});\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport { NamedTensorMap } from '../tensor_types';\nimport { ENGINE } from '../engine';\nimport { BroadcastArgs, BroadcastArgsInputs } from '../kernel_names';\nimport { Tensor } from '../tensor';\nimport { convertToTensor } from '../tensor_util_env';\nimport { Rank, TensorLike } from '../types';\n\nimport { op } from './operation';\n\n/**\n * Return the shape of s0 op s1 with broadcast.\n *\n * compute r0, the broadcasted shape as a tensor.\n * s0, s1 and r0 are all integer vectors.\n *\n * This function returns the shape of the result of an operation between\n * two tensors of size s0 and s1 performed with broadcast.\n *\n * @param s0 A tensor representing a shape\n * @param s1 A tensor representing a shape\n *\n * @doc {heading: 'Tensors', subheading: 'Transformations'}\n */\nfunction broadcastArgs_<R extends Rank>(\n  s0: Tensor | TensorLike, s1: Tensor | TensorLike): Tensor<R> {\n  const shape1Input = convertToTensor(s0, 's0', 'broadcastArgs', 'int32');\n  const shape2Input = convertToTensor(s1, 's1', 'broadcastArgs', 'int32');\n\n  if (shape1Input.rank !== 1) {\n    throw new Error(\n      'broadcastArgs(): first input must be a vector (rank=1). ' +\n      `Has rank ${shape1Input.rank}`);\n  }\n\n  if (shape2Input.rank !== 1) {\n    throw new Error(\n      'broadcastArgs(): second input must be a vector (rank=1). ' +\n      `Has rank ${shape2Input.rank}`);\n  }\n\n  const inputs: BroadcastArgsInputs = { s0: shape1Input, s1: shape2Input };\n  return ENGINE.runKernel(BroadcastArgs, inputs as unknown as NamedTensorMap);\n}\n\nexport const broadcastArgs = /* @__PURE__ */ op({ broadcastArgs_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Tile, TileAttrs, TileInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {Rank, ShapeMap, TensorLike} from '../types';\nimport {assertNonNegativeIntegerDimensions} from '../util_base';\n\nimport {clone} from './clone';\nimport {op} from './operation';\nimport {reshape} from './reshape';\n\n/**\n * Broadcast an array to a compatible shape NumPy-style.\n *\n * The tensor's shape is compared to the broadcast shape from end to beginning.\n * Ones are prepended to the tensor's shape until it has the same length as\n * the broadcast shape. If input.shape[i]==shape[i], the (i+1)-th axis is\n * already broadcast-compatible. If input.shape[i]==1 and shape[i]==N, then\n * the input tensor is tiled N times along that axis (using tf.tile).\n *\n * @param input The tensor that is to be broadcasted.\n * @param shape The input is to be broadcast to this shape.\n *\n * @doc {heading: 'Tensors', subheading: 'Transformations'}\n */\nfunction broadcastTo_<R extends Rank>(\n    x: Tensor|TensorLike, shape: ShapeMap[R]): Tensor<R> {\n  let input = convertToTensor(x, 'broadcastTo', 'x');\n  const xShape = input.shape;\n\n  assertNonNegativeIntegerDimensions(shape);\n\n  if (shape.length < input.rank) {\n    throw new Error(`broadcastTo(): shape.length=${shape.length} < input.rank=${\n        input.rank}.`);\n  }\n\n  if (shape.length > input.rank) {\n    const newShape = input.shape.slice();\n    while (newShape.length < shape.length) {\n      newShape.unshift(1);\n    }\n    input = reshape(input, newShape);\n  }\n\n  const inputShape = input.shape;\n  const reps: number[] = Array.from(shape);\n  for (let i = shape.length - 1; i >= 0; i--) {\n    if (inputShape[i] === shape[i]) {\n      reps[i] = 1;\n    } else if (input.shape[i] !== 1) {\n      throw new Error(\n          `broadcastTo(): [${xShape}] cannot be broadcast to [${shape}].`);\n    }\n  }\n  const axes = reps.map((n, i) => n > 1 ? i : -1).filter(i => i >= 0);\n\n  if (axes.length === 0) {\n    return clone(input) as Tensor<R>;\n  }\n\n  // TODO call broadcastTo kernel directly once backends implement broadcstTo\n  const inputs: TileInputs = {x: input};\n  const attrs: TileAttrs = {reps};\n  return ENGINE.runKernel(\n      Tile, inputs as unknown as NamedTensorMap,\n      attrs as unknown as NamedAttrMap);\n}\n\nexport const broadcastTo = /* @__PURE__ */ op({broadcastTo_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Ceil, CeilInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes ceiling of input `tf.Tensor` element-wise: `ceil(x)`\n *\n * ```js\n * const x = tf.tensor1d([.6, 1.1, -3.3]);\n *\n * x.ceil().print();  // or tf.ceil(x)\n * ```\n * @param x The input Tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction ceil_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'ceil', 'float32');\n\n  const inputs: CeilInputs = {x: $x};\n  return ENGINE.runKernel(Ceil, inputs as unknown as NamedTensorMap);\n}\nexport const ceil = /* @__PURE__ */ op({ceil_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {ClipByValue, ClipByValueAttrs, ClipByValueInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\nimport {fill} from './fill';\n\nimport {op} from './operation';\n\n/**\n * Clips values element-wise. `max(min(x, clipValueMax), clipValueMin)`\n *\n * ```js\n * const x = tf.tensor1d([-1, 2, -3, 4]);\n *\n * x.clipByValue(-2, 3).print();  // or tf.clipByValue(x, -2, 3)\n * ```\n * @param x The input tensor.\n * @param clipValueMin Lower bound of range to be clipped to.\n * @param clipValueMax Upper bound of range to be clipped to.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction clipByValue_<T extends Tensor>(\n    x: T|TensorLike, clipValueMin: number, clipValueMax: number): T {\n  const $x = convertToTensor(x, 'x', 'clipByValue');\n  util.assert(\n      (clipValueMin <= clipValueMax),\n      () => `Error in clip: min (${clipValueMin}) must be ` +\n          `less than or equal to max (${clipValueMax}).`);\n\n  if (clipValueMin === clipValueMax) {\n    return fill($x.shape, clipValueMin, $x.dtype) as T;\n  }\n\n  const inputs: ClipByValueInputs = {x: $x};\n  const attrs: ClipByValueAttrs = {clipValueMin, clipValueMax};\n\n  return ENGINE.runKernel(\n      ClipByValue, inputs as unknown as NamedTensorMap,\n      attrs as unknown as NamedAttrMap);\n}\n\nexport const clipByValue = /* @__PURE__ */ op({clipByValue_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Tensor1D} from '../tensor';\nimport {TensorLike} from '../types';\n\nimport {concat} from './concat';\nimport {op} from './operation';\n\n/**\n * Concatenates a list of`tf.Tensor1D`s along an axis. See `concat` for details.\n *\n * For example, if:\n * A: shape(3) = |r1, g1, b1|\n * B: shape(2) = |r2, g2|\n * C = tf.concat1d([A, B]) == |r1, g1, b1, r2, g2|\n *\n * @param tensors A list of`tf.Tensor`s to concatenate.\n * @return The concatenated array.\n */\nfunction concat1d_(tensors: Array<Tensor1D|TensorLike>): Tensor1D {\n  return concat(tensors, 0 /* axis */);\n}\n\nexport const concat1d = /* @__PURE__ */ op({concat1d_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Tensor2D} from '../tensor';\nimport {TensorLike} from '../types';\n\nimport {concat} from './concat';\nimport {op} from './operation';\n\n/**\n * Concatenates a list of`tf.Tensor2D`s along an axis. See `concat` for details.\n *\n * For example, if:\n * A: shape(2, 3) = | r1, g1, b1 |\n *                  | r2, g2, b2 |\n *\n * B: shape(2, 3) = | r3, g3, b3 |\n *                  | r4, g4, b4 |\n *\n * C = tf.concat2d([A, B], axis)\n *\n * if axis = 0:\n * C: shape(4, 3) = | r1, g1, b1 |\n *                  | r2, g2, b2 |\n *                  | r3, g3, b3 |\n *                  | r4, g4, b4 |\n *\n * if axis = 1:\n * C = shape(2, 6) = | r1, g1, b1, r3, g3, b3 |\n *                   | r2, g2, b2, r4, g4, b4 |\n *\n *\n * @param tensors A list of `tf.Tensor`s to concatenate.\n * @param axis The axis to concatenate along.\n * @return The concatenated array.\n */\nfunction concat2d_(\n    tensors: Array<Tensor2D|TensorLike>, axis: number): Tensor2D {\n  return concat(tensors, axis);\n}\n\nexport const concat2d = /* @__PURE__ */ op({concat2d_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Tensor3D} from '../tensor';\nimport {TensorLike} from '../types';\n\nimport {concat} from './concat';\nimport {op} from './operation';\n\n/**\n * Concatenates a list of `tf.Tensor3D`s along an axis.\n * See `concat` for details.\n *\n * For example, if:\n * A: shape(2, 1, 3) = | r1, g1, b1 |\n *                     | r2, g2, b2 |\n *\n * B: shape(2, 1, 3) = | r3, g3, b3 |\n *                     | r4, g4, b4 |\n *\n * C = tf.concat3d([A, B], axis)\n *\n * if axis = 0:\n * C: shape(4, 1, 3) = | r1, g1, b1 |\n *                     | r2, g2, b2 |\n *                     | r3, g3, b3 |\n *                     | r4, g4, b4 |\n *\n * if axis = 1:\n * C: shape(2, 2, 3) = | r1, g1, b1, r3, g3, b3 |\n *                     | r2, g2, b2, r4, g4, b4 |\n *\n * if axis = 2:\n * C = shape(2, 1, 6) = | r1, g1, b1, r3, g3, b3 |\n *                      | r2, g2, b2, r4, g4, b4 |\n *\n * @param tensors A list of`tf.Tensor`s to concatenate.\n * @param axis The axis to concate along.\n * @return The concatenated array.\n */\nfunction concat3d_(\n    tensors: Array<Tensor3D|TensorLike>, axis: number): Tensor3D {\n  return concat(tensors, axis);\n}\n\nexport const concat3d = /* @__PURE__ */ op({concat3d_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Tensor4D} from '../tensor';\nimport {TensorLike} from '../types';\n\nimport {concat} from './concat';\nimport {op} from './operation';\n\n/**\n * Concatenates a list of `tf.Tensor4D`s along an axis.\n * See `concat` for details.\n *\n * @param tensors A list of `tf.Tensor`s to concatenate.\n * @param axis The axis to concate along.\n * @return The concatenated array.\n */\nfunction concat4d_(\n    tensors: Array<Tensor4D|TensorLike>, axis: number): Tensor4D {\n  return concat(tensors, axis);\n}\n\nexport const concat4d = /* @__PURE__ */ op({concat4d_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {Conv2D, Conv2DAttrs, Conv2DInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor3D, Tensor4D} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport * as conv_util from './conv_util';\nimport {op} from './operation';\nimport {reshape} from './reshape';\n\n/**\n * Computes a 2D convolution over the input x.\n *\n * @param x The input tensor, of rank 4 or rank 3, of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is\n * assumed.\n * @param filter The filter, rank 4, of shape\n *     `[filterHeight, filterWidth, inDepth, outDepth]`.\n * @param strides The strides of the convolution: `[strideHeight,\n * strideWidth]`.\n * @param pad The type of padding algorithm.\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n *   - For more info, see this guide:\n *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](\n *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)\n * @param dataFormat: An optional string from: \"NHWC\", \"NCHW\". Defaults to\n *     \"NHWC\". Specify the data format of the input and output data. With the\n *     default format \"NHWC\", the data is stored in the order of: [batch,\n *     height, width, channels].\n * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`\n *     in which we sample input values across the height and width dimensions\n *     in atrous convolution. Defaults to `[1, 1]`. If `dilations` is a single\n *     number, then `dilationHeight == dilationWidth`. If it is greater than\n *     1, then all values of `strides` must be 1.\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n *\n * @doc {heading: 'Operations', subheading: 'Convolution'}\n */\nfunction conv2d_<T extends Tensor3D|Tensor4D>(\n    x: T|TensorLike, filter: Tensor4D|TensorLike,\n    strides: [number, number]|number,\n    pad: 'valid'|'same'|number|conv_util.ExplicitPadding,\n    dataFormat: 'NHWC'|'NCHW' = 'NHWC',\n    dilations: [number, number]|number = [1, 1],\n    dimRoundingMode?: 'floor'|'round'|'ceil'): T {\n  const $x = convertToTensor(x, 'x', 'conv2d', 'float32');\n  const $filter = convertToTensor(filter, 'filter', 'conv2d', 'float32');\n\n  let x4D = $x as Tensor4D;\n  let reshapedTo4D = false;\n\n  if ($x.rank === 3) {\n    reshapedTo4D = true;\n    x4D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);\n  }\n\n  util.assert(\n      x4D.rank === 4,\n      () => `Error in conv2d: input must be rank 4, but got rank ${x4D.rank}.`);\n  util.assert(\n      $filter.rank === 4,\n      () => `Error in conv2d: filter must be rank 4, but got rank ` +\n          `${$filter.rank}.`);\n  conv_util.checkPadOnDimRoundingMode('conv2d', pad, dimRoundingMode);\n  const inDepth = dataFormat === 'NHWC' ? x4D.shape[3] : x4D.shape[1];\n  util.assert(\n      inDepth === $filter.shape[2],\n      () => `Error in conv2d: depth of input (${inDepth}) must match ` +\n          `input depth for filter ${$filter.shape[2]}.`);\n  util.assert(\n      conv_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in conv2D: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n  util.assert(\n      conv_util.stridesOrDilationsArePositive(dilations),\n      () => 'Error in conv2D: Dilated rates should be larger than 0.');\n  util.assert(\n      conv_util.stridesOrDilationsArePositive(strides),\n      () => 'Error in conv2D: Strides should be larger than 0.');\n\n  const inputs: Conv2DInputs = {x: x4D, filter: $filter};\n  const attrs:\n      Conv2DAttrs = {strides, pad, dataFormat, dilations, dimRoundingMode};\n\n  // tslint:disable-next-line: no-unnecessary-type-assertion\n  const res = ENGINE.runKernel(\n                  Conv2D, inputs as unknown as NamedTensorMap,\n                  attrs as unknown as NamedAttrMap) as T;\n\n  if (reshapedTo4D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]) as T;\n  }\n  return res;\n}\n\nexport const conv2d = /* @__PURE__ */ op({conv2d_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Tensor2D, Tensor3D, Tensor4D} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {conv2d} from './conv2d';\nimport * as conv_util from './conv_util';\nimport {op} from './operation';\nimport {reshape} from './reshape';\n\n/**\n * Computes a 1D convolution over the input x.\n *\n * @param x The input tensor, of rank 3 or rank 2, of shape\n *     `[batch, width, inChannels]`. If rank 2, batch of 1 is assumed.\n * @param filter The filter, rank 3, of shape\n *     `[filterWidth, inDepth, outDepth]`.\n * @param stride The number of entries by which the filter is moved right at\n *     each step.\n * @param pad The type of padding algorithm.\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n *   - For more info, see this guide:\n *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](\n *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)\n * @param dataFormat An optional string from \"NWC\", \"NCW\". Defaults to \"NWC\",\n *     the data is stored in the order of [batch, in_width, in_channels]. Only\n *     \"NWC\" is currently supported.\n * @param dilation The dilation rate in which we sample input values in\n *     atrous convolution. Defaults to `1`. If it is greater than 1, then\n *     stride must be `1`.\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n *\n * @doc {heading: 'Operations', subheading: 'Convolution'}\n */\nfunction conv1d_<T extends Tensor2D|Tensor3D>(\n    x: T|TensorLike, filter: Tensor3D|TensorLike, stride: number,\n    pad: 'valid'|'same'|number|conv_util.ExplicitPadding,\n    dataFormat: 'NWC'|'NCW' = 'NWC', dilation = 1,\n    dimRoundingMode?: 'floor'|'round'|'ceil'): T {\n  const $x = convertToTensor(x, 'x', 'conv1d');\n  const $filter = convertToTensor(filter, 'filter', 'conv1d');\n\n  let x3D = $x as Tensor3D;\n  let reshapedTo3D = false;\n  if ($x.rank === 2) {\n    reshapedTo3D = true;\n    x3D = reshape($x, [1, $x.shape[0], $x.shape[1]]);\n  }\n\n  util.assert(\n      x3D.rank === 3,\n      () => `Error in conv1d: input must be rank 3, but got rank ${x3D.rank}.`);\n  util.assert(\n      $filter.rank === 3,\n      () => `Error in conv1d: filter must be rank 3, but got rank ` +\n          `${$filter.rank}.`);\n  conv_util.checkPadOnDimRoundingMode('conv1d', pad, dimRoundingMode);\n  util.assert(\n      x3D.shape[2] === $filter.shape[1],\n      () => `Error in conv1d: depth of input (${x3D.shape[2]}) must match ` +\n          `input depth for filter ${$filter.shape[1]}.`);\n  util.assert(\n      conv_util.eitherStridesOrDilationsAreOne(stride, dilation),\n      () => 'Error in conv1D: Either stride or dilation must be 1. ' +\n          `Got stride ${stride} and dilation '${dilation}'`);\n  util.assert(\n      conv_util.stridesOrDilationsArePositive(dilation),\n      () => 'Error in conv1D: Dilated rates should be larger than 0.');\n  util.assert(\n      conv_util.stridesOrDilationsArePositive(stride),\n      () => 'Error in conv1D: Stride should be larger than 0.');\n  util.assert(\n      dataFormat === 'NWC',\n      () => `Error in conv1d: got dataFormat of ${\n          dataFormat} but only NWC is currently supported.`);\n\n  const filter4D = reshape(\n      $filter, [1, $filter.shape[0], $filter.shape[1], $filter.shape[2]]);\n  const input4D = reshape(x3D, [x3D.shape[0], 1, x3D.shape[1], x3D.shape[2]]);\n  const strides: [number, number] = [1, stride];\n  const dilations: [number, number] = [1, dilation];\n\n  const conv2dDataFormat = 'NHWC';\n\n  const res = conv2d(\n      (input4D as Tensor4D), (filter4D as Tensor4D), strides, pad,\n      conv2dDataFormat, dilations, dimRoundingMode);\n\n  if (reshapedTo3D) {\n    return reshape(res, [res.shape[2], res.shape[3]]) as T;\n  }\n\n  return reshape(res, [res.shape[0], res.shape[2], res.shape[3]]) as T;\n}\n\nexport const conv1d = /* @__PURE__ */ op({conv1d_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {Conv2DBackpropInput, Conv2DBackpropInputAttrs, Conv2DBackpropInputInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor3D, Tensor4D} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport * as util from '../util';\n\nimport * as conv_util from './conv_util';\nimport {op} from './operation';\nimport {reshape} from './reshape';\n\n/**\n * Computes the derivative of the input of a 2D convolution.\n *\n * @param xShape The shape of the input: [batch, height, width, inDepth].\n * If length of 3, batch of 1 is assumed.\n * @param dy The derivative of the output, of rank 4 or rank 3 of shape\n *   `[batch, outHeight, outWidth, outDepth]`. If rank 3, batch of 1 is\n * assumed.\n * @param filter The filter, rank 4, of shape\n *     `[filterHeight, filterWidth, inDepth, outDepth]`.\n * @param strides The strides of the convolution: `[strideHeight,\n * strideWidth]`.\n * @param pad The type of padding algorithm used:\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n * @param dataFormat: An optional string from: \"NHWC\", \"NCHW\". Defaults to\n *     \"NHWC\". Specify the data format of the input and output data. With the\n *     default format \"NHWC\", the data is stored in the order of: [batch,\n *     height, width, channels].\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n */\nfunction conv2DBackpropInput_<T extends Tensor3D|Tensor4D>(\n    xShape: [number, number, number, number]|[number, number, number], dy: T,\n    filter: Tensor4D, strides: [number, number]|number,\n    pad: 'valid'|'same'|number|conv_util.ExplicitPadding,\n    dataFormat: 'NHWC'|'NCHW' = 'NHWC',\n    dimRoundingMode?: 'floor'|'round'|'ceil'): T {\n  util.assert(\n      xShape.length === dy.rank,\n      () => `Length of inShape ` +\n          `(${xShape.length}) and rank of dy (${dy.rank}) must match`);\n\n  let xShape4D = xShape as [number, number, number, number];\n  let dy4D = dy as Tensor4D;\n  let reshapedTo4D = false;\n  if (dy.rank === 3) {\n    reshapedTo4D = true;\n    dy4D = reshape(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2]]);\n    xShape4D = [1, xShape[0], xShape[1], xShape[2]];\n  }\n\n  util.assert(\n      xShape4D.length === 4,\n      () =>\n          `Error in conv2dDerInput: inShape must be length 4, but got length ` +\n          `${xShape4D.length}.`);\n  util.assert(\n      dy4D.rank === 4,\n      () => `Error in conv2dDerInput: dy must be rank 4, but got ` +\n          `rank ${dy4D.rank}`);\n  util.assert(\n      filter.rank === 4,\n      () => `Error in conv2dDerInput: filter must be rank 4, but got ` +\n          `rank ${filter.rank}`);\n  const inDepth = dataFormat === 'NHWC' ? xShape4D[3] : xShape4D[1];\n  const outDepth = dataFormat === 'NHWC' ? dy4D.shape[3] : dy4D.shape[1];\n  util.assert(\n      inDepth === filter.shape[2],\n      () => `Error in conv2dDerInput: depth of input (${inDepth}) must ` +\n          `match input depth for filter ${filter.shape[2]}.`);\n  util.assert(\n      outDepth === filter.shape[3],\n      () => `Error in conv2dDerInput: depth of output (${outDepth}) must ` +\n          `match output depth for filter ${filter.shape[3]}.`);\n  conv_util.checkPadOnDimRoundingMode('conv2dDerInput', pad, dimRoundingMode);\n  const inputs: Conv2DBackpropInputInputs = {dy: dy4D, filter};\n  const attrs: Conv2DBackpropInputAttrs =\n      {strides, pad, dataFormat, dimRoundingMode, inputShape: xShape4D};\n\n  // tslint:disable-next-line: no-unnecessary-type-assertion\n  const res = ENGINE.runKernel(\n                  Conv2DBackpropInput, inputs as unknown as NamedTensorMap,\n                  attrs as unknown as NamedAttrMap) as T;\n\n  if (reshapedTo4D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]) as T;\n  }\n  return res;\n}\n\nexport const conv2DBackpropInput = /* @__PURE__ */ op({conv2DBackpropInput_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Tensor3D, Tensor4D} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {conv2DBackpropInput} from './conv2d_backprop_input';\nimport {ExplicitPadding} from './conv_util';\nimport {op} from './operation';\n\n/**\n * Computes the transposed 2D convolution of an image, also known as a\n * deconvolution.\n *\n * @param x The input image, of rank 4 or rank 3, of shape\n *   `[batch, height, width, inDepth]`. If rank 3, batch of 1 is assumed.\n * @param filter The filter, rank 4, of shape\n *     `[filterHeight, filterWidth, outDepth, inDepth]`.\n *     `inDepth` must match `inDepth` in `x`.\n * @param outputShape Output shape, of rank 4 or rank 3:\n *     `[batch, height, width, outDepth]`. If rank 3, batch of 1 is assumed.\n * @param strides The strides of the original convolution:\n *     `[strideHeight, strideWidth]`.\n * @param pad  The type of padding algorithm used in the non-transpose version\n *    of the op.\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n *\n * @doc {heading: 'Operations', subheading: 'Convolution'}\n */\nfunction conv2dTranspose_<T extends Tensor3D|Tensor4D>(\n    x: T|TensorLike, filter: Tensor4D|TensorLike,\n    outputShape: [number, number, number, number]|[number, number, number],\n    strides: [number, number]|number,\n    pad: 'valid'|'same'|number|ExplicitPadding,\n    dimRoundingMode?: 'floor'|'round'|'ceil'): T {\n  const $x = convertToTensor(x, 'x', 'conv2dTranspose');\n  const $filter = convertToTensor(filter, 'filter', 'conv2dTranspose');\n\n  return conv2DBackpropInput(\n      outputShape, $x, $filter, strides, pad, 'NHWC', dimRoundingMode);\n}\n\nexport const conv2dTranspose = /* @__PURE__ */ op({conv2dTranspose_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {Conv3D, Conv3DAttrs, Conv3DInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor4D, Tensor5D} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {eitherStridesOrDilationsAreOne, stridesOrDilationsArePositive} from './conv_util';\nimport {op} from './operation';\nimport {reshape} from './reshape';\n\n/**\n * Computes a 3D convolution over the input x.\n *\n * @param x The input tensor, of rank 5 or rank 4, of shape\n *     `[batch, depth, height, width, channels]`. If rank 4,\n * batch of 1 is assumed.\n * @param filter The filter, rank 5, of shape\n *     `[filterDepth, filterHeight, filterWidth, inChannels, outChannels]`.\n *      inChannels must match between input and filter.\n * @param strides The strides of the convolution: `[strideDepth, strideHeight,\n * strideWidth]`.\n * @param pad The type of padding algorithm.\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n *   - For more info, see this guide:\n *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](\n *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)\n * @param dataFormat: An optional string from: \"NDHWC\", \"NCDHW\". Defaults to\n *     \"NDHWC\". Specify the data format of the input and output data. With the\n *     default format \"NDHWC\", the data is stored in the order of: [batch,\n *     depth, height, width, channels]. Only \"NDHWC\" is currently supported.\n * @param dilations The dilation rates: `[dilationDepth, dilationHeight,\n *     dilationWidth]` in which we sample input values across the height\n *     and width dimensions in atrous convolution. Defaults to `[1, 1, 1]`.\n *     If `dilations` is a single number, then\n *     `dilationDepth == dilationHeight == dilationWidth`. If it is greater\n *     than 1, then all values of `strides` must be 1.\n *\n * @doc {heading: 'Operations', subheading: 'Convolution'}\n */\nfunction conv3d_<T extends Tensor4D|Tensor5D>(\n    x: T|TensorLike, filter: Tensor5D|TensorLike,\n    strides: [number, number, number]|number, pad: 'valid'|'same',\n    dataFormat: 'NDHWC'|'NCDHW' = 'NDHWC',\n    dilations: [number, number, number]|number = [1, 1, 1]): T {\n  const $x = convertToTensor(x, 'x', 'conv3d');\n  const $filter = convertToTensor(filter, 'filter', 'conv3d');\n\n  let x5D = $x as Tensor5D;\n  let reshapedTo5D = false;\n\n  if ($x.rank === 4) {\n    reshapedTo5D = true;\n    x5D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2], $x.shape[3]]);\n  }\n  util.assert(\n      x5D.rank === 5,\n      () => `Error in conv3d: input must be rank 5, but got rank ${x5D.rank}.`);\n  util.assert(\n      $filter.rank === 5,\n      () => `Error in conv3d: filter must be rank 5, but got rank ` +\n          `${$filter.rank}.`);\n  util.assert(\n      x5D.shape[4] === $filter.shape[3],\n      () => `Error in conv3d: depth of input (${x5D.shape[4]}) must match ` +\n          `input depth for filter ${$filter.shape[3]}.`);\n  util.assert(\n      eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in conv3D: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n  util.assert(\n      dataFormat === 'NDHWC',\n      () => `Error in conv3d: got dataFormat of ${\n          dataFormat} but only NDHWC is currently supported.`);\n  util.assert(\n      stridesOrDilationsArePositive(dilations),\n      () => 'Error in conv3D: Dilated rates should be larger than 0.');\n  util.assert(\n      stridesOrDilationsArePositive(strides),\n      () => 'Error in conv3D: Strides should be larger than 0.');\n\n  const inputs: Conv3DInputs = {x: x5D, filter: $filter};\n\n  const attrs: Conv3DAttrs = {strides, pad, dataFormat, dilations};\n\n  // tslint:disable-next-line: no-unnecessary-type-assertion\n  const res = ENGINE.runKernel(\n                  Conv3D, inputs as unknown as NamedTensorMap,\n                  attrs as unknown as NamedAttrMap) as T;\n\n  if (reshapedTo5D) {\n    return reshape(\n               res, [res.shape[1], res.shape[2], res.shape[3], res.shape[4]]) as\n        T;\n  }\n  return res;\n}\n\nexport const conv3d = /* @__PURE__ */ op({conv3d_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {Conv3DBackpropInputV2, Conv3DBackpropInputV2Attrs, Conv3DBackpropInputV2Inputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor4D, Tensor5D} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport * as util from '../util';\n\nimport {op} from './operation';\nimport {reshape} from './reshape';\n\n/**\n * Computes the derivative of the input of a 3D convolution.\n *\n * @param xShape The shape of the input: [batch, depth, height, width,\n * in_channels]. If length of 4, batch of 1 is assumed.\n * @param dy The derivative of the output, of rank 5 or rank 4 of shape\n *   `[batch, outDepth, outHeight, outWidth, in_channels]`.\n * If rank 4, batch of 1 is assumed.\n * @param filter The filter, rank 5, of shape\n *     `[filterDepth, filterHeight, filterWidth, inDepth, outDepth]`.\n * @param strides The strides of the convolution: `[strideDepth, strideHeight,\n * strideWidth]`.\n * @param pad The type of padding algorithm used:\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n */\nfunction conv3DBackpropInput_<T extends Tensor4D|Tensor5D>(\n    xShape:\n        [number, number, number, number,\n         number]|[number, number, number, number],\n    dy: T, filter: Tensor5D, strides: [number, number, number]|number,\n    pad: 'valid'|'same'): T {\n  util.assert(\n      xShape.length === dy.rank,\n      () => `Length of inShape ` +\n          `(${xShape.length}) and rank of dy (${dy.rank}) must match`);\n\n  let xShape5D = xShape as [number, number, number, number, number];\n  let dy5D = dy as Tensor5D;\n  let reshapedTo5D = false;\n  if (dy.rank === 4) {\n    reshapedTo5D = true;\n    dy5D = reshape(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2], dy.shape[3]]);\n    xShape5D = [1, xShape[0], xShape[1], xShape[2], xShape[3]];\n  }\n\n  const inDepth = xShape5D[4];\n  const outDepth = dy5D.shape[4];\n  util.assert(\n      xShape5D.length === 5,\n      () =>\n          `Error in conv3dDerInput: inShape must be length 5, but got length ` +\n          `${xShape5D.length}.`);\n  util.assert(\n      dy5D.rank === 5,\n      () => `Error in conv3dDerInput: dy must be rank 5, but got ` +\n          `rank ${dy5D.rank}`);\n  util.assert(\n      filter.rank === 5,\n      () => `Error in conv3dDerInput: filter must be rank 5, but got ` +\n          `rank ${filter.rank}`);\n  util.assert(\n      inDepth === filter.shape[3],\n      () => `Error in conv3dDerInput: depth of input (${inDepth}) must ` +\n          `match input depth for filter ${filter.shape[3]}.`);\n  util.assert(\n      outDepth === filter.shape[4],\n      () => `Error in conv3dDerInput: depth of output (${outDepth}) must ` +\n          `match output depth for filter ${filter.shape[4]}.`);\n\n  const inputs: Conv3DBackpropInputV2Inputs = {dy: dy5D, filter};\n\n  const attrs:\n      Conv3DBackpropInputV2Attrs = {pad, strides, inputShape: xShape5D};\n\n  // tslint:disable-next-line: no-unnecessary-type-assertion\n  const res = ENGINE.runKernel(\n                  Conv3DBackpropInputV2, inputs as unknown as NamedTensorMap,\n                  attrs as unknown as NamedAttrMap) as T;\n\n  if (reshapedTo5D) {\n    return reshape(\n               res, [res.shape[1], res.shape[2], res.shape[3], res.shape[4]]) as\n        T;\n  }\n  return res;\n}\n\nexport const conv3DBackpropInput = /* @__PURE__ */ op({conv3DBackpropInput_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Tensor4D, Tensor5D} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {conv3DBackpropInput} from './conv3d_backprop_input';\nimport {op} from './operation';\n\n/**\n * Computes the transposed 3D convolution of a volume, also known as a\n * deconvolution.\n *\n * @param x The input image, of rank 5 or rank 4, of shape\n *   `[batch, depth, height, width, inDepth]`. If rank 4, batch of 1 is assumed.\n * @param filter The filter, rank 4, of shape\n *     `[depth, filterHeight, filterWidth, outDepth, inDepth]`.\n *     `inDepth` must match `inDepth` in `x`.\n * @param outputShape Output shape, of rank 5 or rank 4:\n *     `[batch, depth, height, width, outDepth]`. If rank 3, batch of 1 is\n *    assumed.\n * @param strides The strides of the original convolution:\n *     `[strideDepth, strideHeight, strideWidth]`.\n * @param pad  The type of padding algorithm used in the non-transpose version\n *    of the op.\n *\n * @doc {heading: 'Operations', subheading: 'Convolution'}\n */\nfunction conv3dTranspose_<T extends Tensor4D|Tensor5D>(\n    x: T|TensorLike, filter: Tensor5D|TensorLike,\n    outputShape:\n        [number, number, number, number,\n         number]|[number, number, number, number],\n    strides: [number, number, number]|number, pad: 'valid'|'same'): T {\n  const $x = convertToTensor(x, 'x', 'conv3dTranspose');\n  const $filter = convertToTensor(filter, 'filter', 'conv3dTranspose');\n\n  return conv3DBackpropInput(outputShape, $x, $filter, strides, pad);\n}\n\nexport const conv3dTranspose = /* @__PURE__ */ op({conv3dTranspose_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Cos, CosInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes cos of the input `tf.Tensor` element-wise: `cos(x)`\n *\n * ```js\n * const x = tf.tensor1d([0, Math.PI / 2, Math.PI * 3 / 4]);\n *\n * x.cos().print();  // or tf.cos(x)\n * ```\n * @param x The input tensor. Must be float32 type.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction cos_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'cos', 'float32');\n\n  const inputs: CosInputs = {x: $x};\n\n  return ENGINE.runKernel(Cos, inputs as unknown as NamedTensorMap);\n}\nexport const cos = /* @__PURE__ */ op({cos_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Cosh, CoshInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes hyperbolic cos of the input `tf.Tensor` element-wise: `cosh(x)`\n *\n * ```js\n * const x = tf.tensor1d([0, 1, -1, .7]);\n *\n * x.cosh().print();  // or tf.cosh(x)\n * ```\n * @param x The input tensor. Must be float32 type.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction cosh_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'cosh', 'float32');\n  const inputs: CoshInputs = {x: $x};\n\n  return ENGINE.runKernel(Cosh, inputs as unknown as NamedTensorMap);\n}\nexport const cosh = /* @__PURE__ */ op({cosh_});\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport { ENGINE } from '../engine';\nimport { Cumprod, CumprodAttrs, CumprodInputs } from '../kernel_names';\nimport { NamedAttrMap } from '../kernel_registry';\nimport { Tensor } from '../tensor';\nimport { NamedTensorMap } from '../tensor_types';\nimport { convertToTensor } from '../tensor_util_env';\nimport { TensorLike } from '../types';\n\nimport { op } from './operation';\n\n/**\n * Computes the cumulative product of a `tf.Tensor` along `axis`.\n *\n * ```js\n * const x = tf.tensor([1, 2, 3, 4]);\n * x.cumprod().print();\n * ```\n * ```js\n * const x = tf.tensor([[1, 2], [3, 4]]);\n * x.cumprod().print();\n * ```\n *\n * @param x The input tensor to cumulatively multiply.\n * @param axis The axis along which to multiply. Optional. Defaults to 0.\n * @param exclusive Whether to perform exclusive cumulative product. Optional.\n *     Defaults to false. If set to true then the product of each tensor entry\n *     does not include its own value, but only the values previous to it\n *     along the specified axis.\n * @param reverse Whether to multiply in the opposite direction. Optional.\n *     Defaults to false.\n *\n * @doc {heading: 'Operations', subheading: 'Scan'}\n */\nfunction cumprod_<T extends Tensor>(\n  x: Tensor | TensorLike,\n  axis = 0,\n  exclusive = false,\n  reverse = false\n): T {\n  const $x = convertToTensor(x, 'x', 'cumprod');\n\n  const inputs: CumprodInputs = { x: $x };\n  const attrs: CumprodAttrs = { axis, exclusive, reverse };\n\n  return ENGINE.runKernel(\n    Cumprod,\n    inputs as unknown as NamedTensorMap,\n    attrs as unknown as NamedAttrMap\n  );\n}\n\nexport const cumprod = /* @__PURE__ */ op({ cumprod_ });\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Cumsum, CumsumAttrs, CumsumInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes the cumulative sum of a `tf.Tensor` along `axis`.\n *\n * ```js\n * const x = tf.tensor([1, 2, 3, 4]);\n * x.cumsum().print();\n * ```\n * ```js\n * const x = tf.tensor([[1, 2], [3, 4]]);\n * x.cumsum().print();\n * ```\n *\n * @param x The input tensor to be summed.\n * @param axis The axis along which to sum. Optional. Defaults to 0.\n * @param exclusive Whether to perform exclusive cumulative sum. Optional.\n *     Defaults to false. If set to true then the sum of each tensor entry\n *     does not include its own value, but only the values previous to it\n *     along the specified axis.\n * @param reverse Whether to sum in the opposite direction. Optional.\n *     Defaults to false.\n *\n * @doc {heading: 'Operations', subheading: 'Scan'}\n */\nfunction cumsum_<T extends Tensor>(\n    x: Tensor|TensorLike, axis = 0, exclusive = false, reverse = false): T {\n  const $x = convertToTensor(x, 'x', 'cumsum');\n\n  const inputs: CumsumInputs = {x: $x};\n  const attrs: CumsumAttrs = {axis, exclusive, reverse};\n\n  return ENGINE.runKernel(\n      Cumsum, inputs as unknown as NamedTensorMap,\n      attrs as unknown as NamedAttrMap);\n}\n\nexport const cumsum = /* @__PURE__ */ op({cumsum_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {DenseBincount, DenseBincountAttrs, DenseBincountInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor1D, Tensor2D} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {op} from './operation';\n\n/**\n * Outputs a vector with length `size` and the same dtype as `weights`.\n *\n * If `weights` are empty, then index `i` stores the number of times the value\n * `i` is counted in `x`. If `weights` are non-empty, then index `i` stores the\n * sum of the value in `weights` at each index where the corresponding value in\n * `x` is `i`.\n *\n * Values in `x` outside of the range [0, size) are ignored.\n *\n * @param x The input int tensor, rank 1 or rank 2.\n * @param weights The weights tensor, must have the same shape as x, or a\n *     length-0 Tensor, in which case it acts as all weights equal to 1.\n * @param size Non-negative integer.\n * @param binaryOutput Optional. Whether the kernel should count the appearance\n *     or number of occurrences. Defaults to False.\n *\n * @doc {heading: 'Operations', subheading: 'Reduction'}\n */\nfunction denseBincount_<T extends Tensor1D|Tensor2D>(\n    x: T|TensorLike, weights: T|TensorLike, size: number,\n    binaryOutput = false): T {\n  const $x = convertToTensor(x, 'x', 'denseBincount');\n  const $weights = convertToTensor(weights, 'weights', 'denseBincount');\n\n  util.assert(\n      $x.dtype === 'int32',\n      () => `Error in denseBincount: input ` +\n          `dtype must be int32, but got ${$x.dtype}`);\n  util.assert(\n      $x.rank <= 2,\n      () => `Error in denseBincount: input must be at most rank 2, but got ` +\n          `rank ${$x.rank}.`);\n  util.assert(size >= 0, () => `size must be non-negative, but got ${size}.`);\n  util.assert(\n      $weights.size === $x.size || $weights.size === 0,\n      () =>\n          `Error in denseBincount: weights must have the same shape as x or ` +\n          `0-length, but got x shape: ${$x.shape}, weights shape: ` +\n          `${$weights.shape}.`);\n\n  const inputs: DenseBincountInputs = {x: $x, weights: $weights};\n  const attrs: DenseBincountAttrs = {size, binaryOutput};\n\n  return ENGINE.runKernel(\n      DenseBincount, inputs as unknown as NamedTensorMap,\n      attrs as unknown as NamedAttrMap);\n}\n\nexport const denseBincount = /* @__PURE__ */ op({denseBincount_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {DepthToSpace, DepthToSpaceAttrs, DepthToSpaceInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor4D} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike4D} from '../types';\nimport * as util from '../util';\n\nimport {op} from './operation';\n\n/**\n * Rearranges data from depth into blocks of spatial data. More specifically,\n * this op outputs a copy of the input tensor where values from the `depth`\n * dimension are moved in spatial blocks to the `height` and `width` dimensions.\n * The attr `blockSize` indicates the input block size and how the data is\n * moved.\n *\n *  - Chunks of data of size `blockSize * blockSize` from depth are rearranged\n * into non-overlapping blocks of size `blockSize x blockSize`\n *\n *  - The width the output tensor is `inputWidth * blockSize`, whereas the\n * height is `inputHeight * blockSize`\n *\n *  - The Y, X coordinates within each block of the output image are determined\n * by the high order component of the input channel index\n *\n *  - The depth of the input tensor must be divisible by `blockSize *\n * blockSize`\n *\n * The `dataFormat` attr specifies the layout of the input and output tensors\n * with the following options: \"NHWC\": [ `batch, height, width, channels` ]\n * \"NCHW\": [ `batch, channels, height, width` ]\n *\n * ```js\n * const x = tf.tensor4d([1, 2, 3, 4], [1, 1, 1, 4]);\n * const blockSize = 2;\n * const dataFormat = \"NHWC\";\n *\n * tf.depthToSpace(x, blockSize, dataFormat).print();\n * ```\n *\n * @param x The input tensor of rank 4\n * @param blockSIze  An `int` that is `>= 2`. The size of the spatial block\n * @param dataFormat An optional string from: \"NHWC\", \"NCHW\". Defaults to \"NHWC\"\n *\n * @doc {heading: 'Tensors', subheading: 'Transformations'}\n */\nfunction depthToSpace_(\n    x: Tensor4D|TensorLike4D, blockSize: number,\n    dataFormat: 'NHWC'|'NCHW' = 'NHWC'): Tensor4D {\n  const $x = convertToTensor(x, 'x', 'depthToSpace', 'float32') as Tensor4D;\n\n  const inputHeight = (dataFormat === 'NHWC') ? $x.shape[1] : $x.shape[2];\n  const inputWidth = (dataFormat === 'NHWC') ? $x.shape[2] : $x.shape[3];\n  const inputDepth = (dataFormat === 'NHWC') ? $x.shape[3] : $x.shape[1];\n\n  util.assert(\n      blockSize > 1,\n      () => `blockSize should be > 1 for depthToSpace, but was: ${blockSize}`);\n\n  util.assert(\n      inputHeight * blockSize >= 0,\n      () => `Negative dimension size caused by overflow when multiplying\n    ${inputHeight} and ${blockSize}  for depthToSpace with input shape\n    ${$x.shape}`);\n\n  util.assert(\n      inputWidth * blockSize >= 0,\n      () => `Negative dimension size caused by overflow when multiplying\n    ${inputWidth} and ${blockSize} for depthToSpace with input shape\n        ${$x.shape}`);\n\n  util.assert(\n      (inputDepth % (blockSize * blockSize) === 0),\n      () => `Dimension size must be evenly divisible by ${\n          blockSize * blockSize} but is ${\n          inputDepth} for depthToSpace with input shape ${$x.shape}`);\n\n  const inputs: DepthToSpaceInputs = {x: $x};\n  const attrs: DepthToSpaceAttrs = {blockSize, dataFormat};\n\n  return ENGINE.runKernel(\n      DepthToSpace, inputs as unknown as NamedTensorMap,\n      attrs as unknown as NamedAttrMap);\n}\n\nexport const depthToSpace = /* @__PURE__ */ op({depthToSpace_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {DepthwiseConv2dNative, DepthwiseConv2dNativeAttrs, DepthwiseConv2dNativeInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor3D, Tensor4D} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport * as conv_util from './conv_util';\nimport {op} from './operation';\nimport {reshape} from './reshape';\n\n/**\n * Depthwise 2D convolution.\n *\n * Given a 4D `input` array and a `filter` array of shape\n * `[filterHeight, filterWidth, inChannels, channelMultiplier]` containing\n * `inChannels` convolutional filters of depth 1, this op applies a\n * different filter to each input channel (expanding from 1 channel to\n * `channelMultiplier` channels for each), then concatenates the results\n * together. The output has `inChannels * channelMultiplier` channels.\n *\n * See\n * [https://www.tensorflow.org/api_docs/python/tf/nn/depthwise_conv2d](\n *     https://www.tensorflow.org/api_docs/python/tf/nn/depthwise_conv2d)\n * for more details.\n *\n * @param x The input tensor, of rank 4 or rank 3, of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is\n * assumed.\n * @param filter The filter tensor, rank 4, of shape\n *     `[filterHeight, filterWidth, inChannels, channelMultiplier]`.\n * @param strides The strides of the convolution: `[strideHeight,\n * strideWidth]`. If strides is a single number, then `strideHeight ==\n * strideWidth`.\n * @param pad The type of padding algorithm.\n *   - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *   - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n *   - For more info, see this guide:\n *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](\n *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)\n * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`\n *     in which we sample input values across the height and width dimensions\n *     in atrous convolution. Defaults to `[1, 1]`. If `rate` is a single\n *     number, then `dilationHeight == dilationWidth`. If it is greater than\n *     1, then all values of `strides` must be 1.\n * @param dataFormat: An optional string from: \"NHWC\", \"NCHW\". Defaults to\n *     \"NHWC\". Specify the data format of the input and output data. With the\n *     default format \"NHWC\", the data is stored in the order of: [batch,\n *     height, width, channels]. Only \"NHWC\" is currently supported.\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n *\n * @doc {heading: 'Operations', subheading: 'Convolution'}\n */\nfunction depthwiseConv2d_<T extends Tensor3D|Tensor4D>(\n    x: T|TensorLike, filter: Tensor4D|TensorLike,\n    strides: [number, number]|number,\n    pad: 'valid'|'same'|number|conv_util.ExplicitPadding,\n    dataFormat: 'NHWC'|'NCHW' = 'NHWC',\n    dilations: [number, number]|number = [1, 1],\n    dimRoundingMode?: 'floor'|'round'|'ceil'): T {\n  const $x = convertToTensor(x, 'x', 'depthwiseConv2d', 'float32');\n  const $filter =\n      convertToTensor(filter, 'filter', 'depthwiseConv2d', 'float32');\n\n  let x4D = $x as Tensor4D;\n  let reshapedTo4D = false;\n  if ($x.rank === 3) {\n    reshapedTo4D = true;\n    x4D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);\n  }\n  util.assert(\n      x4D.rank === 4,\n      () => `Error in depthwiseConv2d: input must be rank 4, but got ` +\n          `rank ${x4D.rank}.`);\n  util.assert(\n      $filter.rank === 4,\n      () => `Error in depthwiseConv2d: filter must be rank 4, but got rank ` +\n          `${$filter.rank}.`);\n  const inChannels = dataFormat === 'NHWC' ? x4D.shape[3] : x4D.shape[1];\n  util.assert(\n      inChannels === $filter.shape[2],\n      () => `Error in depthwiseConv2d: number of input channels ` +\n          `(${inChannels}) must match the inChannels dimension in ` +\n          `filter ${$filter.shape[2]}.`);\n  conv_util.checkPadOnDimRoundingMode('depthwiseConv2d', pad, dimRoundingMode);\n  const inputs: DepthwiseConv2dNativeInputs = {x: x4D, filter: $filter};\n  const attrs: DepthwiseConv2dNativeAttrs =\n      {strides, pad, dataFormat, dilations, dimRoundingMode};\n\n  // tslint:disable-next-line: no-unnecessary-type-assertion\n  const res = ENGINE.runKernel(\n                  DepthwiseConv2dNative, inputs as unknown as NamedTensorMap,\n                  attrs as unknown as NamedAttrMap) as T;\n\n  if (reshapedTo4D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]) as T;\n  }\n  return res;\n}\n\nexport const depthwiseConv2d = /* @__PURE__ */ op({depthwiseConv2d_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Diag, DiagInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\n\nimport {op} from './operation';\n\n/**\n * Returns a diagonal tensor with given diagonal values.\n *\n * Given a diagonal, this operation returns a tensor with the diagonal and\n * everything else padded with zeros.\n *\n * Assume the input has dimensions `[D1,..., Dk]`, then the output is a tensor\n * of rank 2k with dimensions `[D1,..., Dk, D1,..., Dk]`\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3, 4]);\n *\n * tf.diag(x).print()\n * ```\n * ```js\n * const x = tf.tensor2d([1, 2, 3, 4, 5, 6, 7, 8], [4, 2])\n *\n * tf.diag(x).print()\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nfunction diag_(x: Tensor): Tensor {\n  const $x = convertToTensor(x, 'x', 'diag');\n\n  const inputs: DiagInputs = {x: $x};\n\n  return ENGINE.runKernel(Diag, inputs as unknown as NamedTensorMap);\n}\n\nexport const diag = /* @__PURE__ */ op({diag_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Dilation2D, Dilation2DAttrs, Dilation2DInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor3D, Tensor4D} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {op} from './operation';\nimport {reshape} from './reshape';\n\n/**\n * Computes the grayscale dilation over the input `x`.\n *\n * @param x The input tensor, rank 3 or rank 4 of shape\n *     `[batch, height, width, depth]`. If rank 3, batch of 1 is assumed.\n * @param filter The filter tensor, rank 3, of shape\n *     `[filterHeight, filterWidth, depth]`.\n * @param strides The strides of the sliding window for each dimension of the\n *     input tensor: `[strideHeight, strideWidth]`.\n *     If `strides` is a single number,\n *     then `strideHeight == strideWidth`.\n * @param pad The type of padding algorithm.\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1*1x1.\n *    - For more info, see this guide:\n *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](\n *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)\n * @param dataFormat Specify the data format of the input and output data.\n *      Defaults to 'NHWC'. Only 'NHWC' is currently supported. With the\n *      default format \"NHWC\", the data is stored in the order of: [batch,\n *      height, width, channels].\n * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`\n *     in which we sample input values across the height and width dimensions\n *     for atrous morphological dilation. Defaults to `[1, 1]`. If `dilations`\n *     is a single number, then `dilationHeight == dilationWidth`. If it is\n *     greater than 1, then all values of `strides` must be 1.\n *\n * @doc {heading: 'Operations', subheading: 'Convolution'}\n */\nfunction dilation2d_<T extends Tensor3D|Tensor4D>(\n    x: T|TensorLike, filter: Tensor3D|TensorLike,\n    strides: [number, number]|number, pad: 'valid'|'same',\n    dilations: [number, number]|number = [1, 1],\n    dataFormat: 'NHWC' = 'NHWC'): T {\n  const $x = convertToTensor(x, 'x', 'dilation2d');\n  const $filter = convertToTensor(filter, 'filter', 'dilation2d');\n\n  util.assert(\n      $x.rank === 3 || $x.rank === 4,\n      () => `Error in dilation2d: input must be rank 3 or 4, but got rank ` +\n          `${$x.rank}.`);\n  util.assert(\n      $filter.rank === 3,\n      () => `Error in dilation2d: filter must be rank 3, but got rank ` +\n          `${$filter.rank}.`);\n  util.assert(\n      dataFormat === 'NHWC',\n      () => `Error in dilation2d: Only NHWC is currently supported, ` +\n          `but got dataFormat of ${dataFormat}`);\n\n  let x4D = $x as Tensor4D;\n  let reshapedTo4D = false;\n\n  if ($x.rank === 3) {\n    x4D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);\n    reshapedTo4D = true;\n  }\n\n  util.assert(\n      x4D.shape[3] === $filter.shape[2],\n      () => `Error in dilation2d:  input and filter must have the same depth: ${\n          x4D.shape[3]} vs ${$filter.shape[2]}`);\n\n  const inputs: Dilation2DInputs = {x: x4D, filter: $filter};\n  const attrs: Dilation2DAttrs = {strides, pad, dilations};\n\n  // tslint:disable-next-line: no-unnecessary-type-assertion\n  const res = ENGINE.runKernel(\n                  Dilation2D, inputs as unknown as NamedTensorMap,\n                  attrs as unknown as NamedAttrMap) as T;\n\n  if (reshapedTo4D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]) as T;\n  }\n\n  return res;\n}\n\nexport const dilation2d = /* @__PURE__ */ op({dilation2d_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {Equal, EqualInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {makeTypesMatch} from '../tensor_util';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {assertAndGetBroadcastShape} from './broadcast_util';\nimport {op} from './operation';\n\n/**\n * Returns the truth value of (a == b) element-wise. Supports broadcasting.\n *\n * ```js\n * const a = tf.tensor1d([1, 2, 3]);\n * const b = tf.tensor1d([2, 2, 2]);\n *\n * a.equal(b).print();\n * ```\n *\n * @param a The first input tensor.\n * @param b The second input tensor. Must have the same dtype as `a`.\n *\n * @doc {heading: 'Operations', subheading: 'Logical'}\n */\nfunction equal_<T extends Tensor>(\n    a: Tensor|TensorLike, b: Tensor|TensorLike): T {\n  let $a = convertToTensor(a, 'a', 'equal', 'string_or_numeric');\n  let $b = convertToTensor(b, 'b', 'equal', 'string_or_numeric');\n  [$a, $b] = makeTypesMatch($a, $b);\n\n  assertAndGetBroadcastShape($a.shape, $b.shape);\n\n  const inputs: EqualInputs = {a: $a, b: $b};\n\n  return ENGINE.runKernel(Equal, inputs as unknown as NamedTensorMap);\n}\n\nexport const equal = /* @__PURE__ */ op({equal_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Select, SelectInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {broadcastTo} from './broadcast_to';\nimport {assertAndGetBroadcastShape} from './broadcast_util';\nimport {op} from './operation';\n\n/**\n * Returns the elements, either `a` or `b` depending on the `condition`.\n *\n * If the condition is true, select from `a`, otherwise select from `b`.\n *\n * ```js\n * const cond = tf.tensor1d([false, false, true], 'bool');\n * const a = tf.tensor1d([1 , 2, 3]);\n * const b = tf.tensor1d([-1, -2, -3]);\n *\n * a.where(cond, b).print();\n * ```\n *\n * @param condition The input condition. Must be of dtype bool.\n * @param a If `condition` is rank 1, `a` may have a higher rank but\n *     its first dimension must match the size of `condition`.\n * @param b A tensor with the same dtype as `a` and with shape that is\n *     compatible with `a`.\n * @return A tensor with same dtype as `a` and `b`, and shape that is\n *     broadcastable from `a` and `b`.\n *\n * @doc {heading: 'Operations', subheading: 'Logical'}\n */\nfunction where_<T extends Tensor>(\n    condition: Tensor|TensorLike, a: T|TensorLike, b: T|TensorLike): T {\n  const $a = convertToTensor(a, 'a', 'where');\n  const $b = convertToTensor(b, 'b', 'where');\n  const $condition = convertToTensor(condition, 'condition', 'where', 'bool');\n  // TODO: move this logic to forward function when the broadcastTo op is\n  // implemented in WASM.\n  // Find the broadcastable shape for $condition, $a, and $b.\n  const broadcastShape = assertAndGetBroadcastShape(\n      assertAndGetBroadcastShape($condition.shape, $a.shape), $b.shape);\n  const $broadcastedCondition = broadcastTo($condition, broadcastShape);\n  const $broadcastedA = broadcastTo($a, broadcastShape);\n  const $broadcastedB = broadcastTo($b, broadcastShape);\n\n  const inputs: SelectInputs = {\n    condition: $broadcastedCondition,\n    t: $broadcastedA,\n    e: $broadcastedB\n  };\n  return ENGINE.runKernel(Select, inputs as unknown as NamedTensorMap);\n}\n\nexport const where = /* @__PURE__ */ op({where_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../tensor';\nimport {makeTypesMatch} from '../tensor_util';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {div} from './div';\nimport {equal} from './equal';\nimport {op} from './operation';\nimport {where} from './where';\nimport {zerosLike} from './zeros_like';\n\n/**\n * Divides two `tf.Tensor`s element-wise, A / B. Supports broadcasting. Return 0\n * if denominator is 0.\n *\n *\n * ```js\n * const a = tf.tensor1d([1, 4, 9, 16]);\n * const b = tf.tensor1d([1, 2, 3, 4]);\n * const c = tf.tensor1d([0, 0, 0, 0]);\n *\n * a.divNoNan(b).print();  // or tf.divNoNan(a, b)\n * a.divNoNan(c).print();  // or tf.divNoNan(a, c)\n * ```\n *\n * ```js\n * // Broadcast div a with b.\n * const a = tf.tensor1d([2, 4, 6, 8]);\n * const b = tf.scalar(2);\n * const c = tf.scalar(0);\n *\n * a.divNoNan(b).print();  // or tf.divNoNan(a, b)\n * a.divNoNan(c).print();  // or tf.divNoNan(a, c)\n * ```\n *\n * @param a The first tensor as the numerator.\n * @param b The second tensor as the denominator. Must have the same dtype as\n * `a`.\n *\n * @doc {heading: 'Operations', subheading: 'Arithmetic'}\n */\nfunction divNoNan_<T extends Tensor>(\n    a: Tensor|TensorLike, b: Tensor|TensorLike): T {\n  // TODO: Make this into its own kernel.\n  let $a = convertToTensor(a, 'a', 'div');\n  let $b = convertToTensor(b, 'b', 'div');\n  [$a, $b] = makeTypesMatch($a, $b);\n\n  const divResult = div($a, $b);\n  const zeros = zerosLike(divResult);\n  const bEqualsZero = equal($b, zeros);\n  return where(bEqualsZero, zeros, divResult) as T;\n}\n\nexport const divNoNan = /* @__PURE__ */ op({divNoNan_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor,} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {matMul} from './mat_mul';\nimport {op} from './operation';\nimport {reshape} from './reshape';\n\n/**\n * Computes the dot product of two matrices and/or vectors, `t1` and `t2`.\n *\n * ```js\n * const a = tf.tensor1d([1, 2]);\n * const b = tf.tensor2d([[1, 2], [3, 4]]);\n * const c = tf.tensor2d([[1, 2, 3], [4, 5, 6]]);\n *\n * a.dot(b).print();  // or tf.dot(a, b)\n * b.dot(a).print();\n * b.dot(c).print();\n * ```\n * @param t1 The first tensor in the dot operation.\n * @param t2 The second tensor in the dot operation.\n *\n * @doc {heading: 'Operations', subheading: 'Matrices'}\n */\nfunction dot_(t1: Tensor|TensorLike, t2: Tensor|TensorLike): Tensor {\n  const $t1 = convertToTensor(t1, 't1', 'dot');\n  const $t2 = convertToTensor(t2, 't2', 'dot');\n\n  util.assert(\n      ($t1.rank === 1 || $t1.rank === 2) && ($t2.rank === 1 || $t2.rank === 2),\n      () => `Error in dot: inputs must all be rank 1 or 2, but got ranks ` +\n          `${$t1.rank} and ${$t2.rank}.`);\n\n  const t1Inner = ($t1.rank === 1 ? $t1.size : $t1.shape[1]);\n  const t2Inner = ($t2.rank === 1 ? $t2.size : $t2.shape[0]);\n\n  util.assert(\n      t1Inner === t2Inner,\n      () => `Error in dot: inner dimensions of inputs must match, but got ` +\n          `${t1Inner} and ${t2Inner}.`);\n\n  if ($t1.rank === 1 && $t2.rank === 1) {\n    const t12D = reshape($t1, [1, -1]);\n    const t22D = reshape($t2, [-1, 1]);\n    const t1t2 = matMul(t12D, t22D);\n    return reshape(t1t2, []);\n  } else if ($t1.rank === 1 && $t2.rank === 2) {\n    const t12D = reshape($t1, [1, -1]);\n    const t22D = reshape($t2, [$t2.shape[0], $t2.shape[1]]);\n    const t1t2 = matMul(t12D, t22D);\n    return reshape(t1t2, [t1t2.size]);\n  } else if ($t1.rank === 2 && $t2.rank === 1) {\n    const t22D = reshape($t2, [-1, 1]);\n    const t1t2 = matMul($t1, t22D);\n    return reshape(t1t2, [t1t2.size]);\n  } else {\n    const t22D = reshape($t2, [$t2.shape[0], $t2.shape[1]]);\n    const t1t2 = matMul($t1, t22D);\n    return t1t2;\n  }\n}\n\nexport const dot = /* @__PURE__ */ op({dot_});\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Einsum, EinsumAttrs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\n\nimport {op} from './operation';\n\n/**\n * Tensor contraction over specified indices and outer product.\n *\n * `einsum` allows defining Tensors by defining their element-wise computation.\n * This computation is based on\n * [Einstein summation](https://en.wikipedia.org/wiki/Einstein_notation).\n *\n * Some special cases include:\n *\n * Matrix multiplication:\n * ```js\n * const x = tf.tensor2d([[1, 2, 3], [4, 5, 6]]);\n * const y = tf.tensor2d([[0, 1], [2, 3], [4, 5]]);\n * x.print();\n * y.print();\n * tf.einsum('ij,jk->ik', x, y).print();\n * ```\n *\n * Dot product:\n * ```js\n * const x = tf.tensor1d([1, 2, 3]);\n * const y = tf.tensor1d([0, 1, 2]);\n * x.print();\n * y.print();\n * tf.einsum('i,i->', x, y).print();\n * ```\n *\n * Batch dot product:\n * ```js\n * const x = tf.tensor2d([[1, 2, 3], [4, 5, 6]]);\n * const y = tf.tensor2d([[0, 1, 2], [3, 4, 5]]);\n * x.print();\n * y.print();\n * tf.einsum('bi,bi->b', x, y).print();\n * ```\n *\n * Outer prouduct:\n * ```js\n * const x = tf.tensor1d([1, 3, 5]);\n * const y = tf.tensor1d([2, 4, 6]);\n * x.print();\n * y.print();\n * tf.einsum('i,j->ij', x, y).print();\n * ```\n *\n * Matrix transpose:\n * ```js\n * const x = tf.tensor2d([[1, 2], [3, 4]]);\n * x.print();\n * tf.einsum('ij->ji', x).print();\n * ```\n *\n * Batch matrix transpose:\n * ```js\n * const x = tf.tensor3d([[[1, 2], [3, 4]], [[-1, -2], [-3, -4]]]);\n * x.print();\n * tf.einsum('bij->bji', x).print();\n * ```\n *\n * Limitations:\n *\n * This implementation of einsum has the following limitations:\n *\n * - Does not support >2 input tensors.\n * - Does not support duplicate axes for any given input tensor. E.g., equation\n *   'ii->' is not supported.\n * - The `...` notation is not supported.\n *\n * @param equation a string describing the contraction, in the same format as\n * [numpy.einsum](https://numpy.org/doc/stable/reference/generated/numpy.einsum.html).\n * @param tensors the input(s) to contract (each one a Tensor), whose shapes\n *     should be consistent with equation.\n * @returns The output tensor.\n *\n * @doc {heading: 'Tensors', subheading: 'Matrices'}\n */\nexport function einsum_(equation: string, ...tensors: Tensor[]): Tensor {\n  const $tensors =\n      tensors.map((t, i) => convertToTensor(t, `tensors${i}`, 'einsum'));\n  const attrs: EinsumAttrs = {equation};\n  return ENGINE.runKernel(\n      Einsum, $tensors as unknown as NamedTensorMap,\n      attrs as unknown as NamedAttrMap);\n}\n\nexport const einsum = /* @__PURE__ */ op({einsum_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Elu, EluInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes exponential linear element-wise: `x > 0 ? x : (e ^ x) - 1`.\n *\n * ```js\n * const x = tf.tensor1d([-1, 1, -3, 2]);\n *\n * x.elu().print();  // or tf.elu(x)\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction elu_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'elu', 'float32');\n\n  const inputs: EluInputs = {x: $x};\n\n  return ENGINE.runKernel(Elu, inputs as unknown as NamedTensorMap);\n}\n\nexport const elu = /* @__PURE__ */ op({elu_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Erf, ErfInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {cast} from './cast';\nimport {op} from './operation';\n\n/**\n * Computes Gauss error function of the input `tf.Tensor` element-wise:\n * `erf(x)`\n *\n * ```js\n * const x = tf.tensor1d([0, .1, -.1, .7]);\n *\n * x.erf().print(); // or tf.erf(x);\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction erf_<T extends Tensor>(x: T|TensorLike): T {\n  let $x = convertToTensor(x, 'x', 'erf');\n  util.assert(\n      $x.dtype === 'int32' || $x.dtype === 'float32',\n      () => 'Input dtype must be `int32` or `float32`.');\n\n  if ($x.dtype === 'int32') {\n    $x = cast($x, 'float32');\n  }\n\n  const inputs: ErfInputs = {x: $x};\n  return ENGINE.runKernel(Erf, inputs as unknown as NamedTensorMap);\n}\nexport const erf = /* @__PURE__ */ op({erf_});\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as util from '../util';\n\n/**\n * Returns true if the axis specifies the inner most dimensions of the\n * array.\n */\nexport function axesAreInnerMostDims(axes: number[], rank: number): boolean {\n  for (let i = 0; i < axes.length; ++i) {\n    if (axes[axes.length - i - 1] !== rank - 1 - i) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function combineLocations(\n    outputLoc: number[], reduceLoc: number[], axes: number[]): number[] {\n  const rank = outputLoc.length + reduceLoc.length;\n  const loc = [];\n  let outIdx = 0;\n  let reduceIdx = 0;\n    for (let dim = 0; dim < rank; dim++) {\n    if (axes.indexOf(dim) === -1) {\n      loc.push(outputLoc[outIdx++]);\n    } else {\n      loc.push(reduceLoc[reduceIdx++]);\n    }\n  }\n  return loc;\n}\n\nexport function computeOutAndReduceShapes(\n    aShape: number[], axes: number[]): [number[], number[]] {\n  const outShape = [];\n  const rank = aShape.length;\n  for (let dim = 0; dim < rank; dim++) {\n    if (axes.indexOf(dim) === -1) {\n      outShape.push(aShape[dim]);\n    }\n  }\n  const reduceShape = axes.map(dim => aShape[dim]);\n  return [outShape, reduceShape];\n}\n\nexport function expandShapeToKeepDim(\n    shape: number[], axes: number[]): number[] {\n  const reduceSubShape = axes.map(x => 1);\n  return combineLocations(shape, reduceSubShape, axes);\n}\n\nexport function assertAxesAreInnerMostDims(\n    msg: string, axes: number[], rank: number): void {\n  util.assert(\n      axesAreInnerMostDims(axes, rank),\n      () => `${msg} supports only inner-most axes for now. ` +\n          `Got axes ${axes} and rank-${rank} input.`);\n}\n\n/**\n * Returns the axes permutation to be used with `tf.transpose`, if such\n * permutation is necessary. Otherwise it returns null. This method is used by\n * operations that operate only on inner-most axes.\n */\nexport function getAxesPermutation(axes: number[], rank: number): number[]|\n    null {\n  if (axesAreInnerMostDims(axes, rank)) {\n    return null;\n  }\n  const result: number[] = [];\n  for (let i = 0; i < rank; ++i) {\n    if (axes.indexOf(i) === -1) {\n      result.push(i);\n    }\n  }\n  axes.forEach(axis => result.push(axis));\n  return result;\n}\n\n/** Returns the axes permutation that undoes the original permutation. */\nexport function getUndoAxesPermutation(axes: number[]): number[] {\n  return axes.map((axis, i) => [i, axis])\n      .sort((a, b) => a[1] - b[1])\n      .map(x => x[0]);\n}\n\nexport function getInnerMostAxes(numAxes: number, rank: number): number[] {\n  const res: number[] = [];\n  for (let i = rank - numAxes; i < rank; ++i) {\n    res.push(i);\n  }\n  return res;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Max, MaxAttrs, MaxInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes the maximum of elements across dimensions of a `tf.Tensor`.\n *\n * Reduces the input along the dimensions given in `axes`. Unless `keepDims`\n * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in\n * `axes`. If `keepDims` is true, the reduced dimensions are retained with\n * length 1. If `axes` has no entries, all dimensions are reduced, and a\n * `tf.Tensor` with a single element is returned.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3]);\n *\n * x.max().print();  // or tf.max(x)\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * const axis = 1;\n * x.max(axis).print();  // or tf.max(x, axis)\n * ```\n *\n * @param x The input tensor.\n * @param axis The dimension(s) to reduce. By default it reduces\n *     all dimensions.\n * @param keepDims If true, retains reduced dimensions with size 1.\n *\n * @doc {heading: 'Operations', subheading: 'Reduction'}\n */\nfunction max_<T extends Tensor>(\n    x: Tensor|TensorLike, axis: number|number[] = null, keepDims = false): T {\n  const $x = convertToTensor(x, 'x', 'max');\n\n  const inputs: MaxInputs = {x: $x};\n  const attrs: MaxAttrs = {reductionIndices: axis, keepDims};\n\n  return ENGINE.runKernel(\n      Max, inputs as unknown as NamedTensorMap,\n      attrs as unknown as NamedAttrMap);\n}\n\nexport const max = /* @__PURE__ */ op({max_});\n","/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {Min, MinAttrs, MinInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes the minimum value from the input.\n *\n * Reduces the input along the dimensions given in `axes`. Unless `keepDims`\n * is true, the rank of the array is reduced by 1 for each entry in `axes`.\n * If `keepDims` is true, the reduced dimensions are retained with length 1.\n * If `axes` has no entries, all dimensions are reduced, and an array with a\n * single element is returned.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3]);\n *\n * x.min().print();  // or tf.min(x)\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * const axis = 1;\n * x.min(axis).print();  // or tf.min(x, axis)\n * ```\n *\n * @param x The input Tensor.\n * @param axis The dimension(s) to reduce. By default it reduces\n *     all dimensions.\n * @param keepDims If true, retains reduced dimensions with size 1.\n *\n * @doc {heading: 'Operations', subheading: 'Reduction'}\n */\nfunction min_<T extends Tensor>(\n    x: Tensor|TensorLike, axis: number|number[] = null, keepDims = false): T {\n  const $x = convertToTensor(x, 'x', 'min');\n\n  const inputs: MinInputs = {x: $x};\n  const attrs: MinAttrs = {axis, keepDims};\n\n  // tslint:disable-next-line: no-unnecessary-type-assertion\n  return ENGINE.runKernel(\n             Min, inputs as unknown as NamedTensorMap,\n             attrs as unknown as NamedAttrMap) as T;\n}\n\nexport const min = /* @__PURE__ */ op({min_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {Sum, SumAttrs, SumInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {cast} from './cast';\nimport {op} from './operation';\n\n/**\n * Computes the sum of elements across dimensions of a `tf.Tensor`.\n *\n * Reduces the input along the dimensions given in `axes`. Unless `keepDims`\n * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in\n * `axes`. If `keepDims` is true, the reduced dimensions are retained with\n * length 1. If axes has no entries, all dimensions are reduced, and a\n * `tf.Tensor` with a single element is returned.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3]);\n *\n * x.sum().print();  // or tf.sum(x)\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * const axis = 1;\n * x.sum(axis).print();  // or tf.sum(x, axis)\n * ```\n *\n * @param x The input tensor to compute the sum over. If the dtype is `bool`\n *   it will be converted to `int32` and the output dtype will be `int32`.\n * @param axis The dimension(s) to reduce. By default it reduces\n *     all dimensions.\n * @param keepDims If true, retains reduced dimensions with size 1.\n *\n * @doc {heading: 'Operations', subheading: 'Reduction'}\n */\nfunction sum_<T extends Tensor>(\n    x: Tensor|TensorLike, axis: number|number[] = null, keepDims = false): T {\n  let $x = convertToTensor(x, 'x', 'sum');\n  if ($x.dtype === 'bool') {\n    $x = cast($x, 'int32');\n  }\n\n  const inputs: SumInputs = {x: $x};\n  const attrs: SumAttrs = {axis, keepDims};\n\n  return ENGINE.runKernel(\n      Sum, inputs as unknown as NamedTensorMap,\n      attrs as unknown as NamedAttrMap);\n}\n\nexport const sum = /* @__PURE__ */ op({sum_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport {parseAxisParam} from '../util';\n\nimport {abs} from './abs';\nimport * as axis_util from './axis_util';\nimport {max} from './max';\nimport {min} from './min';\nimport {op} from './operation';\nimport {pow} from './pow';\nimport {reshape} from './reshape';\nimport {scalar} from './scalar';\nimport {sqrt} from './sqrt';\nimport {square} from './square';\nimport {sum} from './sum';\n\n/**\n * Computes the norm of scalar, vectors, and matrices.\n * This function can compute several different vector norms (the 1-norm, the\n * Euclidean or 2-norm, the inf-norm, and in general the p-norm for p > 0)\n * and matrix norms (Frobenius, 1-norm, and inf-norm).\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3, 4]);\n *\n * x.norm().print();  // or tf.norm(x)\n * ```\n *\n * @param x The input array.\n * @param ord Optional. Order of the norm. Supported norm types are\n * following:\n *\n *  | ord        | norm for matrices         | norm for vectors\n *  |------------|---------------------------|---------------------\n *  |'euclidean' |Frobenius norm             |2-norm\n *  |'fro'       |Frobenius norm\t           |\n *  |Infinity    |max(sum(abs(x), axis=1))   |max(abs(x))\n *  |-Infinity   |min(sum(abs(x), axis=1))   |min(abs(x))\n *  |1           |max(sum(abs(x), axis=0))   |sum(abs(x))\n *  |2           |                           |sum(abs(x)^2)^(1/2)\n *\n * @param axis Optional. If axis is null (the default), the input is\n * considered a vector and a single vector norm is computed over the entire\n * set of values in the Tensor, i.e. norm(x, ord) is equivalent\n * to norm(x.reshape([-1]), ord). If axis is an integer, the input\n * is considered a batch of vectors, and axis determines the axis in x\n * over which to compute vector norms. If axis is a 2-tuple of integer it is\n * considered a batch of matrices and axis determines the axes in NDArray\n * over which to compute a matrix norm.\n * @param keepDims Optional. If true, the norm has the same dimensionality\n * as the input.\n *\n * @doc {heading: 'Operations', subheading: 'Matrices'}\n */\nfunction norm_(\n    x: Tensor|TensorLike, ord: number|'euclidean'|'fro' = 'euclidean',\n    axis: number|number[] = null, keepDims = false): Tensor {\n  x = convertToTensor(x, 'x', 'norm');\n\n  const norm = normImpl(x, ord, axis);\n  let keepDimsShape = norm.shape;\n  if (keepDims) {\n    const axes = parseAxisParam(axis, x.shape);\n    keepDimsShape = axis_util.expandShapeToKeepDim(norm.shape, axes);\n  }\n  return reshape(norm, keepDimsShape);\n}\n\nfunction normImpl(\n    x: Tensor, p: number|string, axis: number|number[] = null): Tensor {\n  if (x.rank === 0) {\n    return abs(x);\n  }\n\n  // consider vector when no axis is specified\n  if (x.rank !== 1 && axis === null) {\n    return normImpl(reshape(x, [-1]), p, axis);\n  }\n\n  // vector\n  if (x.rank === 1 || typeof axis === 'number' ||\n      Array.isArray(axis) && axis.length === 1) {\n    if (p === 1) {\n      return sum(abs(x), axis);\n    }\n    if (p === Infinity) {\n      return max(abs(x), axis);\n    }\n    if (p === -Infinity) {\n      return min(abs(x), axis);\n    }\n    if (p === 'euclidean' || p === 2) {\n      // norm(x, 2) = sum(abs(xi) ^ 2) ^ 1/2\n      return sqrt(sum(pow(abs(x), scalar(2, 'int32')), axis));\n    }\n\n    throw new Error(`Error in norm: invalid ord value: ${p}`);\n  }\n\n  // matrix (assumption axis[0] < axis[1])\n  if (Array.isArray(axis) && axis.length === 2) {\n    if (p === 1) {\n      return max(sum(abs(x), axis[0]), axis[1] - 1);\n    }\n    if (p === Infinity) {\n      return max(sum(abs(x), axis[1]), axis[0]);\n    }\n    if (p === -Infinity) {\n      return min(sum(abs(x), axis[1]), axis[0]);\n    }\n    if (p === 'fro' || p === 'euclidean') {\n      // norm(x) = sqrt(sum(pow(x, 2)))\n      return sqrt(sum(square(x), axis));\n    }\n\n    throw new Error(`Error in norm: invalid ord value: ${p}`);\n  }\n\n  throw new Error(`Error in norm: invalid axis: ${axis}`);\n}\n\nexport const norm = /* @__PURE__ */ op({norm_});\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../tensor';\nimport {TensorLike} from '../types';\n\nimport {norm} from './norm';\nimport {op} from './operation';\n\n/**\n * Computes the Euclidean norm of scalar, vectors, and matrices.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3, 4]);\n *\n * x.euclideanNorm().print();  // or tf.euclideanNorm(x)\n * ```\n *\n * @param x The input array.\n * @param axis Optional. If axis is null (the default), the input is\n * considered a vector and a single vector norm is computed over the entire\n * set of values in the Tensor, i.e. euclideanNorm(x) is equivalent\n * to euclideanNorm(x.reshape([-1])). If axis is an integer, the input\n * is considered a batch of vectors, and axis determines the axis in x\n * over which to compute vector norms. If axis is a 2-tuple of integer it is\n * considered a batch of matrices and axis determines the axes in NDArray\n * over which to compute a matrix norm.\n * @param keepDims Optional. If true, the norm has the same dimensionality\n * as the input.\n *\n * @doc {heading: 'Operations', subheading: 'Matrices'}\n */\nfunction euclideanNorm_(\n    x: Tensor|TensorLike, axis: number|number[] = null,\n    keepDims = false): Tensor {\n  return norm(x, 'euclidean', axis, keepDims);\n}\n\nexport const euclideanNorm = /* @__PURE__ */ op({euclideanNorm_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Exp, ExpInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes exponential of the input `tf.Tensor` element-wise. `e ^ x`\n *\n * ```js\n * const x = tf.tensor1d([1, 2, -3]);\n *\n * x.exp().print();  // or tf.exp(x)\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction exp_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'exp');\n\n  const inputs: ExpInputs = {x: $x};\n  return ENGINE.runKernel(Exp, inputs as unknown as NamedTensorMap);\n}\nexport const exp = /* @__PURE__ */ op({exp_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {ExpandDims, ExpandDimsAttrs, ExpandDimsInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {op} from './operation';\n\n/**\n * Returns a `tf.Tensor` that has expanded rank, by inserting a dimension\n * into the tensor's shape.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3, 4]);\n * const axis = 1;\n * x.expandDims(axis).print();\n * ```\n *\n * @param x The input tensor whose dimensions are to be expanded.\n * @param axis The dimension index at which to insert shape of `1`. Defaults\n *     to 0 (the first dimension).\n *\n * @doc {heading: 'Tensors', subheading: 'Transformations'}\n */\nfunction expandDims_<T extends Tensor>(x: Tensor|TensorLike, axis = 0): T {\n  const $x = convertToTensor(x, 'x', 'expandDims', 'string_or_numeric');\n\n  util.assert(axis <= $x.rank, () => 'Axis must be <= rank of the tensor');\n\n  const inputs: ExpandDimsInputs = {input: $x};\n  const attrs: ExpandDimsAttrs = {dim: axis};\n\n  return ENGINE.runKernel(\n      ExpandDims, inputs as unknown as NamedTensorMap,\n      attrs as unknown as NamedAttrMap);\n}\n\nexport const expandDims = /* @__PURE__ */ op({expandDims_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Expm1, Expm1Inputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes exponential of the input `tf.Tensor` minus one element-wise.\n * `e ^ x - 1`\n *\n * ```js\n * const x = tf.tensor1d([1, 2, -3]);\n *\n * x.expm1().print();  // or tf.expm1(x)\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction expm1_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'expm1');\n\n  const inputs: Expm1Inputs = {x: $x};\n  return ENGINE.runKernel(Expm1, inputs as unknown as NamedTensorMap);\n}\nexport const expm1 = /* @__PURE__ */ op({expm1_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Tile, TileAttrs, TileInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {op} from './operation';\n\n/**\n * Construct a tensor by repeating it the number of times given by reps.\n *\n * This operation creates a new tensor by replicating `input` `reps`\n * times. The output tensor's `i`th dimension has `input.shape[i] *\n * reps[i]` elements, and the values of `input` are replicated\n * `reps[i]` times along the `i`th dimension. For example, tiling\n * `[a, b, c, d]` by `[2]` produces `[a, b, c, d, a, b, c, d]`.\n *\n * ```js\n * const a = tf.tensor1d([1, 2]);\n *\n * a.tile([2]).print();    // or a.tile([2])\n * ```\n *\n * ```js\n * const a = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * a.tile([1, 2]).print();  // or a.tile([1, 2])\n * ```\n * @param x The tensor to tile.\n * @param reps Determines the number of replications per dimension.\n *\n * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}\n */\nfunction tile_<T extends Tensor>(x: T|TensorLike, reps: number[]): T {\n  const $x = convertToTensor(x, 'x', 'tile', 'string_or_numeric');\n  util.assert(\n      $x.rank === reps.length,\n      () => `Error in transpose: rank of input ${$x.rank} ` +\n          `must match length of reps ${reps}.`);\n\n  const inputs: TileInputs = {x: $x};\n  const attrs: TileAttrs = {reps};\n\n  return ENGINE.runKernel(\n      Tile, inputs as unknown as NamedTensorMap,\n      attrs as unknown as NamedAttrMap);\n}\n\nexport const tile = /* @__PURE__ */ op({tile_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor2D} from '../tensor';\nimport {DataType} from '../types';\n\nimport {buffer} from './buffer';\nimport {expandDims} from './expand_dims';\nimport {op} from './operation';\nimport {reshape} from './reshape';\nimport {tile} from './tile';\n\n/**\n * Create an identity matrix.\n *\n * @param numRows Number of rows.\n * @param numColumns Number of columns. Defaults to `numRows`.\n * @param batchShape If provided, will add the batch shape to the beginning\n *   of the shape of the returned `tf.Tensor` by repeating the identity\n *   matrix.\n * @param dtype Data type.\n * @returns Identity matrix of the specified size and data type, possibly\n *   with batch repetition if `batchShape` is specified.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nfunction eye_(\n    numRows: number, numColumns?: number,\n    batchShape?:\n        [\n          number\n        ]|[number,\n           number]|[number, number, number]|[number, number, number, number],\n    dtype: DataType = 'float32'): Tensor2D {\n  if (numColumns == null) {\n    numColumns = numRows;\n  }\n  const buff = buffer([numRows, numColumns], dtype);\n  const n = numRows <= numColumns ? numRows : numColumns;\n  for (let i = 0; i < n; ++i) {\n    buff.set(1, i, i);\n  }\n  const out: Tensor2D = reshape(buff.toTensor(), [numRows, numColumns]);\n  if (batchShape == null) {\n    return out;\n  } else {\n    if (batchShape.length === 1) {\n      return tile(expandDims(out, 0), [batchShape[0], 1, 1]) as Tensor2D;\n    } else if (batchShape.length === 2) {\n      // tslint:disable-next-line:no-unnecessary-type-assertion\n      return tile(\n                 expandDims(expandDims(out, 0), 0),\n                 [batchShape[0], batchShape[1], 1, 1]) as Tensor2D;\n    } else if (batchShape.length === 3) {\n      // tslint:disable-next-line:no-unnecessary-type-assertion\n      return tile(expandDims(expandDims(expandDims(out, 0), 0), 0), [\n               batchShape[0], batchShape[1], batchShape[2], 1, 1\n             ]) as Tensor2D;\n    } else {\n      throw new Error(\n          `eye() currently supports only 1D and 2D ` +\n          // tslint:disable-next-line:no-any\n          `batchShapes, but received ${(batchShape as any).length}D.`);\n    }\n  }\n}\n\nexport const eye = /* @__PURE__ */ op({eye_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {Floor, FloorInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes floor of input `tf.Tensor` element-wise: `floor(x)`.\n *\n * ```js\n * const x = tf.tensor1d([.6, 1.1, -3.3]);\n *\n * x.floor().print();  // or tf.floor(x)\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction floor_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'floor', 'float32');\n\n  const inputs: FloorInputs = {x: $x};\n  return ENGINE.runKernel(Floor, inputs as unknown as NamedTensorMap);\n}\nexport const floor = /* @__PURE__ */ op({floor_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {GatherV2, GatherV2Attrs, GatherV2Inputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Gather slices from tensor `x`'s axis `axis` according to `indices`.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3, 4]);\n * const indices = tf.tensor1d([1, 3, 3], 'int32');\n *\n * x.gather(indices).print();\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n * const indices = tf.tensor1d([1, 1, 0], 'int32');\n *\n * x.gather(indices).print();\n * ```\n * @param x The input tensor whose slices are to be gathered.\n * @param indices The indices of the values to extract.\n * @param axis The axis over which to select values. Defaults to 0.\n * @param batchDims Optional. The number of batch dimensions. It must be less\n *     than or equal to rank(indices). Defaults to 0.\n *     The output tensor will have shape of\n *     `x.shape[:axis] + indices.shape[batchDims:] + x.shape[axis + 1:]`\n *\n * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}\n */\nfunction gather_<T extends Tensor>(\n    x: T|TensorLike, indices: Tensor|TensorLike, axis = 0, batchDims = 0): T {\n  const $x = convertToTensor(x, 'x', 'gather');\n  const $indices = convertToTensor(indices, 'indices', 'gather', 'int32');\n\n  const inputs: GatherV2Inputs = {x: $x, indices: $indices};\n  const attrs: GatherV2Attrs = {axis, batchDims};\n\n  return ENGINE.runKernel(\n      GatherV2, inputs as unknown as NamedTensorMap,\n      attrs as unknown as NamedAttrMap);\n}\n\nexport const gather = /* @__PURE__ */ op({gather_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {Greater, GreaterInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {makeTypesMatch} from '../tensor_util';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {assertAndGetBroadcastShape} from './broadcast_util';\nimport {op} from './operation';\n\n/**\n * Returns the truth value of (a > b) element-wise. Supports broadcasting.\n *\n * ```js\n * const a = tf.tensor1d([1, 2, 3]);\n * const b = tf.tensor1d([2, 2, 2]);\n *\n * a.greater(b).print();\n * ```\n *\n * @param a The first input tensor.\n * @param b The second input tensor. Must have the same dtype as `a`.\n *\n * @doc {heading: 'Operations', subheading: 'Logical'}\n */\nfunction greater_<T extends Tensor>(\n    a: Tensor|TensorLike, b: Tensor|TensorLike): T {\n  let $a = convertToTensor(a, 'a', 'greater', 'string_or_numeric');\n  let $b = convertToTensor(b, 'b', 'greater', 'string_or_numeric');\n  [$a, $b] = makeTypesMatch($a, $b);\n\n  assertAndGetBroadcastShape($a.shape, $b.shape);\n\n  const inputs: GreaterInputs = {a: $a, b: $b};\n\n  return ENGINE.runKernel(Greater, inputs as unknown as NamedTensorMap);\n}\n\nexport const greater = /* @__PURE__ */ op({greater_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {GreaterEqual, GreaterEqualInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {makeTypesMatch} from '../tensor_util';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {assertAndGetBroadcastShape} from './broadcast_util';\nimport {op} from './operation';\n\n/**\n * Returns the truth value of (a >= b) element-wise. Supports broadcasting.\n *\n * ```js\n * const a = tf.tensor1d([1, 2, 3]);\n * const b = tf.tensor1d([2, 2, 2]);\n *\n * a.greaterEqual(b).print();\n * ```\n *\n * @param a The first input tensor.\n * @param b The second input tensor. Must have the same dtype as `a`.\n *\n * @doc {heading: 'Operations', subheading: 'Logical'}\n */\nfunction greaterEqual_<T extends Tensor>(\n    a: Tensor|TensorLike, b: Tensor|TensorLike): T {\n  let $a = convertToTensor(a, 'a', 'greaterEqual', 'string_or_numeric');\n  let $b = convertToTensor(b, 'b', 'greaterEqual', 'string_or_numeric');\n  [$a, $b] = makeTypesMatch($a, $b);\n\n  assertAndGetBroadcastShape($a.shape, $b.shape);\n\n  const inputs: GreaterEqualInputs = {a: $a, b: $b};\n\n  return ENGINE.runKernel(GreaterEqual, inputs as unknown as NamedTensorMap);\n}\n\nexport const greaterEqual = /* @__PURE__ */ op({greaterEqual_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Imag, ImagInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport {op} from './operation';\n/**\n * Returns the imaginary part of a complex (or real) tensor.\n *\n * Given a tensor input, this operation returns a tensor of type float that is\n * the imaginary part of each element in input considered as a complex number.\n * If input is real, a tensor of all zeros is returned.\n *\n * ```js\n * const x = tf.complex([-2.25, 3.25], [4.75, 5.75]);\n * tf.imag(x).print();\n * ```\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nfunction imag_<T extends Tensor>(input: T|TensorLike): T {\n  const $input = convertToTensor(input, 'input', 'imag');\n\n  const inputs: ImagInputs = {input: $input};\n  return ENGINE.runKernel(Imag, inputs as unknown as NamedTensorMap);\n}\n\nexport const imag = /* @__PURE__ */ op({imag_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {IsFinite, IsFiniteInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Returns which elements of x are finite.\n *\n * ```js\n * const x = tf.tensor1d([NaN, Infinity, -Infinity, 0, 1]);\n *\n * x.isFinite().print();  // or tf.isNaN(x)\n * ```\n * @param x The input Tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction isFinite_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'isFinite');\n\n  const inputs: IsFiniteInputs = {x: $x};\n\n  return ENGINE.runKernel(IsFinite, inputs as unknown as NamedTensorMap);\n}\nexport const isFinite = /* @__PURE__ */ op({isFinite_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {IsInf, IsInfInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Returns which elements of x are Infinity or -Infinity.\n *\n * ```js\n * const x = tf.tensor1d([NaN, Infinity, -Infinity, 0, 1]);\n *\n * x.isInf().print();  // or tf.isNaN(x)\n * ```\n * @param x The input Tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction isInf_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'isInf');\n\n  const inputs: IsInfInputs = {x: $x};\n\n  return ENGINE.runKernel(IsInf, inputs as unknown as NamedTensorMap);\n}\nexport const isInf = /* @__PURE__ */ op({isInf_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {IsNan, IsNanInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Returns which elements of x are NaN.\n *\n * ```js\n * const x = tf.tensor1d([NaN, Infinity, -Infinity, 0, 1]);\n *\n * x.isNaN().print();  // or tf.isNaN(x)\n * ```\n * @param x The input Tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction isNaN_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'isNaN');\n  const inputs: IsNanInputs = {x: $x};\n\n  return ENGINE.runKernel(IsNan, inputs as unknown as NamedTensorMap);\n}\nexport const isNaN = /* @__PURE__ */ op({isNaN_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {LeakyRelu, LeakyReluAttrs, LeakyReluInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes leaky rectified linear element-wise.\n *\n * See\n * [http://web.stanford.edu/~awni/papers/relu_hybrid_icml2013_final.pdf](\n *     http://web.stanford.edu/~awni/papers/relu_hybrid_icml2013_final.pdf)\n *\n * ```js\n * const x = tf.tensor1d([-1, 2, -3, 4]);\n *\n * x.leakyRelu(0.1).print();  // or tf.leakyRelu(x, 0.1)\n * ```\n * @param x The input tensor.\n * @param alpha The scaling factor for negative values, defaults to 0.2.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction leakyRelu_<T extends Tensor>(x: T|TensorLike, alpha = 0.2): T {\n  const $x = convertToTensor(x, 'x', 'leakyRelu');\n\n  const inputs: LeakyReluInputs = {x: $x};\n  const attrs: LeakyReluAttrs = {alpha};\n\n  return ENGINE.runKernel(\n      LeakyRelu, inputs as unknown as NamedTensorMap,\n      attrs as unknown as NamedAttrMap);\n}\n\nexport const leakyRelu = /* @__PURE__ */ op({leakyRelu_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {Less, LessInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {makeTypesMatch} from '../tensor_util';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {assertAndGetBroadcastShape} from './broadcast_util';\nimport {op} from './operation';\n\n/**\n * Returns the truth value of (a < b) element-wise. Supports broadcasting.\n *\n * ```js\n * const a = tf.tensor1d([1, 2, 3]);\n * const b = tf.tensor1d([2, 2, 2]);\n *\n * a.less(b).print();\n * ```\n * @param a The first input tensor.\n * @param b The second input tensor. Must have the same dtype as `a`.\n *\n * @doc {heading: 'Operations', subheading: 'Logical'}\n */\nfunction less_<T extends Tensor>(\n    a: Tensor|TensorLike, b: Tensor|TensorLike): T {\n  let $a = convertToTensor(a, 'a', 'less', 'string_or_numeric');\n  let $b = convertToTensor(b, 'b', 'less', 'string_or_numeric');\n  [$a, $b] = makeTypesMatch($a, $b);\n\n  assertAndGetBroadcastShape($a.shape, $b.shape);\n\n  const inputs: LessInputs = {a: $a, b: $b};\n\n  return ENGINE.runKernel(Less, inputs as unknown as NamedTensorMap);\n}\n\nexport const less = /* @__PURE__ */ op({less_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {LessEqual, LessEqualInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {makeTypesMatch} from '../tensor_util';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {assertAndGetBroadcastShape} from './broadcast_util';\nimport {op} from './operation';\n\n/**\n * Returns the truth value of (a <= b) element-wise. Supports broadcasting.\n *\n * ```js\n * const a = tf.tensor1d([1, 2, 3]);\n * const b = tf.tensor1d([2, 2, 2]);\n *\n * a.lessEqual(b).print();\n * ```\n *\n * @param a The first input tensor.\n * @param b The second input tensor. Must have the same dtype as `a`.\n *\n * @doc {heading: 'Operations', subheading: 'Logical'}\n */\nfunction lessEqual_<T extends Tensor>(\n    a: Tensor|TensorLike, b: Tensor|TensorLike): T {\n  let $a = convertToTensor(a, 'a', 'lessEqual', 'string_or_numeric');\n  let $b = convertToTensor(b, 'b', 'lessEqual', 'string_or_numeric');\n  [$a, $b] = makeTypesMatch($a, $b);\n\n  assertAndGetBroadcastShape($a.shape, $b.shape);\n\n  const inputs: LessEqualInputs = {a: $a, b: $b};\n\n  return ENGINE.runKernel(LessEqual, inputs as unknown as NamedTensorMap);\n}\n\nexport const lessEqual = /* @__PURE__ */ op({lessEqual_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {LinSpace, LinSpaceAttrs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor1D} from '../tensor';\n\n/**\n * Return an evenly spaced sequence of numbers over the given interval.\n *\n * ```js\n * tf.linspace(0, 9, 10).print();\n * ```\n * @param start The start value of the sequence.\n * @param stop The end value of the sequence.\n * @param num The number of values to generate.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nexport function linspace(start: number, stop: number, num: number): Tensor1D {\n  if (num <= 0) {\n    throw new Error('The number of values should be positive.');\n  }\n\n  const attrs: LinSpaceAttrs = {start, stop, num};\n  return ENGINE.runKernel(LinSpace, {}, attrs as unknown as NamedAttrMap);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {LRN, LRNAttrs, LRNInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor3D, Tensor4D} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {op} from './operation';\nimport {reshape} from './reshape';\n\n/**\n * Normalizes the activation of a local neighborhood across or within\n * channels.\n *\n * @param x The input tensor. The 4-D input tensor is treated as a 3-D array\n *     of 1D vectors (along the last dimension), and each vector is\n *     normalized independently.\n * @param depthRadius The number of adjacent channels in the 1D normalization\n *     window.\n * @param bias A constant bias term for the basis.\n * @param alpha A scale factor, usually positive.\n * @param beta An exponent.\n *\n * @doc {heading: 'Operations', subheading: 'Normalization'}\n */\nfunction localResponseNormalization_<T extends Tensor3D|Tensor4D>(\n    x: T|TensorLike, depthRadius = 5, bias = 1, alpha = 1, beta = 0.5): T {\n  const $x = convertToTensor(x, 'x', 'localResponseNormalization');\n  util.assert(\n      $x.rank === 4 || $x.rank === 3,\n      () => `Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${$x.rank}.`);\n  util.assert(\n      util.isInt(depthRadius),\n      () => `Error in localResponseNormalization: depthRadius must be an ` +\n          `integer but got depthRadius ${depthRadius}.`);\n\n  let x4D = $x as Tensor4D;\n  let reshapedTo4D = false;\n  if ($x.rank === 3) {\n    reshapedTo4D = true;\n    x4D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);\n  }\n\n  const inputs: LRNInputs = {x: x4D};\n\n  const attrs: LRNAttrs = {depthRadius, bias, alpha, beta};\n\n  // tslint:disable-next-line: no-unnecessary-type-assertion\n  const res = ENGINE.runKernel(\n                  LRN, inputs as unknown as NamedTensorMap,\n                  attrs as unknown as NamedAttrMap) as T;\n\n  if (reshapedTo4D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]) as T;\n  } else {\n    return res;\n  }\n}\n\nexport const localResponseNormalization = /* @__PURE__ */ op({localResponseNormalization_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Log, LogInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes natural logarithm of the input `tf.Tensor` element-wise: `ln(x)`\n *\n * ```js\n * const x = tf.tensor1d([1, 2, Math.E]);\n *\n * x.log().print();  // or tf.log(x)\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction log_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'log', 'float32');\n\n  const inputs: LogInputs = {x: $x};\n  return ENGINE.runKernel(Log, inputs as unknown as NamedTensorMap);\n}\nexport const log = /* @__PURE__ */ op({log_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Log1p, Log1pInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes natural logarithm of the input `tf.Tensor` plus one\n * element-wise: `ln(1 + x)`\n *\n * ```js\n * const x = tf.tensor1d([1, 2, Math.E - 1]);\n *\n * x.log1p().print();  // or tf.log1p(x)\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction log1p_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'log1p');\n\n  const inputs: Log1pInputs = {x: $x};\n  return ENGINE.runKernel(Log1p, inputs as unknown as NamedTensorMap);\n}\nexport const log1p = /* @__PURE__ */ op({log1p_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Neg, NegInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes `-1 * x` element-wise.\n *\n * ```js\n * const x = tf.tensor2d([1, 2, -2, 0], [2, 2]);\n *\n * x.neg().print();  // or tf.neg(x)\n * ```\n *\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction neg_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'neg');\n\n  const inputs: NegInputs = {x: $x};\n  return ENGINE.runKernel(Neg, inputs as unknown as NamedTensorMap);\n}\nexport const neg = /* @__PURE__ */ op({neg_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Softplus, SoftplusInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes softplus of the input `tf.Tensor` element-wise: `log(exp(x) + 1)`\n *\n * ```js\n * const x = tf.tensor1d([0, 1, -1, .7]);\n *\n * x.softplus().print();  // or tf.softplus(x)\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction softplus_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'softplus');\n\n  const inputs: SoftplusInputs = {x: $x};\n  return ENGINE.runKernel(Softplus, inputs as unknown as NamedTensorMap);\n}\nexport const softplus = /* @__PURE__ */ op({softplus_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {customGrad} from '../gradients';\nimport {Tensor} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {mul} from './mul';\nimport {neg} from './neg';\nimport {op} from './operation';\nimport {sigmoid} from './sigmoid';\nimport {softplus} from './softplus';\n\n/**\n * Computes log sigmoid of the input `tf.Tensor` element-wise:\n * `logSigmoid(x)`. For numerical stability, we use `-tf.softplus(-x)`.\n *\n * ```js\n * const x = tf.tensor1d([0, 1, -1, .7]);\n *\n * x.logSigmoid().print();  // or tf.logSigmoid(x)\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction logSigmoid_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'logSigmoid');\n\n  // Use a custom gradient to maintain previous implementation.\n  // There is no LogSigmoid kernel in TF so we can't use engine.runKernel\n  // directly\n  const customOp = customGrad((x: Tensor) => {\n    // TODO(yassogba) we can remove the chained softplus call here only\n    // after backends have modualrized softplus at which point we can call\n    // engine runKernel(..., Sotfplus, ...) directly.\n    const value = neg(softplus(neg(x)));\n\n    const gradFunc = (dy: T) => {\n      const derX = mul(dy, sigmoid(neg(x)));\n      return derX;\n    };\n    return {value, gradFunc};\n  });\n\n  return customOp($x) as T;\n}\nexport const logSigmoid = /* @__PURE__ */ op({logSigmoid_});\n","/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {customGrad} from '../gradients';\n\nimport {Tensor} from '../tensor';\nimport {GradSaveFunc} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {cast} from './cast';\nimport {exp} from './exp';\nimport {log} from './log';\nimport {max} from './max';\nimport {mul} from './mul';\nimport {op} from './operation';\nimport {sub} from './sub';\nimport {sum} from './sum';\n\n/**\n * Computes the log softmax.\n *\n * ```js\n * const a = tf.tensor1d([1, 2, 3]);\n *\n * a.logSoftmax().print();  // or tf.logSoftmax(a)\n * ```\n *\n * ```js\n * const a = tf.tensor2d([2, 4, 6, 1, 2, 3], [2, 3]);\n *\n * a.logSoftmax().print();  // or tf.logSoftmax(a)\n * ```\n *\n * @param logits The logits array.\n * @param axis The dimension softmax would be performed on. Defaults to `-1`\n *     which indicates the last dimension.\n *\n * @doc {heading: 'Operations', subheading: 'Normalization'}\n */\nfunction logSoftmax_<T extends Tensor>(logits: T|TensorLike, axis = -1): T {\n  const $logits = convertToTensor(logits, 'logits', 'logSoftmax');\n\n  if (axis === -1) {\n    axis = $logits.rank - 1;\n  }\n  if (axis !== $logits.rank - 1) {\n    throw Error(\n        'Log Softmax along a non-last dimension is not yet supported. ' +\n        `Logits was rank ${$logits.rank} and axis was ${axis}`);\n  }\n\n  // const forward: ForwardFunc<Tensor> = (backend, save) => {\n  //   const keepDims = true;\n  //   const xMax = max(logits, axis, true);\n  //   const shifted = sub(logits, xMax);\n  //   const value =\n  //       sub(cast(shifted, 'float32'), log(sum(exp(shifted), axis,\n  //       keepDims)));\n  //   save([value]);\n  //   return value;\n  // };\n\n  // Use a custom gradient for numerical stability.\n  const customOp = customGrad((logits: Tensor, save: GradSaveFunc) => {\n    const keepDims = true;\n    const xMax = max(logits, axis, true);\n    const shifted = sub(logits, xMax);\n    const value =\n        sub(cast(shifted, 'float32'), log(sum(exp(shifted), axis, keepDims)));\n    save([value]);\n\n    const gradFunc = (dy: Tensor, saved: Tensor[]) => {\n      const [value] = saved;\n      const keepDims = true;\n      const softmax = exp(value);\n      return sub(dy, mul(sum(dy, axis, keepDims), softmax));\n    };\n    return {value, gradFunc};\n  });\n\n  return customOp($logits) as T;\n\n  // TODO Use Engine.runKernel when CPU/WebGL/WASM backends implement this.\n  // const inputs: LogSoftmaxInputs = {logits: $logits};\n  // const attrs: LogSoftmaxAttrs = {axis};\n  // return ENGINE.runKernel(\n  //            LogSoftmax, inputs as unknown as NamedTensorMap,\n  //            attrs as unknown as NamedAttrMap);\n}\n\nexport const logSoftmax = /* @__PURE__ */ op({logSoftmax_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport {parseAxisParam} from '../util';\n\nimport {add} from './add';\nimport {expandShapeToKeepDim} from './axis_util';\nimport {exp} from './exp';\nimport {log} from './log';\nimport {max} from './max';\nimport {op} from './operation';\nimport {reshape} from './reshape';\nimport {sub} from './sub';\nimport {sum} from './sum';\n\n/**\n * Computes the log(sum(exp(elements across the reduction dimensions))).\n *\n * Reduces the input along the dimensions given in `axis`. Unless `keepDims`\n * is true, the rank of the array is reduced by 1 for each entry in `axis`.\n * If `keepDims` is true, the reduced dimensions are retained with length 1.\n * If `axis` has no entries, all dimensions are reduced, and an array with a\n * single element is returned.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3]);\n *\n * x.logSumExp().print();  // or tf.logSumExp(x)\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * const axis = 1;\n * x.logSumExp(axis).print();  // or tf.logSumExp(a, axis)\n * ```\n * @param x The input tensor.\n * @param axis The dimension(s) to reduce. If null (the default),\n *     reduces all dimensions.\n * @param keepDims If true, retains reduced dimensions with length\n *     of 1. Defaults to false.\n *\n * @doc {heading: 'Operations', subheading: 'Reduction'}\n */\nfunction logSumExp_<T extends Tensor>(\n    x: Tensor|TensorLike, axis: number|number[] = null, keepDims = false): T {\n  const $x = convertToTensor(x, 'x', 'logSumExp');\n\n  const axes = parseAxisParam(axis, $x.shape);\n  const xMax = max($x, axes, true /* keepDims */);\n  const a = sub($x, xMax);\n  const b = exp(a);\n  const c = sum(b, axes);\n  const d = log(c);\n  const res = add(reshape(xMax, d.shape), d);\n\n  if (keepDims) {\n    const newShape = expandShapeToKeepDim(res.shape, axes);\n    return reshape(res, newShape) as T;\n  }\n  return res as T;\n}\n\nexport const logSumExp = /* @__PURE__ */ op({logSumExp_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {LogicalAnd, LogicalAndInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {assertAndGetBroadcastShape} from './broadcast_util';\nimport {op} from './operation';\n\n/**\n * Returns the truth value of `a AND b` element-wise. Supports broadcasting.\n *\n * ```js\n * const a = tf.tensor1d([false, false, true, true], 'bool');\n * const b = tf.tensor1d([false, true, false, true], 'bool');\n *\n * a.logicalAnd(b).print();\n * ```\n *\n * @param a The first input tensor. Must be of dtype bool.\n * @param b The second input tensor. Must be of dtype bool.\n *\n * @doc {heading: 'Operations', subheading: 'Logical'}\n */\nfunction logicalAnd_<T extends Tensor>(\n    a: Tensor|TensorLike, b: Tensor|TensorLike): T {\n  const $a = convertToTensor(a, 'a', 'logicalAnd', 'bool');\n  const $b = convertToTensor(b, 'b', 'logicalAnd', 'bool');\n  assertAndGetBroadcastShape($a.shape, $b.shape);\n\n  const inputs: LogicalAndInputs = {a: $a, b: $b};\n\n  return ENGINE.runKernel(LogicalAnd, inputs as unknown as NamedTensorMap);\n}\n\nexport const logicalAnd = /* @__PURE__ */ op({logicalAnd_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {LogicalNot, LogicalNotInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport {op} from './operation';\n\n/**\n * Returns the truth value of `NOT x` element-wise.\n *\n * ```js\n * const a = tf.tensor1d([false, true], 'bool');\n *\n * a.logicalNot().print();\n * ```\n *\n * @param x The input tensor. Must be of dtype 'bool'.\n *\n * @doc {heading: 'Operations', subheading: 'Logical'}\n */\nfunction logicalNot_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'logicalNot', 'bool');\n  const inputs: LogicalNotInputs = {x: $x};\n  return ENGINE.runKernel(LogicalNot, inputs as unknown as NamedTensorMap);\n}\n\nexport const logicalNot = /* @__PURE__ */ op({logicalNot_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {LogicalOr, LogicalOrInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport {assertAndGetBroadcastShape} from './broadcast_util';\nimport {op} from './operation';\n\n/**\n * Returns the truth value of `a OR b` element-wise. Supports broadcasting.\n *\n * ```js\n * const a = tf.tensor1d([false, false, true, true], 'bool');\n * const b = tf.tensor1d([false, true, false, true], 'bool');\n *\n * a.logicalOr(b).print();\n * ```\n * @param a The first input tensor. Must be of dtype bool.\n * @param b The second input tensor. Must be of dtype bool.\n *\n * @doc {heading: 'Operations', subheading: 'Logical'}\n */\nfunction logicalOr_<T extends Tensor>(\n    a: Tensor|TensorLike, b: Tensor|TensorLike): T {\n  const $a = convertToTensor(a, 'a', 'logicalOr', 'bool');\n  const $b = convertToTensor(b, 'b', 'logicalOr', 'bool');\n  assertAndGetBroadcastShape($a.shape, $b.shape);\n\n  const inputs: LogicalOrInputs = {a: $a, b: $b};\n  return ENGINE.runKernel(LogicalOr, inputs as unknown as NamedTensorMap);\n}\nexport const logicalOr = /* @__PURE__ */ op({logicalOr_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {assertAndGetBroadcastShape} from './broadcast_util';\nimport {logicalAnd} from './logical_and';\nimport {logicalNot} from './logical_not';\nimport {logicalOr} from './logical_or';\nimport {op} from './operation';\n\n/**\n * Returns the truth value of `a XOR b` element-wise. Supports broadcasting.\n *\n * ```js\n * const a = tf.tensor1d([false, false, true, true], 'bool');\n * const b = tf.tensor1d([false, true, false, true], 'bool');\n *\n * a.logicalXor(b).print();\n * ```\n *\n * @param a The first input tensor. Must be of dtype bool.\n * @param b The second input tensor. Must be of dtype bool.\n *\n * @doc {heading: 'Operations', subheading: 'Logical'}\n */\nfunction logicalXor_<T extends Tensor>(\n    a: Tensor|TensorLike, b: Tensor|TensorLike): T {\n  const $a = convertToTensor(a, 'a', 'logicalXor', 'bool');\n  const $b = convertToTensor(b, 'b', 'logicalXor', 'bool');\n  assertAndGetBroadcastShape($a.shape, $b.shape);\n\n  // x ^ y = (x | y) & ~(x & y)\n  return logicalAnd(logicalOr(a, b), logicalNot(logicalAnd(a, b)));\n}\n\nexport const logicalXor = /* @__PURE__ */ op({logicalXor_});\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {SearchSorted, SearchSortedAttrs, SearchSortedInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport {sizeFromShape} from '../util_base';\nimport {op} from './operation';\nimport {reshape} from './reshape';\n\nconst INT32_MAX = 2147483648;\n/**\n * Searches for where a value would go in a sorted sequence.\n *\n * This is not a method for checking containment (like javascript in).\n *\n * The typical use case for this operation is \"binning\", \"bucketing\", or\n * \"discretizing\". The values are assigned to bucket-indices based on the edges\n * listed in 'sortedSequence'. This operation returns the bucket-index for each\n * value.\n *\n * The side argument controls which index is returned if a value lands exactly\n * on an edge.\n *\n * The axis is not settable for this operation. It always operates on the\n * innermost dimension (axis=-1). The operation will accept any number of outer\n * dimensions.\n *\n * Note: This operation assumes that 'sortedSequence' is sorted along the\n * innermost axis, maybe using 'sort(..., axis=-1)'. If the sequence is not\n * sorted no error is raised and the content of the returned tensor is not well\n * defined.\n *\n * ```js\n * const edges = tf.tensor1d([-1, 3.3, 9.1, 10.0]);\n * let values = tf.tensor1d([0.0, 4.1, 12.0]);\n * const result1 = tf.searchSorted(edges, values, 'left');\n * result1.print(); // [1, 2, 4]\n *\n * const seq = tf.tensor1d([0, 3, 9, 10, 10]);\n * values = tf.tensor1d([0, 4, 10]);\n * const result2 = tf.searchSorted(seq, values, 'left');\n * result2.print(); // [0, 2, 3]\n * const result3 = tf.searchSorted(seq, values, 'right');\n * result3.print(); // [1, 2, 5]\n *\n * const sortedSequence = tf.tensor2d([[0., 3., 8., 9., 10.],\n *                                     [1., 2., 3., 4., 5.]]);\n * values = tf.tensor2d([[9.8, 2.1, 4.3],\n *                       [0.1, 6.6, 4.5, ]]);\n * const result4 = tf.searchSorted(sortedSequence, values, 'left');\n * result4.print(); // [[4, 1, 2], [0, 5, 4]]\n * ```\n * @param sortedSequence: N-D. Sorted sequence.\n * @param values: N-D. Search values.\n * @param side: 'left'|'right'. Defaults to 'left'. 'left' corresponds to lower\n *     bound and 'right' to upper bound.\n * @return An N-D int32 tensor the size of values containing the result of\n *     applying either lower bound or upper bound (depending on side) to each\n *     value. The result is not a global index to the entire Tensor, but the\n *     index in the last dimension.\n * @doc {heading: 'Operations', subheading: 'Evaluation'}\n */\nfunction searchSorted_(\n    sortedSequence: Tensor|TensorLike, values: Tensor|TensorLike,\n    side: 'left'|'right' = 'left'): Tensor {\n  const $sortedSequence =\n      convertToTensor(sortedSequence, 'sortedSequence', 'searchSorted');\n  const $values = convertToTensor(values, 'values', 'searchSorted');\n\n  const sequenceSize = $sortedSequence.shape[$sortedSequence.shape.length - 1];\n  const valuesSize = $values.shape[$values.shape.length - 1];\n  const $sortedSequence2D = reshape($sortedSequence, [-1, sequenceSize]);\n  const $values2D = reshape($values, [-1, valuesSize]);\n\n  if ($sortedSequence2D.rank < 2) {\n    throw new Error(`Sorted input argument must be at least 2-dimensional`);\n  }\n  if ($sortedSequence2D.shape[0] !== $values2D.shape[0]) {\n    throw new Error(\n        `Leading dimension of 'sortedSequence' and 'values' must match.`);\n  }\n  if (sizeFromShape($values2D.shape) >= INT32_MAX) {\n    throw new Error(`values tensor size must less than ${INT32_MAX}`);\n  }\n  if ($sortedSequence2D.shape[1] >= INT32_MAX) {\n    throw new Error(`trailing dim_size must less than ${\n        INT32_MAX} for int32 output type, was ${$sortedSequence2D.shape[1]}`);\n  }\n\n  const inputs: SearchSortedInputs = {\n    sortedSequence: $sortedSequence2D,\n    values: $values2D,\n  };\n  const attrs: SearchSortedAttrs = {side};\n\n  return ENGINE.runKernel(SearchSorted, inputs as {}, attrs as {});\n}\n\nexport const searchSorted = /* @__PURE__ */ op({searchSorted_});\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../tensor';\nimport {TensorLike} from '../types';\nimport {searchSorted} from './search_sorted';\n\n/**\n * Searches for where a value would go in a sorted sequence.\n *\n * This is not a method for checking containment (like javascript in).\n *\n * The typical use case for this operation is \"binning\", \"bucketing\", or\n * \"discretizing\". The values are assigned to bucket-indices based on the edges\n * listed in 'sortedSequence'. This operation returns the bucket-index for each\n * value.\n *\n * The index returned corresponds to the first edge greater than or equal to the\n * value.\n *\n * The axis is not settable for this operation. It always operates on the\n * innermost dimension (axis=-1). The operation will accept any number of outer\n * dimensions.\n *\n * Note: This operation assumes that 'lowerBound' is sorted along the\n * innermost axis, maybe using 'sort(..., axis=-1)'. If the sequence is not\n * sorted no error is raised and the content of the returned tensor is not well\n * defined.\n *\n * ```js\n * const edges = tf.tensor1d([-1, 3.3, 9.1, 10.0]);\n * let values = tf.tensor1d([0.0, 4.1, 12.0]);\n * const result1 = tf.lowerBound(edges, values);\n * result1.print(); // [1, 2, 4]\n *\n * const seq = tf.tensor1d([0, 3, 9, 10, 10]);\n * values = tf.tensor1d([0, 4, 10]);\n * const result2 = tf.lowerBound(seq, values);\n * result2.print(); // [0, 2, 3]\n *\n * const sortedSequence = tf.tensor2d([[0., 3., 8., 9., 10.],\n *                                     [1., 2., 3., 4., 5.]]);\n * values = tf.tensor2d([[9.8, 2.1, 4.3],\n *                       [0.1, 6.6, 4.5, ]]);\n * const result3 = tf.lowerBound(sortedSequence, values);\n * result3.print(); // [[4, 1, 2], [0, 5, 4]]\n * ```\n * @param sortedSequence: N-D. Sorted sequence.\n * @param values: N-D. Search values.\n * @return An N-D int32 tensor the size of values containing the result of\n *     applying lower bound to each value. The result is not a global index to\n *     the entire Tensor, but the index in the last dimension.\n * @doc {heading: 'Operations', subheading: 'Evaluation'}\n */\nexport function lowerBound(\n    sortedSequence: Tensor|TensorLike, values: Tensor|TensorLike): Tensor {\n  return searchSorted(sortedSequence, values, 'left');\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {MaxPool, MaxPoolAttrs, MaxPoolInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor3D, Tensor4D} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport * as conv_util from './conv_util';\nimport {op} from './operation';\nimport {reshape} from './reshape';\n\n/**\n * Computes the 2D max pooling of an image.\n *\n * @param x The input tensor, of rank 4 or rank 3 of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.\n * @param filterSize The filter size: `[filterHeight, filterWidth]`. If\n *     `filterSize` is a single number, then `filterHeight == filterWidth`.\n * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If\n *     `strides` is a single number, then `strideHeight == strideWidth`.\n * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`\n *     in which we sample input values across the height and width dimensions\n *     in dilated pooling. Defaults to `[1, 1]`. If `dilations` is a single\n *     number, then `dilationHeight == dilationWidth`. If it is greater than\n *     1, then all values of `strides` must be 1.\n * @param pad The type of padding algorithm.\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n *    - For more info, see this guide:\n *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](\n *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n */\nfunction maxPool_<T extends Tensor3D|Tensor4D>(\n    x: T|TensorLike, filterSize: [number, number]|number,\n    strides: [number, number]|number,\n    pad: 'valid'|'same'|number|conv_util.ExplicitPadding,\n    dimRoundingMode?: 'floor'|'round'|'ceil'): T {\n  const $x = convertToTensor(x, 'x', 'maxPool');\n  const dilations = 1;\n\n  let x4D = $x as Tensor4D;\n  let reshapedTo4D = false;\n  if ($x.rank === 3) {\n    reshapedTo4D = true;\n    x4D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);\n  }\n\n  util.assert(\n      x4D.rank === 4,\n      () => `Error in maxPool: input must be rank 4 but got rank ${x4D.rank}.`);\n  util.assert(\n      conv_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in maxPool: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n  conv_util.checkPadOnDimRoundingMode('maxPool', pad, dimRoundingMode);\n  const inputs: MaxPoolInputs = {x: x4D};\n  const attrs: MaxPoolAttrs = {filterSize, strides, pad, dimRoundingMode};\n\n  // tslint:disable-next-line: no-unnecessary-type-assertion\n  const res = ENGINE.runKernel(\n                  MaxPool, inputs as unknown as NamedTensorMap,\n                  attrs as unknown as NamedAttrMap) as T;\n\n  if (reshapedTo4D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]) as T;\n  }\n  return res;\n}\n\nexport const maxPool = /* @__PURE__ */ op({maxPool_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {MaxPool3D, MaxPool3DAttrs, MaxPool3DInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor4D, Tensor5D} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {checkPadOnDimRoundingMode} from './conv_util';\nimport {op} from './operation';\nimport {reshape} from './reshape';\n\n/**\n * Computes the 3D max pooling.\n *\n * ```js\n * const x = tf.tensor5d([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 2, 2, 1]);\n * const result = tf.maxPool3d(x, 2, 1, 'valid');\n * result.print();\n * ```\n *\n * @param x The input tensor, of rank 5 or rank 4 of shape\n *     `[batch, depth, height, width, inChannels]`.\n * @param filterSize The filter size:\n *     `[filterDepth, filterHeight, filterWidth]`.\n *     If `filterSize` is a single number,\n *     then `filterDepth == filterHeight == filterWidth`.\n * @param strides The strides of the pooling:\n *     `[strideDepth, strideHeight, strideWidth]`.\n *     If `strides` is a single number,\n *     then `strideDepth == strideHeight == strideWidth`.\n * @param pad The type of padding algorithm.\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1*1x1.\n *    - For more info, see this guide:\n *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](\n *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n * @param dataFormat An optional string from: \"NDHWC\", \"NCDHW\". Defaults to\n *     \"NDHWC\". Specify the data format of the input and output data. With the\n *     default format \"NDHWC\", the data is stored in the order of: [batch,\n *     depth, height, width, channels]. Only \"NDHWC\" is currently supported.\n * @doc {heading: 'Operations', subheading: 'Convolution'}\n */\nfunction maxPool3d_<T extends Tensor4D|Tensor5D>(\n    x: T|TensorLike, filterSize: [number, number, number]|number = [1, 1, 1],\n    strides: [number, number, number]|number, pad: 'valid'|'same'|number,\n    dimRoundingMode?: 'floor'|'round'|'ceil',\n    dataFormat: 'NDHWC'|'NCDHW' = 'NDHWC'): T {\n  const $x = convertToTensor(x, 'x', 'maxPool3d');\n\n  let x5D = $x as Tensor5D;\n  let reshapedTo5D = false;\n  if ($x.rank === 4) {\n    reshapedTo5D = true;\n    x5D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2], $x.shape[3]]);\n  }\n\n  util.assert(\n      x5D.rank === 5,\n      () => `Error in maxPool3d: x must be rank 5 but got rank ${x5D.rank}.`);\n  util.assert(\n      dataFormat === 'NDHWC',\n      () => `Error in maxPool3d: Only NDHWC is currently supported, ` +\n          `but got dataFormat of ${dataFormat}`);\n  checkPadOnDimRoundingMode('maxPool3d', pad, dimRoundingMode);\n  const inputs: MaxPool3DInputs = {x: x5D};\n  const attrs:\n      MaxPool3DAttrs = {filterSize, strides, pad, dimRoundingMode, dataFormat};\n\n  // tslint:disable-next-line: no-unnecessary-type-assertion\n  const res = ENGINE.runKernel(\n                  MaxPool3D, inputs as unknown as NamedTensorMap,\n                  attrs as unknown as NamedAttrMap) as T;\n\n  if (reshapedTo5D) {\n    return reshape(\n               res, [res.shape[1], res.shape[2], res.shape[3], res.shape[4]]) as\n        T;\n  }\n\n  return res;\n}\n\nexport const maxPool3d = /* @__PURE__ */ op({maxPool3d_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {MaxPoolWithArgmax, MaxPoolWithArgmaxAttrs, MaxPoolWithArgmaxInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor, Tensor4D} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes the 2D max pooling of an image with Argmax index.\n * The indices in argmax are flattened, so that a maximum value at position `[b,\n * y, x, c]` becomes flattened index: `(y * width + x) * channels + c` if\n * include_batch_in_index is False; `((b * height + y) * width + x) * channels\n * +c` if include_batch_in_index is True.\n *\n * The indices returned are always in `[0, height) x [0, width)` before\n * flattening.\n *\n * @param x The input tensor, of rank 4 or rank 3 of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.\n * @param filterSize The filter size: `[filterHeight, filterWidth]`. If\n *     `filterSize` is a single number, then `filterHeight == filterWidth`.\n * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If\n *     `strides` is a single number, then `strideHeight == strideWidth`.\n * @param dataFormat An optional string from: \"NDHWC\", \"NCDHW\". Defaults to\n *     \"NDHWC\". Specify the data format of the input and output data. With the\n *     default format \"NDHWC\", the data is stored in the order of: [batch,\n *     depth, height, width, channels]. Only \"NDHWC\" is currently supported.\n * @param pad The type of padding algorithm.\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n *    - For more info, see this guide:\n *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](\n *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)\n * @param includeBatchIndex Defaults to False. Whether to include batch\n *    dimension in flattened index of argmax.\n *\n * @doc {heading: 'Operations', subheading: 'Convolution'}\n */\nfunction maxPoolWithArgmax_<T extends Tensor4D>(\n    x: T|TensorLike, filterSize: [number, number]|number,\n    strides: [number, number]|number, pad: 'valid'|'same'|number,\n    includeBatchInIndex = false): NamedTensorMap {\n  const $x = convertToTensor(x, 'x', 'maxPoolWithArgmax');\n\n  const inputs: MaxPoolWithArgmaxInputs = {x: $x};\n  const attrs:\n      MaxPoolWithArgmaxAttrs = {filterSize, strides, pad, includeBatchInIndex};\n\n  // tslint:disable-next-line: no-unnecessary-type-assertion\n  const result = ENGINE.runKernel(\n                     MaxPoolWithArgmax, inputs as unknown as NamedTensorMap,\n                     attrs as unknown as NamedAttrMap) as Tensor[];\n\n  return {result: result[0], indexes: result[1]};\n}\n\nexport const maxPoolWithArgmax = /* @__PURE__ */ op({maxPoolWithArgmax_});\n","/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Mean, MeanAttrs, MeanInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes the mean of elements across dimensions of a `tf.Tensor`.\n *\n * Reduces `x` along the dimensions given in `axis`. Unless `keepDims` is\n * true, the rank of the `tf.Tensor` is reduced by 1 for each entry in `axis`.\n * If `keepDims` is true, the reduced dimensions are retained with length 1.\n * If `axis` has no entries, all dimensions are reduced, and a `tf.Tensor` with\n * a single element is returned.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3]);\n *\n * x.mean().print();  // or tf.mean(a)\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * const axis = 1;\n * x.mean(axis).print();  // or tf.mean(x, axis)\n * ```\n *\n * @param x The input tensor.\n * @param axis The dimension(s) to reduce. By default it reduces\n *     all dimensions.\n * @param keepDims If true, retains reduced dimensions with size 1.\n *\n * @doc {heading: 'Operations', subheading: 'Reduction'}\n */\nfunction mean_<T extends Tensor>(\n    x: Tensor|TensorLike, axis: number|number[] = null, keepDims = false): T {\n  const $x = convertToTensor(x, 'x', 'mean');\n\n  const inputs: MeanInputs = {x: $x};\n  const attrs: MeanAttrs = {axis, keepDims};\n\n  return ENGINE.runKernel(\n      Mean, inputs as unknown as NamedTensorMap,\n      attrs as unknown as NamedAttrMap);\n}\n\nexport const mean = /* @__PURE__ */ op({mean_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Tensor} from '../tensor';\nimport {DataType, Rank, ShapeMap} from '../types';\nimport {assertNonNegativeIntegerDimensions, makeZerosTypedArray, sizeFromShape} from '../util';\n\nimport {complex} from './complex';\n\n/**\n * Creates a `tf.Tensor` with all elements set to 0.\n *\n * ```js\n * tf.zeros([2, 2]).print();\n * ```\n *\n * @param shape An array of integers defining the output tensor shape.\n * @param dtype The type of an element in the resulting tensor. Can\n *     be 'float32', 'int32' or 'bool'. Defaults to 'float'.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nexport function zeros<R extends Rank>(\n    shape: ShapeMap[R], dtype: DataType = 'float32'): Tensor<R> {\n  assertNonNegativeIntegerDimensions(shape);\n  if (dtype === 'complex64') {\n    const real = zeros(shape, 'float32');\n    const imag = zeros(shape, 'float32');\n    return complex(real, imag);\n  }\n  const values = makeZerosTypedArray(sizeFromShape(shape), dtype);\n  return ENGINE.makeTensor(values, shape, dtype) as Tensor<R>;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Tensor} from '../tensor';\nimport {DataType, Rank, ShapeMap} from '../types';\nimport {makeOnesTypedArray, sizeFromShape} from '../util';\nimport {assertNonNegativeIntegerDimensions} from '../util_base';\nimport {complex} from './complex';\nimport {zeros} from './zeros';\n\n/**\n * Creates a `tf.Tensor` with all elements set to 1.\n *\n * ```js\n * tf.ones([2, 2]).print();\n * ```\n *\n * @param shape An array of integers defining the output tensor shape.\n * @param dtype The type of an element in the resulting tensor. Defaults to\n *     'float'.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nexport function ones<R extends Rank>(\n    shape: ShapeMap[R], dtype: DataType = 'float32'): Tensor<R> {\n  assertNonNegativeIntegerDimensions(shape);\n  if (dtype === 'complex64') {\n    const real = ones(shape, 'float32');\n    const imag = zeros(shape, 'float32');\n    return complex(real, imag);\n  }\n  const values = makeOnesTypedArray(sizeFromShape(shape), dtype);\n  return ENGINE.makeTensor(values, shape, dtype) as Tensor<R>;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {matMul} from './mat_mul';\nimport {ones} from './ones';\nimport {reshape} from './reshape';\nimport {Tensor} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport {sizeFromShape} from '../util_base';\n\n/**\n * Broadcasts parameters for evaluation on an N-D grid.\n *\n * Given N one-dimensional coordinate arrays `*args`, returns a list `outputs`\n * of N-D coordinate arrays for evaluating expressions on an N-D grid.\n *\n * Notes:\n * `meshgrid` supports cartesian ('xy') and matrix ('ij') indexing conventions.\n * When the `indexing` argument is set to 'xy' (the default), the broadcasting\n * instructions for the first two dimensions are swapped.\n * Examples:\n * Calling `const [X, Y] = meshgrid(x, y)` with the tensors\n *\n * ```javascript\n * const x = [1, 2, 3];\n * const y = [4, 5, 6];\n * const [X, Y] = tf.meshgrid(x, y);\n * // X = [[1, 2, 3],\n * //      [1, 2, 3],\n * //      [1, 2, 3]]\n * // Y = [[4, 4, 4],\n * //      [5, 5, 5],\n * //      [6, 6, 6]]\n * ```\n *\n * @param x Tensor with rank geq 1.\n * @param y Tensor with rank geq 1.\n * @param indexing\n *\n * @doc {heading: 'Operations', subheading: 'Slicing and Joining'}\n */\nexport function meshgrid<T extends Tensor>(\n    x?: T|TensorLike, y?: T|TensorLike, {indexing = 'xy'} = {}): T[] {\n  if (indexing !== 'xy' && indexing !== 'ij') {\n    throw new TypeError(\n        `${indexing} is not a valid third argument to meshgrid`);\n  }\n  if (x === undefined) {\n    return [];\n  }\n  let $x = convertToTensor(\n      x, 'x', 'meshgrid', x instanceof Tensor ? x.dtype : 'float32');\n\n  if (y === undefined) {\n    return [$x];\n  }\n  let $y = convertToTensor(\n      y, 'y', 'meshgrid', y instanceof Tensor ? y.dtype : 'float32');\n\n  const w = sizeFromShape($x.shape);\n  const h = sizeFromShape($y.shape);\n\n  if (indexing === 'xy') {\n    $x = reshape($x, [1, -1]) as T;\n    $y = reshape($y, [-1, 1]) as T;\n    return [\n      matMul(ones([h, 1], $x.dtype), $x),\n      matMul($y, ones([1, w], $y.dtype)),\n    ];\n  }\n\n  $x = reshape($x, [-1, 1]) as T;\n  $y = reshape($y, [1, -1]) as T;\n  return [\n    matMul($x, ones([1, h], $x.dtype)),\n    matMul(ones([w, 1], $y.dtype), $y),\n  ];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Minimum, MinimumInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {makeTypesMatch} from '../tensor_util';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {assertAndGetBroadcastShape} from './broadcast_util';\nimport {cast} from './cast';\nimport {op} from './operation';\n\n/**\n * Returns the min of a and b (`a < b ? a : b`) element-wise.\n * Supports broadcasting.\n *\n * We also expose `minimumStrict` which has the same signature as this op and\n * asserts that `a` and `b` are the same shape (does not broadcast).\n *\n * ```js\n * const a = tf.tensor1d([1, 4, 3, 16]);\n * const b = tf.tensor1d([1, 2, 9, 4]);\n *\n * a.minimum(b).print();  // or tf.minimum(a, b)\n * ```\n *\n * ```js\n * // Broadcast minimum a with b.\n * const a = tf.tensor1d([2, 4, 6, 8]);\n * const b = tf.scalar(5);\n *\n * a.minimum(b).print();  // or tf.minimum(a, b)\n * ```\n *\n * @param a The first tensor.\n * @param b The second tensor. Must have the same type as `a`.\n *\n * @doc {heading: 'Operations', subheading: 'Arithmetic'}\n */\nfunction minimum_<T extends Tensor>(\n    a: Tensor|TensorLike, b: Tensor|TensorLike): T {\n  let $a = convertToTensor(a, 'a', 'minimum');\n  let $b = convertToTensor(b, 'b', 'minimum');\n  [$a, $b] = makeTypesMatch($a, $b);\n\n  if ($a.dtype === 'bool') {\n    $a = cast($a, 'int32');\n    $b = cast($b, 'int32');\n  }\n\n  assertAndGetBroadcastShape($a.shape, $b.shape);\n\n  const inputs: MinimumInputs = {a: $a, b: $b};\n\n  return ENGINE.runKernel(Minimum, inputs as unknown as NamedTensorMap);\n}\n\nexport const minimum = /* @__PURE__ */ op({minimum_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {MirrorPad, MirrorPadAttrs, MirrorPadInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {op} from './operation';\n\n/**\n * Pads a `tf.Tensor` using mirror padding.\n *\n * This operation implements the `REFLECT` and `SYMMETRIC` modes of pad.\n *\n * ```js\n * const x = tf.range(0, 9).reshape([1, 1, 3, 3]);\n * x.mirrorPad([[0, 0], [0, 0], [2, 2], [2, 2]], 'reflect').print();\n * ```\n * @param x The tensor to pad.\n * @param paddings An array of length `R` (the rank of the tensor), where\n * each element is a length-2 tuple of ints `[padBefore, padAfter]`,\n * specifying how much to pad along each dimension of the tensor.\n * In \"reflect\" mode, the padded regions do not include the borders,\n * while in \"symmetric\" mode the padded regions do include the borders.\n * For example, if the input is `[1, 2, 3]` and paddings is `[0, 2]`,\n * then the output is `[1, 2, 3, 2, 1]` in \"reflect\" mode, and\n * `[1, 2, 3, 3, 2]` in \"symmetric\" mode.\n * If `mode` is \"reflect\" then both `paddings[D, 0]` and `paddings[D, 1]`\n * must be no greater than `x.shape[D] - 1`. If mode is \"symmetric\"\n * then both `paddings[D, 0]` and `paddings[D, 1]` must be no greater than\n * `x.shape[D]`\n * @param mode String to specify padding mode. Can be `'reflect' | 'symmetric'`\n */\n/** @doc {heading: 'Tensors', subheading: 'Transformations'} */\nfunction mirrorPad_<T extends Tensor>(\n    x: T|TensorLike, paddings: Array<[number, number]>,\n    mode: 'reflect'|'symmetric'): T {\n  util.assert(\n      mode === 'reflect' || mode === 'symmetric',\n      () => `Invalid mode. Mode must be either reflect or symmetric. ` +\n          `Got ${mode}.`);\n\n  const $x = convertToTensor(x, 'x', 'mirrorPad');\n  if ($x.rank === 0) {\n    throw new Error(\n        'mirrorPad(scalar) is not defined. ' +\n        'Pass non-scalar to mirrorPad');\n  }\n  util.assert(\n      paddings.length === $x.rank,\n      () => `Padding doesn't match input. Must be ${$x.rank}. ` +\n          `Got ${paddings.length}.`);\n  const shapeOffset = mode === 'reflect' ? 1 : 0;\n  for (let i = 0; i < $x.rank; i++) {\n    util.assert(\n        paddings[i].length === 2,\n        () => `Invalid number of paddings. Must be length of 2 each.`);\n    util.assert(\n        paddings[i][0] >= 0 && paddings[i][0] <= $x.shape[i] - shapeOffset &&\n            paddings[i][1] >= 0 && paddings[i][1] <= $x.shape[i] - shapeOffset,\n        () => `Padding in dimension ${i} cannot be greater than or equal ` +\n            `to ${$x.shape[i] - shapeOffset} or less than 0 for input of ` +\n            `shape ${$x.shape}`);\n  }\n\n  const attrs: MirrorPadAttrs = {paddings, mode};\n  const inputs: MirrorPadInputs = {x: $x};\n  return ENGINE.runKernel(\n      MirrorPad, inputs as unknown as NamedTensorMap,\n      attrs as unknown as NamedAttrMap);\n}\n\nexport const mirrorPad = /* @__PURE__ */ op({mirrorPad_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Mod, ModInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {makeTypesMatch} from '../tensor_util';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Returns the mod of a and b element-wise.\n * `floor(x / y) * y + mod(x, y) = x`\n * Supports broadcasting.\n *\n * We also expose `tf.modStrict` which has the same signature as this op and\n * asserts that `a` and `b` are the same shape (does not broadcast).\n *\n * ```js\n * const a = tf.tensor1d([1, 4, 3, 16]);\n * const b = tf.tensor1d([1, 2, 9, 4]);\n *\n * a.mod(b).print();  // or tf.mod(a, b)\n * ```\n *\n * ```js\n * // Broadcast a mod b.\n * const a = tf.tensor1d([2, 4, 6, 8]);\n * const b = tf.scalar(5);\n *\n * a.mod(b).print();  // or tf.mod(a, b)\n * ```\n *\n * @param a The first tensor.\n * @param b The second tensor. Must have the same type as `a`.\n *\n * @doc {heading: 'Operations', subheading: 'Arithmetic'}\n */\nfunction mod_<T extends Tensor>(a: Tensor|TensorLike, b: Tensor|TensorLike): T {\n  let $a = convertToTensor(a, 'a', 'mod');\n  let $b = convertToTensor(b, 'b', 'mod');\n  [$a, $b] = makeTypesMatch($a, $b);\n\n  const inputs: ModInputs = {a: $a, b: $b};\n\n  return ENGINE.runKernel(Mod, inputs as unknown as NamedTensorMap);\n}\n\nexport const mod = /* @__PURE__ */ op({mod_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport {parseAxisParam} from '../util';\n\nimport {expandShapeToKeepDim} from './axis_util';\nimport {cast} from './cast';\nimport {mean} from './mean';\nimport {op} from './operation';\nimport {reshape} from './reshape';\nimport {square} from './square';\nimport {sub} from './sub';\n\n/**\n * Calculates the mean and variance of `x`. The mean and variance are\n * calculated by aggregating the contents of `x` across `axes`. If `x` is\n * 1-D and `axes = [0]` this is just the mean and variance of a vector.\n *\n * @param x The input tensor.\n * @param axis The dimension(s) along with to compute mean and\n *     variance. By default it reduces all dimensions.\n * @param keepDims If true, the moments have the same dimensionality as the\n *     input.\n * @return An object with two keys: `mean` and `variance`.\n *\n * @doc {heading: 'Operations', subheading: 'Normalization'}\n */\nfunction moments_(\n    x: Tensor|TensorLike, axis: number|number[] = null,\n    keepDims = false): {mean: Tensor, variance: Tensor} {\n  x = convertToTensor(x, 'x', 'moments');\n  const axes = parseAxisParam(axis, x.shape);\n  const xMean = mean(x, axes, keepDims);\n  let keepDimsShape = xMean.shape;\n  if (!keepDims) {\n    keepDimsShape = expandShapeToKeepDim(xMean.shape, axes);\n  }\n  const devSquared =\n      square(sub(cast(x, 'float32'), reshape(xMean, keepDimsShape)));\n  const variance = mean(devSquared, axes, keepDims);\n  return {mean: xMean, variance};\n}\n\nexport const moments = /* @__PURE__ */ op({moments_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Tensor2D} from '../tensor';\nimport {convertToTensor, convertToTensorArray} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport {op} from './operation';\n\n/**\n * @docalias (data: Tensor2D, c: Tensor2D, h: Tensor2D): [Tensor2D, Tensor2D]\n */\nexport type LSTMCellFunc = {\n  (data: Tensor2D, c: Tensor2D, h: Tensor2D): [Tensor2D, Tensor2D];\n};\n\n/**\n * Computes the next states and outputs of a stack of LSTMCells.\n *\n * Each cell output is used as input to the next cell.\n *\n * Returns `[cellState, cellOutput]`.\n *\n * Derived from tf.contrib.rn.MultiRNNCell.\n *\n * @param lstmCells Array of LSTMCell functions.\n * @param data The input to the cell.\n * @param c Array of previous cell states.\n * @param h Array of previous cell outputs.\n *\n * @doc {heading: 'Operations', subheading: 'RNN'}\n */\nfunction multiRNNCell_(\n    lstmCells: LSTMCellFunc[], data: Tensor2D|TensorLike,\n    c: Array<Tensor2D|TensorLike>,\n    h: Array<Tensor2D|TensorLike>): [Tensor2D[], Tensor2D[]] {\n  const $data = convertToTensor(data, 'data', 'multiRNNCell');\n  const $c = convertToTensorArray(c, 'c', 'multiRNNCell');\n  const $h = convertToTensorArray(h, 'h', 'multiRNNCell');\n\n  let input = $data;\n  const newStates = [];\n  for (let i = 0; i < lstmCells.length; i++) {\n    const output = lstmCells[i](input, $c[i], $h[i]);\n    newStates.push(output[0]);\n    newStates.push(output[1]);\n    input = output[1];\n  }\n  const newC: Tensor2D[] = [];\n  const newH: Tensor2D[] = [];\n  for (let i = 0; i < newStates.length; i += 2) {\n    newC.push(newStates[i]);\n    newH.push(newStates[i + 1]);\n  }\n  return [newC, newH];\n}\nexport const multiRNNCell = /* @__PURE__ */ op({multiRNNCell_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Multinomial, MultinomialAttrs, MultinomialInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor1D, Tensor2D} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\nimport {reshape} from './reshape';\n\n/**\n * Creates a `tf.Tensor` with values drawn from a multinomial distribution.\n *\n * ```js\n * const probs = tf.tensor([.75, .25]);\n * tf.multinomial(probs, 3).print();\n * ```\n *\n * @param logits 1D array with unnormalized log-probabilities, or\n *     2D array of shape `[batchSize, numOutcomes]`. See the `normalized`\n *     parameter.\n * @param numSamples Number of samples to draw for each row slice.\n * @param seed The seed number.\n * @param normalized Whether the provided `logits` are normalized true\n *     probabilities (sum to 1). Defaults to false.\n * @return 1D array of shape `[numSamples]`, or 2D array of shape\n *     `[batchSize, numSamples]`, depending on the rank of the input.\n *\n * @doc {heading: 'Tensors', subheading: 'Random'}\n */\nfunction multinomial_(\n    logits: Tensor1D|Tensor2D|TensorLike, numSamples: number, seed?: number,\n    normalized = false): Tensor1D|Tensor2D {\n  const $logits = convertToTensor(logits, 'logits', 'multinomial');\n  const numOutcomes = $logits.size;\n  const origRank = $logits.rank;\n  if (numOutcomes < 2) {\n    throw new Error(\n        `Error in multinomial: you need at least 2 outcomes, but got ` +\n        `${numOutcomes}.`);\n  }\n  if (origRank > 2) {\n    throw new Error(`Rank of probabilities must be 1 or 2, but is ${origRank}`);\n  }\n  // TODO(lina128): Investigate correct seed behavior. The code seems not allow\n  // setting see to 0.\n  seed = seed || Math.random();\n\n  // The kernel only accepts (and returns) rank 2 tensors.\n  const logits2D: Tensor2D =\n      origRank === 1 ? reshape($logits, [1, -1]) : $logits as Tensor2D;\n\n  const inputs: MultinomialInputs = {logits: logits2D};\n  const attrs: MultinomialAttrs = {numSamples, seed, normalized};\n\n  // tslint:disable-next-line: no-unnecessary-type-assertion\n  const res = ENGINE.runKernel(\n                  Multinomial, inputs as unknown as NamedTensorMap,\n                  attrs as unknown as NamedAttrMap) as Tensor2D;\n\n  // tslint:disable-next-line:no-unnecessary-type-assertion\n  return origRank === 1 ? reshape(res, [res.size]) as Tensor1D : res;\n}\n\nexport const multinomial = /* @__PURE__ */ op({multinomial_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {NotEqual, NotEqualInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {makeTypesMatch} from '../tensor_util';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {assertAndGetBroadcastShape} from './broadcast_util';\nimport {op} from './operation';\n\n/**\n * Returns the truth value of (a != b) element-wise. Supports broadcasting.\n *\n * ```js\n * const a = tf.tensor1d([1, 2, 3]);\n * const b = tf.tensor1d([0, 2, 3]);\n *\n * a.notEqual(b).print();\n * ```\n * @param a The first input tensor.\n * @param b The second input tensor. Must have the same dtype as `a`.\n *\n * @doc {heading: 'Operations', subheading: 'Logical'}\n */\nfunction notEqual_<T extends Tensor>(\n    a: Tensor|TensorLike, b: Tensor|TensorLike): T {\n  let $a = convertToTensor(a, 'a', 'notEqual', 'string_or_numeric');\n  let $b = convertToTensor(b, 'b', 'notEqual', 'string_or_numeric');\n  [$a, $b] = makeTypesMatch($a, $b);\n\n  assertAndGetBroadcastShape($a.shape, $b.shape);\n\n  const inputs: NotEqualInputs = {a: $a, b: $b};\n\n  return ENGINE.runKernel(NotEqual, inputs as unknown as NamedTensorMap);\n}\n\nexport const notEqual = /* @__PURE__ */ op({notEqual_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {OneHot, OneHotAttrs, OneHotInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {DataType, TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Creates a one-hot `tf.Tensor`. The locations represented by `indices` take\n * value `onValue` (defaults to 1), while all other locations take value\n * `offValue` (defaults to 0). If `indices` is rank `R`, the output has rank\n * `R+1` with the last axis of size `depth`.\n * `indices` used to encode prediction class must start from 0. For example,\n *  if you have 3 classes of data, class 1 should be encoded as 0, class 2\n *  should be 1, and class 3 should be 2.\n *\n * ```js\n * tf.oneHot(tf.tensor1d([0, 1], 'int32'), 3).print();\n * ```\n *\n * @param indices `tf.Tensor` of indices with dtype `int32`. Indices must\n * start from 0.\n * @param depth The depth of the one hot dimension.\n * @param onValue A number used to fill in the output when the index matches\n * the location.\n * @param offValue A number used to fill in the output when the index does\n *     not match the location.\n * @param dtype The dtype of the output tensor, default to 'int32'.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nfunction oneHot_(\n    indices: Tensor|TensorLike, depth: number, onValue = 1, offValue = 0,\n    dtype: DataType = 'int32'): Tensor {\n  if (depth < 2) {\n    throw new Error(`Error in oneHot: depth must be >=2, but it is ${depth}`);\n  }\n  const $indices = convertToTensor(indices, 'indices', 'oneHot', 'int32');\n\n  const inputs: OneHotInputs = {indices: $indices};\n  const attrs: OneHotAttrs = {dtype, depth, onValue, offValue};\n\n  return ENGINE.runKernel(\n      OneHot, inputs as unknown as NamedTensorMap,\n      attrs as unknown as NamedAttrMap);\n}\n\nexport const oneHot = /* @__PURE__ */ op({oneHot_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {OnesLike, OnesLikeInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Creates a `tf.Tensor` with all elements set to 1 with the same shape as the\n * given tensor.\n *\n * ```js\n * const x = tf.tensor([1, 2]);\n * tf.onesLike(x).print();\n * ```\n * @param x A tensor.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nfunction onesLike_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'onesLike');\n\n  const inputs: OnesLikeInputs = {x: $x};\n  return ENGINE.runKernel(OnesLike, inputs as unknown as NamedTensorMap);\n}\n\nexport const onesLike = /* @__PURE__ */ op({onesLike_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Tensor1D, Tensor2D} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {matMul} from './mat_mul';\nimport {op} from './operation';\nimport {reshape} from './reshape';\n\n/**\n * Computes the outer product of two vectors, `v1` and `v2`.\n *\n * ```js\n * const a = tf.tensor1d([1, 2, 3]);\n * const b = tf.tensor1d([3, 4, 5]);\n *\n * tf.outerProduct(a, b).print();\n * ```\n * @param v1 The first vector in the outer product operation.\n * @param v2 The second vector in the outer product operation.\n *\n * @doc {heading: 'Operations', subheading: 'Matrices'}\n */\nfunction outerProduct_(\n    v1: Tensor1D|TensorLike, v2: Tensor1D|TensorLike): Tensor2D {\n  const $v1 = convertToTensor(v1, 'v1', 'outerProduct');\n  const $v2 = convertToTensor(v2, 'v2', 'outerProduct');\n\n  util.assert(\n      $v1.rank === 1 && $v2.rank === 1,\n      () => `Error in outerProduct: inputs must be rank 1, but got ranks ` +\n          `${$v1.rank} and ${$v2.rank}.`);\n\n  const v12D = reshape($v1, [-1, 1]);\n  const v22D = reshape($v2, [1, -1]);\n  return matMul(v12D, v22D);\n}\n\nexport const outerProduct = /* @__PURE__ */ op({outerProduct_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {PadV2, PadV2Attrs, PadV2Inputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Pads a `tf.Tensor` with a given value and paddings.\n *\n * This operation implements `CONSTANT` mode. For `REFLECT` and `SYMMETRIC`,\n * refer to `tf.mirrorPad`.\n *\n * Also available are stricter rank-specific methods with the same signature\n * as this method that assert that `paddings` is of given length.\n *   - `tf.pad1d`\n *   - `tf.pad2d`\n *   - `tf.pad3d`\n *   - `tf.pad4d`\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3, 4]);\n * x.pad([[1, 2]]).print();\n * ```\n * @param x The tensor to pad.\n * @param paddings An array of length `R` (the rank of the tensor), where\n * each element is a length-2 tuple of ints `[padBefore, padAfter]`,\n * specifying how much to pad along each dimension of the tensor.\n * @param constantValue The pad value to use. Defaults to 0.\n *\n * @doc {heading: 'Tensors', subheading: 'Transformations'}\n */\nfunction pad_<T extends Tensor>(\n    x: T|TensorLike, paddings: Array<[number, number]>, constantValue = 0): T {\n  const $x = convertToTensor(x, 'x', 'pad');\n  if ($x.rank === 0) {\n    throw new Error('pad(scalar) is not defined. Pass non-scalar to pad');\n  }\n\n  const attrs: PadV2Attrs = {paddings, constantValue};\n  const inputs: PadV2Inputs = {x: $x};\n  return ENGINE.runKernel(\n      PadV2, inputs as unknown as NamedTensorMap,\n      attrs as unknown as NamedAttrMap);\n}\n\nexport const pad = /* @__PURE__ */ op({pad_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Tensor1D} from '../tensor';\nimport {TensorLike} from '../types';\nimport {assert} from '../util';\nimport {op} from './operation';\nimport {pad} from './pad';\n\n/**\n * Pads a `tf.Tensor1D` with a given value and paddings. See `pad` for details.\n */\nfunction pad1d_(\n    x: Tensor1D|TensorLike, paddings: [number, number],\n    constantValue = 0): Tensor1D {\n  assert(\n      paddings.length === 2,\n      () => 'Invalid number of paddings. Must be length of 2.');\n  return pad(x, [paddings], constantValue);\n}\n\nexport const pad1d = /* @__PURE__ */ op({pad1d_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Tensor2D} from '../tensor';\nimport {TensorLike} from '../types';\nimport {assert} from '../util';\nimport {op} from './operation';\nimport {pad} from './pad';\n\n/**\n * Pads a `tf.Tensor2D` with a given value and paddings. See `pad` for details.\n */\nfunction pad2d_(\n    x: Tensor2D|TensorLike, paddings: [[number, number], [number, number]],\n    constantValue = 0): Tensor2D {\n  assert(\n      paddings.length === 2 && paddings[0].length === 2 &&\n          paddings[1].length === 2,\n      () => 'Invalid number of paddings. Must be length of 2 each.');\n  return pad(x, paddings, constantValue);\n}\n\nexport const pad2d = /* @__PURE__ */ op({pad2d_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Tensor3D} from '../tensor';\nimport {TensorLike} from '../types';\nimport {assert} from '../util';\nimport {op} from './operation';\nimport {pad} from './pad';\n\n/**\n * Pads a `tf.Tensor3D` with a given value and paddings. See `pad` for details.\n */\nfunction pad3d_(\n    x: Tensor3D|TensorLike,\n    paddings: [[number, number], [number, number], [number, number]],\n    constantValue = 0): Tensor3D {\n  assert(\n      paddings.length === 3 && paddings[0].length === 2 &&\n          paddings[1].length === 2 && paddings[2].length === 2,\n      () => 'Invalid number of paddings. Must be length of 2 each.');\n  return pad(x, paddings, constantValue);\n}\n\nexport const pad3d = /* @__PURE__ */ op({pad3d_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Tensor4D} from '../tensor';\nimport {TensorLike} from '../types';\nimport {assert} from '../util';\nimport {op} from './operation';\nimport {pad} from './pad';\n\n/**\n * Pads a `tf.Tensor4D` with a given value and paddings. See `pad` for details.\n */\nfunction pad4d_(\n    x: Tensor4D|TensorLike,\n    paddings:\n        [\n          [number, number], [number, number], [number, number], [number, number]\n        ],\n    constantValue = 0): Tensor4D {\n  assert(\n      paddings.length === 4 && paddings[0].length === 2 &&\n          paddings[1].length === 2 && paddings[2].length === 2 &&\n          paddings[3].length === 2,\n      () => 'Invalid number of paddings. Must be length of 2 each.');\n  return pad(x, paddings, constantValue);\n}\n\nexport const pad4d = /* @__PURE__ */ op({pad4d_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {SpaceToBatchND, SpaceToBatchNDAttrs, SpaceToBatchNDInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {op} from './operation';\n\n/**\n * This operation divides \"spatial\" dimensions `[1, ..., M]` of the input into\n * a grid of blocks of shape `blockShape`, and interleaves these blocks with\n * the \"batch\" dimension (0) such that in the output, the spatial\n * dimensions `[1, ..., M]` correspond to the position within the grid,\n * and the batch dimension combines both the position within a spatial block\n * and the original batch position. Prior to division into blocks,\n * the spatial dimensions of the input are optionally zero padded\n * according to `paddings`. See below for a precise description.\n *\n * ```js\n * const x = tf.tensor4d([1, 2, 3, 4], [1, 2, 2, 1]);\n * const blockShape = [2, 2];\n * const paddings = [[0, 0], [0, 0]];\n *\n * x.spaceToBatchND(blockShape, paddings).print();\n * ```\n *\n * @param x A `tf.Tensor`. N-D with `x.shape` = `[batch] + spatialShape +\n * remainingShape`, where spatialShape has `M` dimensions.\n * @param blockShape A 1-D array. Must have shape `[M]`, all values must\n * be >= 1.\n * @param paddings A 2-D array. Must have shape `[M, 2]`, all values must be >=\n *     0. `paddings[i] = [padStart, padEnd]` specifies the amount to zero-pad\n * from input dimension `i + 1`, which corresponds to spatial dimension `i`. It\n * is required that\n * `(inputShape[i + 1] + padStart + padEnd) % blockShape[i] === 0`\n *\n * This operation is equivalent to the following steps:\n *\n * 1. Zero-pad the start and end of dimensions `[1, ..., M]` of the input\n * according to `paddings` to produce `padded` of shape paddedShape.\n *\n * 2. Reshape `padded` to `reshapedPadded` of shape:\n * `[batch] + [paddedShape[1] / blockShape[0], blockShape[0], ...,\n * paddedShape[M] / blockShape[M-1], blockShape[M-1]] + remainingShape`\n *\n * 3. Permute dimensions of `reshapedPadded` to produce `permutedReshapedPadded`\n * of shape: `blockShape + [batch] + [paddedShape[1] / blockShape[0], ...,\n * paddedShape[M] / blockShape[M-1]] + remainingShape`\n *\n * 4. Reshape `permutedReshapedPadded` to flatten `blockShape` into the\n * batch dimension, producing an output tensor of shape:\n * `[batch * prod(blockShape)] + [paddedShape[1] / blockShape[0], ...,\n * paddedShape[M] / blockShape[M-1]] + remainingShape`\n *\n * @doc {heading: 'Tensors', subheading: 'Transformations'}\n */\nfunction spaceToBatchND_<T extends Tensor>(\n    x: T|TensorLike, blockShape: number[], paddings: number[][]): T {\n  const $x = convertToTensor(x, 'x', 'spaceToBatchND');\n\n  util.assert(\n      $x.rank >= 1 + blockShape.length,\n      () => `input rank ${$x.rank} should be > than [blockShape] ${\n          blockShape.length}`);\n\n  util.assert(\n      paddings.length === blockShape.length,\n      () => `paddings.shape[0] ${\n          paddings.length} must be equal to [blockShape] ${blockShape.length}`);\n\n  util.assert(\n      $x.shape.reduce(\n          (a, b, i) => {\n            if (i > 0 && i <= blockShape.length) {\n              return a &&\n                  ((b + paddings[i - 1][0] + paddings[i - 1][1]) %\n                       blockShape[i - 1] ===\n                   0);\n            }\n            return a;\n          },\n          true),\n      () => `input spatial dimensions ${$x.shape.slice(1)} with paddings ${\n          paddings.toString()} must be divisible by blockShapes ${\n          blockShape.toString()}`);\n\n  const inputs: SpaceToBatchNDInputs = {x: $x};\n  const attrs: SpaceToBatchNDAttrs = {blockShape, paddings};\n\n  return ENGINE.runKernel(\n      SpaceToBatchND, inputs as unknown as NamedTensorMap,\n      attrs as unknown as NamedAttrMap);\n}\n\nexport const spaceToBatchND = /* @__PURE__ */ op({spaceToBatchND_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor3D, Tensor4D} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {avgPool} from './avg_pool';\nimport {batchToSpaceND} from './batch_to_space_nd';\nimport * as conv_util from './conv_util';\nimport {maxPool} from './max_pool';\nimport {op} from './operation';\nimport {reshape} from './reshape';\nimport {spaceToBatchND} from './space_to_batch_nd';\n\n/**\n * Performs an N-D pooling operation\n *\n * @param input The input tensor, of rank 4 or rank 3 of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.\n * @param windowShape The filter size: `[filterHeight, filterWidth]`. If\n *     `filterSize` is a single number, then `filterHeight == filterWidth`.\n * @param poolingType The type of pooling, either 'max' or 'avg'.\n * @param pad The type of padding algorithm:\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n *    - For more info, see this guide:\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\n *         https://www.tensorflow.org/api_guides/python/nn#Convolution)\n * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`\n *     in which we sample input values across the height and width dimensions\n *     in dilated pooling. Defaults to `[1, 1]`. If `dilationRate` is a single\n *     number, then `dilationHeight == dilationWidth`. If it is greater than\n *     1, then all values of `strides` must be 1.\n * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If\n *     `strides` is a single number, then `strideHeight == strideWidth`.\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n *\n * @doc {heading: 'Operations', subheading: 'Convolution'}\n */\nfunction pool_<T extends Tensor3D|Tensor4D>(\n    input: T|TensorLike, windowShape: [number, number]|number,\n    poolingType: 'avg'|'max',\n    pad: 'valid'|'same'|number|conv_util.ExplicitPadding,\n    dilations?: [number, number]|number, strides?: [number, number]|number,\n    dimRoundingMode?: 'floor'|'round'|'ceil') {\n  if (dilations == null) {\n    dilations = [1, 1];\n  }\n  if (strides == null) {\n    strides = 1;\n  }\n  if (pad === 0) {\n    pad = 'valid';\n  }\n\n  const $x = convertToTensor(input, 'x', 'maxPool');\n  let x4D = $x as Tensor4D;\n  let reshapedTo4D = false;\n\n  if ($x.rank === 3) {\n    reshapedTo4D = true;\n    x4D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);\n  }\n\n  util.assert(\n      conv_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in pool: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n\n  const convInfo = conv_util.computePool2DInfo(\n      x4D.shape, windowShape, strides, dilations, pad);\n  const dilation: [number, number] =\n      [convInfo.dilationHeight, convInfo.dilationWidth];\n\n  // The following implementation does batchToSpace(pool(spaceToBatch(x)))\n  // whenever dilation > 1 since the TF kernels do not support dilation > 1.\n  // tslint:disable-next-line:max-line-length\n  // https://github.com/tensorflow/tensorflow/blob/50f6bb67dc98c9b74630b6047aae7a4f8a40fd02/tensorflow/python/ops/nn_ops.py#L1037\n\n  let basePadding: number[][];\n  if (pad === 'same') {\n    basePadding = withSpaceToBatchBasePaddings(\n        [convInfo.filterHeight, convInfo.filterWidth], dilation);\n  } else {\n    basePadding = [[0, 0], [0, 0]];\n  }\n\n  const isDilationOne = dilation[0] === 1 && dilation[1] === 1;\n  const [adjustedPadding, adjustedCrops] = requiredSpaceToBatchPaddings(\n      [convInfo.inHeight, convInfo.inWidth], dilation, basePadding);\n  const convertedPad = isDilationOne ? pad : 'valid';\n  const convertedX =\n      isDilationOne ? x4D : spaceToBatchND(x4D, dilation, adjustedPadding);\n\n  const forwardOp = poolingType === 'avg' ?\n      () => avgPool(convertedX, windowShape, strides, convertedPad,\n                    dimRoundingMode) :\n      () => maxPool(convertedX, windowShape, strides, convertedPad,\n                    dimRoundingMode);\n  const y = forwardOp();\n\n  const res = isDilationOne ? y : batchToSpaceND(y, dilation, adjustedCrops);\n\n  if (reshapedTo4D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]) as T;\n  }\n\n  return res as T;\n}\n\n// Helper function to compute crops and paddings for pool with dilation > 1.\n// tslint:disable-next-line:max-line-length\n// https://github.com/tensorflow/tensorflow/blob/50f6bb67dc98c9b74630b6047aae7a4f8a40fd02/tensorflow/python/ops/array_ops.py#L2184\nfunction requiredSpaceToBatchPaddings(\n    inputShape: [number, number], blockShape: [number, number],\n    basePadding: number[][]) {\n  const padStart = basePadding.map(b => b[0]);\n  const origPadEnd = basePadding.map(b => b[1]);\n  const fullInputShape = inputShape.concat(padStart, origPadEnd);\n  const padEndExtra = blockShape.map((b, i) => (b - fullInputShape[i] % b) % b);\n  const padEnd = origPadEnd.map((s, i) => s + padEndExtra[i]);\n  const paddings = blockShape.map((_, i) => [padStart[i], padEnd[i]]);\n  const crops = blockShape.map((_, i) => [0, padEndExtra[i]]);\n  return [paddings, crops];\n}\n\n// Helper function to compute base paddings for pool with dilation > 1.\n// tslint:disable-next-line:max-line-length\n// https://github.com/tensorflow/tensorflow/blob/50f6bb67dc98c9b74630b6047aae7a4f8a40fd02/tensorflow/python/ops/nn_ops.py#L524\nfunction withSpaceToBatchBasePaddings(\n    filterShape: [number, number], dilation: [number, number]) {\n  // Spatial dimensions of the filters and the upsampled filters in which we\n  // introduce (rate - 1) zeros between consecutive filter values.\n  const dilatedFilterShape = filterShape.map((s, i) => {\n    return s + (s - 1) * (dilation[i] - 1);\n  });\n  const padExtraShape = dilatedFilterShape.map(s => s - 1);\n\n  // When padding is odd, we pad more at end, following the same\n  // convention as conv2d.\n  const padExtraStart = padExtraShape.map(s => Math.floor(s / 2));\n  const padExtraEnd = padExtraShape.map((s, i) => s - padExtraStart[i]);\n  return padExtraShape.map((_, i) => {\n    return [padExtraStart[i], padExtraEnd[i]];\n  });\n}\n\nexport const pool = /* @__PURE__ */ op({pool_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Prelu, PreluInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes leaky rectified linear element-wise with parametric alphas.\n *\n * `x < 0 ? alpha * x : f(x) = x`\n *\n * ```js\n * const x = tf.tensor1d([-1, 2, -3, 4]);\n * const alpha = tf.scalar(0.1);\n *\n * x.prelu(alpha).print();  // or tf.prelu(x, alpha)\n * ```\n * @param x The input tensor.\n * @param alpha Scaling factor for negative values.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction prelu_<T extends Tensor>(x: T|TensorLike, alpha: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'prelu');\n  const $alpha = convertToTensor(alpha, 'alpha', 'prelu');\n\n  const inputs: PreluInputs = {x: $x, alpha: $alpha};\n  return ENGINE.runKernel(Prelu, inputs as unknown as NamedTensorMap);\n}\n\nexport const prelu = /* @__PURE__ */ op({prelu_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Prod, ProdAttrs, ProdInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {cast} from './cast';\nimport {op} from './operation';\n\n/**\n * Computes the product of elements across dimensions of a `tf.Tensor`.\n *\n * Reduces the input along the dimensions given in `axes`. Unless `keepDims`\n * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in\n * `axes`. If `keepDims` is true, the reduced dimensions are retained with\n * length 1. If `axes` has no entries, all dimensions are reduced, and a\n * `tf.Tensor` with a single element is returned.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3]);\n *\n * x.prod().print();  // or tf.prod(x)\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * const axis = 1;\n * x.prod(axis).print();  // or tf.prod(x, axis)\n * ```\n *\n * @param x The input tensor to compute the product over. If the dtype is `bool`\n *   it will be converted to `int32` and the output dtype will be `int32`.\n * @param axis The dimension(s) to reduce. By default it reduces\n *     all dimensions.\n * @param keepDims If true, retains reduced dimensions with size 1.\n *\n * @doc {heading: 'Operations', subheading: 'Reduction'}\n */\nfunction prod_<T extends Tensor>(\n    x: Tensor|TensorLike, axis: number|number[] = null, keepDims = false): T {\n  let $x = convertToTensor(x, 'x', 'prod');\n\n  if ($x.dtype === 'bool') {\n    // bool is not an allowed type for the underlying kernel.\n    $x = cast($x, 'int32');\n  }\n\n  const inputs: ProdInputs = {x: $x};\n  const attrs: ProdAttrs = {axis, keepDims};\n\n  return ENGINE.runKernel(\n      Prod, inputs as unknown as NamedTensorMap,\n      attrs as unknown as NamedAttrMap);\n}\n\nexport const prod = /* @__PURE__ */ op({prod_});\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {RaggedGather, RaggedGatherAttrs, RaggedGatherInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport {op} from './operation';\n\n/**\n * Gather ragged slices from params axis 0 according to indices.\n *\n * @param paramsNestedSplits: A list of at least 1 Tensor with type 'int32' The\n *     nestedRowSplits tensors that define the row-partitioning for the params\n *     RaggedTensor input.\n * @param paramsDenseValues: A Tensor. The flatValues for the params\n *     RaggedTensor.\n * @param indices: A Tensor. Must be one of type: int32. Indices in the\n *     outermost dimension of params of the values that should be gathered.\n * @param outputRaggedRank: An int that is >= 0. The ragged rank of the output\n *     RaggedTensor. outputNestedSplits will contain this number of rowSplits\n *     tensors. This value should equal indices.shape.ndims + params.raggedRank\n *     - 1.\n * @return A map with the following properties:\n *     - outputNestedSplits: A list of outputRaggedRank Tensor objects with the\n * same type as paramsNestedSplits.\n *     - outputDenseValues: A Tensor. Has the same type as paramsDenseValues.\n * @doc {heading: 'Operations', subheading: 'Ragged'}\n */\n\ninterface RaggedGatherMap {\n  outputNestedSplits: Tensor[];\n  outputDenseValues: Tensor;\n}\n\nfunction raggedGather_(\n    paramsNestedSplits: Tensor[], paramsDenseValues: Tensor|TensorLike,\n    indices: Tensor|TensorLike, outputRaggedRank: number): RaggedGatherMap {\n  const $paramsNestedSplits = paramsNestedSplits.map(\n      (t, i) => convertToTensor(t, `tensors${i}`, 'raggedGather', 'int32'));\n  const $paramsDenseValues =\n      convertToTensor(paramsDenseValues, 'paramsDenseValues', 'raggedGather');\n  const $indices = convertToTensor(indices, 'indices', 'raggedGather', 'int32');\n\n  const inputs: RaggedGatherInputs = {\n    paramsNestedSplits: $paramsNestedSplits,\n    paramsDenseValues: $paramsDenseValues,\n    indices: $indices,\n  };\n  const attrs: RaggedGatherAttrs = {outputRaggedRank};\n\n  const result: Tensor[] =\n      ENGINE.runKernel(RaggedGather, inputs as {}, attrs as {});\n  return {\n    outputNestedSplits: result.slice(0, result.length - 1),\n    outputDenseValues: result[result.length - 1],\n  };\n}\n\nexport const raggedGather = /* @__PURE__ */ op({raggedGather_});\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {RaggedRange, RaggedRangeInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport {op} from './operation';\n\n/**\n * Returns a RaggedTensor result composed from rtDenseValues and rtNestedSplits,\n * such that result[i] = [starts[i], starts[i] + deltas[i], ..., limits[i]]).\n *\n * @param starts: A Tensor. Must be one of the following types:\n *     'float32', 'int32'. The starts of each range.\n * @param limits: A Tensor. Must have the same type as starts. The limits of\n *     each range.\n * @param deltas: A Tensor. Must have the same type as starts. The deltas of\n *     each range.\n * @return A map with the following properties:\n *     - rtNestedSplits: A Tensor of type 'int32'.\n *     - rtDenseValues: A Tensor. Has the same type as starts.\n */\n\nfunction raggedRange_(\n    starts: Tensor|TensorLike, limits: Tensor|TensorLike,\n    deltas: Tensor|TensorLike): NamedTensorMap {\n  const $starts = convertToTensor(starts, 'starts', 'raggedRange');\n  const $limits =\n      convertToTensor(limits, 'limits', 'raggedRange', $starts.dtype);\n  const $deltas =\n      convertToTensor(deltas, 'deltas', 'raggedRange', $starts.dtype);\n\n  const inputs: RaggedRangeInputs = {\n    starts: $starts,\n    limits: $limits,\n    deltas: $deltas,\n  };\n\n  const result: Tensor[] = ENGINE.runKernel(RaggedRange, inputs as {});\n  return {\n    rtNestedSplits: result[0],\n    rtDenseValues: result[1],\n  };\n}\n\nexport const raggedRange = /* @__PURE__ */ op({raggedRange_});\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {RaggedTensorToTensor, RaggedTensorToTensorAttrs, RaggedTensorToTensorInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport {op} from './operation';\n\n/**\n * Create a dense tensor from a ragged tensor, possibly altering its shape.\n *\n * The raggedTensorToTensor op creates a dense tensor from am array of row\n * partition tensors, a value vector, and default values. If the shape is\n * unspecified, the minimal shape required to contain all the elements in the\n * ragged tensor (the natural shape) will be used. If some dimensions are left\n * unspecified, then the size of the natural shape is used in that dimension.\n *\n * The defaultValue will be broadcast to the output shape. After that, the\n * values from the ragged tensor overwrite the default values. Note that the\n * defaultValue must have less dimensions than the value.\n *\n * The row partition tensors are in the order of the dimensions. At present, the\n * types can be: \"ROW_SPLITS\": the row_splits tensor from the ragged tensor.\n *   \"VALUE_ROWIDS\": the value_rowids tensor from the ragged tensor.\n *   \"FIRST_DIM_SIZE\": if value_rowids is used for the first dimension, then it\n * is preceded by \"FIRST_DIM_SIZE\".\n * ```\n * @param shape: A Tensor. Must be one of the following types: 'int32'. The\n *     desired shape of the output tensor. If left unspecified (empty), the\n *     minimal shape required to contain all the elements in the ragged tensor\n *     (the natural shape) will be used. If some dimensions are left\n *     unspecified, then the size of the natural shape is used in that\n *     dimension.\n *\n *     Note that dense dimensions cannot be modified by the shape argument.\n *     Trying to change the size of a dense dimension will cause the op to fail.\n *     Examples: natural shape: [4, 5, 6] shape: -1 output shape: [4, 5, 6]\n *\n *     natural shape: [4, 5, 6] shape: [3, -1, 2] output shape: [3, 5, 2]\n *\n *     natural shape: [4, 5, 6] shape: [3, 7, 2] output shape: [3, 7, 2]\n * @param values: A Tensor. A 1D tensor representing the values of the ragged\n *     tensor.\n * @param defaultValue: A Tensor. Must have the same type as values. The\n *     defaultValue when the shape is larger than the ragged tensor. The\n *     defaultValue is broadcast until it is the shape of the output tensor,\n *     and then overwritten by values in the ragged tensor. The default value\n *     must be compatible with this broadcast operation, and must have fewer\n *     dimensions than the value tensor.\n * @param rowPartitionTensors: A list of at least 1 Tensor objects with the same\n *     type in: 'int32'.\n * @param rowPartitionTypes: A list of strings. The types of the row partition\n *     tensors. At present, these can be:\n *     \"ROW_SPLITS\": the row_splits tensor from the ragged tensor.\n *     \"VALUE_ROWIDS\": the value_rowids tensor from the ragged tensor.\n *     \"FIRST_DIM_SIZE\": if value_rowids is used for the first dimension, then\n *         it is preceeded by \"FIRST_DIM_SIZE\". The tensors are in the order of\n *         the dimensions.\n * @return A Tensor. Has the same type as values.\n * @doc {heading: 'Operations', subheading: 'Ragged'}\n */\nfunction raggedTensorToTensor_(\n    shape: Tensor|TensorLike, values: Tensor|TensorLike,\n    defaultValue: Tensor|TensorLike, rowPartitionTensors: Tensor[],\n    rowPartitionTypes: string[]): Tensor {\n  const $shape =\n      convertToTensor(shape, 'shape', 'raggedTensorToTensor', 'int32');\n  const $values = convertToTensor(values, 'values', 'raggedTensorToTensor');\n  const $defaultValue = convertToTensor(\n      defaultValue, 'defaultValue', 'raggedTensorToTensor', $values.dtype);\n  const $rowPartitionTensors = rowPartitionTensors.map(\n      (t, i) =>\n          convertToTensor(t, `tensors${i}`, 'raggedTensorToTensor', 'int32'));\n\n  const inputs: RaggedTensorToTensorInputs = {\n    shape: $shape,\n    values: $values,\n    defaultValue: $defaultValue,\n    rowPartitionTensors: $rowPartitionTensors\n  };\n  const attrs: RaggedTensorToTensorAttrs = {rowPartitionTypes};\n\n  return ENGINE.runKernel(RaggedTensorToTensor, inputs as {}, attrs as {});\n}\n\nexport const raggedTensorToTensor = /* @__PURE__ */ op({raggedTensorToTensor_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Tensor} from '../tensor';\nimport {DataType, Rank, ShapeMap} from '../types';\nimport {sizeFromShape} from '../util';\nimport {assertNonNegativeIntegerDimensions} from '../util_base';\n\nimport {op} from './operation';\n\n/**\n * Creates a `tf.Tensor` with values sampled from a random number generator\n * function defined by the user.\n *\n * @param shape An array of integers defining the output tensor shape.\n * @param randFunction A random number generator function which is called\n * for each element in the output tensor.\n * @param dtype The data type of the output tensor. Defaults to 'float32'.\n *\n * @doc {heading: 'Tensors', subheading: 'Random'}\n */\nfunction rand_<R extends Rank>(\n    shape: ShapeMap[R], randFunction: () => number,\n    dtype?: DataType): Tensor<R> {\n  assertNonNegativeIntegerDimensions(shape);\n  const size = sizeFromShape(shape);\n  let values = null;\n  if (dtype == null || dtype === 'float32') {\n    values = new Float32Array(size);\n  } else if (dtype === 'int32') {\n    values = new Int32Array(size);\n  } else if (dtype === 'bool') {\n    values = new Uint8Array(size);\n  } else {\n    throw new Error(`Unknown data type ${dtype}`);\n  }\n  for (let i = 0; i < size; i++) {\n    values[i] = randFunction();\n  }\n  return ENGINE.makeTensor(values, shape, dtype) as Tensor<R>;\n}\n\nexport const rand = /* @__PURE__ */ op({rand_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as seedrandom from 'seedrandom';\n\nimport {expectNumbersClose, testEpsilon} from '../test_util';\nimport {TypedArray} from '../types';\n\nexport interface RandomBase {\n  nextValue(): number;\n}\n\nexport interface RandomGamma {\n  nextValue(): number;\n}\n\nexport interface RandNormalDataTypes {\n  float32: Float32Array;\n  int32: Int32Array;\n}\n\nexport interface RandGammaDataTypes {\n  float32: Float32Array;\n  int32: Int32Array;\n}\n\n// https://en.wikipedia.org/wiki/Marsaglia_polar_method\nexport class MPRandGauss implements RandomBase {\n  private mean: number;\n  private stdDev: number;\n  private nextVal: number;\n  private dtype?: keyof RandNormalDataTypes;\n  private truncated?: boolean;\n  private upper?: number;\n  private lower?: number;\n  private random: seedrandom.prng;\n\n  constructor(\n      mean: number, stdDeviation: number, dtype?: keyof RandNormalDataTypes,\n      truncated?: boolean, seed?: number) {\n    this.mean = mean;\n    this.stdDev = stdDeviation;\n    this.dtype = dtype;\n    this.nextVal = NaN;\n    this.truncated = truncated;\n    if (this.truncated) {\n      this.upper = this.mean + this.stdDev * 2;\n      this.lower = this.mean - this.stdDev * 2;\n    }\n    const seedValue = seed ? seed : Math.random();\n    this.random = seedrandom.alea(seedValue.toString());\n  }\n\n  /** Returns next sample from a Gaussian distribution. */\n  public nextValue(): number {\n    if (!isNaN(this.nextVal)) {\n      const value = this.nextVal;\n      this.nextVal = NaN;\n      return value;\n    }\n\n    let resultX: number, resultY: number;\n    let isValid = false;\n    while (!isValid) {\n      let v1: number, v2: number, s: number;\n      do {\n        v1 = 2 * this.random() - 1;\n        v2 = 2 * this.random() - 1;\n        s = v1 * v1 + v2 * v2;\n      } while (s >= 1 || s === 0);\n\n      const mul = Math.sqrt(-2.0 * Math.log(s) / s);\n      resultX = this.mean + this.stdDev * v1 * mul;\n      resultY = this.mean + this.stdDev * v2 * mul;\n\n      if (!this.truncated || this.isValidTruncated(resultX)) {\n        isValid = true;\n      }\n    }\n\n    if (!this.truncated || this.isValidTruncated(resultY)) {\n      this.nextVal = this.convertValue(resultY);\n    }\n    return this.convertValue(resultX);\n  }\n\n  /** Handles proper rounding for non-floating-point numbers. */\n  private convertValue(value: number): number {\n    if (this.dtype == null || this.dtype === 'float32') {\n      return value;\n    }\n    return Math.round(value);\n  }\n\n  /** Returns true if less than 2-standard-deviations from the mean. */\n  private isValidTruncated(value: number): boolean {\n    return value <= this.upper && value >= this.lower;\n  }\n}\n\n// Marsaglia, George, and Wai Wan Tsang. 2000. \"A Simple Method for Generating\n// Gamma Variables.\"\nexport class RandGamma implements RandomGamma {\n  private alpha: number;\n  private beta: number;\n  private d: number;\n  private c: number;\n  private dtype?: keyof RandGammaDataTypes;\n  private randu: seedrandom.prng;\n  private randn: MPRandGauss;\n\n  constructor(\n      alpha: number, beta: number, dtype: keyof RandGammaDataTypes,\n      seed?: number) {\n    this.alpha = alpha;\n    this.beta = 1 / beta;  // convert rate to scale parameter\n    this.dtype = dtype;\n\n    const seedValue = seed ? seed : Math.random();\n    this.randu = seedrandom.alea(seedValue.toString());\n    this.randn = new MPRandGauss(0, 1, dtype, false, this.randu());\n\n    if (alpha < 1) {\n      this.d = alpha + (2 / 3);\n    } else {\n      this.d = alpha - (1 / 3);\n    }\n    this.c = 1 / Math.sqrt(9 * this.d);\n  }\n\n  /** Returns next sample from a gamma distribution. */\n  public nextValue(): number {\n    let x2: number, v0: number, v1: number, x: number, u: number, v: number;\n    while (true) {\n      do {\n        x = this.randn.nextValue();\n        v = 1 + (this.c * x);\n      } while (v <= 0);\n      v *= v * v;\n      x2 = x * x;\n      v0 = 1 - (0.331 * x2 * x2);\n      v1 = (0.5 * x2) + (this.d * (1 - v + Math.log(v)));\n      u = this.randu();\n      if (u < v0 || Math.log(u) < v1) {\n        break;\n      }\n    }\n    v = (1 / this.beta) * this.d * v;\n    if (this.alpha < 1) {\n      v *= Math.pow(this.randu(), 1 / this.alpha);\n    }\n    return this.convertValue(v);\n  }\n  /** Handles proper rounding for non-floating-point numbers. */\n  private convertValue(value: number): number {\n    if (this.dtype === 'float32') {\n      return value;\n    }\n    return Math.round(value);\n  }\n}\n\nexport class UniformRandom implements RandomBase {\n  private min: number;\n  private range: number;\n  private random: seedrandom.prng;\n  private dtype?: keyof RandNormalDataTypes;\n\n  constructor(\n      min = 0, max = 1, dtype?: keyof RandNormalDataTypes,\n      seed?: string|number) {\n    this.min = min;\n    this.range = max - min;\n    this.dtype = dtype;\n    if (seed == null) {\n      seed = Math.random();\n    }\n    if (typeof seed === 'number') {\n      seed = seed.toString();\n    }\n\n    if (!this.canReturnFloat() && this.range <= 1) {\n      throw new Error(\n          `The difference between ${min} - ${max} <= 1 and dtype is not float`);\n    }\n    this.random = seedrandom.alea(seed);\n  }\n\n  /** Handles proper rounding for non floating point numbers. */\n  private canReturnFloat = () =>\n      (this.dtype == null || this.dtype === 'float32');\n\n  private convertValue(value: number): number {\n    if (this.canReturnFloat()) {\n      return value;\n    }\n    return Math.round(value);\n  }\n\n  nextValue() {\n    return this.convertValue(this.min + this.range * this.random());\n  }\n}\n\nexport function jarqueBeraNormalityTest(values: TypedArray|number[]) {\n  // https://en.wikipedia.org/wiki/Jarque%E2%80%93Bera_test\n  const n = values.length;\n  const s = skewness(values);\n  const k = kurtosis(values);\n  const jb = n / 6 * (Math.pow(s, 2) + 0.25 * Math.pow(k - 3, 2));\n  // JB test requires 2-degress of freedom from Chi-Square @ 0.95:\n  // http://www.itl.nist.gov/div898/handbook/eda/section3/eda3674.htm\n  const CHI_SQUARE_2DEG = 5.991;\n  if (jb > CHI_SQUARE_2DEG) {\n    throw new Error(`Invalid p-value for JB: ${jb}`);\n  }\n}\n\nexport function expectArrayInMeanStdRange(\n    actual: TypedArray|number[], expectedMean: number, expectedStdDev: number,\n    epsilon?: number) {\n  if (epsilon == null) {\n    epsilon = testEpsilon();\n  }\n  const actualMean = mean(actual);\n  expectNumbersClose(actualMean, expectedMean, epsilon);\n  expectNumbersClose(\n      standardDeviation(actual, actualMean), expectedStdDev, epsilon);\n}\n\nfunction mean(values: TypedArray|number[]) {\n  let sum = 0;\n  for (let i = 0; i < values.length; i++) {\n    sum += values[i];\n  }\n  return sum / values.length;\n}\n\nfunction standardDeviation(values: TypedArray|number[], mean: number) {\n  let squareDiffSum = 0;\n  for (let i = 0; i < values.length; i++) {\n    const diff = values[i] - mean;\n    squareDiffSum += diff * diff;\n  }\n  return Math.sqrt(squareDiffSum / values.length);\n}\n\nfunction kurtosis(values: TypedArray|number[]) {\n  // https://en.wikipedia.org/wiki/Kurtosis\n  const valuesMean = mean(values);\n  const n = values.length;\n  let sum2 = 0;\n  let sum4 = 0;\n  for (let i = 0; i < n; i++) {\n    const v = values[i] - valuesMean;\n    sum2 += Math.pow(v, 2);\n    sum4 += Math.pow(v, 4);\n  }\n  return (1 / n) * sum4 / Math.pow((1 / n) * sum2, 2);\n}\n\nfunction skewness(values: TypedArray|number[]) {\n  // https://en.wikipedia.org/wiki/Skewness\n  const valuesMean = mean(values);\n  const n = values.length;\n  let sum2 = 0;\n  let sum3 = 0;\n  for (let i = 0; i < n; i++) {\n    const v = values[i] - valuesMean;\n    sum2 += Math.pow(v, 2);\n    sum3 += Math.pow(v, 3);\n  }\n  return (1 / n) * sum3 / Math.pow((1 / (n - 1)) * sum2, 3 / 2);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../tensor';\nimport {Rank, ShapeMap} from '../types';\nimport {assertNonNegativeIntegerDimensions} from '../util_base';\n\nimport {buffer} from './buffer';\nimport {op} from './operation';\nimport {RandGamma} from './rand_util';\n\n/**\n * Creates a `tf.Tensor` with values sampled from a gamma distribution.\n *\n * ```js\n * tf.randomGamma([2, 2], 1).print();\n * ```\n *\n * @param shape An array of integers defining the output tensor shape.\n * @param alpha The shape parameter of the gamma distribution.\n * @param beta The inverse scale parameter of the gamma distribution. Defaults\n *     to 1.\n * @param dtype The data type of the output. Defaults to float32.\n * @param seed The seed for the random number generator.\n *\n * @doc {heading: 'Tensors', subheading: 'Random'}\n */\nfunction randomGamma_<R extends Rank>(\n    shape: ShapeMap[R], alpha: number, beta = 1,\n    dtype: 'float32'|'int32' = 'float32', seed?: number): Tensor<R> {\n  assertNonNegativeIntegerDimensions(shape);\n  if (beta == null) {\n    beta = 1;\n  }\n  if (dtype == null) {\n    dtype = 'float32';\n  }\n  if (dtype !== 'float32' && dtype !== 'int32') {\n    throw new Error(`Unsupported data type ${dtype}`);\n  }\n  const rgamma = new RandGamma(alpha, beta, dtype, seed);\n  const res = buffer(shape, dtype);\n  for (let i = 0; i < res.values.length; i++) {\n    res.values[i] = rgamma.nextValue();\n  }\n  return res.toTensor();\n}\n\nexport const randomGamma = /* @__PURE__ */ op({randomGamma_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../tensor';\nimport {DataType, Rank, ShapeMap} from '../types';\nimport {assertNonNegativeIntegerDimensions} from '../util_base';\n\nimport {buffer} from './buffer';\nimport {op} from './operation';\nimport {MPRandGauss} from './rand_util';\n\n/**\n * Creates a `tf.Tensor` with values sampled from a normal distribution.\n *\n * ```js\n * tf.randomNormal([2, 2]).print();\n * ```\n *\n * @param shape An array of integers defining the output tensor shape.\n * @param mean The mean of the normal distribution.\n * @param stdDev The standard deviation of the normal distribution.\n * @param dtype The data type of the output.\n * @param seed The seed for the random number generator.\n *\n * @doc {heading: 'Tensors', subheading: 'Random'}\n */\nfunction randomNormal_<R extends Rank>(\n    shape: ShapeMap[R], mean = 0, stdDev = 1, dtype?: 'float32'|'int32',\n    seed?: number): Tensor<R> {\n  assertNonNegativeIntegerDimensions(shape);\n  if (dtype != null && (dtype as DataType) === 'bool') {\n    throw new Error(`Unsupported data type ${dtype}`);\n  }\n  const randGauss =\n      new MPRandGauss(mean, stdDev, dtype, false /* truncated */, seed);\n  const res = buffer(shape, dtype);\n  for (let i = 0; i < res.values.length; i++) {\n    res.values[i] = randGauss.nextValue();\n  }\n  return res.toTensor();\n}\n\nexport const randomNormal = /* @__PURE__ */ op({randomNormal_});\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../tensor';\nimport {DataType, Rank, ShapeMap} from '../types';\n\nimport {op} from './operation';\nimport {randomNormal} from './random_normal';\n\n/**\n * Creates a `tf.Tensor` with values sampled from a normal distribution.\n *\n * The generated values will have mean 0 and standard deviation 1.\n *\n * ```js\n * tf.randomStandardNormal([2, 2]).print();\n * ```\n *\n * @param shape An array of integers defining the output tensor shape.\n * @param dtype The data type of the output.\n * @param seed The seed for the random number generator.\n *\n * @doc {heading: 'Tensors', subheading: 'Random'}\n */\nfunction randomStandardNormal_<R extends Rank>(\n    shape: ShapeMap[R], dtype?: 'float32'|'int32', seed?: number): Tensor<R> {\n  if (dtype != null && (dtype as DataType) === 'bool') {\n    throw new Error(`Unsupported data type ${dtype}`);\n  }\n  return randomNormal(shape, 0, 1, dtype, seed);\n}\n\nexport const randomStandardNormal = /* @__PURE__ */ op({randomStandardNormal_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../tensor';\nimport {DataType, Rank, ShapeMap} from '../types';\nimport {assertNonNegativeIntegerDimensions} from '../util_base';\n\nimport {buffer} from './buffer';\nimport {op} from './operation';\nimport {UniformRandom} from './rand_util';\n\n/**\n * Creates a `tf.Tensor` with values sampled from a uniform distribution.\n *\n * The generated values follow a uniform distribution in the range [minval,\n * maxval). The lower bound minval is included in the range, while the upper\n * bound maxval is excluded.\n *\n * ```js\n * tf.randomUniform([2, 2]).print();\n * ```\n *\n * @param shape An array of integers defining the output tensor shape.\n * @param minval The lower bound on the range of random values to generate.\n *   Defaults to 0.\n * @param maxval The upper bound on the range of random values to generate.\n *   Defaults to 1.\n * @param dtype The data type of the output tensor. Defaults to 'float32'.\n *\n * @doc {heading: 'Tensors', subheading: 'Random'}\n */\nfunction randomUniform_<R extends Rank>(\n    shape: ShapeMap[R], minval = 0, maxval = 1, dtype: DataType = 'float32',\n    seed?: number|string): Tensor<R> {\n  assertNonNegativeIntegerDimensions(shape);\n  const res = buffer(shape, dtype);\n  const random = new UniformRandom(minval, maxval, null, seed);\n  for (let i = 0; i < res.values.length; i++) {\n    res.values[i] = random.nextValue();\n  }\n  return res.toTensor();\n}\n\nexport const randomUniform = /* @__PURE__ */ op({randomUniform_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Range, RangeAttrs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor1D} from '../tensor';\n\n/**\n * Creates a new `tf.Tensor1D` filled with the numbers in the range provided.\n *\n * The tensor is a half-open interval meaning it includes start, but\n * excludes stop. Decrementing ranges and negative step values are also\n * supported.\n *\n *\n * ```js\n * tf.range(0, 9, 2).print();\n * ```\n *\n * @param start An integer start value\n * @param stop An integer stop value\n * @param step An integer increment (will default to 1 or -1)\n * @param dtype The data type of the output tensor. Defaults to 'float32'.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nexport function range(\n    start: number, stop: number, step = 1,\n    dtype: 'float32'|'int32' = 'float32'): Tensor1D {\n  if (step === 0) {\n    throw new Error('Cannot have a step of zero');\n  }\n\n  const attrs: RangeAttrs = {start, stop, step, dtype};\n\n  return ENGINE.runKernel(Range, {} /* inputs */,\n      attrs as unknown as NamedAttrMap);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Real, RealInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport {op} from './operation';\n\n/**\n * Returns the real part of a complex (or real) tensor.\n *\n * Given a tensor input, this operation returns a tensor of type float that is\n * the real part of each element in input considered as a complex number.\n *\n * If the input is real, it simply makes a clone.\n *\n * ```js\n * const x = tf.complex([-2.25, 3.25], [4.75, 5.75]);\n * tf.real(x).print();\n * ```\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nfunction real_<T extends Tensor>(input: T|TensorLike): T {\n  const $input = convertToTensor(input, 'input', 'real');\n\n  const inputs: RealInputs = {input: $input};\n  return ENGINE.runKernel(Real, inputs as unknown as NamedTensorMap);\n}\n\nexport const real = /* @__PURE__ */ op({real_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Reciprocal, ReciprocalInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes reciprocal of x element-wise: `1 / x`\n *\n * ```js\n * const x = tf.tensor1d([0, 1, 2]);\n *\n * x.reciprocal().print();  // or tf.reciprocal(x)\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction reciprocal_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'reciprocal');\n\n  const inputs: ReciprocalInputs = {x: $x};\n  return ENGINE.runKernel(Reciprocal, inputs as unknown as NamedTensorMap);\n}\nexport const reciprocal = /* @__PURE__ */ op({reciprocal_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Relu, ReluInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes rectified linear element-wise: `max(x, 0)`.\n *\n * ```js\n * const x = tf.tensor1d([-1, 2, -3, 4]);\n *\n * x.relu().print();  // or tf.relu(x)\n * ```\n * @param x The input tensor. If the dtype is `bool`, the output dtype will be\n *     `int32`.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction relu_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'relu');\n\n  const inputs: ReluInputs = {x: $x};\n\n  return ENGINE.runKernel(Relu, inputs as unknown as NamedTensorMap);\n}\n\nexport const relu = /* @__PURE__ */ op({relu_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Relu6, Relu6Inputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes rectified linear 6 element-wise: `min(max(x, 0), 6)`.\n *\n * ```js\n * const x = tf.tensor1d([-1, 2, -3, 8]);\n *\n * x.relu6().print();  // or tf.relu6(x)\n * ```\n * @param x The input tensor. If the dtype is `bool`, the output dtype will be\n *     `int32`.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction relu6_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'relu6');\n\n  const inputs: Relu6Inputs = {x: $x};\n\n  return ENGINE.runKernel(Relu6, inputs as unknown as NamedTensorMap);\n}\n\nexport const relu6 = /* @__PURE__ */ op({relu6_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Reverse, ReverseAttrs, ReverseInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Reverses a `tf.Tensor` along a specified axis.\n *\n * Also available are stricter rank-specific methods that assert that `x` is\n * of the given rank:\n *   - `tf.reverse1d`\n *   - `tf.reverse2d`\n *   - `tf.reverse3d`\n *   - `tf.reverse4d`\n *\n * Except `tf.reverse1d` (which does not have axis param), all methods have\n * same signature as this method.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3, 4]);\n *\n * x.reverse().print();\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * const axis = 1;\n * x.reverse(axis).print();\n * ```\n * @param x The input tensor to be reversed.\n * @param axis The set of dimensions to reverse. Must be in the\n *     range [-rank(x), rank(x)). Defaults to all axes.\n *\n * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}\n */\nfunction reverse_<T extends Tensor>(\n    x: T|TensorLike, axis?: number|number[]): T {\n  const $x = convertToTensor(x, 'x', 'reverse');\n\n  const inputs: ReverseInputs = {x: $x};\n  const attrs: ReverseAttrs = {dims: axis};\n\n  return ENGINE.runKernel(\n      Reverse, inputs as unknown as NamedTensorMap,\n      attrs as unknown as NamedAttrMap);\n}\n\nexport const reverse = /* @__PURE__ */ op({reverse_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor1D} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\nimport {op} from './operation';\nimport {reverse} from './reverse';\n\n/**\n * Reverses a `tf.Tensor1D`.\n *\n * @param x The input tensor.\n */\nfunction reverse1d_(x: Tensor1D|TensorLike): Tensor1D {\n  const $x = convertToTensor(x, 'x', 'reverse');\n  util.assert(\n      $x.rank === 1,\n      () => `Error in reverse1D: x must be rank 1 but got rank ${$x.rank}.`);\n  return reverse($x, 0);\n}\n\nexport const reverse1d = /* @__PURE__ */ op({reverse1d_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor2D} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\nimport {op} from './operation';\nimport {reverse} from './reverse';\n\n/**\n * Reverses a `tf.Tensor2D` along a specified axis.\n *\n * @param x The input tensor.\n * @param axis The set of dimensions to reverse. Must be in the\n *     range [-rank(x), rank(x)). Defaults to all axes.\n */\nfunction reverse2d_(x: Tensor2D|TensorLike, axis?: number|number[]): Tensor2D {\n  const $x = convertToTensor(x, 'x', 'reverse');\n  util.assert(\n      $x.rank === 2,\n      () => `Error in reverse2D: x must be rank 2 but got rank ${$x.rank}.`);\n  return reverse($x, axis);\n}\n\nexport const reverse2d = /* @__PURE__ */ op({reverse2d_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor3D} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\nimport {op} from './operation';\nimport {reverse} from './reverse';\n\n/**\n * Reverses a `tf.Tensor3D` along a specified axis.\n *\n * @param x The input tensor.\n * @param axis The set of dimensions to reverse. Must be in the\n *     range [-rank(x), rank(x)). Defaults to all axes.\n */\nfunction reverse3d_(x: Tensor3D|TensorLike, axis?: number|number[]): Tensor3D {\n  const $x = convertToTensor(x, 'x', 'reverse');\n  util.assert(\n      $x.rank === 3,\n      () => `Error in reverse3D: x must be rank 3 but got rank ${$x.rank}.`);\n  return reverse($x, axis);\n}\n\nexport const reverse3d = /* @__PURE__ */ op({reverse3d_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor4D} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\nimport {op} from './operation';\nimport {reverse} from './reverse';\n\n/**\n * Reverses a `tf.Tensor4D` along a specified axis.\n *\n * @param x The input tensor.\n * @param axis The set of dimensions to reverse. Must be in the\n *     range [-rank(x), rank(x)). Defaults to all axes.\n */\nfunction reverse4d_(x: Tensor4D|TensorLike, axis?: number|number[]): Tensor4D {\n  const $x = convertToTensor(x, 'x', 'reverse');\n  util.assert(\n      $x.rank === 4,\n      () => `Error in reverse4D: x must be rank 4 but got rank ${$x.rank}.`);\n  return reverse($x, axis);\n}\n\nexport const reverse4d = /* @__PURE__ */ op({reverse4d_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Round, RoundInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes round of input `tf.Tensor` element-wise: `round(x)`.\n * It implements banker's rounding.\n *\n * ```js\n * const x = tf.tensor1d([.6, 1.1, -3.3]);\n *\n * x.round().print();  // or tf.round(x)\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction round_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'round');\n  const inputs: RoundInputs = {x: $x};\n\n  return ENGINE.runKernel(Round, inputs as unknown as NamedTensorMap);\n}\n\nexport const round = /* @__PURE__ */ op({round_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Rsqrt, RsqrtInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes reciprocal of square root of the input `tf.Tensor` element-wise:\n * `y = 1 / sqrt(x)`\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 4, -1]);\n *\n * x.rsqrt().print();  // or tf.rsqrt(x)\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction rsqrt_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'rsqrt', 'float32');\n\n  const inputs: RsqrtInputs = {x: $x};\n\n  return ENGINE.runKernel(Rsqrt, inputs as unknown as NamedTensorMap);\n}\nexport const rsqrt = /* @__PURE__ */ op({rsqrt_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Selu, SeluInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes scaled exponential linear element-wise.\n *\n * `x < 0 ? scale * alpha * (exp(x) - 1) : scale * x`\n *\n * ```js\n * const x = tf.tensor1d([-1, 2, -3, 4]);\n *\n * x.selu().print();  // or tf.selu(x)\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction selu_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'selu');\n\n  const inputs: SeluInputs = {x: $x};\n\n  return ENGINE.runKernel(Selu, inputs as unknown as NamedTensorMap);\n}\n\nexport const selu = /* @__PURE__ */ op({selu_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Tensor3D, Tensor4D} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {conv2d} from './conv2d';\nimport {depthwiseConv2d} from './depthwise_conv2d';\nimport {op} from './operation';\nimport {reshape} from './reshape';\n\n/**\n * 2-D convolution with separable filters.\n *\n * Performs a depthwise convolution that acts separately on channels followed\n * by a pointwise convolution that mixes channels. Note that this is\n * separability between dimensions [1, 2] and 3, not spatial separability\n * between dimensions 1 and 2.\n *\n * See\n * [https://www.tensorflow.org/api_docs/python/tf/nn/separable_conv2d](\n *     https://www.tensorflow.org/api_docs/python/tf/nn/separable_conv2d)\n * for more details.\n *\n * @param x The input tensor, of rank 4 or rank 3, of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is\n * assumed.\n * @param depthwiseFilter The depthwise filter tensor, rank 4, of shape\n *     `[filterHeight, filterWidth, inChannels, channelMultiplier]`. This is\n *     the filter used in the first step.\n * @param pointwiseFilter The pointwise filter tensor, rank 4, of shape\n *     `[1, 1, inChannels * channelMultiplier, outChannels]`. This is\n *     the filter used in the second step.\n * @param strides The strides of the convolution: `[strideHeight,\n * strideWidth]`. If strides is a single number, then `strideHeight ==\n * strideWidth`.\n * @param pad The type of padding algorithm.\n *   - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *   - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n *   - For more info, see this guide:\n *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](\n *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)\n * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`\n *     in which we sample input values across the height and width dimensions\n *     in atrous convolution. Defaults to `[1, 1]`. If `rate` is a single\n *     number, then `dilationHeight == dilationWidth`. If it is greater than\n *     1, then all values of `strides` must be 1.\n * @param dataFormat: An optional string from: \"NHWC\", \"NCHW\". Defaults to\n *     \"NHWC\". Specify the data format of the input and output data. With the\n *     default format \"NHWC\", the data is stored in the order of: [batch,\n *     height, width, channels]. Only \"NHWC\" is currently supported.\n *\n * @doc {heading: 'Operations', subheading: 'Convolution'}\n */\nfunction separableConv2d_<T extends Tensor3D|Tensor4D>(\n    x: T|TensorLike, depthwiseFilter: Tensor4D|TensorLike,\n    pointwiseFilter: Tensor4D|TensorLike, strides: [number, number]|number,\n    pad: 'valid'|'same', dilation: [number, number]|number = [1, 1],\n    dataFormat: 'NHWC'|'NCHW' = 'NHWC'): T {\n  const $x = convertToTensor(x, 'x', 'separableConv2d');\n  const $depthwiseFilter =\n      convertToTensor(depthwiseFilter, 'depthwiseFilter', 'separableConv2d');\n  const $pointwiseFilter =\n      convertToTensor(pointwiseFilter, 'pointwiseFilter', 'separableConv2d');\n\n  let x4D = $x as Tensor4D;\n  let reshapedTo4D = false;\n  if ($x.rank === 3) {\n    reshapedTo4D = true;\n    x4D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);\n  }\n\n  if (dataFormat === 'NCHW') {\n    throw new Error(\n        'separableConv2d currently does not support dataFormat NCHW; only ' +\n        'NHWC is supported');\n  }\n\n  util.assert(\n      x4D.rank === 4,\n      () => `Error in separableConv2d: input must be rank 4, but got ` +\n          `rank ${x4D.rank}.`);\n  util.assert(\n      $depthwiseFilter.rank === 4,\n      () => `Error in separableConv2d: depthwise filter must be rank 4, but ` +\n          `got rank ${$depthwiseFilter.rank}.`);\n  util.assert(\n      $pointwiseFilter.rank === 4,\n      () => `Error in separableConv2d: pointwise filter must be rank 4, but ` +\n          `got rank ${$depthwiseFilter.rank}.`);\n  util.assert(\n      $pointwiseFilter.shape[0] === 1,\n      () =>\n          `Error in separableConv2d: the first dimension of pointwise filter ` +\n          ` must be 1, but got ${$pointwiseFilter.shape[0]}.`);\n  util.assert(\n      $pointwiseFilter.shape[1] === 1,\n      () => `Error in separableConv2d: the second dimension of pointwise ` +\n          `filter must be 1, but got ${$pointwiseFilter.shape[1]}.`);\n\n  const inChannels = $depthwiseFilter.shape[2];\n  const channelMultiplier = $depthwiseFilter.shape[3];\n  util.assert(\n      $pointwiseFilter.shape[2] === inChannels * channelMultiplier,\n      () =>\n          `Error in separableConv2d: the third dimension of pointwise filter ` +\n          `must be ${inChannels * channelMultiplier}, ` +\n          `but got ${$pointwiseFilter.shape[2]}.`);\n\n  const depthwise = depthwiseConv2d(\n      x4D, $depthwiseFilter, strides, pad, dataFormat, dilation);\n  const pointwiseStride = 1;\n  const res =\n      conv2d(depthwise, $pointwiseFilter, pointwiseStride, 'valid', dataFormat);\n\n  if (reshapedTo4D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]) as T;\n  }\n  return res as T;\n}\n\nexport const separableConv2d = /* @__PURE__ */ op({separableConv2d_});\n","/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Tensor, TensorBuffer} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\n/**\n * Computes the difference between two lists of numbers.\n *\n * Given a Tensor `x` and a Tensor `y`, this operation returns a Tensor `out`\n * that represents all values that are in `x` but not in `y`. The returned\n * Tensor `out` is sorted in the same order that the numbers appear in `x`\n * (duplicates are preserved). This operation also returns a Tensor indices that\n * represents the position of each out element in `x`. In other words:\n *\n * `out[i] = x[idx[i]] for i in [0, 1, ..., out.length - 1]`\n *\n * ```js\n * const x = [1, 2, 3, 4, 5, 6];\n * const y = [1, 3, 5];\n *\n * const [out, indices] = await tf.setdiff1dAsync(x, y);\n * out.print(); // [2, 4, 6]\n * indices.print(); // [1, 3, 5]\n * ```\n *\n * @param x 1-D Tensor. Values to keep.\n * @param y 1-D Tensor. Must have the same type as x. Values to exclude in the\n *     output.\n * @returns Promise of Tensor tuple [out, indices].\n *  out: Tensor with the same type as x.\n *  indices: A Tensor of type int32.\n *\n * @doc {heading: 'Tensors', subheading: 'Transformations'}\n */\nasync function setdiff1dAsync_(\n    x: Tensor|TensorLike, y: Tensor|TensorLike): Promise<[Tensor, Tensor]> {\n  const $x = convertToTensor(x, 'x', 'setdiff1d');\n  const $y = convertToTensor(y, 'y', 'setdiff1d');\n\n  util.assert(\n      $x.dtype === $y.dtype,\n      () => `x and y should have the same dtype, but got x (${\n          $x.dtype}) and y (${$y.dtype}).`);\n\n  util.assert(\n      $x.rank === 1, () => `x should be 1D tensor, but got x (${$x.shape}).`);\n\n  util.assert(\n      $y.rank === 1, () => `y should be 1D tensor, but got y (${$y.shape}).`);\n\n  const xVals = await $x.data();\n  const yVals = await $y.data();\n  const ySet = new Set(yVals);\n\n  let outputSize = 0;\n  for (let i = 0; i < xVals.length; i++) {\n    if (!ySet.has(xVals[i])) {\n      outputSize++;\n    }\n  }\n\n  const buffer = new TensorBuffer([outputSize], $x.dtype);\n  const indices = new TensorBuffer([outputSize], 'int32');\n  for (let i = 0, p = 0; i < xVals.length; i++) {\n    if (!ySet.has(xVals[i])) {\n      buffer.values[p] = xVals[i];\n      indices.values[p] = i;\n      p++;\n    }\n  }\n  return [buffer.toTensor(), indices.toTensor()];\n}\nexport const setdiff1dAsync = setdiff1dAsync_;\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Sign, SignInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Returns an element-wise indication of the sign of a number.\n *\n * ```js\n * const x = tf.tensor1d([.6, 1.1, -3.3, NaN, 0]);\n *\n * x.sign().print();  // or tf.sign(x)\n * ```\n * @param x The input Tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction sign_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'sign');\n  const inputs: SignInputs = {x: $x};\n  return ENGINE.runKernel(Sign, inputs as unknown as NamedTensorMap);\n}\nexport const sign = /* @__PURE__ */ op({sign_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Sin, SinInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes sin of the input Tensor element-wise: `sin(x)`\n *\n * ```js\n * const x = tf.tensor1d([0, Math.PI / 2, Math.PI * 3 / 4]);\n *\n * x.sin().print();  // or tf.sin(x)\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction sin_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'sin', 'float32');\n\n  const inputs: SinInputs = {x: $x};\n\n  return ENGINE.runKernel(Sin, inputs as unknown as NamedTensorMap);\n}\nexport const sin = /* @__PURE__ */ op({sin_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Sinh, SinhInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes hyperbolic sin of the input `tf.Tensor` element-wise: `sinh(x)`\n *\n * ```js\n * const x = tf.tensor1d([0, 1, -1, .7]);\n *\n * x.sinh().print();  // or tf.sinh(x)\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction sinh_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'sinh');\n  const inputs: SinhInputs = {x: $x};\n\n  return ENGINE.runKernel(Sinh, inputs as unknown as NamedTensorMap);\n}\nexport const sinh = /* @__PURE__ */ op({sinh_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor1D} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {op} from './operation';\nimport {slice} from './slice';\n\n/**\n * Extracts a 1D slice from 1D array starting at coordinates `begin` and is\n * of length `size`. See `slice` for details.\n */\nfunction slice1d_(\n    x: Tensor1D|TensorLike, begin: number, size: number): Tensor1D {\n  const $x = convertToTensor(x, 'x', 'slice1d');\n  util.assert(\n      $x.rank === 1,\n      () =>\n          `slice1d expects a rank-1 tensor, but got a rank-${$x.rank} tensor`);\n  return slice($x, [begin], [size]);\n}\nexport const slice1d = /* @__PURE__ */ op({slice1d_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor2D} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {op} from './operation';\nimport {slice} from './slice';\n\n/**\n * Extracts a 2D slice from a 2D array starting at coordinates `begin` and\n * is of size `size`. See `slice` for details.\n */\nfunction slice2d_(\n    x: Tensor2D|TensorLike, begin: [number, number],\n    size: [number, number]): Tensor2D {\n  const $x = convertToTensor(x, 'x', 'slice2d');\n  util.assert(\n      $x.rank === 2,\n      () =>\n          `slice2d expects a rank-2 tensor, but got a rank-${$x.rank} tensor`);\n  return slice($x, begin, size);\n}\nexport const slice2d = /* @__PURE__ */ op({slice2d_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor3D} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {op} from './operation';\nimport {slice} from './slice';\n\n/**\n * Extracts a 3D slice from a 3D array starting at coordinates `begin` and\n * is of size `size`. See `slice` for details.\n */\nfunction slice3d_(\n    x: Tensor3D|TensorLike, begin: [number, number, number],\n    size: [number, number, number]): Tensor3D {\n  const $x = convertToTensor(x, 'x', 'slice3d');\n  util.assert(\n      $x.rank === 3,\n      () =>\n          `slice3d expects a rank-3 tensor, but got a rank-${$x.rank} tensor`);\n  return slice($x, begin, size);\n}\nexport const slice3d = /* @__PURE__ */ op({slice3d_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor4D} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {op} from './operation';\nimport {slice} from './slice';\n\n/**\n * Extracts a 4D slice from a 4D array starting at coordinates `begin` and\n * is of size `size`. See `slice` for details.\n */\nfunction slice4d_(\n    x: Tensor4D|TensorLike, begin: [number, number, number, number],\n    size: [number, number, number, number]): Tensor4D {\n  const $x = convertToTensor(x, 'x', 'slice4d');\n  util.assert(\n      $x.rank === 4,\n      () =>\n          `slice4d expects a rank-4 tensor, but got a rank-${$x.rank} tensor`);\n  return slice($x, begin, size);\n}\nexport const slice4d = /* @__PURE__ */ op({slice4d_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Softmax, SoftmaxAttrs, SoftmaxInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes the softmax normalized vector given the logits.\n *\n * ```js\n * const a = tf.tensor1d([1, 2, 3]);\n *\n * a.softmax().print();  // or tf.softmax(a)\n * ```\n *\n * ```js\n * const a = tf.tensor2d([2, 4, 6, 1, 2, 3], [2, 3]);\n *\n * a.softmax().print();  // or tf.softmax(a)\n * ```\n *\n * @param logits The logits array.\n * @param dim The dimension softmax would be performed on. Defaults to `-1`\n *     which indicates the last dimension.\n *\n * @doc {heading: 'Operations', subheading: 'Normalization'}\n */\nfunction softmax_<T extends Tensor>(logits: T|TensorLike, dim = -1): T {\n  const $logits = convertToTensor(logits, 'logits', 'softmax', 'float32');\n\n  if (dim === -1) {\n    dim = $logits.rank - 1;\n  }\n  if (dim !== $logits.rank - 1) {\n    throw Error(\n        'Softmax along a non-last dimension is not yet supported. ' +\n        `Logits was rank ${$logits.rank} and dim was ${dim}`);\n  }\n\n  const inputs: SoftmaxInputs = {logits: $logits};\n  const attrs: SoftmaxAttrs = {dim};\n\n  return ENGINE.runKernel(\n      Softmax, inputs as unknown as NamedTensorMap,\n      attrs as unknown as NamedAttrMap);\n}\n\nexport const softmax = /* @__PURE__ */ op({softmax_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../../engine';\nimport {FFT, FFTInputs} from '../../kernel_names';\nimport {Tensor} from '../../tensor';\nimport {NamedTensorMap} from '../../tensor_types';\nimport {assert} from '../../util';\nimport {op} from '../operation';\n\n/**\n * Fast Fourier transform.\n *\n * Computes the 1-dimensional discrete Fourier transform over the inner-most\n * dimension of input.\n *\n * ```js\n * const real = tf.tensor1d([1, 2, 3]);\n * const imag = tf.tensor1d([1, 2, 3]);\n * const x = tf.complex(real, imag);\n *\n * x.fft().print();  // tf.spectral.fft(x).print();\n * ```\n * @param input The complex input to compute an fft over.\n *\n * @doc {heading: 'Operations', subheading: 'Spectral', namespace: 'spectral'}\n */\nfunction fft_(input: Tensor): Tensor {\n  assert(\n      input.dtype === 'complex64',\n      () => `The dtype for tf.spectral.fft() must be complex64 ` +\n          `but got ${input.dtype}.`);\n\n  const inputs: FFTInputs = {input};\n\n  return ENGINE.runKernel(FFT, inputs as unknown as NamedTensorMap);\n}\n\nexport const fft = /* @__PURE__ */ op({fft_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../../engine';\nimport {IFFT, IFFTInputs} from '../../kernel_names';\nimport {Tensor} from '../../tensor';\nimport {NamedTensorMap} from '../../tensor_types';\nimport {assert} from '../../util';\nimport {op} from '../operation';\n\n/**\n * Inverse fast Fourier transform.\n *\n * Computes the inverse 1-dimensional discrete Fourier transform over the\n * inner-most dimension of input.\n *\n * ```js\n * const real = tf.tensor1d([1, 2, 3]);\n * const imag = tf.tensor1d([1, 2, 3]);\n * const x = tf.complex(real, imag);\n *\n * x.ifft().print();  // tf.spectral.ifft(x).print();\n * ```\n * @param input The complex input to compute an ifft over.\n *\n * @doc {heading: 'Operations', subheading: 'Spectral', namespace: 'spectral'}\n */\nfunction ifft_(input: Tensor): Tensor {\n  assert(\n      input.dtype === 'complex64',\n      () => `The dtype for tf.spectral.ifft() must be complex64 ` +\n          `but got ${input.dtype}.`);\n\n  const inputs: IFFTInputs = {input};\n\n  return ENGINE.runKernel(IFFT, inputs as unknown as NamedTensorMap);\n}\n\nexport const ifft = /* @__PURE__ */ op({ifft_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor, Tensor2D} from '../../tensor';\nimport {complex} from '../complex';\nimport {concat} from '../concat';\nimport {imag} from '../imag';\nimport {mul} from '../mul';\nimport {op} from '../operation';\nimport {real} from '../real';\nimport {reshape} from '../reshape';\nimport {reverse} from '../reverse';\nimport {scalar} from '../scalar';\nimport {slice} from '../slice';\n\nimport {ifft} from './ifft';\n\n/**\n * Inversed real value input fast Fourier transform.\n *\n * Computes the 1-dimensional inversed discrete Fourier transform over the\n * inner-most dimension of the real input.\n *\n * ```js\n * const real = tf.tensor1d([1, 2, 3]);\n * const imag = tf.tensor1d([0, 0, 0]);\n * const x = tf.complex(real, imag);\n *\n * x.irfft().print();\n * ```\n * @param input The real value input to compute an irfft over.\n *\n * @doc {heading: 'Operations', subheading: 'Spectral', namespace: 'spectral'}\n */\nfunction irfft_(input: Tensor): Tensor {\n  const innerDimensionSize = input.shape[input.shape.length - 1];\n  const batch = input.size / innerDimensionSize;\n  let ret: Tensor;\n  if (innerDimensionSize <= 2) {\n    const complexInput = reshape(input, [batch, innerDimensionSize]);\n    ret = ifft(complexInput);\n  } else {\n    // The length of unique components of the DFT of a real-valued signal\n    // is 2 * (input_len - 1)\n    const outputShape = [batch, 2 * (innerDimensionSize - 1)];\n    const realInput = reshape(real(input), [batch, innerDimensionSize]);\n    const imagInput = reshape(imag(input), [batch, innerDimensionSize]);\n\n    const realConjugate =\n        reverse(slice(realInput, [0, 1], [batch, innerDimensionSize - 2]), 1);\n    const imagConjugate: Tensor2D = mul(\n        reverse(slice(imagInput, [0, 1], [batch, innerDimensionSize - 2]), 1),\n        scalar(-1));\n\n    const r = concat([realInput, realConjugate], 1);\n    const i = concat([imagInput, imagConjugate], 1);\n    const complexInput =\n        reshape(complex(r, i), [outputShape[0], outputShape[1]]);\n    ret = ifft(complexInput);\n  }\n  ret = real(ret);\n  // reshape the result if the input is 3D tensor.\n  if (input.rank === 3 && input.shape[0] !== 0) {\n    const temp = ret;\n    const batch = input.shape[0];\n    ret = reshape(ret, [batch, ret.shape[0] / batch, ret.shape[1]]);\n    temp.dispose();\n  }\n  return ret;\n}\n\nexport const irfft = /* @__PURE__ */ op({irfft_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {SplitV, SplitVAttrs, SplitVInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Splits a `tf.Tensor` into sub tensors.\n *\n * If `numOrSizeSplits` is a number, splits `x` along dimension `axis`\n * into `numOrSizeSplits` smaller tensors.\n * Requires that `numOrSizeSplits` evenly divides `x.shape[axis]`.\n *\n * If `numOrSizeSplits` is a number array, splits `x` into\n * `numOrSizeSplits.length` pieces. The shape of the `i`-th piece has the\n * same size as `x` except along dimension `axis` where the size is\n * `numOrSizeSplits[i]`.\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 3, 4, 5, 6, 7, 8], [2, 4]);\n * const [a, b] = tf.split(x, 2, 1);\n * a.print();\n * b.print();\n *\n * const [c, d, e] = tf.split(x, [1, 2, 1], 1);\n * c.print();\n * d.print();\n * e.print();\n * ```\n *\n * @param x The input tensor to split.\n * @param numOrSizeSplits Either an integer indicating the number of\n * splits along the axis or an array of integers containing the sizes of\n * each output tensor along the axis. If a number then it must evenly divide\n * `x.shape[axis]`; otherwise the sum of sizes must match `x.shape[axis]`.\n * Can contain one -1 indicating that dimension is to be inferred.\n * @param axis The dimension along which to split. Defaults to 0 (the first\n * dim).\n *\n * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}\n */\nfunction split_<T extends Tensor>(\n    x: Tensor|TensorLike, numOrSizeSplits: number[]|number, axis = 0): T[] {\n  const $x = convertToTensor(x, 'x', 'split');\n\n  const inputs: SplitVInputs = {x: $x};\n  const attr: SplitVAttrs = {numOrSizeSplits, axis};\n\n  return ENGINE.runKernel(\n             SplitV, inputs as unknown as NamedTensorMap,\n             attr as unknown as NamedAttrMap) as unknown as T[];\n}\n\nexport const split = /* @__PURE__ */ op({split_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../../tensor';\nimport {assert} from '../../util';\nimport {complex} from '../complex';\nimport {concat} from '../concat';\nimport {imag} from '../imag';\nimport {op} from '../operation';\nimport {real} from '../real';\nimport {reshape} from '../reshape';\nimport {slice} from '../slice';\nimport {split} from '../split';\nimport {zeros} from '../zeros';\nimport {zerosLike} from '../zeros_like';\n\nimport {fft} from './fft';\n\n/**\n * Real value input fast Fourier transform.\n *\n * Computes the 1-dimensional discrete Fourier transform over the\n * inner-most dimension of the real input.\n *\n * ```js\n * const real = tf.tensor1d([1, 2, 3]);\n *\n * real.rfft().print();\n * ```\n * @param input The real value input to compute an rfft over.\n *\n * @doc {heading: 'Operations', subheading: 'Spectral', namespace: 'spectral'}\n */\nfunction rfft_(input: Tensor, fftLength?: number): Tensor {\n  assert(\n      input.dtype === 'float32',\n      () => `The dtype for rfft() must be real value but got ${input.dtype}`);\n\n  let innerDimensionSize = input.shape[input.shape.length - 1];\n  const batch = input.size / innerDimensionSize;\n\n  let adjustedInput: Tensor;\n  if (fftLength != null && fftLength < innerDimensionSize) {\n    // Need to crop\n    const begin = input.shape.map(v => 0);\n    const size = input.shape.map(v => v);\n    size[input.shape.length - 1] = fftLength;\n    adjustedInput = slice(input, begin, size);\n    innerDimensionSize = fftLength;\n  } else if (fftLength != null && fftLength > innerDimensionSize) {\n    // Need to pad with zeros\n    const zerosShape = input.shape.map(v => v);\n    zerosShape[input.shape.length - 1] = fftLength - innerDimensionSize;\n    adjustedInput = concat([input, zeros(zerosShape)], input.shape.length - 1);\n    innerDimensionSize = fftLength;\n  } else {\n    adjustedInput = input;\n  }\n\n  // Complement the input with zero imaginary numbers.\n  const zerosInput = zerosLike(adjustedInput);\n  const complexInput =\n      reshape(complex(adjustedInput, zerosInput), [batch, innerDimensionSize]);\n\n  const ret = fft(complexInput);\n\n  // Exclude complex conjugations. These conjugations are put symmetrically.\n  const half = Math.floor(innerDimensionSize / 2) + 1;\n  const realValues = real(ret);\n  const imagValues = imag(ret);\n  const realComplexConjugate = split(\n      realValues, [half, innerDimensionSize - half],\n      realValues.shape.length - 1);\n  const imagComplexConjugate = split(\n      imagValues, [half, innerDimensionSize - half],\n      imagValues.shape.length - 1);\n\n  const outputShape = adjustedInput.shape.slice();\n  outputShape[adjustedInput.shape.length - 1] = half;\n\n  return reshape(\n      complex(realComplexConjugate[0], imagComplexConjugate[0]), outputShape);\n}\n\nexport const rfft = /* @__PURE__ */ op({rfft_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {SquaredDifference, SquaredDifferenceInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {makeTypesMatch} from '../tensor_util';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {assertAndGetBroadcastShape} from './broadcast_util';\nimport {op} from './operation';\n\n/**\n * Returns (a - b) * (a - b) element-wise.\n * Supports broadcasting.\n *\n * ```js\n * const a = tf.tensor1d([1, 4, 3, 16]);\n * const b = tf.tensor1d([1, 2, 9, 4]);\n *\n * a.squaredDifference(b).print();  // or tf.squaredDifference(a, b)\n * ```\n *\n * ```js\n * // Broadcast squared difference  a with b.\n * const a = tf.tensor1d([2, 4, 6, 8]);\n * const b = tf.scalar(5);\n *\n * a.squaredDifference(b).print();  // or tf.squaredDifference(a, b)\n * ```\n *\n * @param a The first tensor.\n * @param b The second tensor. Must have the same type as `a`.\n *\n * @doc {heading: 'Operations', subheading: 'Arithmetic'}\n */\nfunction squaredDifference_<T extends Tensor>(\n    a: Tensor|TensorLike, b: Tensor|TensorLike): T {\n  let $a = convertToTensor(a, 'a', 'squaredDifference');\n  let $b = convertToTensor(b, 'b', 'squaredDifference');\n  [$a, $b] = makeTypesMatch($a, $b);\n\n  assertAndGetBroadcastShape($a.shape, $b.shape);\n\n  const inputs: SquaredDifferenceInputs = {a: $a, b: $b};\n  const attrs = {};\n\n  return ENGINE.runKernel(\n      SquaredDifference, inputs as unknown as NamedTensorMap, attrs);\n}\n\nexport const squaredDifference = /* @__PURE__ */ op({squaredDifference_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport {squeezeShape} from '../util';\n\nimport {op} from './operation';\nimport {reshape} from './reshape';\n\n/**\n * Removes dimensions of size 1 from the shape of a `tf.Tensor`.\n *\n * ```js\n * const x = tf.tensor([1, 2, 3, 4], [1, 1, 4]);\n * x.squeeze().print();\n * ```\n *\n * @param x The input tensor to be squeezed.\n * @param axis An optional list of numbers. If specified, only\n *     squeezes the dimensions listed. The dimension index starts at 0. It\n * is an error to squeeze a dimension that is not 1.\n *\n * @doc {heading: 'Tensors', subheading: 'Transformations'}\n */\nfunction squeeze_<T extends Tensor>(x: Tensor|TensorLike, axis?: number[]): T {\n  const $x = convertToTensor(x, 'x', 'squeeze', 'string_or_numeric');\n  return reshape($x, squeezeShape($x.shape, axis).newShape) as T;\n}\n\nexport const squeeze = /* @__PURE__ */ op({squeeze_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Pack, PackAttrs, PackInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensorArray} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {op} from './operation';\n\n/**\n * Stacks a list of rank-`R` `tf.Tensor`s into one rank-`(R+1)` `tf.Tensor`.\n *\n * ```js\n * const a = tf.tensor1d([1, 2]);\n * const b = tf.tensor1d([3, 4]);\n * const c = tf.tensor1d([5, 6]);\n * tf.stack([a, b, c]).print();\n * ```\n *\n * @param tensors A list of tensor objects with the same shape and dtype.\n * @param axis The axis to stack along. Defaults to 0 (the first dim).\n *\n * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}\n */\nfunction stack_<T extends Tensor>(\n    tensors: Array<T|TensorLike>, axis = 0): Tensor {\n  const $tensors =\n      convertToTensorArray(tensors, 'tensors', 'stack', 'string_or_numeric');\n\n  util.assert(\n      $tensors.length >= 1, () => 'Pass at least one tensor to tf.stack');\n\n  if ($tensors.length > 0) {\n    util.assert(\n        axis <= $tensors[0].rank, () => 'Axis must be <= rank of the tensor');\n  }\n\n  const inputs: PackInputs = $tensors;\n  const attrs: PackAttrs = {axis};\n\n  return ENGINE.runKernel(\n      Pack, inputs as unknown as NamedTensorMap,\n      attrs as unknown as NamedAttrMap);\n}\n\nexport const stack = /* @__PURE__ */ op({stack_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Step, StepAttrs, StepInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes step of the input `tf.Tensor` element-wise: `x > 0 ? 1 : alpha`\n *\n * ```js\n * const x = tf.tensor1d([0, 2, -1, -3]);\n *\n * x.step(.5).print();  // or tf.step(x, .5)\n * ```\n * @param x The input tensor.\n * @param alpha The gradient when input is negative. Defaults to 0.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction step_<T extends Tensor>(x: T|TensorLike, alpha = 0.0): T {\n  const $x = convertToTensor(x, 'x', 'step');\n\n  const inputs: StepInputs = {x: $x};\n  const attrs: StepAttrs = {alpha};\n\n  return ENGINE.runKernel(\n      Step, inputs as unknown as NamedTensorMap,\n      attrs as unknown as NamedAttrMap);\n}\nexport const step = /* @__PURE__ */ op({step_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {StridedSlice, StridedSliceAttrs, StridedSliceInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Extracts a strided slice of a tensor.\n *\n * Roughly speaking, this op extracts a slice of size (end-begin)/stride from\n * the given input tensor (x). Starting at the location specified by begin the\n * slice continues by adding stride to the index until all dimensions are not\n * less than end. Note that a stride can be negative, which causes a reverse\n * slice.\n *\n * ```js\n * const t = tf.tensor3d([1, 1, 1 ,2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6],\n *    [3, 2, 3]);\n * t.stridedSlice([1, 0, 0], [2, 1, 3], [1, 1, 1]).print()  // [[[3, 3, 3]]]\n * t.stridedSlice([1, 0, 0], [2, 2, 3], [1, 1, 1]).print()  // [[[3, 3, 3],\n *                                                     // [4, 4, 4]]]\n * t.stridedSlice([1, -1, 0], [2, -3, 3], [1, -1, 1]).print() // [[[4, 4, 4],\n *                                                     // [3, 3, 3]]]\n * ```\n *\n * @param x The tensor to stride slice.\n * @param begin The coordinates to start the slice from.\n * @param end: The coordinates to end the slice at.\n * @param strides: The size of the slice.\n * @param beginMask: If the ith bit of beginMask is set, begin[i] is ignored\n *      and the fullest possible range in that dimension is used instead.\n * @param endMask: If the ith bit of endMask is set, end[i] is ignored\n *      and the fullest possible range in that dimension is used instead.\n * @param shrinkAxisMask: a bitmask where bit i implies that\n * the ith specification should shrink the dimensionality. begin and end must\n * imply a slice of size 1 in the dimension.\n *\n * @doc {heading: 'Operations', subheading: 'Slicing and Joining'}\n */\nfunction stridedSlice_(\n    x: Tensor|TensorLike, begin: number[], end: number[], strides?: number[],\n    beginMask = 0, endMask = 0, ellipsisMask = 0, newAxisMask = 0,\n    shrinkAxisMask = 0): Tensor {\n  const $x = convertToTensor(x, 'x', 'stridedSlice', 'string_or_numeric');\n\n  const inputs: StridedSliceInputs = {x: $x};\n  const attrs: StridedSliceAttrs = {\n    begin,\n    end,\n    strides,\n    beginMask,\n    endMask,\n    ellipsisMask,\n    newAxisMask,\n    shrinkAxisMask\n  };\n\n  return ENGINE.runKernel(\n      StridedSlice, inputs as unknown as NamedTensorMap,\n      attrs as unknown as NamedAttrMap);\n}\n\nexport const stridedSlice = /* @__PURE__ */ op({stridedSlice_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Tan, TanInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes tan of the input `tf.Tensor` element-wise, `tan(x)`\n *\n * ```js\n * const x = tf.tensor1d([0, Math.PI / 2, Math.PI * 3 / 4]);\n *\n * x.tan().print();  // or tf.tan(x)\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction tan_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'tan', 'float32');\n\n  const inputs: TanInputs = {x: $x};\n\n  return ENGINE.runKernel(Tan, inputs as unknown as NamedTensorMap);\n}\nexport const tan = /* @__PURE__ */ op({tan_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor1D} from '../tensor';\nimport {inferShape} from '../tensor_util_env';\nimport {TensorLike1D} from '../types';\nimport {DataType} from '../types';\nimport {assertNonNull} from '../util';\nimport {makeTensor} from './tensor_ops_util';\n\n/**\n * Creates rank-1 `tf.Tensor` with the provided values, shape and dtype.\n *\n * The same functionality can be achieved with `tf.tensor`, but in general\n * we recommend using `tf.tensor1d` as it makes the code more readable.\n *\n * ```js\n * tf.tensor1d([1, 2, 3]).print();\n * ```\n *\n * @param values The values of the tensor. Can be array of numbers,\n *     or a `TypedArray`.\n * @param dtype The data type.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nexport function tensor1d(values: TensorLike1D, dtype?: DataType): Tensor1D {\n  assertNonNull(values);\n  const inferredShape = inferShape(values, dtype);\n  if (inferredShape.length !== 1) {\n    throw new Error('tensor1d() requires values to be a flat/TypedArray');\n  }\n  const shape: number[] = null;\n  return makeTensor(values, shape, inferredShape, dtype) as Tensor1D;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor2D} from '../tensor';\nimport {inferShape} from '../tensor_util_env';\nimport {TensorLike2D} from '../types';\nimport {DataType} from '../types';\nimport {assertNonNull} from '../util';\nimport {makeTensor} from './tensor_ops_util';\n\n/**\n * Creates rank-2 `tf.Tensor` with the provided values, shape and dtype.\n *\n * The same functionality can be achieved with `tf.tensor`, but in general\n * we recommend using `tf.tensor2d` as it makes the code more readable.\n *\n *  ```js\n * // Pass a nested array.\n * tf.tensor2d([[1, 2], [3, 4]]).print();\n * ```\n * ```js\n * // Pass a flat array and specify a shape.\n * tf.tensor2d([1, 2, 3, 4], [2, 2]).print();\n * ```\n *\n * @param values The values of the tensor. Can be nested array of numbers,\n *     or a flat array, or a `TypedArray`.\n * @param shape The shape of the tensor. If not provided, it is inferred from\n *     `values`.\n * @param dtype The data type.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nexport function tensor2d(\n    values: TensorLike2D, shape?: [number, number],\n    dtype?: DataType): Tensor2D {\n  assertNonNull(values);\n  if (shape != null && shape.length !== 2) {\n    throw new Error('tensor2d() requires shape to have two numbers');\n  }\n  const inferredShape = inferShape(values, dtype);\n  if (inferredShape.length !== 2 && inferredShape.length !== 1) {\n    throw new Error(\n        'tensor2d() requires values to be number[][] or flat/TypedArray');\n  }\n  if (inferredShape.length === 1 && shape == null) {\n    throw new Error(\n        'tensor2d() requires shape to be provided when `values` ' +\n        'are a flat/TypedArray');\n  }\n  return makeTensor(values, shape, inferredShape, dtype) as Tensor2D;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor4D} from '../tensor';\nimport {inferShape} from '../tensor_util_env';\nimport {TensorLike4D} from '../types';\nimport {DataType} from '../types';\nimport {assertNonNull} from '../util';\nimport {makeTensor} from './tensor_ops_util';\n\n/**\n * Creates rank-4 `tf.Tensor` with the provided values, shape and dtype.\n *\n * The same functionality can be achieved with `tf.tensor`, but in general\n * we recommend using `tf.tensor4d` as it makes the code more readable.\n *\n *  ```js\n * // Pass a nested array.\n * tf.tensor4d([[[[1], [2]], [[3], [4]]]]).print();\n * ```\n * ```js\n * // Pass a flat array and specify a shape.\n * tf.tensor4d([1, 2, 3, 4], [1, 2, 2, 1]).print();\n * ```\n *\n * @param values The values of the tensor. Can be nested array of numbers,\n *     or a flat array, or a `TypedArray`.\n * @param shape The shape of the tensor. Optional. If not provided,\n *   it is inferred from `values`.\n * @param dtype The data type.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nexport function tensor4d(\n    values: TensorLike4D, shape?: [number, number, number, number],\n    dtype?: DataType): Tensor4D {\n  assertNonNull(values);\n  if (shape != null && shape.length !== 4) {\n    throw new Error('tensor4d() requires shape to have four numbers');\n  }\n  const inferredShape = inferShape(values, dtype);\n  if (inferredShape.length !== 4 && inferredShape.length !== 1) {\n    throw new Error(\n        'tensor4d() requires values to be number[][][][] or flat/TypedArray');\n  }\n  if (inferredShape.length === 1 && shape == null) {\n    throw new Error(\n        'tensor4d() requires shape to be provided when `values` ' +\n        'are a flat array');\n  }\n  return makeTensor(values, shape, inferredShape, dtype) as Tensor4D;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor5D} from '../tensor';\nimport {inferShape} from '../tensor_util_env';\nimport {TensorLike5D} from '../types';\nimport {DataType} from '../types';\nimport {assertNonNull} from '../util';\nimport {makeTensor} from './tensor_ops_util';\n\n/**\n * Creates rank-5 `tf.Tensor` with the provided values, shape and dtype.\n *\n * The same functionality can be achieved with `tf.tensor`, but in general\n * we recommend using `tf.tensor5d` as it makes the code more readable.\n *\n *  ```js\n * // Pass a nested array.\n * tf.tensor5d([[[[[1],[2]],[[3],[4]]],[[[5],[6]],[[7],[8]]]]]).print();\n * ```\n * ```js\n * // Pass a flat array and specify a shape.\n * tf.tensor5d([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 2, 2, 1]).print();\n * ```\n *\n * @param values The values of the tensor. Can be nested array of numbers,\n *     or a flat array, or a `TypedArray`.\n * @param shape The shape of the tensor. Optional. If not provided,\n *   it is inferred from `values`.\n * @param dtype The data type.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nexport function tensor5d(\n    values: TensorLike5D, shape?: [number, number, number, number, number],\n    dtype?: DataType): Tensor5D {\n  assertNonNull(values);\n  if (shape != null && shape.length !== 5) {\n    throw new Error('tensor5d() requires shape to have five numbers');\n  }\n  const inferredShape = inferShape(values, dtype);\n  if (inferredShape.length !== 5 && inferredShape.length !== 1) {\n    throw new Error(\n        'tensor5d() requires values to be ' +\n        'number[][][][][] or flat/TypedArray');\n  }\n  if (inferredShape.length === 1 && shape == null) {\n    throw new Error(\n        'tensor5d() requires shape to be provided when `values` ' +\n        'are a flat array');\n  }\n  return makeTensor(values, shape, inferredShape, dtype) as Tensor5D;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor6D} from '../tensor';\nimport {inferShape} from '../tensor_util_env';\nimport {TensorLike6D} from '../types';\nimport {DataType} from '../types';\nimport {assertNonNull} from '../util';\nimport {makeTensor} from './tensor_ops_util';\n\n/**\n * Creates rank-6 `tf.Tensor` with the provided values, shape and dtype.\n *\n * The same functionality can be achieved with `tf.tensor`, but in general\n * we recommend using `tf.tensor6d` as it makes the code more readable.\n *\n *  ```js\n * // Pass a nested array.\n * tf.tensor6d([[[[[[1],[2]],[[3],[4]]],[[[5],[6]],[[7],[8]]]]]]).print();\n * ```\n * ```js\n * // Pass a flat array and specify a shape.\n * tf.tensor6d([1, 2, 3, 4, 5, 6, 7, 8], [1, 1, 2, 2, 2, 1]).print();\n * ```\n *\n * @param values The values of the tensor. Can be nested array of numbers,\n *     or a flat array, or a `TypedArray`.\n * @param shape The shape of the tensor. Optional. If not provided,\n *   it is inferred from `values`.\n * @param dtype The data type.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nexport function tensor6d(\n    values: TensorLike6D,\n    shape?: [number, number, number, number, number, number],\n    dtype?: DataType): Tensor6D {\n  assertNonNull(values);\n  if (shape != null && shape.length !== 6) {\n    throw new Error('tensor6d() requires shape to have six numbers');\n  }\n  const inferredShape = inferShape(values, dtype);\n  if (inferredShape.length !== 6 && inferredShape.length !== 1) {\n    throw new Error(\n        'tensor6d() requires values to be number[][][][][][] or ' +\n        'flat/TypedArray');\n  }\n  if (inferredShape.length === 1 && shape == null) {\n    throw new Error(\n        'tensor6d() requires shape to be provided when `values` ' +\n        'are a flat array');\n  }\n  shape = shape ||\n      inferredShape as [number, number, number, number, number, number];\n  return makeTensor(values, shape, inferredShape, dtype) as Tensor6D;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {TopK, TopKAttrs, TopKInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Finds the values and indices of the `k` largest entries along the last\n * dimension.\n *\n * If the input is a vector (rank=1), finds the k largest entries in the vector\n * and outputs their values and indices as vectors. Thus values[j] is the j-th\n * largest entry in input, and its index is indices[j].\n * For higher rank inputs, computes the top k entries along the last dimension.\n *\n * If two elements are equal, the lower-index element appears first.\n *\n * ```js\n * const a = tf.tensor2d([[1, 5], [4, 3]]);\n * const {values, indices} = tf.topk(a);\n * values.print();\n * indices.print();\n * ```\n * @param x 1-D or higher `tf.Tensor` with last dimension being at least `k`.\n * @param k Number of top elements to look for along the last dimension.\n * @param sorted If true, the resulting `k` elements will be sorted by the\n *     values in descending order.\n *\n * @doc {heading: 'Operations', subheading: 'Evaluation'}\n */\nfunction topk_<T extends Tensor>(\n    x: T|TensorLike, k = 1, sorted = true): {values: T, indices: T} {\n  const $x = convertToTensor(x, 'x', 'topk');\n  if ($x.rank === 0) {\n    throw new Error('topk() expects the input to be of rank 1 or higher');\n  }\n  const lastDim = $x.shape[$x.shape.length - 1];\n\n  if (k < 0) {\n    throw new Error(`'k' passed to topk() must be >= 0 but got ${k}`);\n  }\n\n  if (k > lastDim) {\n    throw new Error(\n        `'k' passed to topk() must be <= the last dimension (${lastDim}) ` +\n        `but got ${k}`);\n  }\n\n  const inputs: TopKInputs = {x: $x};\n  const attrs: TopKAttrs = {k, sorted};\n\n  const [values, indices] = ENGINE.runKernel(\n      TopK, inputs as unknown as NamedTensorMap,\n      attrs as unknown as NamedAttrMap) as [T, T];\n\n  return {values, indices};\n}\n\nexport const topk = /* @__PURE__ */ op({topk_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../tensor';\nimport {DataType, Rank, ShapeMap} from '../types';\nimport {assertNonNegativeIntegerDimensions} from '../util_base';\n\nimport {buffer} from './buffer';\nimport {op} from './operation';\nimport {MPRandGauss} from './rand_util';\n\n/**\n * Creates a `tf.Tensor` with values sampled from a truncated normal\n * distribution.\n *\n * ```js\n * tf.truncatedNormal([2, 2]).print();\n * ```\n *\n * The generated values follow a normal distribution with specified mean and\n * standard deviation, except that values whose magnitude is more than 2\n * standard deviations from the mean are dropped and re-picked.\n *\n * @param shape An array of integers defining the output tensor shape.\n * @param mean The mean of the normal distribution.\n * @param stdDev The standard deviation of the normal distribution.\n * @param dtype The data type of the output tensor.\n * @param seed The seed for the random number generator.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nfunction truncatedNormal_<R extends Rank>(\n    shape: ShapeMap[R], mean = 0, stdDev = 1, dtype?: 'float32'|'int32',\n    seed?: number): Tensor<R> {\n  assertNonNegativeIntegerDimensions(shape);\n  if (dtype != null && (dtype as DataType) === 'bool') {\n    throw new Error(`Unsupported data type $ { dtype }`);\n  }\n  const randGauss =\n      new MPRandGauss(mean, stdDev, dtype, true /* truncated */, seed);\n  const res = buffer(shape, dtype);\n  for (let i = 0; i < res.values.length; i++) {\n    res.values[i] = randGauss.nextValue();\n  }\n  return res.toTensor();\n}\n\nexport const truncatedNormal = /* @__PURE__ */ op({truncatedNormal_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Unique, UniqueAttrs, UniqueInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor, Tensor1D} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport {assert} from '../util';\n\nimport {op} from './operation';\n\n/**\n * Finds unique elements along an axis of a tensor.\n *\n * It returns a tensor `values` containing all of the unique elements along the\n * `axis` of the given tensor `x` in the same order that they occur along the\n * `axis` in `x`; `x` does not need to be sorted. It also returns a tensor\n * `indices` the same size as the number of the elements in `x` along the `axis`\n * dimension. It contains the index in the unique output `values`.\n *\n * ```js\n * // A 1-D tensor\n * const a = tf.tensor1d([1, 1, 2, 4, 4, 4, 7, 8, 8]);\n * const {values, indices} = tf.unique(a);\n * values.print();   // [1, 2, 4, 7, 8,]\n * indices.print();  // [0, 0, 1, 2, 2, 2, 3, 4, 4]\n * ```\n *\n * ```js\n * // A 2-D tensor with axis=0\n * //\n * // 'a' is: [[1, 0, 0],\n * //          [1, 0, 0],\n * //          [2, 0, 0]]\n * const a = tf.tensor2d([[1, 0, 0], [1, 0, 0], [2, 0, 0]]);\n * const {values, indices} = tf.unique(a, 0)\n * values.print();   // [[1, 0, 0],\n *                   //  [2, 0, 0]]\n * indices.print();  // [0, 0, 1]\n * ```\n *\n * ```js\n * // A 2-D tensor with axis=1\n * //\n * // 'a' is: [[1, 0, 0],\n * //          [1, 0, 0],\n * //          [2, 0, 0]]\n * const a = tf.tensor2d([[1, 0, 0], [1, 0, 0], [2, 0, 0]]);\n * const {values, indices} = tf.unique(a, 1)\n * values.print();   // [[1, 0],\n *                   //  [1, 0],\n *                   //  [2, 0]]\n * indices.print();  // [0, 1, 1]\n * ```\n * @param x A tensor (int32, string, bool).\n * @param axis The axis of the tensor to find the unique elements.\n * @returns [uniqueElements, indices] (see above for details)\n *\n * @doc {heading: 'Operations', subheading: 'Evaluation'}\n */\nfunction unique_<T extends Tensor>(\n    x: T|TensorLike, axis = 0): {values: T, indices: Tensor1D} {\n  const $x = convertToTensor(x, 'x', 'unique', 'string_or_numeric');\n  assert($x.rank > 0, () => 'The input tensor must be at least 1D');\n\n  const inputs: UniqueInputs = {x: $x};\n  const attrs: UniqueAttrs = {axis};\n  const [values, indices] = ENGINE.runKernel(\n      Unique, inputs as unknown as NamedTensorMap,\n      attrs as unknown as NamedAttrMap) as [T, Tensor1D];\n  return {values, indices};\n}\n\nexport const unique = /* @__PURE__ */ op({unique_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {UnsortedSegmentSum, UnsortedSegmentSumAttrs, UnsortedSegmentSumInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor, Tensor1D} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport {assert, isInt} from '../util';\n\nimport {op} from './operation';\n\n/**\n * Computes the sum along segments of a `tf.Tensor`.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3, 4]);\n * const segmentIds = tf.tensor1d([1, 2, 0, 1], 'int32');\n * const numSegments = 3;\n *\n * x.unsortedSegmentSum(segmentIds, numSegments).print()\n * //or tf.unsortedSegmentSum(x, segmentIds, numSegments)\n * ```\n * @param x The `tf.Tensor` that will be summed along its segments.\n * @param segmentIds A `tf.Tensor1D` whose rank is equal to the rank of `x`'s\n * dimension along the `axis`.  Maps each element of `x` to a segment.\n * @param numSegments The number of distinct `segmentIds`.\n *\n * @doc {heading: 'Operations', subheading: 'Segment'}\n */\nfunction unsortedSegmentSum_<T extends Tensor>(\n    x: T|TensorLike, segmentIds: Tensor1D|TensorLike, numSegments: number): T {\n  const $x = convertToTensor(x, 'x', 'unsortedSegmentSum');\n  const $segmentIds =\n      convertToTensor(segmentIds, 'segmentIds', 'unsortedSegmentSum', 'int32');\n  assert(isInt(numSegments), () => 'numSegments must be of dtype int');\n\n  const inputs: UnsortedSegmentSumInputs = {x: $x, segmentIds: $segmentIds};\n  const attrs: UnsortedSegmentSumAttrs = {numSegments};\n\n  return ENGINE.runKernel(\n      UnsortedSegmentSum, inputs as unknown as NamedTensorMap,\n      attrs as unknown as NamedAttrMap);\n}\n\nexport const unsortedSegmentSum = /* @__PURE__ */ op({unsortedSegmentSum_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Unpack, UnpackAttrs, UnpackInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {op} from './operation';\n\n/**\n * Unstacks a `tf.Tensor` of rank-`R` into a list of rank-`(R-1)` `tf.Tensor`s.\n *\n * ```js\n * const a = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * tf.unstack(a).forEach(tensor => tensor.print());\n * ```\n *\n * @param x A tensor object.\n * @param axis The axis to unstack along. Defaults to 0 (the first dim).\n *\n * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}\n */\nfunction unstack_(x: Tensor|TensorLike, axis = 0): Tensor[] {\n  const $x = convertToTensor(x, 'x', 'unstack', 'string_or_numeric');\n  util.assert(\n      axis >= -$x.shape.length && axis < $x.shape.length,\n      () =>\n          `Axis = ${axis} is not in [-${$x.shape.length}, ${$x.shape.length})`);\n\n  const inputs: UnpackInputs = {value: $x};\n  const attrs: UnpackAttrs = {axis};\n\n  return ENGINE.runKernel(\n      Unpack, inputs as unknown as NamedTensorMap,\n      attrs as unknown as NamedAttrMap);\n}\n\nexport const unstack = /* @__PURE__ */ op({unstack_});\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../tensor';\nimport {TensorLike} from '../types';\nimport {searchSorted} from './search_sorted';\n\n/**\n * Searches for where a value would go in a sorted sequence.\n *\n * This is not a method for checking containment (like javascript in).\n *\n * The typical use case for this operation is \"binning\", \"bucketing\", or\n * \"discretizing\". The values are assigned to bucket-indices based on the edges\n * listed in 'sortedSequence'. This operation returns the bucket-index for each\n * value.\n *\n * The index returned corresponds to the first edge greater than the value.\n *\n * The axis is not settable for this operation. It always operates on the\n * innermost dimension (axis=-1). The operation will accept any number of outer\n * dimensions.\n *\n * Note: This operation assumes that 'upperBound' is sorted along the\n * innermost axis, maybe using 'sort(..., axis=-1)'. If the sequence is not\n * sorted no error is raised and the content of the returned tensor is not well\n * defined.\n *\n * ```js\n * const seq = tf.tensor1d([0, 3, 9, 10, 10]);\n * const values = tf.tensor1d([0, 4, 10]);\n * const result = tf.upperBound(seq, values);\n * result.print(); // [1, 2, 5]\n * ```\n * @param sortedSequence: N-D. Sorted sequence.\n * @param values: N-D. Search values.\n * @return An N-D int32 tensor the size of values containing the result of\n *     applying upper bound to each value. The result is not a global index to\n *     the entire Tensor, but the index in the last dimension.\n * @doc {heading: 'Operations', subheading: 'Evaluation'}\n */\nexport function upperBound(\n    sortedSequence: Tensor|TensorLike, values: Tensor|TensorLike): Tensor {\n  return searchSorted(sortedSequence, values, 'right');\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Tensor, Variable} from '../tensor';\nimport {DataType, Rank} from '../types';\n\n/**\n * Creates a new variable with the provided initial value.\n * ```js\n * const x = tf.variable(tf.tensor([1, 2, 3]));\n * x.assign(tf.tensor([4, 5, 6]));\n *\n * x.print();\n * ```\n *\n * @param initialValue Initial value for the tensor.\n * @param trainable If true, optimizers are allowed to update it.\n * @param name Name of the variable. Defaults to a unique id.\n * @param dtype If set, initialValue will be converted to the given type.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nexport function variable<R extends Rank>(\n    initialValue: Tensor<R>, trainable = true, name?: string,\n    dtype?: DataType): Variable<R> {\n  return ENGINE.makeVariable(initialValue, trainable, name, dtype) as\n      Variable<R>;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/** An implementation of the Where kernel shared between cpu and webgl */\n\nimport {buffer} from '../ops/buffer';\nimport {Tensor2D} from '../tensor';\nimport {TypedArray} from '../types';\n\nexport function whereImpl(condShape: number[], condVals: TypedArray): Tensor2D {\n  const indices = [];\n  for (let i = 0; i < condVals.length; i++) {\n    if (condVals[i]) {\n      indices.push(i);\n    }\n  }\n\n  const inBuffer = buffer(condShape, 'int32');\n\n  const out = buffer([indices.length, condShape.length], 'int32');\n  for (let i = 0; i < indices.length; i++) {\n    const loc = inBuffer.indexToLoc(indices[i]);\n    const offset = i * condShape.length;\n    out.values.set(loc, offset);\n  }\n  return out.toTensor() as Tensor2D;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {whereImpl} from '../backends/where_impl';\nimport {Tensor, Tensor2D} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\n/**\n * Returns the coordinates of true elements of condition.\n *\n * The coordinates are returned in a 2-D tensor where the first dimension (rows)\n * represents the number of true elements, and the second dimension (columns)\n * represents the coordinates of the true elements. Keep in mind, the shape of\n * the output tensor can vary depending on how many true values there are in\n * input. Indices are output in row-major order. The resulting tensor has the\n * shape `[numTrueElems, condition.rank]`.\n *\n * This is analogous to calling the python `tf.where(cond)` without an x or y.\n *\n * ```js\n * const cond = tf.tensor1d([false, false, true], 'bool');\n * const result = await tf.whereAsync(cond);\n * result.print();\n * ```\n *\n * @doc {heading: 'Operations', subheading: 'Logical'}\n */\nasync function whereAsync_(condition: Tensor|TensorLike): Promise<Tensor2D> {\n  const $condition =\n      convertToTensor(condition, 'condition', 'whereAsync', 'bool');\n  const vals = await $condition.data();\n  const res = whereImpl($condition.shape, vals);\n  if (condition !== $condition) {\n    $condition.dispose();\n  }\n  return res;\n}\n\nexport const whereAsync = whereAsync_;\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {gather} from './gather';\nimport {reshape} from './reshape';\nimport {squeeze} from './squeeze';\nimport {whereAsync} from './where_async';\n\n/**\n * Apply boolean mask to tensor.\n *\n * ```js\n * const tensor = tf.tensor2d([1, 2, 3, 4, 5, 6], [3, 2]);\n * const mask = tf.tensor1d([1, 0, 1], 'bool');\n * const result = await tf.booleanMaskAsync(tensor, mask);\n * result.print();\n * ```\n *\n * @param tensor N-D tensor.\n * @param mask K-D boolean tensor, K <= N and K must be known statically.\n * @param axis A 0-D int Tensor representing the axis in tensor to mask from.\n *     By default, axis is 0 which will mask from the first dimension.\n *     Otherwise K + axis <= N.\n *\n * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}\n */\nasync function booleanMaskAsync_(\n    tensor: Tensor|TensorLike, mask: Tensor|TensorLike,\n    axis?: number): Promise<Tensor> {\n  const $tensor = convertToTensor(tensor, 'tensor', 'boolMask');\n  const $mask = convertToTensor(mask, 'mask', 'boolMask', 'bool');\n\n  const axisFrom = axis == null ? 0 : axis;\n  const maskDim = $mask.rank;\n  const tensorShape = $tensor.shape;\n\n  util.assert(maskDim > 0, () => 'mask cannot be scalar');\n  util.assertShapesMatch(\n      tensorShape.slice(axisFrom, axisFrom + maskDim), $mask.shape,\n      `mask's shape must match the first K dimensions of tensor's shape,`);\n\n  let leadingSize = 1;\n  for (let i = axisFrom; i < axisFrom + maskDim; i++) {\n    leadingSize *= tensorShape[i];\n  }\n  const targetTensorShape =\n      tensorShape.slice(0, axisFrom)\n          .concat([leadingSize], tensorShape.slice(axisFrom + maskDim));\n  const reshapedTensor = reshape($tensor, targetTensorShape);\n  const reshapedMask = reshape($mask, [-1]);\n  const positivePositions = await whereAsync(reshapedMask);\n  const indices = squeeze(positivePositions, [1]);\n\n  const res = gather(reshapedTensor, indices, axisFrom);\n\n  // Ensure no memory leak.\n  if (tensor !== $tensor) {\n    $tensor.dispose();\n  }\n  if (mask !== $mask) {\n    $mask.dispose();\n  }\n  indices.dispose();\n  reshapedTensor.dispose();\n  reshapedMask.dispose();\n  positivePositions.dispose();\n\n  return res;\n}\n\nexport const booleanMaskAsync = booleanMaskAsync_;\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {tidy} from '../globals';\nimport {Transpose, TransposeAttrs, TransposeInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\nimport {complex} from './complex';\nimport {imag} from './imag';\nimport {neg} from './neg';\nimport {op} from './operation';\nimport {real} from './real';\n\n/**\n * Transposes the `tf.Tensor`. Permutes the dimensions according to `perm`.\n *\n * The returned `tf.Tensor`'s dimension `i` will correspond to the input\n * dimension `perm[i]`. If `perm` is not given, it is set to `[n-1...0]`,\n * where `n` is the rank of the input `tf.Tensor`. Hence by default, this\n * operation performs a regular matrix transpose on 2-D input `tf.Tensor`s.\n *\n * ```js\n * const a = tf.tensor2d([1, 2, 3, 4, 5, 6], [2, 3]);\n *\n * a.transpose().print();  // or tf.transpose(a)\n * ```\n *\n * @param x The tensor to transpose.\n * @param perm The permutation of the dimensions of a.\n * @param conjugate Will conjugate complex input if true.\n *\n * @doc {heading: 'Operations', subheading: 'Matrices'}\n */\nfunction transpose_<T extends Tensor>(\n    x: T|TensorLike, perm?: number[], conjugate?: boolean): T {\n  const $x = convertToTensor(x, 'x', 'transpose');\n\n  if (perm == null) {\n    perm = $x.shape.map((s, i) => i).reverse();\n  }\n  util.assert(\n      $x.rank === perm.length,\n      () => `Error in transpose: rank of input ${$x.rank} ` +\n          `must match length of perm ${perm}.`);\n  perm.forEach(axis => {\n    util.assert(\n        axis >= 0 && axis < $x.rank,\n        () => `All entries in 'perm' must be between 0 and ${$x.rank - 1}` +\n            ` but got ${perm}`);\n  });\n\n  if ($x.rank <= 1) {\n    return $x.clone();\n  }\n\n  const inputs: TransposeInputs = {x: $x};\n  const attrs: TransposeAttrs = {perm};\n\n  if ($x.dtype === 'complex64') {\n    return tidy(() => {\n      let $real = real($x);\n      let $imag = imag($x);\n      $real = ENGINE.runKernel(\n          Transpose, {x: $real} as unknown as NamedTensorMap,\n          attrs as unknown as NamedAttrMap);\n      $imag = ENGINE.runKernel(\n          Transpose, {x: $imag} as unknown as NamedTensorMap,\n          attrs as unknown as NamedAttrMap);\n      if (conjugate) {\n        $imag = neg($imag);\n      }\n      return complex($real, $imag);\n    });\n  }\n\n  return ENGINE.runKernel(\n      Transpose, inputs as unknown as NamedTensorMap,\n      attrs as unknown as NamedAttrMap);\n}\n\nexport const transpose = /* @__PURE__ */ op({transpose_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Scalar, Tensor} from '../tensor';\nimport {assertTypesMatch} from '../tensor_util';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {add} from './add';\nimport {div} from './div';\nimport {mul} from './mul';\nimport {op} from './operation';\nimport {pow} from './pow';\nimport {scalar} from './scalar';\nimport {sub} from './sub';\n\n/**\n * Compute the moving average of a variable.\n *\n * Without zeroDebias, the moving average operation is defined by:\n *   `v += delta`\n * where\n *   `delta = (1 - decay) * (x - v)`\n *\n * With zeroDebias (default), the `delta` term is scaled to debias the\n * effect of the (assumed) zero-initialization of `v`.\n *   `delta /= (1 - decay ^ step)`\n *\n * For more details on the zero-debiasing algorithm, see:\n *   https://arxiv.org/abs/1412.6980\n *\n * Note that this function is completely stateless and does not keep track of\n * step count. The step count needs to be maintained by the caller and passed\n * in as `step`.\n *\n * @param v The current moving average value.\n * @param x New input value, must have the same shape and dtype as `v`.\n * @param decay The decay factor. Typical values are 0.95 and 0.99.\n * @param step Step count.\n * @param zeroDebias: Whether zeroDebias is to be performed (default: `true`).\n * @returns The new moving average value.\n *\n * @doc {heading: 'Operations', subheading: 'Moving Average'}\n */\nfunction movingAverage_<T extends Tensor>(\n    v: T|TensorLike, x: T|TensorLike, decay: number|Scalar,\n    step?: number|Scalar, zeroDebias = true): T {\n  const $v = convertToTensor(v, 'v', 'movingAverage');\n  const $x = convertToTensor(x, 'x', 'movingAverage');\n  const $decay = convertToTensor(decay, 'decay', 'movingAverage');\n\n  assertTypesMatch($v, $x);\n  util.assert(\n      util.arraysEqual($v.shape, $x.shape), () => 'Shape mismatch in v and x');\n\n  const one = scalar(1);\n  const oneMinusDecay = sub(one, $decay);\n\n  let update = mul(sub($x, $v), oneMinusDecay);\n  if (zeroDebias) {\n    util.assert(\n        step != null, () => 'When using zeroDebias: true, step is required.');\n    const $step = convertToTensor(step, 'step', 'movingAverage');\n    update = div(update, sub(one, pow($decay, $step)));\n  }\n  return add($v, update);\n}\n\nexport const movingAverage = /* @__PURE__ */ op({movingAverage_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { TensorInfo } from '../tensor_info';\nimport {Tensor} from '../tensor';\nimport {computeStrides, sizeFromShape} from '../util';\n\n/**\n * Check whether updates.shape = indices.shape[:batchDim] +\n * shape[sliceDim:]\n *\n * @param x The input tensor.\n */\nexport function validateUpdateShape(\n    shape: number[], indices: Tensor, updates: Tensor) {\n  const sliceDim = (indices.rank > 1) ? indices.shape[indices.rank - 1] : 1;\n  const batchDim = (indices.rank > 1) ? indices.rank - 1 : 1;\n\n  const shapeError = 'Must have updates.shape = indices.shape[:batchDim] + ' +\n      `shape[sliceDim:], got updates.shape: ${updates.shape}` +\n      `, indices.shape: ${indices.shape}, shape: ${shape}` +\n      `, sliceDim: ${sliceDim}, and batchDim: ${batchDim}.`;\n\n  if (updates.rank < batchDim) {\n    throw new Error(shapeError + ` update.rank < ${batchDim}. `);\n  }\n  if (shape.length < sliceDim + (updates.rank - batchDim)) {\n    throw new Error(\n        shapeError +\n        ` Output shape length < ${sliceDim + (updates.rank - batchDim)}`);\n  }\n  if (updates.rank !== batchDim + shape.length - sliceDim) {\n    throw new Error(\n        shapeError + ` update.rank != ${batchDim + shape.length - sliceDim}`);\n  }\n  for (let d = 0; d < batchDim; ++d) {\n    if (updates.shape[d] !== indices.shape[d]) {\n      throw new Error(\n          shapeError +\n          ` updates.shape[${d}] (${updates.shape[d]}) != indices.shape[${d}] (${\n              indices.shape[d]}).`);\n    }\n  }\n  for (let d = 0; d < updates.rank - batchDim; ++d) {\n    if (updates.shape[d + batchDim] !== shape[d + sliceDim]) {\n      throw new Error(\n          shapeError +\n          ` updates.shape[${d + batchDim}] (${\n              updates.shape[d + batchDim]}) != shape[${d + batchDim}] (${\n              shape[d + batchDim]})`);\n    }\n  }\n}\n\nexport interface ScatterShapeInfo {\n  sliceRank: number;\n  numUpdates: number;\n  sliceSize: number;\n  strides: number[];\n  outputSize: number;\n}\n/**\n * Validate scatter nd inputs.\n *\n * @param update The tensor contains the update values.\n * @param indices The tensor contains the indices for the update values.\n * @param shape The shape of the output tensor.\n */\nexport function validateInput(\n    updates: Tensor, indices: Tensor, shape: number[]) {\n  if (indices.rank < 1) {\n    throw new Error(\n        'tf.scatterND() expects the indices to be rank 1 or higher,' +\n        ` but the rank was ${indices.rank}.`);\n  }\n  if (updates.rank < 1) {\n    throw new Error(\n        'tf.scatterND() expects the updates to be rank 1 or higher,' +\n        ` but the rank was ${updates.rank}.`);\n  }\n  if (indices.dtype !== 'int32') {\n    throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${\n        indices.dtype}`);\n  }\n  if (shape.length < 1) {\n    throw new Error(\n        `Output rank must be greater or equal to 1, but got shape: ${shape}`);\n  }\n\n  if (shape.length === 0) {\n    if (indices.size === 0) {\n      throw new Error(`Indices specified for empty output. indices shape: ${\n          indices.shape}`);\n    }\n    if (updates.size === 0) {\n      throw new Error(`Updates specified for empty output. updates shape: ${\n          updates.shape}`);\n    }\n  }\n\n  validateUpdateShape(shape, indices, updates);\n}\n\n/**\n * Calculate the shape information for the output.\n *\n * @param update The tensor contains the update values.\n * @param indices The tensor contains the indices for the update values.\n * @param shape The shape of the output tensor.\n *\n * @returns ScatterShapeInfo\n */\nexport function calculateShapes(\n    updates: TensorInfo, indices: TensorInfo,\n    shape: number[]): ScatterShapeInfo {\n  // Calculate the number of dimensions in indices\n  const indicesRank = indices.shape.length;\n  const sliceRank = (indicesRank > 1) ? indices.shape[indicesRank - 1] : 1;\n\n  // Calculate the number of elements that make up each slice of our updated\n  // tensor. This allows us to work with flattened tensors and copy over whole\n  // slices at a time.\n  const totalNd = shape.length;\n\n  let sliceSize = 1;\n  for (let i = sliceRank; i < totalNd; ++i) {\n    sliceSize *= shape[i];\n  }\n\n  const safeSliceDim = (sliceRank < 1) ? 1 : sliceRank;\n  const numUpdates = sizeFromShape(indices.shape) / safeSliceDim;\n\n  const strides = [...computeStrides(shape.slice(0, sliceRank)), 1];\n  const outputSize = sizeFromShape(shape);\n  return {sliceRank, numUpdates, sliceSize, strides, outputSize};\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {ScatterNd, ScatterNdAttrs, ScatterNdInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {Rank, ShapeMap, TensorLike} from '../types';\nimport {assertNonNegativeIntegerDimensions} from '../util_base';\n\nimport {op} from './operation';\nimport * as scatter_nd_util from './scatter_nd_util';\n\n/**\n * Creates a new tensor by applying sparse updates to individual\n * values or slices within a zero tensor of the given shape tensor according to\n * indices. This operator is the inverse of the `tf.gatherND` operator which\n * extracts values or slices from a given tensor.\n *\n * ```js\n * const indices = tf.tensor2d([4, 3, 1, 7], [4, 1], 'int32');\n * const updates = tf.tensor1d([9, 10, 11, 12]);\n * const shape = [8];\n * tf.scatterND(indices, updates, shape).print() //[0, 11, 0, 10, 9, 0, 0, 12]\n * ```\n *\n * @param indices The tensor contains the indices into the output tensor.\n * @param updates The tensor contains the value for the indices.\n * @param shape: The shape of the output tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Slicing and Joining'}\n */\nfunction scatterND_<R extends Rank>(\n    indices: Tensor|TensorLike, updates: Tensor|TensorLike,\n    shape: ShapeMap[R]): Tensor<R> {\n  assertNonNegativeIntegerDimensions(shape);\n  const $indices = convertToTensor(indices, 'indices', 'scatterND', 'int32');\n  const $updates = convertToTensor(updates, 'updates', 'scatterND');\n  scatter_nd_util.validateInput($updates, $indices, shape);\n\n  const inputs: ScatterNdInputs = {indices: $indices, updates: $updates};\n  const attrs: ScatterNdAttrs = {shape};\n\n  // tslint:disable-next-line: no-unnecessary-type-assertion\n  return ENGINE.runKernel(\n             ScatterNd, inputs as unknown as NamedTensorMap,\n             attrs as unknown as NamedAttrMap) as Tensor<R>;\n}\n\nexport const scatterND = /* @__PURE__ */ op({scatterND_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Tensor} from '../tensor';\n\n/**\n * Validate sparseToDense inputs.\n *\n * @param sparseIndices A 0-D, 1-D, or 2-D Tensor of type int32.\n * sparseIndices[i] contains the complete index where sparseValues[i] will be\n * placed.\n * @param sparseValues A 0-D or 1-D Tensor. Values\n * corresponding to each row of sparseIndices, or a scalar value to be used for\n * all sparse indices.\n * @param outputShape number[]. Shape of the dense output tensor.\n * @param validateIndices boolean. indice validation is not supported, error\n * will be thrown if it is set.\n */\nexport function validateInput(\n    sparseIndices: Tensor, sparseValues: Tensor, outputShape: number[],\n    defaultValues: Tensor) {\n  if (sparseIndices.dtype !== 'int32') {\n    throw new Error(\n        'tf.sparseToDense() expects the indices to be int32 type,' +\n        ` but the dtype was ${sparseIndices.dtype}.`);\n  }\n  if (sparseIndices.rank > 2) {\n    throw new Error(\n        'sparseIndices should be a scalar, vector, or matrix,' +\n        ` but got shape ${sparseIndices.shape}.`);\n  }\n\n  const numElems = sparseIndices.rank > 0 ? sparseIndices.shape[0] : 1;\n  const numDims = sparseIndices.rank > 1 ? sparseIndices.shape[1] : 1;\n\n  if (outputShape.length !== numDims) {\n    throw new Error(\n        'outputShape has incorrect number of elements:,' +\n        ` ${outputShape.length}, should be: ${numDims}.`);\n  }\n\n  const numValues = sparseValues.size;\n  if (!(sparseValues.rank === 0 ||\n        sparseValues.rank === 1 && numValues === numElems)) {\n    throw new Error(\n        'sparseValues has incorrect shape ' +\n        `${sparseValues.shape}, should be [] or [${numElems}]`);\n  }\n\n  if (sparseValues.dtype !== defaultValues.dtype) {\n    throw new Error('sparseValues.dtype must match defaultValues.dtype');\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {SparseToDense, SparseToDenseAttrs, SparseToDenseInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport * as sparse_to_dense from '../ops/sparse_to_dense_util';\nimport {Scalar, Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {Rank, ScalarLike, ShapeMap, TensorLike} from '../types';\nimport {assertNonNegativeIntegerDimensions} from '../util_base';\n\nimport {op} from './operation';\n\n/**\n * Converts a sparse representation into a dense tensor.\n *\n * Builds an array dense with shape outputShape such that:\n *\n * // If sparseIndices is scalar\n * dense[i] = (i == sparseIndices ? sparseValues : defaultValue)\n *\n * // If sparseIndices is a vector, then for each i\n * dense[sparseIndices[i]] = sparseValues[i]\n *\n * // If sparseIndices is an n by d matrix, then for each i in [0, n)\n * dense[sparseIndices[i][0], ..., sparseIndices[i][d-1]] = sparseValues[i]\n * All other values in dense are set to defaultValue. If sparseValues is a\n * scalar, all sparse indices are set to this single value.\n *\n * If indices are repeated the final value is summed over all values for those\n * indices.\n *\n * ```js\n * const indices = tf.tensor1d([4, 5, 6, 1, 2, 3], 'int32');\n * const values = tf.tensor1d([10, 11, 12, 13, 14, 15], 'float32');\n * const shape = [8];\n * tf.sparseToDense(indices, values, shape).print();\n * ```\n *\n * @param sparseIndices A 0-D, 1-D, or 2-D Tensor of type int32.\n * sparseIndices[i] contains the complete index where sparseValues[i] will be\n * placed.\n * @param sparseValues A 0-D or 1-D Tensor. Values\n * corresponding to each row of sparseIndices, or a scalar value to be used for\n * all sparse indices.\n * @param outputShape Shape of the dense output tensor. The type is inferred.\n * @param defaultValue Scalar. Value to set for indices not specified in\n * sparseIndices. Defaults to zero.\n *\n * @doc {heading: 'Operations', subheading: 'Normalization'}\n */\nfunction sparseToDense_<R extends Rank>(\n    sparseIndices: Tensor|TensorLike, sparseValues: Tensor|TensorLike,\n    outputShape: ShapeMap[R], defaultValue: Scalar|ScalarLike = 0): Tensor<R> {\n  assertNonNegativeIntegerDimensions(outputShape);\n\n  const $sparseIndices =\n      convertToTensor(sparseIndices, 'sparseIndices', 'sparseToDense', 'int32');\n  const $sparseValues = convertToTensor(\n      sparseValues, 'sparseValues', 'sparseToDense', 'string_or_numeric');\n  const $defaultValue = convertToTensor(\n      defaultValue, 'defaultValue', 'sparseToDense', $sparseValues.dtype);\n\n  sparse_to_dense.validateInput(\n      $sparseIndices, $sparseValues, outputShape, $defaultValue);\n\n  const inputs: SparseToDenseInputs = {\n    sparseIndices: $sparseIndices,\n    sparseValues: $sparseValues,\n    defaultValue: $defaultValue\n  };\n\n  const attrs: SparseToDenseAttrs = {outputShape};\n\n  return ENGINE.runKernel(\n      SparseToDense, inputs as unknown as NamedTensorMap,\n      attrs as unknown as NamedAttrMap);\n}\n\nexport const sparseToDense = /* @__PURE__ */ op({sparseToDense_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {GatherNd, GatherNdInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport {op} from './operation';\n\n/**\n * Gather slices from input tensor into a Tensor with shape specified by\n * `indices`.\n *\n * `indices` is a K-dimensional integer tensor, best thought of as a\n * (K-1)-dimensional tensor of indices into input, where each element defines a\n * slice of input:\n * output[\\\\(i_0, ..., i_{K-2}\\\\)] = input[indices[\\\\(i_0, ..., i_{K-2}\\\\)]]\n *\n * Whereas in `tf.gather`, `indices` defines slices into the first dimension of\n * input, in `tf.gatherND`, `indices` defines slices into the first N dimensions\n * of input, where N = indices.shape[-1].\n *\n * The last dimension of indices can be at most the rank of input:\n * indices.shape[-1] <= input.rank\n *\n * The last dimension of `indices` corresponds to elements\n * (if indices.shape[-1] == input.rank) or slices\n * (if indices.shape[-1] < input.rank) along dimension indices.shape[-1] of\n * input.\n * The output tensor has shape\n * indices.shape[:-1] + input.shape[indices.shape[-1]:]\n *\n * Note that on CPU, if an out of bound index is found, an error is returned. On\n * GPU, if an out of bound index is found, a 0 is stored in the corresponding\n * output value.\n *\n * ```js\n * const indices = tf.tensor2d([0, 1, 1, 0], [2,2], 'int32');\n * const input = tf.tensor2d([9, 10, 11, 12], [2, 2]);\n * tf.gatherND(input, indices).print() // [10, 11]\n * ```\n *\n * @param x The tensor from which to gather values.\n * @param indices Index tensor, must be of type int32.\n *\n * @doc {heading: 'Operations', subheading: 'Slicing and Joining'}\n */\nfunction gatherND_(x: Tensor|TensorLike, indices: Tensor|TensorLike): Tensor {\n  const $indices = convertToTensor(indices, 'indices', 'gatherND', 'int32');\n  const $x = convertToTensor(x, 'x', 'gatherND', 'string_or_numeric');\n\n  const inputs: GatherNdInputs = {params: $x, indices: $indices};\n\n  return ENGINE.runKernel(GatherNd, inputs as unknown as NamedTensorMap);\n}\n\nexport const gatherND = /* @__PURE__ */ op({gatherND_});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {add} from './add';\nimport {div} from './div';\nimport {getNoiseShape} from './dropout_util';\nimport {floor} from './floor';\nimport {mul} from './mul';\nimport {op} from './operation';\nimport {randomUniform} from './random_uniform';\n\n/**\n * Computes dropout.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 2, 1]);\n * const rate = 0.75;\n * const output = tf.dropout(x, rate);\n * output.print();\n * ```\n *\n * @param x A floating point Tensor or TensorLike.\n * @param rate A float in the range [0, 1). The probability that each element\n *   of x is discarded.\n * @param noiseShape An array of numbers of type int32, representing the\n * shape for randomly generated keep/drop flags. If the noiseShape has null\n * value, it will be automatically replaced with the x's relative dimension\n * size. Optional.\n * @param seed Used to create random seeds. Optional.\n * @returns A Tensor of the same shape of x.\n *\n * @doc {heading: 'Operations', subheading: 'Dropout'}\n */\nfunction dropout_(\n    x: Tensor|TensorLike, rate: number, noiseShape?: number[],\n    seed?: number|string): Tensor {\n  const $x = convertToTensor(x, 'x', 'dropout');\n\n  util.assert(\n      $x.dtype === 'float32',\n      () => `x has to be a floating point tensor since it's going to be ` +\n          `scaled, but got a ${$x.dtype} tensor instead.`);\n  util.assert(\n      rate >= 0 && rate < 1,\n      () => `rate must be a float in the range [0, 1), but got ${rate}.`);\n\n  if (rate === 0) {\n    return x instanceof Tensor ? $x.clone() : $x;\n  }\n\n  const $noiseShape = getNoiseShape($x, noiseShape);\n  const keepProb = 1 - rate;\n  const multiplier = div(\n      floor(add(randomUniform($noiseShape, 0, 1, 'float32', seed), keepProb)),\n      keepProb);\n\n  return mul($x, multiplier);\n}\n\nexport const dropout = /* @__PURE__ */ op({dropout_});\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../tensor';\nimport * as util from '../util';\n\n/**\n * Normalize noise shape based on provided tensor and noise shape.\n *\n * @param x Tensor.\n * @param noiseShape The shape for the randomly generated keep/drop flags, as\n *   an array of numbers. Optional.\n * @returns Normalized noise shape.\n */\nexport function getNoiseShape(x: Tensor, noiseShape?: number[]): number[] {\n  if (noiseShape == null) {\n    return x.shape.slice();\n  }\n  if (util.arraysEqual(x.shape, noiseShape)) {\n    return noiseShape;\n  }\n  if (x.shape.length === noiseShape.length) {\n    const newDimension: number[] = [];\n    for (let i = 0; i < x.shape.length; i++) {\n      if (noiseShape[i] == null && x.shape[i] != null) {\n        newDimension.push(x.shape[i]);\n      } else {\n        newDimension.push(noiseShape[i]);\n      }\n    }\n    return newDimension;\n  }\n\n  return noiseShape;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor1D} from '../tensor';\nimport {tensor1d} from './tensor1d';\n\nexport function enclosingPowerOfTwo(value: number) {\n  // Return 2**N for integer N such that 2**N >= value.\n  return Math.floor(Math.pow(2, Math.ceil(Math.log(value) / Math.log(2.0))));\n}\n\nexport function cosineWindow(\n    windowLength: number, a: number, b: number): Tensor1D {\n  const even = 1 - windowLength % 2;\n  const newValues = new Float32Array(windowLength);\n  for (let i = 0; i < windowLength; ++i) {\n    const cosArg = (2.0 * Math.PI * i) / (windowLength + even - 1);\n    newValues[i] = a - b * Math.cos(cosArg);\n  }\n  return tensor1d(newValues, 'float32');\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport {assert, assertShapesMatch, getTypedArrayFromDType} from '../util';\nimport {tensor} from './tensor';\n\n/**\n * Returns whether the targets are in the top K predictions.\n *\n * ```js\n * const predictions = tf.tensor2d([[20, 10, 40, 30], [30, 50, -20, 10]]);\n * const targets = tf.tensor1d([2, 0]);\n * const precision = await tf.inTopKAsync(predictions, targets);\n * precision.print();\n * ```\n * @param predictions 2-D or higher `tf.Tensor` with last dimension being\n *     at least `k`.\n * @param targets 1-D or higher `tf.Tensor`.\n * @param k Optional Number of top elements to look at for computing precision,\n *     default to 1.\n *\n * @doc {heading: 'Operations', subheading: 'Evaluation'}\n */\nasync function inTopKAsync_<T extends Tensor, U extends Tensor>(\n    predictions: T|TensorLike, targets: U|TensorLike, k = 1): Promise<U> {\n  const $predictions = convertToTensor(predictions, 'predictions', 'inTopK');\n  const $targets = convertToTensor(targets, 'targets', 'inTopK');\n\n  assert(\n      $predictions.rank > 1,\n      () => 'inTopK() expects the predictions to be of rank 2 or higher, ' +\n          `but got ${$predictions.rank}`);\n  assert(\n      $predictions.rank - 1 === $targets.rank,\n      () => `predictions rank should be 1 larger than ` +\n          `targets rank, but got predictions rank ` +\n          `${$predictions.rank} and targets rank ${$targets.rank}`);\n  assertShapesMatch(\n      $predictions.shape.slice(0, $predictions.shape.length - 1),\n      $targets.shape,\n      `predictions's shape should be align with the targets' shape, ` +\n          'except the last dimension.');\n  const lastDim = $predictions.shape[$predictions.shape.length - 1];\n  assert(\n      k > 0 && k <= lastDim,\n      () => `'k' passed to inTopK() must be > 0 && <= the predictions last ` +\n          `dimension (${lastDim}), but got ${k}`);\n\n  const predictionsVals = await $predictions.data();\n  const targetsVals = await $targets.data();\n\n  // Reshape predictionsVals into a 2d tensor [batch, lastDim]\n  // and look up topK along lastDim.\n  const [batch, size] = [predictionsVals.length / lastDim, lastDim];\n  const precision = getTypedArrayFromDType('bool', batch);\n\n  for (let b = 0; b < batch; b++) {\n    const offset = b * size;\n    const vals = predictionsVals.subarray(offset, offset + size);\n    const valAndInd: Array<{value: number, index: number}> = [];\n    for (let i = 0; i < vals.length; i++) {\n      valAndInd.push({value: vals[i], index: i});\n    }\n    valAndInd.sort((a, b) => b.value - a.value);\n\n    precision[b] = 0;\n    for (let i = 0; i < k; i++) {\n      if (valAndInd[i].index === targetsVals[b]) {\n        precision[b] = 1;\n        break;\n      }\n    }\n  }\n\n  if (predictions !== $predictions) {\n    $predictions.dispose();\n  }\n  if (targets !== $targets) {\n    $targets.dispose();\n  }\n\n  // Output precision has the same shape as targets.\n  return tensor(precision, $targets.shape, 'bool') as U;\n}\n\nexport const inTopKAsync = inTopKAsync_;\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {Conv2DBackpropFilter, Conv2DBackpropFilterAttrs, Conv2DBackpropFilterInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor3D, Tensor4D} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport * as util from '../util';\n\nimport * as conv_util from './conv_util';\nimport {op} from './operation';\nimport {reshape} from './reshape';\n\n/**\n * Computes the derivative of the filter of a 2D convolution.\n *\n * @param x The input tensor, of rank 4 or rank 3 of shape\n *     [batch, height, width, inChannels]. If rank 3, batch of 1 is assumed.\n * @param dy The dy image, of rank 4 or rank 3, of shape\n *     [batch, height, width, outDepth]. If rank 3, batch of 1 is assumed.\n * @param filterShape The shape of the filter, length 4,\n *     [filterHeight, filterWidth, inDepth, outDepth].\n * @param strides The strides of the convolution: [strideHeight,\n * strideWidth].\n * @param pad A string from: 'same', 'valid'. The type of padding algorithm\n *     used in the forward prop of the op.\n * @param dataFormat: An optional string from: \"NHWC\", \"NCHW\". Defaults to\n *     \"NHWC\". Specify the data format of the input and output data. With the\n *     default format \"NHWC\", the data is stored in the order of: [batch,\n *     height, width, channels].\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n */\nfunction conv2DBackpropFilter_<T extends Tensor3D|Tensor4D>(\n    x: T, dy: T, filterShape: [number, number, number, number],\n    strides: [number, number]|number,\n    pad: 'valid'|'same'|number|conv_util.ExplicitPadding,\n    dataFormat: 'NHWC'|'NCHW' = 'NHWC',\n    dimRoundingMode?: 'floor'|'round'|'ceil'): Tensor4D {\n  let x4D = x as Tensor4D;\n  if (x.rank === 3) {\n    x4D = reshape(x, [1, x.shape[0], x.shape[1], x.shape[2]]);\n  }\n  let dy4D = dy as Tensor4D;\n  if (dy4D.rank === 3) {\n    dy4D = reshape(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2]]);\n  }\n  util.assert(\n      x4D.rank === 4,\n      () => `Error in conv2dDerFilter: input must be rank 4, but got shape ` +\n          `${x4D.shape}.`);\n  util.assert(\n      dy4D.rank === 4,\n      () => `Error in conv2dDerFilter: dy must be rank 4, but got shape ` +\n          `${dy4D.shape}.`);\n  util.assert(\n      filterShape.length === 4,\n      () => `Error in conv2dDerFilter: filterShape must be length 4, but got ` +\n          `${filterShape}.`);\n  const inDepth = dataFormat === 'NHWC' ? x4D.shape[3] : x4D.shape[1];\n  const outDepth = dataFormat === 'NHWC' ? dy4D.shape[3] : dy4D.shape[1];\n  util.assert(\n      inDepth === filterShape[2],\n      () => `Error in conv2dDerFilter: depth of input ${inDepth}) must ` +\n          `match input depth in filter (${filterShape[2]}.`);\n  util.assert(\n      outDepth === filterShape[3],\n      () => `Error in conv2dDerFilter: depth of dy (${outDepth}) must ` +\n          `match output depth for filter (${filterShape[3]}).`);\n  conv_util.checkPadOnDimRoundingMode('conv2dDerFilter', pad, dimRoundingMode);\n  const inputs: Conv2DBackpropFilterInputs = {x: x4D, dy: dy4D};\n  const attrs: Conv2DBackpropFilterAttrs =\n      {strides, pad, dataFormat, dimRoundingMode, filterShape};\n\n  // tslint:disable-next-line: no-unnecessary-type-assertion\n  return ENGINE.runKernel(\n             Conv2DBackpropFilter, inputs as unknown as NamedTensorMap,\n             attrs as unknown as NamedAttrMap) as Tensor4D;\n}\n\nexport const conv2DBackpropFilter = /* @__PURE__ */ op({conv2DBackpropFilter_});\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../tensor';\n\nimport * as broadcast_util from './broadcast_util';\nimport {elu} from './elu';\nimport {Activation} from './fused_types';\nimport {leakyRelu} from './leaky_relu';\nimport {mul} from './mul';\nimport {prelu} from './prelu';\nimport {relu} from './relu';\nimport {relu6} from './relu6';\nimport {reshape} from './reshape';\nimport {sigmoid} from './sigmoid';\nimport {step} from './step';\nimport {sum} from './sum';\n\n// Returns gradient for fused activation.\nexport function getFusedDyActivation(\n    dy: Tensor, y: Tensor, activation: Activation): Tensor {\n  if (activation == null || activation === 'linear') {\n    return dy;\n  }\n  if (activation === 'relu') {\n    return mul(dy, step(y));\n  }\n  throw new Error(\n      `Cannot compute gradient for fused activation ${activation}.`);\n}\n\n// Returns gradient for fused bias.\nexport function getFusedBiasGradient(\n    bias: Tensor, dyActivation: Tensor): Tensor {\n  let res = dyActivation;\n  const reduceAxes =\n      broadcast_util.getReductionAxes(bias.shape, dyActivation.shape);\n  if (reduceAxes.length > 0) {\n    res = sum(res, reduceAxes);\n  }\n  return reshape(res, bias.shape);\n}\n\nexport function applyActivation(\n    x: Tensor, activation: Activation, preluActivationWeights?: Tensor,\n    leakyreluAlpha?: number): Tensor {\n  if (activation === 'linear') {\n    return x;\n  } else if (activation === 'relu') {\n    return relu(x);\n  } else if (activation === 'elu') {\n    return elu(x);\n  } else if (activation === 'relu6') {\n    return relu6(x);\n  } else if (activation === 'prelu') {\n    return prelu(x, preluActivationWeights);\n  } else if (activation === 'leakyrelu') {\n    return leakyRelu(x, leakyreluAlpha);\n  } else if (activation === 'sigmoid') {\n    return sigmoid(x);\n  }\n  throw new Error(`Unknown fused activation ${activation}.`);\n}\n\n// Whether we should call fused ops.\nexport const shouldFuse = (gradientDepth: number, activation: Activation) => {\n  const gradientMode = gradientDepth > 0;\n  return !gradientMode || activation === 'linear';\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../../engine';\nimport {customGrad} from '../../gradients';\nimport {FusedConv2D, FusedConv2DAttrs, FusedConv2DInputs} from '../../kernel_names';\nimport {NamedAttrMap} from '../../kernel_registry';\nimport {Tensor, Tensor3D, Tensor4D} from '../../tensor';\nimport {GradSaveFunc, NamedTensorMap} from '../../tensor_types';\nimport {makeTypesMatch} from '../../tensor_util';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\nimport * as util from '../../util';\nimport {add} from '../add';\nimport * as broadcast_util from '../broadcast_util';\nimport {conv2d as unfusedConv2d} from '../conv2d';\nimport {conv2DBackpropFilter} from '../conv2d_backprop_filter';\nimport {conv2DBackpropInput} from '../conv2d_backprop_input';\nimport * as conv_util from '../conv_util';\nimport {Activation} from '../fused_types';\nimport {applyActivation, getFusedBiasGradient, getFusedDyActivation, shouldFuse} from '../fused_util';\nimport {op} from '../operation';\nimport {reshape} from '../reshape';\n\n/**\n * Computes a 2D convolution over the input x, optionally fused with adding a\n * bias and applying an activation.\n *\n * ```js\n * const inputDepth = 2;\n * const inShape = [2, 2, 2, inputDepth];\n * const outputDepth = 2;\n * const fSize = 1;\n * const pad = 0;\n * const strides = 1;\n *\n * const x = tf.tensor4d( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n * 16], inShape);\n * const w = tf.tensor4d([-1, 1, -2, 0.5], [fSize, fSize, inputDepth,\n * outputDepth]);\n *\n * tf.fused.conv2d({ x, filter: w, strides, pad, dataFormat: 'NHWC',\n * dilations: [1, 1], bias: tf.scalar(5), activation: 'relu' }).print();\n * ```\n *\n * @param obj An object with the following properties:\n * @param x The input tensor, of rank 4 or rank 3, of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is\n * assumed.\n * @param filter The filter, rank 4, of shape\n *     `[filterHeight, filterWidth, inDepth, outDepth]`.\n * @param strides The strides of the convolution: `[strideHeight,\n * strideWidth]`.\n * @param pad The type of padding algorithm.\n *   - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *   - `valid` output will be smaller than input if filter is larger\n *       than 1x1.\n *   - For more info, see this guide:\n *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](\n *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)\n * @param dataFormat An optional string from: \"NHWC\", \"NCHW\". Defaults to\n *     \"NHWC\". Specify the data format of the input and output data. With the\n *     default format \"NHWC\", the data is stored in the order of: [batch,\n *     height, width, channels]. Only \"NHWC\" is currently supported.\n * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`\n *     in which we sample input values across the height and width dimensions\n *     in atrous convolution. Defaults to `[1, 1]`. If `dilations` is a single\n *     number, then `dilationHeight == dilationWidth`. If it is greater than\n *     1, then all values of `strides` must be 1.\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n * @param bias Tensor to be added to the result.\n * @param activation Name of activation kernel (defaults to `linear`) to be\n *     applied\n *      after biasAdd.\n * @param preluActivationWeights Tensor of prelu weights to be applied as part\n *     of a `prelu` activation, typically the same shape as `x`.\n * @param leakyreluAlpha Optional. Alpha to be applied as part of a `leakyrelu`\n *     activation.\n */\nfunction fusedConv2d_<T extends Tensor3D|Tensor4D>({\n  x,\n  filter,\n  strides,\n  pad,\n  dataFormat = 'NHWC',\n  dilations = [1, 1],\n  dimRoundingMode,\n  bias,\n  activation = 'linear',\n  preluActivationWeights,\n  leakyreluAlpha\n}: {\n  x: T|TensorLike,\n  filter: Tensor4D|TensorLike,\n  strides: [number, number]|number,\n  pad: 'valid'|'same'|number|conv_util.ExplicitPadding,\n  dataFormat?: 'NHWC'|'NCHW',\n  dilations?: [number, number]|number,\n  dimRoundingMode?: 'floor'|'round'|'ceil',\n  bias?: Tensor|TensorLike,\n  activation?: Activation,\n  preluActivationWeights?: Tensor,\n  leakyreluAlpha?: number\n}): T {\n  activation = activation || 'linear';\n\n  if (shouldFuse(ENGINE.state.gradientDepth, activation) === false) {\n    // TODO: Transpose bias and preluActivationWeights properly for NCHW\n    // format before computation.\n    util.assert(\n        dataFormat === 'NHWC',\n        () => `Error in fused conv2d: got dataFormat of ${dataFormat} but ` +\n            `only NHWC is currently supported for the case of gradient depth ` +\n            `is 0 and the activation is not linear.`);\n\n    let result = unfusedConv2d(\n        x, filter, strides, pad, dataFormat, dilations, dimRoundingMode);\n    if (bias != null) {\n      result = add(result, bias);\n    }\n\n    return applyActivation(\n               result, activation, preluActivationWeights, leakyreluAlpha) as T;\n  }\n\n  const $x = convertToTensor(x, 'x', 'conv2d', 'float32');\n  const $filter = convertToTensor(filter, 'filter', 'conv2d', 'float32');\n\n  let x4D = $x as Tensor4D;\n  let reshapedTo4D = false;\n\n  if ($x.rank === 3) {\n    reshapedTo4D = true;\n    x4D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);\n  }\n  util.assert(\n      x4D.rank === 4,\n      () => `Error in fused conv2d: input must be rank 4, but got rank ` +\n          `${x4D.rank}.`);\n  util.assert(\n      $filter.rank === 4,\n      () => `Error in fused conv2d: filter must be rank 4, but got rank ` +\n          `${$filter.rank}.`);\n  conv_util.checkPadOnDimRoundingMode('fused conv2d', pad, dimRoundingMode);\n  const inputChannels = dataFormat === 'NHWC' ? x4D.shape[3] : x4D.shape[1];\n  util.assert(\n      $filter.shape[2] === inputChannels,\n      () => `Error in conv2d: depth of input (${inputChannels}) must match ` +\n          `input depth for filter ${$filter.shape[2]}.`);\n  util.assert(\n      conv_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in conv2D: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n\n  const convInfo = conv_util.computeConv2DInfo(\n      x4D.shape, $filter.shape, strides, dilations, pad, dimRoundingMode);\n\n  let $bias: Tensor;\n  if (bias != null) {\n    $bias = convertToTensor(bias, 'bias', 'fused conv2d');\n    [$bias] = makeTypesMatch($bias, $x);\n\n    // According to TensorFlow, the bias is supposed be a 1-D tensor or a\n    // scalar.\n    //\n    // 3-D or 4-D bias is not disabled for NHWC format, because they are\n    // currently being used in some cases. For examplem in our code base,\n    // https://github.com/tensorflow/tfjs/blob/b53bd47e880367ae57493f0ea628abaf08db2d5d/tfjs-core/src/ops/fused/fused_conv2d_test.ts#L1972.\n    if (dataFormat === 'NHWC') {\n      broadcast_util.assertAndGetBroadcastShape(convInfo.outShape, $bias.shape);\n    } else {\n      util.assert(\n          $bias.shape.length <= 1,\n          () => `Error in fused conv2d: only supports scalar or 1-D Tensor ` +\n              `bias for NCHW format but got the bias of ` +\n              `rank-${$bias.shape.length}.`);\n\n      util.assert(\n          $bias.shape.length === 0 || $bias.shape[0] === convInfo.outChannels ||\n              $bias.shape[0] === 1,\n          () => `Error in fused conv2d: bias shape (${$bias.shape}) is not ` +\n              `compatible with the number of output channels ` +\n              `(${convInfo.outChannels})`);\n    }\n  }\n\n  let $preluActivationWeights: Tensor;\n  if (preluActivationWeights != null) {\n    // PReLU's activation weights could be a scalar, a 1-D tensor or a 3-D\n    // tensor.\n    const alphaShape = preluActivationWeights.shape;\n    util.assert(\n        alphaShape.length <= 1 || alphaShape.length === 3,\n        () => `Error in fused conv2d: only supports scalar, 1-D Tensor or ` +\n            `3-D Tensor PReLU activation weights but got a tensor of ` +\n            `rank-${alphaShape.length}.`);\n\n    if (alphaShape.length === 1) {\n      // Whether the data format is NCHW or NHWC, the 1-D PReLU activation\n      // weights tensor should be aligned with the output channels of conv2d\n      // result.\n      util.assert(\n          alphaShape[0] === 1 || alphaShape[0] === convInfo.outChannels,\n          () => `Error in fused conv2d: PReLU activation weights ` +\n              `(${alphaShape}) is not compatible with the number of output ` +\n              `channels (${convInfo.outChannels}).`);\n    } else if (alphaShape.length === 3) {\n      // Whether the data format is NCHW or NHWC, the PReLU activation weights\n      // tensor should has the compatible shape with the result of conv2d.\n      try {\n        broadcast_util.assertAndGetBroadcastShape(\n            alphaShape, convInfo.outShape);\n      } catch (e) {\n        const errMsg =\n            `Error in fused conv2d: PReLU activation weights (${alphaShape}) ` +\n            `is not compatible with the output shape of the conv2d ` +\n            `(${convInfo.outShape}).`;\n        throw Error(errMsg);\n      }\n    }\n\n    $preluActivationWeights = convertToTensor(\n        preluActivationWeights, 'prelu weights', 'fused conv2d');\n  }\n\n  const grad = (dy: Tensor4D, saved: Tensor[]) => {\n    util.assert(\n        dataFormat === 'NHWC',\n        () => `Error in gradient of fused conv2D: got dataFormat of ${\n            dataFormat} but only NHWC is currently supported.`);\n\n    const [$filter, x4D, y, $bias] =\n        saved as [Tensor4D, Tensor4D, Tensor4D, Tensor];\n\n    const dyActivation = getFusedDyActivation(dy, y, activation) as Tensor4D;\n\n    util.assert(\n        conv_util.tupleValuesAreOne(dilations),\n        () => 'Error in gradient of fused conv2D: ' +\n            `dilation rates greater than 1 ` +\n            `are not yet supported in gradients. Got dilations '${dilations}'`);\n\n    const xDer =\n        conv2DBackpropInput(x4D.shape, dyActivation, $filter, strides, pad);\n    const filterDer =\n        conv2DBackpropFilter(x4D, dyActivation, $filter.shape, strides, pad);\n    const der: Tensor[] = [xDer, filterDer];\n\n    if ($bias != null) {\n      const biasDer = getFusedBiasGradient($bias, dyActivation);\n      der.push(biasDer);\n    }\n    return der;\n  };\n\n  const inputs: FusedConv2DInputs = {\n    x: x4D,\n    filter: $filter,\n    bias: $bias,\n    preluActivationWeights: $preluActivationWeights\n  };\n\n  const attrs: FusedConv2DAttrs = {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  };\n\n  // Depending on the the params passed in we will have different number of\n  // inputs and thus a a different number of elements in the gradient.\n  if (bias == null) {\n    const customOp =\n        customGrad((x4D: Tensor4D, filter: Tensor4D, save: GradSaveFunc) => {\n          let res: Tensor4D|Tensor3D =\n              // tslint:disable-next-line: no-unnecessary-type-assertion\n              ENGINE.runKernel(\n                  FusedConv2D, inputs as unknown as NamedTensorMap,\n                  attrs as unknown as NamedAttrMap);\n\n          save([filter, x4D, res]);\n\n          if (reshapedTo4D) {\n            // tslint:disable-next-line: no-unnecessary-type-assertion\n            res = reshape(res, [res.shape[1], res.shape[2], res.shape[3]]) as\n                Tensor3D;\n          }\n\n          return {value: res, gradFunc: grad};\n        });\n    return customOp(x4D, $filter) as T;\n  } else {\n    const customOpWithBias = customGrad(\n        (x4D: Tensor4D, filter: Tensor4D, bias: Tensor, save: GradSaveFunc) => {\n          let res: Tensor4D|Tensor3D = ENGINE.runKernel(\n              FusedConv2D, inputs as unknown as NamedTensorMap,\n              attrs as unknown as NamedAttrMap);\n\n          save([filter, x4D, res, bias]);\n\n          if (reshapedTo4D) {\n            // tslint:disable-next-line: no-unnecessary-type-assertion\n            res = reshape(res, [res.shape[1], res.shape[2], res.shape[3]]) as\n                Tensor3D;\n          }\n\n          return {value: res, gradFunc: grad};\n        });\n\n    return customOpWithBias(x4D, $filter, $bias) as T;\n  }\n}\nexport const conv2d = /* @__PURE__ */ op({fusedConv2d_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {DepthwiseConv2dNativeBackpropFilter, DepthwiseConv2dNativeBackpropFilterAttrs, DepthwiseConv2dNativeBackpropFilterInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor3D, Tensor4D} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\n\nimport {ExplicitPadding} from './conv_util';\nimport {op} from './operation';\nimport {reshape} from './reshape';\n\nfunction depthwiseConv2dNativeBackpropFilter_<T extends Tensor3D|Tensor4D>(\n    x: T, dy: T, filterShape: [number, number, number, number],\n    strides: [number, number]|number,\n    pad: 'valid'|'same'|number|ExplicitPadding,\n    dilations: [number, number]|number = [1, 1],\n    dimRoundingMode?: 'floor'|'round'|'ceil'): Tensor4D {\n  let x4D = x as Tensor4D;\n  if (x.rank === 3) {\n    x4D = reshape(x, [1, x.shape[0], x.shape[1], x.shape[2]]);\n  }\n  let dy4D = dy as Tensor4D;\n  if (dy4D.rank === 3) {\n    dy4D = reshape(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2]]);\n  }\n\n  const inputs: DepthwiseConv2dNativeBackpropFilterInputs = {x: x4D, dy: dy4D};\n  const attrs: DepthwiseConv2dNativeBackpropFilterAttrs =\n      {strides, pad, dimRoundingMode, dilations, filterShape};\n\n  // tslint:disable-next-line: no-unnecessary-type-assertion\n  return ENGINE.runKernel(\n             DepthwiseConv2dNativeBackpropFilter,\n             inputs as unknown as NamedTensorMap,\n             attrs as unknown as NamedAttrMap) as Tensor4D;\n}\n\nexport const depthwiseConv2dNativeBackpropFilter =\n    op({depthwiseConv2dNativeBackpropFilter_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {DepthwiseConv2dNativeBackpropInput, DepthwiseConv2dNativeBackpropInputAttrs, DepthwiseConv2dNativeBackpropInputInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor3D, Tensor4D} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\n\nimport {ExplicitPadding} from './conv_util';\nimport {op} from './operation';\nimport {reshape} from './reshape';\n\nfunction depthwiseConv2dNativeBackpropInput_<T extends Tensor3D|Tensor4D>(\n    xShape: [number, number, number, number], dy: T, filter: Tensor4D,\n    strides: [number, number]|number,\n    pad: 'valid'|'same'|number|ExplicitPadding,\n    dilations: [number, number]|number = [1, 1],\n    dimRoundingMode?: 'floor'|'round'|'ceil'): T {\n  let dy4D = dy as Tensor4D;\n  let reshapedTo4D = false;\n  if (dy.rank === 3) {\n    reshapedTo4D = true;\n    dy4D = reshape(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2]]);\n  }\n\n  const inputs: DepthwiseConv2dNativeBackpropInputInputs = {dy: dy4D, filter};\n  const attrs: DepthwiseConv2dNativeBackpropInputAttrs =\n      {strides, pad, dimRoundingMode, dilations, inputShape: xShape};\n\n  const res =\n      // tslint:disable-next-line: no-unnecessary-type-assertion\n      ENGINE.runKernel(\n          DepthwiseConv2dNativeBackpropInput,\n          inputs as unknown as NamedTensorMap,\n          attrs as unknown as NamedAttrMap) as T;\n\n  if (reshapedTo4D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]) as T;\n  }\n  return res;\n}\n\nexport const depthwiseConv2dNativeBackpropInput =\n    op({depthwiseConv2dNativeBackpropInput_});\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../../engine';\nimport {customGrad} from '../../gradients';\nimport {FusedDepthwiseConv2D, FusedDepthwiseConv2DAttrs, FusedDepthwiseConv2DInputs} from '../../kernel_names';\nimport {NamedAttrMap} from '../../kernel_registry';\nimport {Tensor, Tensor3D, Tensor4D} from '../../tensor';\nimport {GradSaveFunc, NamedTensorMap} from '../../tensor_types';\nimport {makeTypesMatch} from '../../tensor_util';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\nimport * as util from '../../util';\nimport {add} from '../add';\nimport * as broadcast_util from '../broadcast_util';\nimport * as conv_util from '../conv_util';\nimport {depthwiseConv2d as unfusedDepthwiseConv2d} from '../depthwise_conv2d';\nimport {depthwiseConv2dNativeBackpropFilter} from '../depthwise_conv2d_native_backprop_filter';\nimport {depthwiseConv2dNativeBackpropInput} from '../depthwise_conv2d_native_backprop_input';\nimport {Activation} from '../fused_types';\nimport {applyActivation, getFusedBiasGradient, getFusedDyActivation, shouldFuse} from '../fused_util';\nimport {op} from '../operation';\nimport {reshape} from '../reshape';\n\n/**\n * Computes depthwise 2D convolution, optionally fused with adding a\n * bias and applying an activation.\n *\n * Given a 4D `input` array and a `filter` array of shape\n * `[filterHeight, filterWidth, inChannels, channelMultiplier]` containing\n * `inChannels` convolutional filters of depth 1, this op applies a\n * different filter to each input channel (expanding from 1 channel to\n * `channelMultiplier` channels for each), then concatenates the results\n * together. The output has `inChannels * channelMultiplier` channels.\n *\n * See\n * [https://www.tensorflow.org/api_docs/python/tf/nn/depthwise_conv2d](\n *     https://www.tensorflow.org/api_docs/python/tf/nn/depthwise_conv2d)\n * for more details.\n *\n * @param obj An object with the following properties:\n * @param x The input tensor, of rank 4 or rank 3, of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is\n * assumed.\n * @param filter The filter tensor, rank 4, of shape\n *     `[filterHeight, filterWidth, inChannels, channelMultiplier]`.\n * @param strides The strides of the convolution: `[strideHeight,\n * strideWidth]`. If strides is a single number, then `strideHeight ==\n * strideWidth`.\n * @param pad The type of padding algorithm.\n *   - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *   - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n *   - For more info, see this guide:\n *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](\n *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)\n * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`\n *     in which we sample input values across the height and width dimensions\n *     in atrous convolution. Defaults to `[1, 1]`. If `rate` is a single\n *     number, then `dilationHeight == dilationWidth`. If it is greater than\n *     1, then all values of `strides` must be 1.\n * @param dataFormat: An optional string from: \"NHWC\", \"NCHW\". Defaults to\n *     \"NHWC\". Specify the data format of the input and output data. With the\n *     default format \"NHWC\", the data is stored in the order of: [batch,\n *     height, width, channels]. Only \"NHWC\" is currently supported.\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n * @param bias Tensor to be added to the result.\n * @param activation Name of activation kernel (defaults to `linear`).\n * @param preluActivationWeights Tensor of prelu weights to be applied as part\n *     of a `prelu` activation, typically the same shape as `x`.\n * @param leakyreluAlpha Optional. Alpha to be applied as part of a `leakyrelu`\n *     activation.\n */\nfunction fusedDepthwiseConv2d_<T extends Tensor3D|Tensor4D>({\n  x,\n  filter,\n  strides,\n  pad,\n  dataFormat = 'NHWC',\n  dilations = [1, 1],\n  dimRoundingMode,\n  bias,\n  activation = 'linear',\n  preluActivationWeights,\n  leakyreluAlpha\n}: {\n  x: T|TensorLike,\n  filter: Tensor4D|TensorLike,\n  strides: [number, number]|number,\n  pad: 'valid'|'same'|number,\n  dataFormat?: 'NHWC'|'NCHW',\n  dilations?: [number, number]|number,\n  dimRoundingMode?: 'floor'|'round'|'ceil',\n  bias?: Tensor|TensorLike,\n  activation?: Activation,\n  preluActivationWeights?: Tensor,\n  leakyreluAlpha?: number\n}): T {\n  if (shouldFuse(ENGINE.state.gradientDepth, activation) === false) {\n    let result = unfusedDepthwiseConv2d(\n        x, filter, strides, pad, dataFormat, dilations, dimRoundingMode);\n    if (bias != null) {\n      result = add(result, bias);\n    }\n\n    return applyActivation(\n               result, activation, preluActivationWeights, leakyreluAlpha) as T;\n  }\n\n  const $x = convertToTensor(x, 'x', 'depthwiseConv2d', 'float32');\n  const $filter =\n      convertToTensor(filter, 'filter', 'depthwiseConv2d', 'float32');\n\n  let x4D = $x as Tensor4D;\n  let reshapedTo4D = false;\n  if ($x.rank === 3) {\n    reshapedTo4D = true;\n    x4D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);\n  }\n  util.assert(\n      x4D.rank === 4,\n      () => `Error in fused depthwiseConv2d: input must be rank 4, but got ` +\n          `rank ${x4D.rank}.`);\n  util.assert(\n      $filter.rank === 4,\n      () => `Error in fused depthwiseConv2d: filter must be rank 4, ` +\n          `but got rank ${$filter.rank}.`);\n  util.assert(\n      x4D.shape[3] === $filter.shape[2],\n      () => `Error in fused depthwiseConv2d: number of input channels ` +\n          `(${x4D.shape[3]}) must match the inChannels dimension in ` +\n          `filter ${$filter.shape[2]}.`);\n  if (dilations == null) {\n    dilations = [1, 1];\n  }\n  util.assert(\n      conv_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () =>\n          'Error in fused depthwiseConv2d: Either strides or dilations must ' +\n          `be 1. Got strides ${strides} and dilations '${dilations}'`);\n  conv_util.checkPadOnDimRoundingMode(\n      'fused depthwiseConv2d', pad, dimRoundingMode);\n  const convInfo = conv_util.computeConv2DInfo(\n      x4D.shape, $filter.shape, strides, dilations, pad, dimRoundingMode,\n      true /* depthwise */);\n\n  let $bias: Tensor;\n  if (bias != null) {\n    $bias = convertToTensor(bias, 'bias', 'fused conv2d');\n    [$bias] = makeTypesMatch($bias, $x);\n\n    broadcast_util.assertAndGetBroadcastShape(convInfo.outShape, $bias.shape);\n  }\n\n  let $preluActivationWeights: Tensor;\n  if (preluActivationWeights != null) {\n    $preluActivationWeights = convertToTensor(\n        preluActivationWeights, 'prelu weights', 'fused depthwiseConv2d');\n  }\n\n  const grad = (dy: Tensor4D, saved: Tensor[]) => {\n    util.assert(\n        conv_util.tupleValuesAreOne(dilations),\n        () => 'Error in gradient of fused depthwiseConv2d: dilation rates ' +\n            `greater than 1 are not yet supported. Got dilations ` +\n            `'${dilations}'`);\n    const [$filter, x4D, y, bias] = saved;\n\n    const dyActivation = getFusedDyActivation(dy, y, activation) as Tensor4D;\n\n    const xDer = depthwiseConv2dNativeBackpropInput(\n        (x4D as Tensor4D).shape, dyActivation, $filter as Tensor4D, strides,\n        pad, dilations, dimRoundingMode);\n    const filterDer = depthwiseConv2dNativeBackpropFilter(\n        x4D as Tensor4D, dyActivation, ($filter as Tensor4D).shape, strides,\n        pad, dilations, dimRoundingMode);\n\n    if (bias != null) {\n      const biasDer = getFusedBiasGradient($bias, dyActivation);\n      return [xDer, filterDer, biasDer];\n    }\n    return [xDer, filterDer];\n  };\n\n  const inputs: FusedDepthwiseConv2DInputs = {\n    x: x4D,\n    filter: $filter,\n    bias: $bias,\n    preluActivationWeights: $preluActivationWeights\n  };\n  const attrs: FusedDepthwiseConv2DAttrs = {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  };\n\n  // Depending on the the params passed in we will have different number of\n  // inputs and thus a a different number of elements in the gradient.\n  if (bias == null) {\n    const customOp =\n        customGrad((x4D: Tensor4D, filter: Tensor4D, save: GradSaveFunc) => {\n          // tslint:disable-next-line: no-unnecessary-type-assertion\n          let res: Tensor4D|Tensor3D = ENGINE.runKernel(\n              FusedDepthwiseConv2D, inputs as unknown as NamedTensorMap,\n              attrs as unknown as NamedAttrMap);\n\n          save([filter, x4D, res]);\n\n          if (reshapedTo4D) {\n            // tslint:disable-next-line: no-unnecessary-type-assertion\n            res = reshape(res, [res.shape[1], res.shape[2], res.shape[3]]) as\n                Tensor3D;\n          }\n\n          return {value: res, gradFunc: grad};\n        });\n    return customOp(x4D, $filter) as T;\n  } else {\n    const customOpWithBias = customGrad(\n        (x4D: Tensor4D, filter: Tensor4D, bias: Tensor, save: GradSaveFunc) => {\n          // tslint:disable-next-line: no-unnecessary-type-assertion\n          let res: Tensor4D|Tensor3D = ENGINE.runKernel(\n              FusedDepthwiseConv2D, inputs as unknown as NamedTensorMap,\n              attrs as unknown as NamedAttrMap);\n\n          save([filter, x4D, res, bias]);\n\n          if (reshapedTo4D) {\n            // tslint:disable-next-line: no-unnecessary-type-assertion\n            res = reshape(res, [res.shape[1], res.shape[2], res.shape[3]]) as\n                Tensor3D;\n          }\n\n          return {value: res, gradFunc: grad};\n        });\n\n    return customOpWithBias(x4D, $filter, $bias) as T;\n  }\n}\nexport const depthwiseConv2d = /* @__PURE__ */ op({fusedDepthwiseConv2d_});\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../../engine';\nimport {customGrad} from '../../gradients';\nimport {_FusedMatMul, _FusedMatMulAttrs, _FusedMatMulInputs} from '../../kernel_names';\nimport {NamedAttrMap} from '../../kernel_registry';\nimport {Tensor, Tensor3D} from '../../tensor';\nimport {GradSaveFunc, NamedTensorMap} from '../../tensor_types';\nimport {makeTypesMatch} from '../../tensor_util';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\nimport * as util from '../../util';\n\nimport {add} from '../add';\nimport * as broadcast_util from '../broadcast_util';\nimport {Activation} from '../fused_types';\nimport {applyActivation, getFusedBiasGradient, getFusedDyActivation, shouldFuse} from '../fused_util';\nimport {matMul as unfusedMatMul} from '../mat_mul';\nimport {op} from '../operation';\nimport {reshape} from '../reshape';\n\n/**\n * Computes the dot product of two matrices with optional activation and bias.\n *\n * ```js\n * const a = tf.tensor2d([-1, -2], [1, 2]);\n * const b = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n * const bias = tf.tensor2d([1, 2], [1, 2]);\n *\n * tf.fused.matMul({a, b, bias, activation: 'relu'}).print();\n * ```\n *\n * @param obj An object with the following properties:\n * - `a` First matrix in dot product operation.\n * - `b` Second matrix in dot product operation.\n * - `transposeA` If true, `a` is transposed before multiplication.\n * - `transposeB` If true, `b` is transposed before multiplication.\n * - `bias` Matrix to be added to the result.\n * - `activation` Name of activation kernel (defaults to `linear`).\n * - `preluActivationWeights` Tensor of prelu weights.\n * - `leakyreluAlpha` Alpha of leakyrelu.\n */\nfunction fusedMatMul_({\n  a,\n  b,\n  transposeA = false,\n  transposeB = false,\n  bias,\n  activation = 'linear',\n  preluActivationWeights,\n  leakyreluAlpha = 0.2,\n}: {\n  a: Tensor|TensorLike,\n  b: Tensor|TensorLike,\n  transposeA?: boolean,\n  transposeB?: boolean,\n  bias?: Tensor|TensorLike,\n  activation?: Activation,\n  preluActivationWeights?: Tensor\n  leakyreluAlpha?: number\n}): Tensor {\n    if (shouldFuse(ENGINE.state.gradientDepth, activation) === false) {\n      let result = unfusedMatMul(a, b, transposeA, transposeB);\n      if (bias != null) {\n        result = add(result, bias);\n      }\n\n      return applyActivation(\n                 result, activation, preluActivationWeights, leakyreluAlpha);\n    }\n\n    let $a = convertToTensor(a, 'a', 'fused matMul');\n    let $b = convertToTensor(b, 'b', 'fused matMul');\n    [$a, $b] = makeTypesMatch($a, $b);\n\n    const innerShapeA =\n        transposeA ? $a.shape[$a.rank - 2] : $a.shape[$a.rank - 1];\n    const innerShapeB =\n        transposeB ? $b.shape[$b.rank - 1] : $b.shape[$b.rank - 2];\n\n    const outerShapeA =\n        transposeA ? $a.shape[$a.rank - 1] : $a.shape[$a.rank - 2];\n    const outerShapeB =\n        transposeB ? $b.shape[$b.rank - 2] : $b.shape[$b.rank - 1];\n\n    const outerDimsA = $a.shape.slice(0, -2);\n    const outerDimsB = $b.shape.slice(0, -2);\n    const batchDimA = util.sizeFromShape(outerDimsA);\n    const batchDimB = util.sizeFromShape(outerDimsB);\n\n    util.assert(\n        innerShapeA === innerShapeB,\n        () => `Error in fused matMul: inner shapes (${innerShapeA}) and (` +\n            `${innerShapeB}) of Tensors with shapes ${$a.shape} and ` +\n            `${$b.shape} and transposeA=${transposeA}` +\n            ` and transposeB=${transposeB} must match.`);\n\n    const outShapeOuterDims = broadcast_util.assertAndGetBroadcastShape(\n        $a.shape.slice(0, -2), $b.shape.slice(0, -2));\n    const outShape = outShapeOuterDims.concat([outerShapeA, outerShapeB]);\n\n    const a3D: Tensor3D = transposeA ?\n        reshape($a, [batchDimA, innerShapeA, outerShapeA]) :\n        reshape($a, [batchDimA, outerShapeA, innerShapeA]);\n    const b3D: Tensor3D = transposeB ?\n        reshape($b, [batchDimB, outerShapeB, innerShapeB]) :\n        reshape($b, [batchDimB, innerShapeB, outerShapeB]);\n\n    let $bias: Tensor;\n    if (bias != null) {\n      $bias = convertToTensor(bias, 'bias', 'fused matMul');\n      [$bias] = makeTypesMatch($bias, $a);\n\n      broadcast_util.assertAndGetBroadcastShape(outShape, $bias.shape);\n    }\n\n    let $preluActivationWeights: Tensor;\n    if (preluActivationWeights != null) {\n      $preluActivationWeights = convertToTensor(\n          preluActivationWeights, 'prelu weights', 'fused matMul');\n    }\n\n    const grad = (dy: Tensor3D, saved: Tensor[]) => {\n      const [a3D, b3D, y, $bias] = saved;\n      // we reshape dy because the result of the forward is not\n      // necessarily going to be a 3d tensor due to a reshape done at the end of\n      // the customOp.\n      const dyActivation =\n          getFusedDyActivation(reshape(dy, y.shape), y, activation);\n      let aDer: Tensor;\n      let bDer: Tensor;\n\n      if (!transposeA && !transposeB) {\n        aDer = unfusedMatMul(dyActivation, b3D, false, true);\n        bDer = unfusedMatMul(a3D, dyActivation, true, false);\n      } else if (!transposeA && transposeB) {\n        aDer = unfusedMatMul(dyActivation, b3D, false, false);\n        bDer = unfusedMatMul(dyActivation, a3D, true, false);\n      } else if (transposeA && !transposeB) {\n        aDer = unfusedMatMul(b3D, dyActivation, false, true);\n        bDer = unfusedMatMul(a3D, dyActivation, false, false);\n      } else {\n        aDer = unfusedMatMul(b3D, dyActivation, true, true);\n        bDer = unfusedMatMul(dyActivation, a3D, true, true);\n      }\n\n      if (bias != null) {\n        const biasDer = getFusedBiasGradient($bias, dyActivation);\n        return [aDer, bDer, biasDer];\n      } else {\n        return [aDer, bDer];\n      }\n    };\n\n    const inputs: _FusedMatMulInputs = {\n      a: a3D,\n      b: b3D,\n      bias: $bias,\n      preluActivationWeights: $preluActivationWeights\n    };\n    const attrs: _FusedMatMulAttrs =\n        {transposeA, transposeB, activation, leakyreluAlpha};\n\n    // Depending on the the params passed in we will have different number of\n    // inputs and thus a a different number of elements in the gradient.\n    if (bias == null) {\n      const customOp =\n          customGrad((a3D: Tensor3D, b3D: Tensor3D, save: GradSaveFunc) => {\n            const res =\n                // tslint:disable-next-line: no-unnecessary-type-assertion\n                ENGINE.runKernel(\n                    _FusedMatMul, inputs as unknown as NamedTensorMap,\n                    attrs as unknown as NamedAttrMap) as Tensor;\n\n            save([a3D, b3D, res]);\n\n            return {value: reshape(res, outShape), gradFunc: grad};\n          });\n      return customOp(a3D, b3D);\n    } else {\n      const customOpWithBias = customGrad(\n          (a3D: Tensor3D, b3D: Tensor3D, $bias: Tensor, save: GradSaveFunc) => {\n            const res =\n                // tslint:disable-next-line: no-unnecessary-type-assertion\n                ENGINE.runKernel(\n                    _FusedMatMul, inputs as unknown as NamedTensorMap,\n                    attrs as unknown as NamedAttrMap) as Tensor;\n\n            save([a3D, b3D, res, $bias]);\n\n            return {value: reshape(res, outShape), gradFunc: grad};\n          });\n\n      return customOpWithBias(a3D, b3D, $bias);\n    }\n  }\n\n  export const matMul = /* @__PURE__ */ op({fusedMatMul_});\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor1D} from '../../tensor';\nimport {op} from '../operation';\nimport {cosineWindow} from '../signal_ops_util';\n\n/**\n * Generate a hamming window.\n *\n * See: https://en.wikipedia.org/wiki/Window_function#Hann_and_Hamming_windows\n *\n * ```js\n * tf.signal.hammingWindow(10).print();\n * ```\n * @param The length of window\n *\n * @doc {heading: 'Operations', subheading: 'Signal', namespace: 'signal'}\n */\nfunction hammingWindow_(windowLength: number): Tensor1D {\n  return cosineWindow(windowLength, 0.54, 0.46);\n}\nexport const hammingWindow = /* @__PURE__ */ op({hammingWindow_});\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor1D} from '../../tensor';\nimport {op} from '../operation';\nimport {cosineWindow} from '../signal_ops_util';\n\n/**\n * Generate a Hann window.\n *\n * See: https://en.wikipedia.org/wiki/Window_function#Hann_and_Hamming_windows\n *\n * ```js\n * tf.signal.hannWindow(10).print();\n * ```\n * @param The length of window\n *\n * @doc {heading: 'Operations', subheading: 'Signal', namespace: 'signal'}\n */\nfunction hannWindow_(windowLength: number): Tensor1D {\n  return cosineWindow(windowLength, 0.5, 0.5);\n}\n\nexport const hannWindow = /* @__PURE__ */ op({hannWindow_});\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor, Tensor1D} from '../../tensor';\nimport {concat} from '../concat';\nimport {fill} from '../fill';\nimport {op} from '../operation';\nimport {reshape} from '../reshape';\nimport {slice} from '../slice';\nimport {tensor2d} from '../tensor2d';\n\n/**\n * Expands input into frames of frameLength.\n * Slides a window size with frameStep.\n *\n * ```js\n * tf.signal.frame([1, 2, 3], 2, 1).print();\n * ```\n * @param signal The input tensor to be expanded\n * @param frameLength Length of each frame\n * @param frameStep The frame hop size in samples.\n * @param padEnd Whether to pad the end of signal with padValue.\n * @param padValue A number to use where the input signal does\n *     not exist when padEnd is True.\n *\n * @doc {heading: 'Operations', subheading: 'Signal', namespace: 'signal'}\n */\nfunction frame_(\n    signal: Tensor1D, frameLength: number, frameStep: number, padEnd = false,\n    padValue = 0): Tensor {\n  let start = 0;\n  const output: Tensor[] = [];\n  while (start + frameLength <= signal.size) {\n    output.push(slice(signal, start, frameLength));\n    start += frameStep;\n  }\n\n  if (padEnd) {\n    while (start < signal.size) {\n      const padLen = (start + frameLength) - signal.size;\n      const pad = concat([\n        slice(signal, start, frameLength - padLen), fill([padLen], padValue)\n      ]);\n      output.push(pad);\n      start += frameStep;\n    }\n  }\n\n  if (output.length === 0) {\n    return tensor2d([], [0, frameLength]);\n  }\n\n  return reshape(concat(output), [output.length, frameLength]);\n}\nexport const frame = /* @__PURE__ */ op({frame_});\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor, Tensor1D} from '../../tensor';\nimport {mul} from '../mul';\nimport {op} from '../operation';\nimport {enclosingPowerOfTwo} from '../signal_ops_util';\nimport {rfft} from '../spectral/rfft';\n\nimport {frame} from './frame';\nimport {hannWindow} from './hann_window';\n\n/**\n * Computes the Short-time Fourier Transform of signals\n * See: https://en.wikipedia.org/wiki/Short-time_Fourier_transform\n *\n * ```js\n * const input = tf.tensor1d([1, 1, 1, 1, 1])\n * tf.signal.stft(input, 3, 1).print();\n * ```\n * @param signal 1-dimensional real value tensor.\n * @param frameLength The window length of samples.\n * @param frameStep The number of samples to step.\n * @param fftLength The size of the FFT to apply.\n * @param windowFn A callable that takes a window length and returns 1-d tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Signal', namespace: 'signal'}\n */\nfunction stft_(\n    signal: Tensor1D, frameLength: number, frameStep: number,\n    fftLength?: number,\n    windowFn: (length: number) => Tensor1D = hannWindow): Tensor {\n  if (fftLength == null) {\n    fftLength = enclosingPowerOfTwo(frameLength);\n  }\n  const framedSignal = frame(signal, frameLength, frameStep);\n  const windowedSignal = mul(framedSignal, windowFn(frameLength));\n  return rfft(windowedSignal, fftLength);\n}\nexport const stft = /* @__PURE__ */ op({stft_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../../engine';\nimport {CropAndResize, CropAndResizeAttrs, CropAndResizeInputs} from '../../kernel_names';\nimport {NamedAttrMap} from '../../kernel_registry';\nimport {Tensor1D, Tensor2D, Tensor4D} from '../../tensor';\nimport {NamedTensorMap} from '../../tensor_types';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\nimport * as util from '../../util';\n\nimport {op} from '../operation';\n\n/**\n * Extracts crops from the input image tensor and resizes them using bilinear\n * sampling or nearest neighbor sampling (possibly with aspect ratio change)\n * to a common output size specified by cropSize.\n *\n * @param image 4d tensor of shape `[batch,imageHeight,imageWidth, depth]`,\n *     where imageHeight and imageWidth must be positive, specifying the\n *     batch of images from which to take crops\n * @param boxes 2d float32 tensor of shape `[numBoxes, 4]`. Each entry is\n *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the normalized\n *     coordinates of the box in the `boxInd[i]`th image in the batch\n * @param boxInd 1d int32 tensor of shape `[numBoxes]` with values in range\n *     `[0, batch)` that specifies the image that the `i`-th box refers to.\n * @param cropSize 1d int32 tensor of 2 elements `[cropHeigh, cropWidth]`\n *     specifying the size to which all crops are resized to.\n * @param method Optional string from `'bilinear' | 'nearest'`,\n *     defaults to bilinear, which specifies the sampling method for resizing\n * @param extrapolationValue A threshold for deciding when to remove boxes based\n *     on score. Defaults to 0.\n * @return A 4D tensor of the shape `[numBoxes,cropHeight,cropWidth,depth]`\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\nfunction cropAndResize_(\n    image: Tensor4D|TensorLike,\n    boxes: Tensor2D|TensorLike,\n    boxInd: Tensor1D|TensorLike,\n    cropSize: [number, number],\n    method: 'bilinear'|'nearest' = 'bilinear',\n    extrapolationValue = 0,\n    ): Tensor4D {\n  const $image = convertToTensor(image, 'image', 'cropAndResize');\n  const $boxes = convertToTensor(boxes, 'boxes', 'cropAndResize', 'float32');\n  const $boxInd = convertToTensor(boxInd, 'boxInd', 'cropAndResize', 'int32');\n\n  const numBoxes = $boxes.shape[0];\n\n  util.assert(\n      $image.rank === 4,\n      () => 'Error in cropAndResize: image must be rank 4,' +\n          `but got rank ${$image.rank}.`);\n  util.assert(\n      $boxes.rank === 2 && $boxes.shape[1] === 4,\n      () => `Error in cropAndResize: boxes must be have size [${numBoxes},4] ` +\n          `but had shape ${$boxes.shape}.`);\n  util.assert(\n      $boxInd.rank === 1 && $boxInd.shape[0] === numBoxes,\n      () => `Error in cropAndResize: boxInd must be have size [${numBoxes}] ` +\n          `but had shape ${$boxes.shape}.`);\n  util.assert(\n      cropSize.length === 2,\n      () => `Error in cropAndResize: cropSize must be of length 2, but got ` +\n          `length ${cropSize.length}.`);\n  util.assert(\n      cropSize[0] >= 1 && cropSize[1] >= 1,\n      () => `cropSize must be atleast [1,1], but was ${cropSize}`);\n  util.assert(\n      method === 'bilinear' || method === 'nearest',\n      () => `method must be bilinear or nearest, but was ${method}`);\n\n  const inputs:\n      CropAndResizeInputs = {image: $image, boxes: $boxes, boxInd: $boxInd};\n  const attrs: CropAndResizeAttrs = {method, extrapolationValue, cropSize};\n  const res = ENGINE.runKernel(\n      CropAndResize, inputs as unknown as NamedTensorMap,\n      attrs as unknown as NamedAttrMap);\n  return res as Tensor4D;\n}\n\nexport const cropAndResize = /* @__PURE__ */ op({cropAndResize_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../../engine';\nimport {FlipLeftRight, FlipLeftRightInputs} from '../../kernel_names';\nimport {Tensor4D} from '../../tensor';\nimport {NamedTensorMap} from '../../tensor_types';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\nimport * as util from '../../util';\nimport {op} from '../operation';\n\n/**\n * Flips the image left to right. Currently available in the CPU, WebGL, and\n * WASM backends.\n *\n * @param image 4d tensor of shape `[batch, imageHeight, imageWidth, depth]`.\n */\n/** @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'} */\nfunction flipLeftRight_(image: Tensor4D|TensorLike): Tensor4D {\n  const $image = convertToTensor(image, 'image', 'flipLeftRight', 'float32');\n\n  util.assert(\n      $image.rank === 4,\n      () => 'Error in flipLeftRight: image must be rank 4,' +\n          `but got rank ${$image.rank}.`);\n\n  const inputs: FlipLeftRightInputs = {image: $image};\n  const res =\n      ENGINE.runKernel(FlipLeftRight, inputs as unknown as NamedTensorMap, {});\n  return res as Tensor4D;\n}\n\nexport const flipLeftRight = /* @__PURE__ */ op({flipLeftRight_});\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor2D, Tensor3D, Tensor4D, Tensor5D, Tensor6D} from '../../tensor';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\nimport * as util from '../../util';\n\nimport {op} from '../operation';\nimport {tile} from '../tile';\n\n/**\n * Converts images from grayscale to RGB format.\n *\n * @param image A grayscale tensor to convert. The `image`'s last dimension must\n *     be size 1 with at least a two-dimensional shape.\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\nfunction grayscaleToRGB_<T extends Tensor2D|Tensor3D|Tensor4D|Tensor5D|\n                         Tensor6D>(image: T|TensorLike): T {\n  const $image = convertToTensor(image, 'image', 'grayscaleToRGB');\n\n  const lastDimsIdx = $image.rank - 1;\n  const lastDims = $image.shape[lastDimsIdx];\n\n  util.assert(\n      $image.rank >= 2,\n      () => 'Error in grayscaleToRGB: images must be at least rank 2, ' +\n          `but got rank ${$image.rank}.`);\n\n  util.assert(\n      lastDims === 1,\n      () => 'Error in grayscaleToRGB: last dimension of a grayscale image ' +\n          `should be size 1, but got size ${lastDims}.`);\n\n  const reps = new Array($image.rank);\n\n  reps.fill(1, 0, lastDimsIdx);\n  reps[lastDimsIdx] = 3;\n\n  return tile($image, reps);\n}\n\nexport const grayscaleToRGB = /* @__PURE__ */ op({grayscaleToRGB_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../../engine';\nimport {RotateWithOffset, RotateWithOffsetAttrs, RotateWithOffsetInputs} from '../../kernel_names';\nimport {NamedAttrMap} from '../../kernel_registry';\nimport {Tensor4D} from '../../tensor';\nimport {NamedTensorMap} from '../../tensor_types';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\nimport * as util from '../../util';\n\nimport {op} from '../operation';\n\n/**\n * Rotates the input image tensor counter-clockwise with an optional offset\n * center of rotation. Currently available in the CPU, WebGL, and WASM backends.\n *\n * @param image 4d tensor of shape `[batch, imageHeight, imageWidth, depth]`.\n * @param radians The amount of rotation.\n * @param fillValue The value to fill in the empty space leftover\n *     after rotation. Can be either a single grayscale value (0-255), or an\n *     array of three numbers `[red, green, blue]` specifying the red, green,\n *     and blue channels. Defaults to `0` (black).\n * @param center The center of rotation. Can be either a single value (0-1), or\n *     an array of two numbers `[centerX, centerY]`. Defaults to `0.5` (rotates\n *     the image around its center).\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\nfunction rotateWithOffset_(\n    image: Tensor4D|TensorLike, radians: number,\n    fillValue: number|[number, number, number] = 0,\n    center: number|[number, number] = 0.5): Tensor4D {\n  const $image = convertToTensor(image, 'image', 'rotateWithOffset', 'float32');\n\n  util.assert(\n      $image.rank === 4,\n      () => 'Error in rotateWithOffset: image must be rank 4,' +\n          `but got rank ${$image.rank}.`);\n\n  const inputs: RotateWithOffsetInputs = {image: $image};\n  const attrs: RotateWithOffsetAttrs = {radians, fillValue, center};\n  const res = ENGINE.runKernel(\n      RotateWithOffset, inputs as unknown as NamedTensorMap,\n      attrs as unknown as NamedAttrMap);\n  return res as Tensor4D;\n}\n\nexport const rotateWithOffset = /* @__PURE__ */ op({rotateWithOffset_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor1D, Tensor2D} from '../tensor';\nimport * as util from '../util';\n\nfunction nonMaxSuppSanityCheck(\n    boxes: Tensor2D, scores: Tensor1D, maxOutputSize: number,\n    iouThreshold: number, scoreThreshold: number, softNmsSigma?: number): {\n  maxOutputSize: number,\n  iouThreshold: number,\n  scoreThreshold: number,\n  softNmsSigma: number\n} {\n  if (iouThreshold == null) {\n    iouThreshold = 0.5;\n  }\n  if (scoreThreshold == null) {\n    scoreThreshold = Number.NEGATIVE_INFINITY;\n  }\n  if (softNmsSigma == null) {\n    softNmsSigma = 0.0;\n  }\n\n  const numBoxes = boxes.shape[0];\n  maxOutputSize = Math.min(maxOutputSize, numBoxes);\n\n  util.assert(\n      0 <= iouThreshold && iouThreshold <= 1,\n      () => `iouThreshold must be in [0, 1], but was '${iouThreshold}'`);\n  util.assert(\n      boxes.rank === 2,\n      () => `boxes must be a 2D tensor, but was of rank '${boxes.rank}'`);\n  util.assert(\n      boxes.shape[1] === 4,\n      () =>\n          `boxes must have 4 columns, but 2nd dimension was ${boxes.shape[1]}`);\n  util.assert(scores.rank === 1, () => 'scores must be a 1D tensor');\n  util.assert(\n      scores.shape[0] === numBoxes,\n      () => `scores has incompatible shape with boxes. Expected ${numBoxes}, ` +\n          `but was ${scores.shape[0]}`);\n  util.assert(\n      0 <= softNmsSigma && softNmsSigma <= 1,\n      () => `softNmsSigma must be in [0, 1], but was '${softNmsSigma}'`);\n  return {maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma};\n}\n\nexport {nonMaxSuppSanityCheck};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../../engine';\nimport {NonMaxSuppressionV3} from '../../kernel_names';\nimport {Tensor1D, Tensor2D} from '../../tensor';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\nimport {nonMaxSuppSanityCheck} from '../nonmax_util';\nimport {op} from '../operation';\n\n/**\n * Performs non maximum suppression of bounding boxes based on\n * iou (intersection over union).\n *\n * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is\n *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of\n *     the bounding box.\n * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.\n * @param maxOutputSize The maximum number of boxes to be selected.\n * @param iouThreshold A float representing the threshold for deciding whether\n *     boxes overlap too much with respect to IOU. Must be between [0, 1].\n *     Defaults to 0.5 (50% box overlap).\n * @param scoreThreshold A threshold for deciding when to remove boxes based\n *     on score. Defaults to -inf, which means any score is accepted.\n * @return A 1D tensor with the selected box indices.\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\nfunction nonMaxSuppression_(\n    boxes: Tensor2D|TensorLike, scores: Tensor1D|TensorLike,\n    maxOutputSize: number, iouThreshold = 0.5,\n    scoreThreshold = Number.NEGATIVE_INFINITY): Tensor1D {\n  const $boxes =\n      convertToTensor(boxes, 'boxes', 'nonMaxSuppression', 'float32');\n  const $scores =\n      convertToTensor(scores, 'scores', 'nonMaxSuppression', 'float32');\n\n  const inputs = nonMaxSuppSanityCheck(\n      $boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold);\n  maxOutputSize = inputs.maxOutputSize;\n  iouThreshold = inputs.iouThreshold;\n  scoreThreshold = inputs.scoreThreshold;\n\n  const attrs = {maxOutputSize, iouThreshold, scoreThreshold};\n  return ENGINE.runKernel(\n      NonMaxSuppressionV3, {boxes: $boxes, scores: $scores}, attrs);\n}\n\nexport const nonMaxSuppression = /* @__PURE__ */ op({nonMaxSuppression_});\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * Inserts a value into a sorted array. This method allows duplicate, meaning it\n * allows inserting duplicate value, in which case, the element will be inserted\n * at the lowest index of the value.\n * @param arr The array to modify.\n * @param element The element to insert.\n * @param comparator Optional. If no comparator is specified, elements are\n * compared using array_util.defaultComparator, which is suitable for Strings\n * and Numbers in ascending arrays. If the array contains multiple instances of\n * the target value, the left-most instance will be returned. To provide a\n * comparator, it should take 2 arguments to compare and return a negative,\n * zero, or a positive number.\n */\nexport function binaryInsert<T>(\n    arr: T[], element: T, comparator?: (a: T, b: T) => number) {\n  const index = binarySearch(arr, element, comparator);\n  const insertionPoint = index < 0 ? -(index + 1) : index;\n  arr.splice(insertionPoint, 0, element);\n}\n\n/**\n * Searches the array for the target using binary search, returns the index\n * of the found element, or position to insert if element not found. If no\n * comparator is specified, elements are compared using array_\n * util.defaultComparator, which is suitable for Strings and Numbers in\n * ascending arrays. If the array contains multiple instances of the target\n * value, the left-most instance will be returned.\n * @param arr The array to be searched in.\n * @param target The target to be searched for.\n * @param comparator Should take 2 arguments to compare and return a negative,\n *    zero, or a positive number.\n * @return Lowest index of the target value if found, otherwise the insertion\n *    point where the target should be inserted, in the form of\n *    (-insertionPoint - 1).\n */\nexport function binarySearch<T>(\n    arr: T[], target: T, comparator?: (a: T, b: T) => number) {\n  return binarySearch_(arr, target, comparator || defaultComparator);\n}\n\n/**\n * Compares its two arguments for order.\n * @param a The first element to be compared.\n * @param b The second element to be compared.\n * @return A negative number, zero, or a positive number as the first\n *     argument is less than, equal to, or greater than the second.\n */\nfunction defaultComparator<T>(a: T, b: T): number {\n  return a > b ? 1 : a < b ? -1 : 0;\n}\n\nfunction binarySearch_<T>(\n    arr: T[], target: T, comparator: (a: T, b: T) => number) {\n  let left = 0;\n  let right = arr.length;\n  let middle = 0;\n  let found = false;\n  while (left < right) {\n    middle = left + ((right - left) >>> 1);\n    const compareResult = comparator(target, arr[middle]);\n    if (compareResult > 0) {\n      left = middle + 1;\n    } else {\n      right = middle;\n      // If compareResult is 0, the value is found. We record it is found,\n      // and then keep looking because there may be duplicate.\n      found = !compareResult;\n    }\n  }\n\n  return found ? left : -left - 1;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray} from '../types';\nimport {binaryInsert} from './non_max_suppression_util';\n\n/**\n * Implementation of the NonMaxSuppression kernel shared between webgl and cpu.\n */\ninterface Candidate {\n  score: number;\n  boxIndex: number;\n  suppressBeginIndex: number;\n}\n\ninterface NonMaxSuppressionResult {\n  selectedIndices: number[];\n  selectedScores?: number[];\n  validOutputs?: number;\n}\n\nexport function nonMaxSuppressionV3Impl(\n    boxes: TypedArray, scores: TypedArray, maxOutputSize: number,\n    iouThreshold: number, scoreThreshold: number): NonMaxSuppressionResult {\n  return nonMaxSuppressionImpl_(\n      boxes, scores, maxOutputSize, iouThreshold, scoreThreshold,\n      0 /* softNmsSigma */);\n}\n\nexport function nonMaxSuppressionV4Impl(\n    boxes: TypedArray, scores: TypedArray, maxOutputSize: number,\n    iouThreshold: number, scoreThreshold: number,\n    padToMaxOutputSize: boolean): NonMaxSuppressionResult {\n  return nonMaxSuppressionImpl_(\n      boxes, scores, maxOutputSize, iouThreshold, scoreThreshold,\n      0 /* softNmsSigma */, false /* returnScoresTensor */,\n      padToMaxOutputSize /* padToMaxOutputSize */, true\n      /* returnValidOutputs */);\n}\n\nexport function nonMaxSuppressionV5Impl(\n    boxes: TypedArray, scores: TypedArray, maxOutputSize: number,\n    iouThreshold: number, scoreThreshold: number,\n    softNmsSigma: number): NonMaxSuppressionResult {\n  return nonMaxSuppressionImpl_(\n      boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma,\n      true /* returnScoresTensor */);\n}\n\nfunction nonMaxSuppressionImpl_(\n    boxes: TypedArray, scores: TypedArray, maxOutputSize: number,\n    iouThreshold: number, scoreThreshold: number, softNmsSigma: number,\n    returnScoresTensor = false, padToMaxOutputSize = false,\n    returnValidOutputs = false): NonMaxSuppressionResult {\n  // The list is sorted in ascending order, so that we can always pop the\n  // candidate with the largest score in O(1) time.\n  const candidates = [];\n\n  for (let i = 0; i < scores.length; i++) {\n    if (scores[i] > scoreThreshold) {\n      candidates.push({score: scores[i], boxIndex: i, suppressBeginIndex: 0});\n    }\n  }\n\n  candidates.sort(ascendingComparator);\n\n  // If softNmsSigma is 0, the outcome of this algorithm is exactly same as\n  // before.\n  const scale = softNmsSigma > 0 ? (-0.5 / softNmsSigma) : 0.0;\n\n  const selectedIndices: number[] = [];\n  const selectedScores: number[] = [];\n\n  while (selectedIndices.length < maxOutputSize && candidates.length > 0) {\n    const candidate = candidates.pop();\n    const {score: originalScore, boxIndex, suppressBeginIndex} = candidate;\n\n    if (originalScore < scoreThreshold) {\n      break;\n    }\n\n    // Overlapping boxes are likely to have similar scores, therefore we\n    // iterate through the previously selected boxes backwards in order to\n    // see if candidate's score should be suppressed. We use\n    // suppressBeginIndex to track and ensure a candidate can be suppressed\n    // by a selected box no more than once. Also, if the overlap exceeds\n    // iouThreshold, we simply ignore the candidate.\n    let ignoreCandidate = false;\n    for (let j = selectedIndices.length - 1; j >= suppressBeginIndex; --j) {\n      const iou = intersectionOverUnion(boxes, boxIndex, selectedIndices[j]);\n\n      if (iou >= iouThreshold) {\n        ignoreCandidate = true;\n        break;\n      }\n\n      candidate.score =\n          candidate.score * suppressWeight(iouThreshold, scale, iou);\n\n      if (candidate.score <= scoreThreshold) {\n        break;\n      }\n    }\n\n    // At this point, if `candidate.score` has not dropped below\n    // `scoreThreshold`, then we know that we went through all of the\n    // previous selections and can safely update `suppressBeginIndex` to the\n    // end of the selected array. Then we can re-insert the candidate with\n    // the updated score and suppressBeginIndex back in the candidate list.\n    // If on the other hand, `candidate.score` has dropped below the score\n    // threshold, we will not add it back to the candidates list.\n    candidate.suppressBeginIndex = selectedIndices.length;\n\n    if (!ignoreCandidate) {\n      // Candidate has passed all the tests, and is not suppressed, so\n      // select the candidate.\n      if (candidate.score === originalScore) {\n        selectedIndices.push(boxIndex);\n        selectedScores.push(candidate.score);\n      } else if (candidate.score > scoreThreshold) {\n        // Candidate's score is suppressed but is still high enough to be\n        // considered, so add back to the candidates list.\n        binaryInsert(candidates, candidate, ascendingComparator);\n      }\n    }\n  }\n\n  // NonMaxSuppressionV4 feature: padding output to maxOutputSize.\n  const validOutputs = selectedIndices.length;\n  const elemsToPad = maxOutputSize - validOutputs;\n\n  if (padToMaxOutputSize && elemsToPad > 0) {\n    selectedIndices.push(...new Array(elemsToPad).fill(0));\n    selectedScores.push(...new Array(elemsToPad).fill(0.0));\n  }\n\n  const result: NonMaxSuppressionResult = {selectedIndices};\n\n  if (returnScoresTensor) {\n    result['selectedScores'] = selectedScores;\n  }\n\n  if (returnValidOutputs) {\n    result['validOutputs'] = validOutputs;\n  }\n\n  return result;\n}\n\nfunction intersectionOverUnion(boxes: TypedArray, i: number, j: number) {\n  const iCoord = boxes.subarray(i * 4, i * 4 + 4);\n  const jCoord = boxes.subarray(j * 4, j * 4 + 4);\n  const yminI = Math.min(iCoord[0], iCoord[2]);\n  const xminI = Math.min(iCoord[1], iCoord[3]);\n  const ymaxI = Math.max(iCoord[0], iCoord[2]);\n  const xmaxI = Math.max(iCoord[1], iCoord[3]);\n  const yminJ = Math.min(jCoord[0], jCoord[2]);\n  const xminJ = Math.min(jCoord[1], jCoord[3]);\n  const ymaxJ = Math.max(jCoord[0], jCoord[2]);\n  const xmaxJ = Math.max(jCoord[1], jCoord[3]);\n  const areaI = (ymaxI - yminI) * (xmaxI - xminI);\n  const areaJ = (ymaxJ - yminJ) * (xmaxJ - xminJ);\n  if (areaI <= 0 || areaJ <= 0) {\n    return 0.0;\n  }\n  const intersectionYmin = Math.max(yminI, yminJ);\n  const intersectionXmin = Math.max(xminI, xminJ);\n  const intersectionYmax = Math.min(ymaxI, ymaxJ);\n  const intersectionXmax = Math.min(xmaxI, xmaxJ);\n  const intersectionArea = Math.max(intersectionYmax - intersectionYmin, 0.0) *\n      Math.max(intersectionXmax - intersectionXmin, 0.0);\n  return intersectionArea / (areaI + areaJ - intersectionArea);\n}\n\n// A Gaussian penalty function, this method always returns values in [0, 1].\n// The weight is a function of similarity, the more overlap two boxes are, the\n// smaller the weight is, meaning highly overlapping boxe will be significantly\n// penalized. On the other hand, a non-overlapping box will not be penalized.\nfunction suppressWeight(iouThreshold: number, scale: number, iou: number) {\n  const weight = Math.exp(scale * iou * iou);\n  return iou <= iouThreshold ? weight : 0.0;\n}\n\nfunction ascendingComparator(c1: Candidate, c2: Candidate) {\n  // For objects with same scores, we make the object with the larger index go\n  // first. In an array that pops from the end, this means that the object with\n  // the smaller index will be popped first. This ensures the same output as\n  // the TensorFlow python version.\n  return (c1.score - c2.score) ||\n      ((c1.score === c2.score) && (c2.boxIndex - c1.boxIndex));\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {nonMaxSuppressionV3Impl} from '../../backends/non_max_suppression_impl';\nimport {Tensor1D, Tensor2D} from '../../tensor';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\nimport {nonMaxSuppSanityCheck} from '../nonmax_util';\nimport {tensor1d} from '../tensor1d';\n\n/**\n * Performs non maximum suppression of bounding boxes based on\n * iou (intersection over union).\n *\n * This is the async version of `nonMaxSuppression`\n *\n * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is\n *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of\n *     the bounding box.\n * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.\n * @param maxOutputSize The maximum number of boxes to be selected.\n * @param iouThreshold A float representing the threshold for deciding whether\n *     boxes overlap too much with respect to IOU. Must be between [0, 1].\n *     Defaults to 0.5 (50% box overlap).\n * @param scoreThreshold A threshold for deciding when to remove boxes based\n *     on score. Defaults to -inf, which means any score is accepted.\n * @return A 1D tensor with the selected box indices.\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\nasync function nonMaxSuppressionAsync_(\n    boxes: Tensor2D|TensorLike, scores: Tensor1D|TensorLike,\n    maxOutputSize: number, iouThreshold = 0.5,\n    scoreThreshold = Number.NEGATIVE_INFINITY): Promise<Tensor1D> {\n  const $boxes = convertToTensor(boxes, 'boxes', 'nonMaxSuppressionAsync');\n  const $scores = convertToTensor(scores, 'scores', 'nonMaxSuppressionAsync');\n\n  const inputs = nonMaxSuppSanityCheck(\n      $boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold);\n  maxOutputSize = inputs.maxOutputSize;\n  iouThreshold = inputs.iouThreshold;\n  scoreThreshold = inputs.scoreThreshold;\n\n  const boxesAndScores = await Promise.all([$boxes.data(), $scores.data()]);\n  const boxesVals = boxesAndScores[0];\n  const scoresVals = boxesAndScores[1];\n\n  // We call a cpu based impl directly with the typedarray data  here rather\n  // than a kernel because all kernels are synchronous (and thus cannot await\n  // .data()).\n  const {selectedIndices} = nonMaxSuppressionV3Impl(\n      boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold);\n  if ($boxes !== boxes) {\n    $boxes.dispose();\n  }\n  if ($scores !== scores) {\n    $scores.dispose();\n  }\n\n  return tensor1d(selectedIndices, 'int32');\n}\n\nexport const nonMaxSuppressionAsync = nonMaxSuppressionAsync_;\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../../engine';\nimport {NonMaxSuppressionV5, NonMaxSuppressionV5Attrs, NonMaxSuppressionV5Inputs} from '../../kernel_names';\nimport {NamedAttrMap} from '../../kernel_registry';\nimport {Tensor, Tensor1D, Tensor2D} from '../../tensor';\nimport {NamedTensorMap} from '../../tensor_types';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\n\nimport {nonMaxSuppSanityCheck} from '../nonmax_util';\nimport {op} from '../operation';\n\n/**\n * Performs non maximum suppression of bounding boxes based on\n * iou (intersection over union).\n *\n * This op also supports a Soft-NMS mode (cf.\n * Bodla et al, https://arxiv.org/abs/1704.04503) where boxes reduce the score\n * of other overlapping boxes, therefore favoring different regions of the image\n * with high scores. To enable this Soft-NMS mode, set the `softNmsSigma`\n * parameter to be larger than 0.\n *\n * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is\n *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of\n *     the bounding box.\n * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.\n * @param maxOutputSize The maximum number of boxes to be selected.\n * @param iouThreshold A float representing the threshold for deciding whether\n *     boxes overlap too much with respect to IOU. Must be between [0, 1].\n *     Defaults to 0.5 (50% box overlap).\n * @param scoreThreshold A threshold for deciding when to remove boxes based\n *     on score. Defaults to -inf, which means any score is accepted.\n * @param softNmsSigma A float representing the sigma parameter for Soft NMS.\n *     When sigma is 0, it falls back to nonMaxSuppression.\n * @return A map with the following properties:\n *     - selectedIndices: A 1D tensor with the selected box indices.\n *     - selectedScores: A 1D tensor with the corresponding scores for each\n *       selected box.\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\nfunction nonMaxSuppressionWithScore_(\n    boxes: Tensor2D|TensorLike, scores: Tensor1D|TensorLike,\n    maxOutputSize: number, iouThreshold = 0.5,\n    scoreThreshold = Number.NEGATIVE_INFINITY,\n    softNmsSigma = 0.0): NamedTensorMap {\n  const $boxes = convertToTensor(boxes, 'boxes', 'nonMaxSuppression');\n  const $scores = convertToTensor(scores, 'scores', 'nonMaxSuppression');\n\n  const params = nonMaxSuppSanityCheck(\n      $boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold,\n      softNmsSigma);\n  maxOutputSize = params.maxOutputSize;\n  iouThreshold = params.iouThreshold;\n  scoreThreshold = params.scoreThreshold;\n  softNmsSigma = params.softNmsSigma;\n\n  const inputs: NonMaxSuppressionV5Inputs = {boxes: $boxes, scores: $scores};\n  const attrs: NonMaxSuppressionV5Attrs =\n      {maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma};\n\n  // tslint:disable-next-line: no-unnecessary-type-assertion\n  const result = ENGINE.runKernel(\n                     NonMaxSuppressionV5, inputs as unknown as NamedTensorMap,\n                     attrs as unknown as NamedAttrMap) as Tensor[];\n\n  return {selectedIndices: result[0], selectedScores: result[1]};\n}\n\nexport const nonMaxSuppressionWithScore = /* @__PURE__ */ op({nonMaxSuppressionWithScore_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {nonMaxSuppressionV5Impl} from '../../backends/non_max_suppression_impl';\nimport {Tensor1D, Tensor2D} from '../../tensor';\nimport {NamedTensorMap} from '../../tensor_types';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\nimport {nonMaxSuppSanityCheck} from '../nonmax_util';\nimport {tensor1d} from '../tensor1d';\n\n/**\n * Asynchronously performs non maximum suppression of bounding boxes based on\n * iou (intersection over union).\n *\n * This op also supports a Soft-NMS mode (cf.\n * Bodla et al, https://arxiv.org/abs/1704.04503) where boxes reduce the score\n * of other overlapping boxes, therefore favoring different regions of the image\n * with high scores. To enable this Soft-NMS mode, set the `softNmsSigma`\n * parameter to be larger than 0.\n *\n * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is\n *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of\n *     the bounding box.\n * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.\n * @param maxOutputSize The maximum number of boxes to be selected.\n * @param iouThreshold A float representing the threshold for deciding whether\n *     boxes overlap too much with respect to IOU. Must be between [0, 1].\n *     Defaults to 0.5 (50% box overlap).\n * @param scoreThreshold A threshold for deciding when to remove boxes based\n *     on score. Defaults to -inf, which means any score is accepted.\n * @param softNmsSigma A float representing the sigma parameter for Soft NMS.\n *     When sigma is 0, it falls back to nonMaxSuppression.\n * @return A map with the following properties:\n *     - selectedIndices: A 1D tensor with the selected box indices.\n *     - selectedScores: A 1D tensor with the corresponding scores for each\n *       selected box.\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\nasync function nonMaxSuppressionWithScoreAsync_(\n    boxes: Tensor2D|TensorLike, scores: Tensor1D|TensorLike,\n    maxOutputSize: number, iouThreshold = 0.5,\n    scoreThreshold = Number.NEGATIVE_INFINITY,\n    softNmsSigma = 0.0): Promise<NamedTensorMap> {\n  const $boxes = convertToTensor(boxes, 'boxes', 'nonMaxSuppressionAsync');\n  const $scores = convertToTensor(scores, 'scores', 'nonMaxSuppressionAsync');\n\n  const params = nonMaxSuppSanityCheck(\n      $boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold,\n      softNmsSigma);\n  maxOutputSize = params.maxOutputSize;\n  iouThreshold = params.iouThreshold;\n  scoreThreshold = params.scoreThreshold;\n  softNmsSigma = params.softNmsSigma;\n\n  const boxesAndScores = await Promise.all([$boxes.data(), $scores.data()]);\n  const boxesVals = boxesAndScores[0];\n  const scoresVals = boxesAndScores[1];\n\n  // We call a cpu based impl directly with the typedarray data  here rather\n  // than a kernel because all kernels are synchronous (and thus cannot await\n  // .data()).\n  const {selectedIndices, selectedScores} = nonMaxSuppressionV5Impl(\n      boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold,\n      softNmsSigma);\n\n  if ($boxes !== boxes) {\n    $boxes.dispose();\n  }\n  if ($scores !== scores) {\n    $scores.dispose();\n  }\n\n  return {\n    selectedIndices: tensor1d(selectedIndices, 'int32'),\n    selectedScores: tensor1d(selectedScores)\n  };\n}\n\nexport const nonMaxSuppressionWithScoreAsync = nonMaxSuppressionWithScoreAsync_;\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../../engine';\nimport {NonMaxSuppressionV4, NonMaxSuppressionV4Attrs, NonMaxSuppressionV4Inputs} from '../../kernel_names';\nimport {NamedAttrMap} from '../../kernel_registry';\nimport {Tensor, Tensor1D, Tensor2D} from '../../tensor';\nimport {NamedTensorMap} from '../../tensor_types';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\n\nimport {nonMaxSuppSanityCheck} from '../nonmax_util';\nimport {op} from '../operation';\n\n/**\n * Asynchronously performs non maximum suppression of bounding boxes based on\n * iou (intersection over union), with an option to pad results.\n *\n * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is\n *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of\n *     the bounding box.\n * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.\n * @param maxOutputSize The maximum number of boxes to be selected.\n * @param iouThreshold A float representing the threshold for deciding whether\n *     boxes overlap too much with respect to IOU. Must be between [0, 1].\n *     Defaults to 0.5 (50% box overlap).\n * @param scoreThreshold A threshold for deciding when to remove boxes based\n *     on score. Defaults to -inf, which means any score is accepted.\n * @param padToMaxOutputSize Defaults to false. If true, size of output\n *     `selectedIndices` is padded to maxOutputSize.\n * @return A map with the following properties:\n *     - selectedIndices: A 1D tensor with the selected box indices.\n *     - validOutputs: A scalar denoting how many elements in `selectedIndices`\n *       are valid. Valid elements occur first, then padding.\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\nfunction nonMaxSuppressionPadded_(\n    boxes: Tensor2D|TensorLike, scores: Tensor1D|TensorLike,\n    maxOutputSize: number, iouThreshold = 0.5,\n    scoreThreshold = Number.NEGATIVE_INFINITY,\n    padToMaxOutputSize = false): NamedTensorMap {\n  const $boxes = convertToTensor(boxes, 'boxes', 'nonMaxSuppression');\n  const $scores = convertToTensor(scores, 'scores', 'nonMaxSuppression');\n\n  const params = nonMaxSuppSanityCheck(\n      $boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold,\n      null /* softNmsSigma */);\n  const $maxOutputSize = params.maxOutputSize;\n  const $iouThreshold = params.iouThreshold;\n  const $scoreThreshold = params.scoreThreshold;\n\n  const inputs: NonMaxSuppressionV4Inputs = {boxes: $boxes, scores: $scores};\n  const attrs: NonMaxSuppressionV4Attrs = {\n    maxOutputSize: $maxOutputSize,\n    iouThreshold: $iouThreshold,\n    scoreThreshold: $scoreThreshold,\n    padToMaxOutputSize\n  };\n\n  // tslint:disable-next-line: no-unnecessary-type-assertion\n  const result = ENGINE.runKernel(\n                     NonMaxSuppressionV4, inputs as unknown as NamedTensorMap,\n                     attrs as unknown as NamedAttrMap) as Tensor[];\n\n  return {selectedIndices: result[0], validOutputs: result[1]};\n}\n\nexport const nonMaxSuppressionPadded = /* @__PURE__ */ op({nonMaxSuppressionPadded_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {nonMaxSuppressionV4Impl} from '../../backends/non_max_suppression_impl';\nimport {Tensor1D, Tensor2D} from '../../tensor';\nimport {NamedTensorMap} from '../../tensor_types';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\nimport {nonMaxSuppSanityCheck} from '../nonmax_util';\nimport {scalar} from '../scalar';\nimport {tensor1d} from '../tensor1d';\n\n/**\n * Asynchronously performs non maximum suppression of bounding boxes based on\n * iou (intersection over union), with an option to pad results.\n *\n * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is\n *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of\n *     the bounding box.\n * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.\n * @param maxOutputSize The maximum number of boxes to be selected.\n * @param iouThreshold A float representing the threshold for deciding whether\n *     boxes overlap too much with respect to IOU. Must be between [0, 1].\n *     Defaults to 0.5 (50% box overlap).\n * @param scoreThreshold A threshold for deciding when to remove boxes based\n *     on score. Defaults to -inf, which means any score is accepted.\n * @param padToMaxOutputSize Defaults to false. If true, size of output\n *     `selectedIndices` is padded to maxOutputSize.\n * @return A map with the following properties:\n *     - selectedIndices: A 1D tensor with the selected box indices.\n *     - validOutputs: A scalar denoting how many elements in `selectedIndices`\n *       are valid. Valid elements occur first, then padding.\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\nasync function nonMaxSuppressionPaddedAsync_(\n    boxes: Tensor2D|TensorLike, scores: Tensor1D|TensorLike,\n    maxOutputSize: number, iouThreshold = 0.5,\n    scoreThreshold = Number.NEGATIVE_INFINITY,\n    padToMaxOutputSize = false): Promise<NamedTensorMap> {\n  const $boxes = convertToTensor(boxes, 'boxes', 'nonMaxSuppressionAsync');\n  const $scores = convertToTensor(scores, 'scores', 'nonMaxSuppressionAsync');\n\n  const params = nonMaxSuppSanityCheck(\n      $boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold,\n      null /* softNmsSigma */);\n  const $maxOutputSize = params.maxOutputSize;\n  const $iouThreshold = params.iouThreshold;\n  const $scoreThreshold = params.scoreThreshold;\n\n  const [boxesVals, scoresVals] =\n      await Promise.all([$boxes.data(), $scores.data()]);\n\n  // We call a cpu based impl directly with the typedarray data here rather\n  // than a kernel because all kernels are synchronous (and thus cannot await\n  // .data()).\n  const {selectedIndices, validOutputs} = nonMaxSuppressionV4Impl(\n      boxesVals, scoresVals, $maxOutputSize, $iouThreshold, $scoreThreshold,\n      padToMaxOutputSize);\n\n  if ($boxes !== boxes) {\n    $boxes.dispose();\n  }\n  if ($scores !== scores) {\n    $scores.dispose();\n  }\n\n  return {\n    selectedIndices: tensor1d(selectedIndices, 'int32'),\n    validOutputs: scalar(validOutputs, 'int32')\n  };\n}\n\nexport const nonMaxSuppressionPaddedAsync = nonMaxSuppressionPaddedAsync_;\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../../engine';\nimport {ResizeBilinear, ResizeBilinearAttrs, ResizeBilinearInputs} from '../../kernel_names';\nimport {NamedAttrMap} from '../../kernel_registry';\nimport {Tensor3D, Tensor4D} from '../../tensor';\nimport {NamedTensorMap} from '../../tensor_types';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\nimport * as util from '../../util';\n\nimport {op} from '../operation';\nimport {reshape} from '../reshape';\n\n/**\n * Bilinear resize a single 3D image or a batch of 3D images to a new shape.\n *\n * @param images The images, of rank 4 or rank 3, of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.\n * @param size The new shape `[newHeight, newWidth]` to resize the\n *     images to. Each channel is resized individually.\n * @param alignCorners Defaults to `false`. If true, rescale\n *     input by `(new_height - 1) / (height - 1)`, which exactly aligns the 4\n *     corners of images and resized images. If false, rescale by\n *     `new_height / height`. Treat similarly the width dimension.\n * @param halfPixelCenters Defaults to `false`. Whether to assume pixel centers\n *     are at 0.5, which would make the floating point coordinates of the top\n *     left pixel 0.5, 0.5.\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\nfunction resizeBilinear_<T extends Tensor3D|Tensor4D>(\n    images: T|TensorLike, size: [number, number], alignCorners = false,\n    halfPixelCenters = false): T {\n  const $images = convertToTensor(images, 'images', 'resizeBilinear');\n\n  util.assert(\n      $images.rank === 3 || $images.rank === 4,\n      () => `Error in resizeBilinear: x must be rank 3 or 4, but got ` +\n          `rank ${$images.rank}.`);\n  util.assert(\n      size.length === 2,\n      () => `Error in resizeBilinear: new shape must 2D, but got shape ` +\n          `${size}.`);\n  util.assert(\n      halfPixelCenters === false || alignCorners === false,\n      () => `Error in resizeBilinear: If halfPixelCenters is true, ` +\n          `alignCorners must be false.`);\n\n  let batchImages = $images as Tensor4D;\n  let reshapedTo4D = false;\n  if ($images.rank === 3) {\n    reshapedTo4D = true;\n    batchImages = reshape(\n        $images, [1, $images.shape[0], $images.shape[1], $images.shape[2]]);\n  }\n\n  const [] = size;\n\n  const inputs: ResizeBilinearInputs = {images: batchImages};\n  const attrs: ResizeBilinearAttrs = {alignCorners, halfPixelCenters, size};\n\n  // tslint:disable-next-line: no-unnecessary-type-assertion\n  const res = ENGINE.runKernel(\n                  ResizeBilinear, inputs as unknown as NamedTensorMap,\n                  attrs as unknown as NamedAttrMap) as T;\n\n  if (reshapedTo4D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]) as T;\n  }\n  return res;\n}\n\nexport const resizeBilinear = /* @__PURE__ */ op({resizeBilinear_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../../engine';\nimport {ResizeNearestNeighbor, ResizeNearestNeighborAttrs, ResizeNearestNeighborInputs} from '../../kernel_names';\nimport {NamedAttrMap} from '../../kernel_registry';\nimport {Tensor3D, Tensor4D} from '../../tensor';\nimport {NamedTensorMap} from '../../tensor_types';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\nimport * as util from '../../util';\n\nimport {op} from '../operation';\nimport {reshape} from '../reshape';\n\n/**\n * NearestNeighbor resize a batch of 3D images to a new shape.\n *\n * @param images The images, of rank 4 or rank 3, of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.\n * @param size The new shape `[newHeight, newWidth]` to resize the\n *     images to. Each channel is resized individually.\n * @param alignCorners Defaults to False. If true, rescale\n *     input by `(new_height - 1) / (height - 1)`, which exactly aligns the 4\n *     corners of images and resized images. If false, rescale by\n *     `new_height / height`. Treat similarly the width dimension.\n * @param halfPixelCenters Defaults to `false`. Whether to assume pixels are of\n *      half the actual dimensions, and yield more accurate resizes. This flag\n *      would also make the floating point coordinates of the top left pixel\n *      0.5, 0.5.\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\nfunction resizeNearestNeighbor_<T extends Tensor3D|Tensor4D>(\n    images: T|TensorLike, size: [number, number], alignCorners = false,\n    halfPixelCenters = false): T {\n  const $images = convertToTensor(images, 'images', 'resizeNearestNeighbor');\n\n  util.assert(\n      $images.rank === 3 || $images.rank === 4,\n      () => `Error in resizeNearestNeighbor: x must be rank 3 or 4, but got ` +\n          `rank ${$images.rank}.`);\n  util.assert(\n      size.length === 2,\n      () =>\n          `Error in resizeNearestNeighbor: new shape must 2D, but got shape ` +\n          `${size}.`);\n  util.assert(\n      $images.dtype === 'float32' || $images.dtype === 'int32',\n      () => '`images` must have `int32` or `float32` as dtype');\n  util.assert(\n      halfPixelCenters === false || alignCorners === false,\n      () => `Error in resizeNearestNeighbor: If halfPixelCenters is true, ` +\n          `alignCorners must be false.`);\n  let batchImages = $images as Tensor4D;\n  let reshapedTo4D = false;\n  if ($images.rank === 3) {\n    reshapedTo4D = true;\n    batchImages = reshape(\n        $images, [1, $images.shape[0], $images.shape[1], $images.shape[2]]);\n  }\n  const [] = size;\n\n  const inputs: ResizeNearestNeighborInputs = {images: batchImages};\n  const attrs:\n      ResizeNearestNeighborAttrs = {alignCorners, halfPixelCenters, size};\n\n  // tslint:disable-next-line: no-unnecessary-type-assertion\n  const res = ENGINE.runKernel(\n                  ResizeNearestNeighbor, inputs as unknown as NamedTensorMap,\n                  attrs as unknown as NamedAttrMap) as T;\n\n  if (reshapedTo4D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]) as T;\n  }\n  return res;\n}\n\nexport const resizeNearestNeighbor = /* @__PURE__ */ op({resizeNearestNeighbor_});\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport { Tensor1D, Tensor3D } from '../../tensor';\nimport { tensor1d } from '../tensor1d';\nimport { TensorLike } from '../../types';\nimport { op } from '../operation';\nimport { cast } from '../cast';\nimport { split } from '../split';\nimport { bincount } from '../bincount';\nimport { lessEqual } from '../less_equal';\nimport { greater } from '../greater';\nimport { sum } from '../sum';\nimport { add } from '../add';\nimport { mul } from '../mul';\nimport { div } from '../div';\nimport { sub } from '../sub';\nimport { round } from '../round';\nimport { where } from '../where';\nimport { fill } from '../fill';\nimport {slice} from '../slice';\nimport { range } from '../range';\nimport { tensor } from '../tensor';\nimport * as util from '../../util';\nimport { convertToTensor } from '../../tensor_util_env';\n\n/**\n * Performs image binarization with corresponding threshold\n * (depends on the method)value, which creates a binary image from a grayscale.\n * @param image 3d tensor of shape [imageHeight,imageWidth, depth],\n * where imageHeight and imageWidth must be positive.The image color\n * range should be [0, 255].\n * @param method Optional string from `'binary' | 'otsu'`\n * which specifies the method for thresholding. Defaults to 'binary'.\n * @param inverted Optional boolean whichspecifies\n * if colours should be inverted. Defaults to false.\n * @param threshValue Optional number which defines threshold value from 0 to 1.\n * Defaults to 0.5.\n * @return A 3d tensor of shape [imageHeight,imageWidth, depth], which\n * contains binarized image.\n */\n\nfunction threshold_(\n    image: Tensor3D | TensorLike,\n    method = 'binary',\n    inverted = false,\n    threshValue = 0.5\n): Tensor3D {\n    const $image = convertToTensor(image, 'image', 'threshold');\n\n    /* 0.2989, 0.5870, 0.1140 are represent luma coefficients in CCIR601.\n\tReference for converting between RGB and grayscale: https://en.wikipedia.org/wiki/Luma_%28video%29  */\n\n    const RED_INTENCITY_COEF = 0.2989;\n    const GREEN_INTENCITY_COEF = 0.5870;\n    const BLUE_INTENCITY_COEF = 0.1140;\n    const totalPixelsInImage = $image.shape[0] * $image.shape[1];\n\n    let $threshold = mul(tensor1d([threshValue]), 255);\n    let r, g, b, grayscale;\n\n    util.assert(\n        $image.rank === 3,\n        () => 'Error in threshold: image must be rank 3,' +\n            `but got rank ${$image.rank}.`);\n\n    util.assert(\n        $image.shape[2] === 3 || $image.shape[2]=== 1,\n        () => 'Error in threshold: ' +\n            'image color channel must be equal to 3 or 1' +\n            `but got ${$image.shape[2]}.`);\n\n    util.assert(\n      $image.dtype === 'int32' || $image.dtype === 'float32',\n      () => 'Error in dtype: image dtype must be int32 or float32,' +\n          `but got dtype ${$image.dtype}.`);\n\n    util.assert(\n      method === 'otsu' || method === 'binary',\n      () => `Method must be binary or otsu, but was ${method}`);\n\n    if ($image.shape[2] === 3) {\n        [r, g, b] = split($image, [1, 1, 1], -1);\n        const $r = mul(r,RED_INTENCITY_COEF);\n        const $g = mul(g,GREEN_INTENCITY_COEF);\n        const $b = mul(b,BLUE_INTENCITY_COEF);\n        grayscale = add(add($r, $g), $b);\n    } else {\n        grayscale = image;\n    }\n\n    if (method === 'otsu') {\n        const $histogram = bincount(cast(round(grayscale), 'int32') as Tensor1D,\n            tensor([]),\n            256);\n        $threshold = otsu($histogram, totalPixelsInImage);\n    }\n\n    const invCondition = inverted ?\n        lessEqual(grayscale, $threshold) : greater(grayscale, $threshold);\n\n    const result = cast(mul(invCondition,255), 'int32');\n\n    return result as Tensor3D;\n}\n\nfunction otsu(histogram: Tensor1D, total: number):Tensor1D {\n\n    let bestThresh = tensor1d([-1]);\n    let bestInBetVar = tensor1d([0]);\n    let cInBetVar = tensor1d([0]);\n    let classFirst, classSecond, meanFirst,\n        meanSec, weightForeground, weightBack;\n\n    for (let index = 0; index < histogram.size-1; index++) {\n\n        classFirst = slice(histogram, 0, index + 1);\n\n        classSecond = slice(histogram,index + 1);\n\n        weightForeground = div(sum(classFirst),total);\n\n        weightBack = div(sum(classSecond),total);\n\n        const meanFirstDivA = sum(mul(classFirst, range(0, classFirst.size)));\n\n        meanFirst = div(meanFirstDivA, sum(classFirst) );\n\n        const meanSecFill = fill(classSecond.shape, classFirst.size);\n        const meanSecAdd = add(range(0,classSecond.size),meanSecFill);\n        const meanSecMul = mul(classSecond, (meanSecAdd));\n        meanSec = div(sum(meanSecMul), sum(classSecond));\n\n        const cInBetVarSubA = sub(meanFirst, meanSec);\n        const cInBetVarSubB = sub(meanFirst, meanSec);\n        const cInBetVarMul = mul(weightForeground, weightBack);\n        cInBetVar = mul(mul(cInBetVarMul,cInBetVarSubA), cInBetVarSubB);\n\n        const condition = greater(cInBetVar, bestInBetVar);\n\n        bestInBetVar = where(condition, cInBetVar, bestInBetVar);\n\n        bestThresh = where(condition, tensor1d([index]), bestThresh);\n\n    }\n    return bestThresh;\n}\n\nexport const threshold = /* @__PURE__ */ op({ threshold_ });\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../../engine';\nimport {Transform, TransformAttrs, TransformInputs} from '../../kernel_names';\nimport {NamedAttrMap} from '../../kernel_registry';\nimport {Tensor2D, Tensor4D} from '../../tensor';\nimport {NamedTensorMap} from '../../tensor_types';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\nimport * as util from '../../util';\n\nimport {op} from '../operation';\n\n/**\n * Applies the given transform(s) to the image(s).\n *\n * @param image 4d tensor of shape `[batch, imageHeight, imageWidth, depth]`.\n * @param transforms Projective transform matrix/matrices. A tensor1d of length\n *     8 or tensor of size N x 8. If one row of transforms is [a0, a1, a2, b0,\n *     b1, b2, c0, c1], then it maps the output point (x, y) to a transformed\n *     input point (x', y') = ((a0 x + a1 y + a2) / k, (b0 x + b1 y + b2) / k),\n *     where k = c0 x + c1 y + 1. The transforms are inverted compared to the\n *     transform mapping input points to output points.\n * @param interpolation Interpolation mode.\n *     Supported values: 'nearest', 'bilinear'. Default to 'nearest'.\n * @param fillMode Points outside the boundaries of the input are filled\n *     according to the given mode, one of 'constant', 'reflect', 'wrap',\n *     'nearest'. Default to 'constant'.\n *     'reflect': (d c b a | a b c d | d c b a ) The input is extended by\n *     reflecting about the edge of the last pixel.\n *     'constant': (k k k k | a b c d | k k k k) The input is extended by\n *     filling all values beyond the edge with the same constant value k.\n *     'wrap': (a b c d | a b c d | a b c d) The input is extended by\n *     wrapping around to the opposite edge.\n *     'nearest': (a a a a | a b c d | d d d d) The input is extended by\n *     the nearest pixel.\n * @param fillValue A float represents the value to be filled outside the\n *     boundaries when fillMode is 'constant'.\n * @param Output dimension after the transform, [height, width]. If undefined,\n *     output is the same size as input image.\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\nfunction transform_(\n    image: Tensor4D|TensorLike, transforms: Tensor2D|TensorLike,\n    interpolation: 'nearest'|'bilinear' = 'nearest',\n    fillMode: 'constant'|'reflect'|'wrap'|'nearest' = 'constant', fillValue = 0,\n    outputShape?: [number, number]): Tensor4D {\n  const $image = convertToTensor(image, 'image', 'transform', 'float32');\n  const $transforms =\n      convertToTensor(transforms, 'transforms', 'transform', 'float32');\n\n  util.assert(\n      $image.rank === 4,\n      () => 'Error in transform: image must be rank 4,' +\n          `but got rank ${$image.rank}.`);\n\n  util.assert(\n      $transforms.rank === 2 &&\n          ($transforms.shape[0] === $image.shape[0] ||\n           $transforms.shape[0] === 1) &&\n          $transforms.shape[1] === 8,\n      () => `Error in transform: Input transform should be batch x 8 or 1 x 8`);\n\n  util.assert(\n      outputShape == null || outputShape.length === 2,\n      () =>\n          'Error in transform: outputShape must be [height, width] or null, ' +\n          `but got ${outputShape}.`);\n\n  const inputs: TransformInputs = {image: $image, transforms: $transforms};\n  const attrs:\n      TransformAttrs = {interpolation, fillMode, fillValue, outputShape};\n\n  return ENGINE.runKernel(\n      Transform, inputs as unknown as NamedTensorMap,\n      attrs as unknown as NamedAttrMap);\n}\n\nexport const transform = /* @__PURE__ */ op({transform_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../../tensor';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\nimport {assert} from '../../util';\n\nimport {greaterEqual} from '../greater_equal';\nimport {lessEqual} from '../less_equal';\nimport {logicalAnd} from '../logical_and';\nimport {op} from '../operation';\nimport {range} from '../range';\nimport {reshape} from '../reshape';\nimport {scalar} from '../scalar';\nimport {stack} from '../stack';\nimport {sub} from '../sub';\nimport {unstack} from '../unstack';\nimport {where} from '../where';\nimport {zeros} from '../zeros';\n\n/**\n * Copy a tensor setting everything outside a central band in each innermost\n * matrix to zero.\n *\n * The band part is computed as follows: Assume input has `k` dimensions\n * `[I, J, K, ..., M, N]`, then the output is a tensor with the same shape where\n * `band[i, j, k, ..., m, n] = in_band(m, n) * input[i, j, k, ..., m, n]`.\n * The indicator function\n * `in_band(m, n) = (num_lower < 0 || (m-n) <= num_lower)`\n * `&& (num_upper < 0 || (n-m) <= num_upper)`\n *\n * ```js\n * const x = tf.tensor2d([[ 0,  1,  2, 3],\n *                        [-1,  0,  1, 2],\n *                        [-2, -1,  0, 1],\n *                        [-3, -2, -1, 0]]);\n * let y = tf.linalg.bandPart(x, 1, -1);\n * y.print(); // [[ 0,  1,  2, 3],\n *            //  [-1,  0,  1, 2],\n *            //  [ 0, -1,  0, 1],\n *            //  [ 0, 0 , -1, 0]]\n * let z = tf.linalg.bandPart(x, 2, 1);\n * z.print(); // [[ 0,  1,  0, 0],\n *            //  [-1,  0,  1, 0],\n *            //  [-2, -1,  0, 1],\n *            //  [ 0, -2, -1, 0]]\n * ```\n *\n * @param x Rank `k` tensor\n * @param numLower Number of subdiagonals to keep.\n *   If negative, keep entire lower triangle.\n * @param numUpper Number of subdiagonals to keep.\n *   If negative, keep entire upper triangle.\n * @returns Rank `k` tensor of the same shape as input.\n *   The extracted banded tensor.\n *\n * @doc {heading:'Operations', subheading:'Linear Algebra', namespace:'linalg'}\n */\nfunction bandPart_<T extends Tensor>(\n    a: T|TensorLike, numLower: number, numUpper: number): T {\n  assert(\n      numLower % 1 === 0,\n      () => `bandPart(): numLower must be an integer, got ${numLower}.`);\n  assert(\n      numUpper % 1 === 0,\n      () => `bandPart(): numUpper must be an integer, got ${numUpper}.`);\n\n  const $a = convertToTensor(a, 'a', 'bandPart');\n\n  assert(\n      $a.rank >= 2,\n      () => `bandPart(): Rank must be at least 2, got ${$a.rank}.`);\n\n  const shape = $a.shape;\n  const [M, N] = $a.shape.slice(-2);\n\n  if (!(numLower <= M)) {\n    throw new Error(\n        `bandPart(): numLower (${numLower})` +\n        ` must not be greater than the number of rows (${M}).`);\n  }\n  if (!(numUpper <= N)) {\n    throw new Error(\n        `bandPart(): numUpper (${numUpper})` +\n        ` must not be greater than the number of columns (${N}).`);\n  }\n\n  if (numLower < 0) {\n    numLower = M;\n  }\n  if (numUpper < 0) {\n    numUpper = N;\n  }\n\n  const i = reshape(range(0, M, 1, 'int32'), [-1, 1]);\n  const j = range(0, N, 1, 'int32');\n  const ij = sub(i, j);\n\n  const inBand = logicalAnd(\n      lessEqual(ij, scalar(+numLower, 'int32')),\n      greaterEqual(ij, scalar(-numUpper, 'int32')));\n\n  const zero = zeros([M, N], $a.dtype);\n\n  return reshape(\n             stack(unstack(reshape($a, [-1, M, N]))\n                       .map(mat => where(inBand, mat, zero))),\n             shape) as T;\n}\n\nexport const bandPart = /* @__PURE__ */ op({bandPart_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../../engine';\nimport {Tensor1D, Tensor2D} from '../../tensor';\nimport {assert} from '../../util';\n\nimport {div} from '../div';\nimport {mul} from '../mul';\nimport {norm} from '../norm';\nimport {op} from '../operation';\nimport {split} from '../split';\nimport {squeeze} from '../squeeze';\nimport {stack} from '../stack';\nimport {sub} from '../sub';\nimport {sum} from '../sum';\n\n/**\n * Gram-Schmidt orthogonalization.\n *\n * ```js\n * const x = tf.tensor2d([[1, 2], [3, 4]]);\n * let y = tf.linalg.gramSchmidt(x);\n * y.print();\n * console.log('Orthogonalized:');\n * y.dot(y.transpose()).print();  // should be nearly the identity matrix.\n * console.log('First row direction maintained:');\n * const data = await y.array();\n * console.log(data[0][1] / data[0][0]);  // should be nearly 2.\n * ```\n *\n * @param xs The vectors to be orthogonalized, in one of the two following\n *   formats:\n *   - An Array of `tf.Tensor1D`.\n *   - A `tf.Tensor2D`, i.e., a matrix, in which case the vectors are the rows\n *     of `xs`.\n *   In each case, all the vectors must have the same length and the length\n *   must be greater than or equal to the number of vectors.\n * @returns The orthogonalized and normalized vectors or matrix.\n *   Orthogonalization means that the vectors or the rows of the matrix\n *   are orthogonal (zero inner products). Normalization means that each\n *   vector or each row of the matrix has an L2 norm that equals `1`.\n *\n * @doc {heading:'Operations', subheading:'Linear Algebra', namespace:'linalg'}\n */\nfunction gramSchmidt_(xs: Tensor1D[]|Tensor2D): Tensor1D[]|Tensor2D {\n  let inputIsTensor2D: boolean;\n  if (Array.isArray(xs)) {\n    inputIsTensor2D = false;\n    assert(\n        xs != null && xs.length > 0,\n        () => 'Gram-Schmidt process: input must not be null, undefined, or ' +\n            'empty');\n    const dim = xs[0].shape[0];\n    for (let i = 1; i < xs.length; ++i) {\n      assert(\n          xs[i].shape[0] === dim,\n          () =>\n              'Gram-Schmidt: Non-unique lengths found in the input vectors: ' +\n              `(${(xs as Tensor1D[])[i].shape[0]} vs. ${dim})`);\n    }\n  } else {\n    inputIsTensor2D = true;\n    xs = split(xs, xs.shape[0], 0).map(x => squeeze(x, [0]));\n  }\n\n  assert(\n      xs.length <= xs[0].shape[0],\n      () => `Gram-Schmidt: Number of vectors (${\n                (xs as Tensor1D[]).length}) exceeds ` +\n          `number of dimensions (${(xs as Tensor1D[])[0].shape[0]}).`);\n\n  const ys: Tensor1D[] = [];\n  const xs1d = xs;\n  for (let i = 0; i < xs.length; ++i) {\n    ys.push(ENGINE.tidy(() => {\n      let x = xs1d[i];\n      if (i > 0) {\n        for (let j = 0; j < i; ++j) {\n          const proj = mul(sum(mul(ys[j], x)), ys[j]);\n          x = sub(x, proj);\n        }\n      }\n      return div(x, norm(x, 'euclidean'));\n    }));\n  }\n\n  if (inputIsTensor2D) {\n    return stack(ys, 0) as Tensor2D;\n  } else {\n    return ys;\n  }\n}\n\nexport const gramSchmidt = /* @__PURE__ */ op({gramSchmidt_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../../engine';\nimport {dispose} from '../../globals';\nimport {Tensor, Tensor2D} from '../../tensor';\nimport {assert} from '../../util';\n\nimport {clone} from '../clone';\nimport {concat} from '../concat';\nimport {div} from '../div';\nimport {eye} from '../eye';\nimport {greater} from '../greater';\nimport {matMul} from '../mat_mul';\nimport {mul} from '../mul';\nimport {neg} from '../neg';\nimport {norm} from '../norm';\nimport {op} from '../operation';\nimport {reshape} from '../reshape';\nimport {slice} from '../slice';\nimport {stack} from '../stack';\nimport {sub} from '../sub';\nimport {tensor2d} from '../tensor2d';\nimport {transpose} from '../transpose';\nimport {unstack} from '../unstack';\nimport {where} from '../where';\n\n/**\n * Compute QR decomposition of m-by-n matrix using Householder transformation.\n *\n * Implementation based on\n *   [http://www.cs.cornell.edu/~bindel/class/cs6210-f09/lec18.pdf]\n * (http://www.cs.cornell.edu/~bindel/class/cs6210-f09/lec18.pdf)\n *\n * ```js\n * const a = tf.tensor2d([[1, 2], [3, 4]]);\n * let [q, r] = tf.linalg.qr(a);\n * console.log('Q');\n * q.print();\n * console.log('R');\n * r.print();\n * console.log('Orthogonalized');\n * q.dot(q.transpose()).print()  // should be nearly the identity matrix.\n * console.log('Reconstructed');\n * q.dot(r).print(); // should be nearly [[1, 2], [3, 4]];\n * ```\n *\n * @param x The `tf.Tensor` to be QR-decomposed. Must have rank >= 2. Suppose\n *   it has the shape `[..., M, N]`.\n * @param fullMatrices An optional boolean parameter. Defaults to `false`.\n *   If `true`, compute full-sized `Q`. If `false` (the default),\n *   compute only the leading N columns of `Q` and `R`.\n * @returns An `Array` of two `tf.Tensor`s: `[Q, R]`. `Q` is a unitary matrix,\n *   i.e., its columns all have unit norm and are mutually orthogonal.\n *   If `M >= N`,\n *     If `fullMatrices` is `false` (default),\n *       - `Q` has a shape of `[..., M, N]`,\n *       - `R` has a shape of `[..., N, N]`.\n *     If `fullMatrices` is `true` (default),\n *       - `Q` has a shape of `[..., M, M]`,\n *       - `R` has a shape of `[..., M, N]`.\n *   If `M < N`,\n *     - `Q` has a shape of `[..., M, M]`,\n *     - `R` has a shape of `[..., M, N]`.\n * @throws If the rank of `x` is less than 2.\n *\n * @doc {heading:'Operations',\n *       subheading:'Linear Algebra',\n *       namespace:'linalg'}\n */\nfunction qr_(x: Tensor, fullMatrices = false): [Tensor, Tensor] {\n  assert(\n      x.rank >= 2,\n      () => `qr() requires input tensor to have a rank >= 2, but got rank ${\n          x.rank}`);\n\n  if (x.rank === 2) {\n    return qr2d(x as Tensor2D, fullMatrices);\n  } else {\n    // Rank > 2.\n    // TODO(cais): Below we split the input into individual 2D tensors,\n    //   perform QR decomposition on them and then stack the results back\n    //   together. We should explore whether this can be parallelized.\n    const outerDimsProd = x.shape.slice(0, x.shape.length - 2)\n                              .reduce((value, prev) => value * prev);\n    const x2ds = unstack(\n        reshape(\n            x,\n            [\n              outerDimsProd, x.shape[x.shape.length - 2],\n              x.shape[x.shape.length - 1]\n            ]),\n        0);\n    const q2ds: Tensor2D[] = [];\n    const r2ds: Tensor2D[] = [];\n    x2ds.forEach(x2d => {\n      const [q2d, r2d] = qr2d(x2d as Tensor2D, fullMatrices);\n      q2ds.push(q2d);\n      r2ds.push(r2d);\n    });\n    const q = reshape(stack(q2ds, 0), x.shape);\n    const r = reshape(stack(r2ds, 0), x.shape);\n    return [q, r];\n  }\n}\n\nfunction qr2d(x: Tensor2D, fullMatrices = false): [Tensor2D, Tensor2D] {\n  return ENGINE.tidy(() => {\n    assert(\n        x.shape.length === 2,\n        () => `qr2d() requires a 2D Tensor, but got a ${\n            x.shape.length}D Tensor.`);\n\n    const m = x.shape[0];\n    const n = x.shape[1];\n\n    let q = eye(m);    // Orthogonal transform so far.\n    let r = clone(x);  // Transformed matrix so far.\n\n    const one2D = tensor2d([[1]], [1, 1]);\n    let w: Tensor2D = clone(one2D);\n\n    const iters = m >= n ? n : m;\n    for (let j = 0; j < iters; ++j) {\n      // This tidy within the for-loop ensures we clean up temporary\n      // tensors as soon as they are no longer needed.\n      const rTemp = r;\n      const wTemp = w;\n      const qTemp = q;\n      [w, r, q] = ENGINE.tidy((): [Tensor2D, Tensor2D, Tensor2D] => {\n        // Find H = I - tau * w * w', to put zeros below R(j, j).\n        const rjEnd1 = slice(r, [j, j], [m - j, 1]);\n        const normX = norm(rjEnd1);\n        const rjj = slice(r, [j, j], [1, 1]);\n\n        // The sign() function returns 0 on 0, which causes division by zero.\n        const s = where(greater(rjj, 0), tensor2d([[-1]]), tensor2d([[1]]));\n\n        const u1 = sub(rjj, mul(s, normX));\n        const wPre = div(rjEnd1, u1);\n        if (wPre.shape[0] === 1) {\n          w = clone(one2D);\n        } else {\n          w = concat(\n              [\n                one2D,\n                slice(wPre, [1, 0], [wPre.shape[0] - 1, wPre.shape[1]]) as\n                    Tensor2D\n              ],\n              0);\n        }\n        const tau = neg(div(matMul(s, u1), normX)) as Tensor2D;\n\n        // -- R := HR, Q := QH.\n        const rjEndAll = slice(r, [j, 0], [m - j, n]);\n        const tauTimesW: Tensor2D = mul(tau, w);\n        const wT: Tensor2D = transpose(w);\n        if (j === 0) {\n          r = sub(rjEndAll, matMul(tauTimesW, matMul(wT, rjEndAll)));\n        } else {\n          const rTimesTau: Tensor2D =\n              sub(rjEndAll, matMul(tauTimesW, matMul(wT, rjEndAll)));\n          r = concat([slice(r, [0, 0], [j, n]), rTimesTau], 0);\n        }\n        const tawTimesWT: Tensor2D = transpose(tauTimesW);\n        const qAllJEnd = slice(q, [0, j], [m, q.shape[1] - j]);\n        if (j === 0) {\n          q = sub(qAllJEnd, matMul(matMul(qAllJEnd, w), tawTimesWT));\n        } else {\n          const qTimesTau: Tensor2D =\n              sub(qAllJEnd, matMul(matMul(qAllJEnd, w), tawTimesWT));\n          q = concat([slice(q, [0, 0], [m, j]), qTimesTau], 1);\n        }\n        return [w, r, q];\n      });\n      dispose([rTemp, wTemp, qTemp]);\n    }\n\n    if (!fullMatrices && m > n) {\n      q = slice(q, [0, 0], [m, n]);\n      r = slice(r, [0, 0], [n, n]);\n    }\n\n    return [q, r];\n  }) as [Tensor2D, Tensor2D];\n}\n\nexport const qr = /* @__PURE__ */ op({qr_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport enum Reduction {\n  NONE,\n  MEAN,\n  SUM,\n  SUM_BY_NONZERO_WEIGHTS\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Tensor} from '../../tensor';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\n\nimport {cast} from '../cast';\nimport {div} from '../div';\nimport {Reduction} from '../loss_ops_utils';\nimport {mean} from '../mean';\nimport {mul} from '../mul';\nimport {notEqual} from '../not_equal';\nimport {ones} from '../ones';\nimport {op} from '../operation';\nimport {scalar} from '../scalar';\nimport {sum} from '../sum';\n\n/**\n * Computes the weighted loss between two tensors.\n *\n * @param losses Tensor of shape `[batch_size, d1, ..., dN]`.\n * @param weights Tensor whose rank is either 0, or the same rank as\n *    `losses`, and must be broadcastable to `losses` (i.e., all\n *    dimensions must be either `1`, or the same as the corresponding\n *    `losses` dimension).\n *\n * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}\n */\nfunction computeWeightedLoss_<T extends Tensor, O extends Tensor>(\n    losses: T|TensorLike, weights?: Tensor|TensorLike,\n    reduction = Reduction.SUM_BY_NONZERO_WEIGHTS): O {\n  const $losses = convertToTensor(losses, 'losses', 'computeWeightedLoss');\n  let $weights: Tensor = null;\n  if (weights != null) {\n    $weights = convertToTensor(weights, 'weights', 'computeWeightedLoss');\n  }\n\n  const weightedLoss = ($weights == null) ? $losses : mul($losses, $weights);\n\n  if (reduction === Reduction.NONE) {\n    return weightedLoss as O;\n  }\n  if (reduction === Reduction.SUM) {\n    return sum(weightedLoss);\n  }\n  if (reduction === Reduction.MEAN) {\n    if ($weights == null) {\n      return mean(weightedLoss);\n    } else {\n      const broadcastFactor = $losses.size / $weights.size;\n      const result = div(sum(weightedLoss), sum($weights));\n      return broadcastFactor > 1 ? div(result, scalar(broadcastFactor)) :\n                                   result as O;\n    }\n  }\n  if (reduction === Reduction.SUM_BY_NONZERO_WEIGHTS) {\n    if ($weights == null) {\n      return div(sum(weightedLoss), scalar($losses.size));\n    } else {\n      const broadcastedWeights = mul($weights, ones($losses.shape));\n\n      const numNonZeros =\n          cast(sum(notEqual(broadcastedWeights, scalar(0))), 'float32');\n      return div(sum(weightedLoss), numNonZeros);\n    }\n  }\n\n  throw Error(`Unknown reduction: ${reduction}`);\n}\nexport const computeWeightedLoss = /* @__PURE__ */ op({computeWeightedLoss_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../../tensor';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\nimport {assertShapesMatch} from '../../util';\nimport {abs} from '../abs';\nimport {Reduction} from '../loss_ops_utils';\nimport {op} from '../operation';\nimport {sub} from '../sub';\n\nimport {computeWeightedLoss} from './compute_weighted_loss';\n\n/**\n * Computes the absolute difference loss between two tensors.\n *\n * @param labels The ground truth output tensor, same dimensions as\n *    'predictions'.\n * @param predictions The predicted outputs.\n * @param weights Tensor whose rank is either 0, or the same rank as\n *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions\n *    must be either `1`, or the same as the corresponding `losses`\n *    dimension).\n * @param reduction Type of reduction to apply to loss. Should be of type\n *    `Reduction`\n *\n * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}\n */\nfunction absoluteDifference_<T extends Tensor, O extends Tensor>(\n    labels: T|TensorLike, predictions: T|TensorLike,\n    weights?: Tensor|TensorLike,\n    reduction = Reduction.SUM_BY_NONZERO_WEIGHTS): O {\n  const $labels = convertToTensor(labels, 'labels', 'absoluteDifference');\n  const $predictions =\n      convertToTensor(predictions, 'predictions', 'absoluteDifference');\n  let $weights: Tensor = null;\n  if (weights != null) {\n    $weights = convertToTensor(weights, 'weights', 'absoluteDifference');\n  }\n  assertShapesMatch(\n      $labels.shape, $predictions.shape, 'Error in absoluteDifference: ');\n\n  const losses = abs(sub($labels, $predictions));\n  return computeWeightedLoss(losses, $weights, reduction);\n}\n\nexport const absoluteDifference = /* @__PURE__ */ op({absoluteDifference_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Tensor} from '../../tensor';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\nimport {assertShapesMatch} from '../../util';\nimport {Reduction} from '../loss_ops_utils';\nimport {mul} from '../mul';\nimport {op} from '../operation';\nimport {scalar} from '../scalar';\nimport {sub} from '../sub';\nimport {sum} from '../sum';\n\nimport {computeWeightedLoss} from './compute_weighted_loss';\n\n/**\n * Computes the cosine distance loss between two tensors.\n *\n * @param labels The ground truth output tensor, same dimensions as\n *    'predictions'.\n * @param predictions The predicted outputs.\n * @param axis The dimension along which the cosine distance is computed.\n * @param weights Tensor whose rank is either 0, or the same rank as\n *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions\n *    must be either `1`, or the same as the corresponding `losses`\n *    dimension).\n * @param reduction Type of reduction to apply to loss. Should be of type\n *    `Reduction`\n *\n * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}\n */\nfunction cosineDistance_<T extends Tensor, O extends Tensor>(\n    labels: T|TensorLike, predictions: T|TensorLike, axis: number,\n    weights?: Tensor|TensorLike,\n    reduction = Reduction.SUM_BY_NONZERO_WEIGHTS): O {\n  const $labels = convertToTensor(labels, 'labels', 'cosineDistance');\n  const $predictions =\n      convertToTensor(predictions, 'predictions', 'cosineDistance');\n  let $weights: Tensor = null;\n  if (weights != null) {\n    $weights = convertToTensor(weights, 'weights', 'cosineDistance');\n  }\n  assertShapesMatch(\n      $labels.shape, $predictions.shape, 'Error in cosineDistance: ');\n\n  const one = scalar(1);\n  const losses = sub(one, sum(mul($labels, $predictions), axis, true));\n  return computeWeightedLoss(losses, $weights, reduction);\n}\nexport const cosineDistance = /* @__PURE__ */ op({cosineDistance_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Tensor} from '../../tensor';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\nimport {assertShapesMatch} from '../../util';\nimport {Reduction} from '../loss_ops_utils';\nimport {mul} from '../mul';\nimport {op} from '../operation';\nimport {relu} from '../relu';\nimport {scalar} from '../scalar';\nimport {sub} from '../sub';\n\nimport {computeWeightedLoss} from './compute_weighted_loss';\n\n/**\n * Computes the Hinge loss between two tensors.\n *\n * @param labels The ground truth output tensor, same dimensions as\n *    'predictions'.\n * @param predictions The predicted outputs.\n * @param weights Tensor whose rank is either 0, or the same rank as\n *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions\n *    must be either `1`, or the same as the corresponding `losses`\n *    dimension).\n * @param reduction Type of reduction to apply to loss. Should be of type\n *    `Reduction`\n *\n * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}\n */\nfunction hingeLoss_<T extends Tensor, O extends Tensor>(\n    labels: T|TensorLike, predictions: T|TensorLike,\n    weights?: Tensor|TensorLike,\n    reduction = Reduction.SUM_BY_NONZERO_WEIGHTS): O {\n  let $labels = convertToTensor(labels, 'labels', 'hingeLoss');\n  const $predictions = convertToTensor(predictions, 'predictions', 'hingeLoss');\n  let $weights: Tensor = null;\n  if (weights != null) {\n    $weights = convertToTensor(weights, 'weights', 'hingeLoss');\n  }\n  assertShapesMatch($labels.shape, $predictions.shape, 'Error in hingeLoss: ');\n\n  const one = scalar(1);\n  // Convert binary labels to (-1, 1)\n  $labels = sub(mul(scalar(2), $labels), one);\n  const losses = relu(sub(one, mul($labels, $predictions)));\n  return computeWeightedLoss(losses, $weights, reduction);\n}\nexport const hingeLoss = /* @__PURE__ */ op({hingeLoss_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../../tensor';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\nimport {assertShapesMatch} from '../../util';\nimport {abs} from '../abs';\nimport {add} from '../add';\nimport {Reduction} from '../loss_ops_utils';\nimport {minimum} from '../minimum';\nimport {mul} from '../mul';\nimport {op} from '../operation';\nimport {scalar} from '../scalar';\nimport {square} from '../square';\nimport {sub} from '../sub';\n\nimport {computeWeightedLoss} from './compute_weighted_loss';\n\n/**\n * Computes the Huber loss between two tensors.\n *\n * @param labels The ground truth output tensor, same dimensions as\n *    'predictions'.\n * @param predictions The predicted outputs.\n * @param weights Tensor whose rank is either 0, or the same rank as\n *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions\n *    must be either `1`, or the same as the corresponding `losses`\n *    dimension).\n * @param delta Point where Huber loss changes from quadratic to linear.\n * @param reduction Type of reduction to apply to loss. Should be of type\n *    `Reduction`.\n *\n * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}\n */\nfunction huberLoss_<T extends Tensor, O extends Tensor>(\n    labels: T|TensorLike, predictions: T|TensorLike,\n    weights?: Tensor|TensorLike, delta = 1.0,\n    reduction = Reduction.SUM_BY_NONZERO_WEIGHTS): O {\n  const $labels = convertToTensor(labels, 'labels', 'huberLoss');\n  const $predictions = convertToTensor(predictions, 'predictions', 'huberLoss');\n  let $weights: Tensor = null;\n  if (weights != null) {\n    $weights = convertToTensor(weights, 'weights', 'huberLoss');\n  }\n  assertShapesMatch($labels.shape, $predictions.shape, 'Error in huberLoss: ');\n\n  const deltaScalar = scalar(delta);\n  const error = abs(sub($predictions, $labels));\n  const quadratic = minimum(error, deltaScalar);\n  const linear = sub(error, quadratic);\n\n  const losses =\n      add(mul(scalar(0.5), square(quadratic)), mul(deltaScalar, linear));\n  return computeWeightedLoss(losses, $weights, reduction);\n}\nexport const huberLoss = /* @__PURE__ */ op({huberLoss_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../../tensor';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\nimport {assertShapesMatch} from '../../util';\nimport {add} from '../add';\nimport {log} from '../log';\nimport {Reduction} from '../loss_ops_utils';\nimport {mul} from '../mul';\nimport {neg} from '../neg';\nimport {op} from '../operation';\nimport {scalar} from '../scalar';\nimport {sub} from '../sub';\n\nimport {computeWeightedLoss} from './compute_weighted_loss';\n\n/**\n * Computes the log loss between two tensors.\n *\n * @param labels The ground truth output tensor, same dimensions as\n *    'predictions'.\n * @param predictions The predicted outputs.\n * @param weights Tensor whose rank is either 0, or the same rank as\n *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions\n *    must be either `1`, or the same as the corresponding `losses`\n *    dimension).\n * @param epsilon A small increment to avoid taking log of zero\n * @param reduction Type of reduction to apply to loss. Should be of type\n *    `Reduction`\n *\n * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}\n */\nfunction logLoss_<T extends Tensor, O extends Tensor>(\n    labels: T|TensorLike, predictions: T|TensorLike,\n    weights?: Tensor|TensorLike, epsilon = 1e-7,\n    reduction = Reduction.SUM_BY_NONZERO_WEIGHTS): O {\n  const $labels = convertToTensor(labels, 'labels', 'logLoss');\n  const $predictions = convertToTensor(predictions, 'predictions', 'logLoss');\n  let $weights: Tensor = null;\n  if (weights != null) {\n    $weights = convertToTensor(weights, 'weights', 'logLoss');\n  }\n  assertShapesMatch($labels.shape, $predictions.shape, 'Error in logLoss: ');\n\n  const one = scalar(1);\n  const epsilonScalar = scalar(epsilon);\n\n  const l1 = neg(mul($labels, log(add($predictions, epsilonScalar))));\n  const l2 =\n      mul(sub(one, $labels), log(add(sub(one, $predictions), epsilonScalar)));\n  const losses = sub(l1, l2);\n  return computeWeightedLoss(losses, $weights, reduction);\n}\nexport const logLoss = /* @__PURE__ */ op({logLoss_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../../tensor';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\nimport {assertShapesMatch} from '../../util';\nimport {Reduction} from '../loss_ops_utils';\nimport {op} from '../operation';\nimport {squaredDifference} from '../squared_difference';\n\nimport {computeWeightedLoss} from './compute_weighted_loss';\n\n/**\n * Computes the mean squared error between two tensors.\n *\n * @param labels The ground truth output tensor, same dimensions as\n *    'predictions'.\n * @param predictions The predicted outputs.\n * @param weights Tensor whose rank is either 0, or the same rank as\n *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions\n *    must be either `1`, or the same as the corresponding `losses`\n *    dimension).\n * @param reduction Type of reduction to apply to loss. Should be of type\n *    `Reduction`\n *\n * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}\n */\nfunction meanSquaredError_<T extends Tensor, O extends Tensor>(\n    labels: T|TensorLike, predictions: T|TensorLike,\n    weights?: Tensor|TensorLike,\n    reduction = Reduction.SUM_BY_NONZERO_WEIGHTS): O {\n  const $labels = convertToTensor(labels, 'labels', 'meanSquaredError');\n  const $predictions =\n      convertToTensor(predictions, 'predictions', 'meanSquaredError');\n  let $weights: Tensor = null;\n  if (weights != null) {\n    $weights = convertToTensor(weights, 'weights', 'meanSquaredError');\n  }\n  assertShapesMatch(\n      $labels.shape, $predictions.shape, 'Error in meanSquaredError: ');\n\n  const losses = squaredDifference($labels, $predictions);\n  return computeWeightedLoss(losses, $weights, reduction);\n}\nexport const meanSquaredError = /* @__PURE__ */ op({meanSquaredError_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../../tensor';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\nimport {assertShapesMatch} from '../../util';\nimport {abs} from '../abs';\nimport {add} from '../add';\nimport {exp} from '../exp';\nimport {log1p} from '../log1p';\nimport {Reduction} from '../loss_ops_utils';\nimport {mul} from '../mul';\nimport {neg} from '../neg';\nimport {op} from '../operation';\nimport {relu} from '../relu';\nimport {scalar} from '../scalar';\nimport {sub} from '../sub';\n\nimport {computeWeightedLoss} from './compute_weighted_loss';\n\nfunction sigmoidCrossEntropyWithLogits_<T extends Tensor, O extends Tensor>(\n    labels: T|TensorLike, logits: T|TensorLike): O {\n  const $labels =\n      convertToTensor(labels, 'labels', 'sigmoidCrossEntropyWithLogits');\n  const $logits =\n      convertToTensor(logits, 'logits', 'sigmoidCrossEntropyWithLogits');\n  assertShapesMatch(\n      $labels.shape, $logits.shape, 'Error in sigmoidCrossEntropyWithLogits: ');\n\n  /**\n   * Implementation Details:\n   *\n   * For brevity, let `x = logits`, `z = labels`.  The logistic loss is\n   *     z * -log(sigmoid(x)) + (1 - z) * -log(1 - sigmoid(x))\n   *   = z * -log(1 / (1 + exp(-x))) + (1 - z) * -log(exp(-x) / (1 + exp(-x)))\n   *   = z * log(1 + exp(-x)) + (1 - z) * (-log(exp(-x)) + log(1 + exp(-x)))\n   *   = z * log(1 + exp(-x)) + (1 - z) * (x + log(1 + exp(-x))\n   *   = (1 - z) * x + log(1 + exp(-x))\n   *   = x - x * z + log(1 + exp(-x))\n   *\n   *   For x < 0, to avoid overflow in exp(-x), we reformulate the above\n   *     x - x * z + log(1 + exp(-x))\n   *   = log(exp(x)) - x * z + log(1 + exp(-x))\n   *   = - x * z + log(1 + exp(x))\n   *\n   * Hence, to ensure stability and avoid overflow, the implementation uses\n   * this equivalent formulation:\n   *     max(x, 0) - x * z + log(1 + exp(-abs(x)))\n   */\n  const maxOutput = relu($logits);\n  const outputXTarget = mul($logits, $labels);\n  const sigmoidOutput = log1p(exp(neg(abs($logits))));\n\n  return add(sub(maxOutput, outputXTarget), sigmoidOutput);\n}\n\n/**\n * Computes the sigmoid cross entropy loss between two tensors.\n *\n * If labelSmoothing is nonzero, smooth the labels towards 1/2:\n *\n *   newMulticlassLabels = multiclassLabels * (1 - labelSmoothing)\n *                         + 0.5 * labelSmoothing\n *\n * @param multiClassLabels The ground truth output tensor of shape\n * [batch_size, num_classes], same dimensions as 'predictions'.\n * @param logits The predicted outputs.\n * @param weights Tensor whose rank is either 0, or the same rank as\n *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions\n *    must be either `1`, or the same as the corresponding `losses`\n *    dimension).\n * @param labelSmoothing If greater than 0, then smooth the labels.\n * @param reduction Type of reduction to apply to loss. Should be of type\n *    `Reduction`\n *\n * @doc { heading: 'Training', subheading: 'Losses', namespace: 'losses' }\n */\nfunction sigmoidCrossEntropy_<T extends Tensor, O extends Tensor>(\n    multiClassLabels: T|TensorLike, logits: T|TensorLike,\n    weights?: Tensor|TensorLike, labelSmoothing = 0,\n    reduction = Reduction.SUM_BY_NONZERO_WEIGHTS): O {\n  let $multiClassLabels = convertToTensor(\n      multiClassLabels, 'multiClassLabels', 'sigmoidCrossEntropy');\n  const $logits = convertToTensor(logits, 'logits', 'sigmoidCrossEntropy');\n  let $weights: Tensor = null;\n  if (weights != null) {\n    $weights = convertToTensor(weights, 'weights', 'sigmoidCrossEntropy');\n  }\n  assertShapesMatch(\n      $multiClassLabels.shape, $logits.shape, 'Error in sigmoidCrossEntropy: ');\n\n  if (labelSmoothing > 0) {\n    const labelSmoothingScalar = scalar(labelSmoothing);\n    const one = scalar(1);\n    const half = scalar(0.5);\n\n    $multiClassLabels =\n        add(mul($multiClassLabels, sub(one, labelSmoothingScalar)),\n            mul(half, labelSmoothingScalar));\n  }\n  const losses = sigmoidCrossEntropyWithLogits_($multiClassLabels, $logits);\n\n  return computeWeightedLoss(losses, $weights, reduction);\n}\n\nexport const sigmoidCrossEntropy = /* @__PURE__ */ op({sigmoidCrossEntropy_});\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {customGrad} from '../../gradients';\nimport {Tensor} from '../../tensor';\nimport {GradSaveFunc} from '../../tensor_types';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\nimport {assertShapesMatch} from '../../util';\nimport {add} from '../add';\nimport {expandShapeToKeepDim} from '../axis_util';\nimport {cast} from '../cast';\nimport {div} from '../div';\nimport {exp} from '../exp';\nimport {logSumExp} from '../log_sum_exp';\nimport {Reduction} from '../loss_ops_utils';\nimport {mul} from '../mul';\nimport {neg} from '../neg';\nimport {op} from '../operation';\nimport {reshape} from '../reshape';\nimport {scalar} from '../scalar';\nimport {sub} from '../sub';\nimport {sum} from '../sum';\n\nimport {computeWeightedLoss} from './compute_weighted_loss';\n\n/**\n * Computes softmax cross entropy between logits and labels.\n *\n * Measures the probability error in discrete classification tasks in which\n * the classes are mutually exclusive (each entry is in exactly one class).\n * For example, each CIFAR-10 image is labeled with one and only one label: an\n * image can be a dog or a truck, but not both.\n *\n * `NOTE`: While the classes are mutually exclusive, their probabilities need\n * not be. All that is required is that each row of labels is a valid\n * probability distribution. If they are not, the computation of the gradient\n * will be incorrect.\n *\n * `WARNING`: This op expects unscaled logits, since it performs a softmax on\n * logits internally for efficiency. Do not call this op with the output of\n * softmax, as it will produce incorrect results.\n *\n * logits and labels must have the same shape, e.g. [batch_size, num_classes]\n * and the same dtype.\n * @param labels The labels array.\n * @param logits The logits array.\n * @param dim The dimension softmax would be performed on. Defaults to `-1`\n *     which indicates the last dimension.\n */\nfunction softmaxCrossEntropyWithLogits_<T extends Tensor, O extends Tensor>(\n    labels: T, logits: T, dim = -1): O {\n  if (dim === -1) {\n    dim = logits.rank - 1;\n  }\n\n  if (dim !== logits.rank - 1) {\n    throw Error(\n        `Softmax cross entropy along a non-last dimension is not yet ` +\n        `supported. Labels / logits was rank ${logits.rank} ` +\n        `and dim was ${dim}`);\n  }\n  // Use a custom gradient for numerical stability.\n  const customOp =\n      customGrad((labels: Tensor, logits: Tensor, save: GradSaveFunc) => {\n        // Reference:\n        //   1. http://cs231n.github.io/linear-classify/#softmax\n        //   2. https://blog.feedly.com/tricks-of-the-trade-logsumexp/\n        const keepDims = true;\n        const lse = logSumExp(logits, [dim], keepDims);\n        const logResult = sub(cast(logits, 'float32'), lse);\n        save([labels, logResult]);\n\n        const costVector = neg(mul(logResult, labels));\n        const value: O = sum(costVector, [dim]);\n\n        const gradFunc = (dy: O, saved: Tensor[]) => {\n          const [labels, logResult] = saved;\n          const dyShape = expandShapeToKeepDim(dy.shape, [dim]);\n          return [\n            mul(reshape(dy, dyShape),\n                sub(cast(labels, 'float32'), exp(logResult))),\n            mul(reshape(dy, dyShape),\n                sub(exp(logResult), cast(labels, 'float32'))),\n          ];\n        };\n        return {value, gradFunc};\n      });\n\n  return customOp(labels, logits);\n}\n\n/**\n * Computes the softmax cross entropy loss between two tensors.\n *\n * If labelSmoothing is nonzero, smooth the labels towards 1/2:\n *\n *   newOnehotLabels = onehotLabels * (1 - labelSmoothing)\n *                         + labelSmoothing / numClasses\n *\n * @param onehotLabels One hot encoded labels\n *    [batch_size, num_classes], same dimensions as 'predictions'.\n * @param logits The predicted outputs.\n * @param weights Tensor whose rank is either 0, or 1, and must be\n *    broadcastable to `loss`  of shape [batch_size]\n * @param labelSmoothing If greater than 0, then smooth the labels.\n * @param reduction Type of reduction to apply to loss. Should be of type\n *    `Reduction`\n *\n * @doc { heading: 'Training', subheading: 'Losses', namespace: 'losses' }\n */\nfunction softmaxCrossEntropy_<T extends Tensor, O extends Tensor>(\n    onehotLabels: T|TensorLike, logits: T|TensorLike,\n    weights?: Tensor|TensorLike, labelSmoothing = 0,\n    reduction = Reduction.SUM_BY_NONZERO_WEIGHTS): O {\n  let $onehotLabels =\n      convertToTensor(onehotLabels, 'onehotLabels', 'softmaxCrossEntropy');\n  const $logits = convertToTensor(logits, 'logits', 'softmaxCrossEntropy');\n  let $weights: Tensor = null;\n\n  if (weights != null) {\n    $weights = convertToTensor(weights, 'weights', 'softmaxCrossEntropy');\n  }\n\n  assertShapesMatch(\n      $onehotLabels.shape, $logits.shape, 'Error in softmaxCrossEntropy: ');\n\n  if (labelSmoothing > 0) {\n    const labelSmoothingScalar = scalar(labelSmoothing);\n    const one = scalar(1);\n    const numClasses = scalar($onehotLabels.shape[1]);\n\n    $onehotLabels =\n        add(mul($onehotLabels, sub(one, labelSmoothingScalar)),\n            div(labelSmoothingScalar, numClasses));\n  }\n\n  const losses = softmaxCrossEntropyWithLogits_($onehotLabels, $logits);\n\n  return computeWeightedLoss(losses, $weights, reduction);\n}\n\nexport const softmaxCrossEntropy = /* @__PURE__ */ op({softmaxCrossEntropy_});\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../../engine';\nimport {SparseFillEmptyRows, SparseFillEmptyRowsInputs} from '../../kernel_names';\nimport {Scalar, Tensor, Tensor1D, Tensor2D} from '../../tensor';\nimport {NamedTensorMap} from '../../tensor_types';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {ScalarLike, TensorLike} from '../../types';\nimport {op} from '../operation';\n\n/**\n * The input SparseTensor is represented via the map of inputs {`indices`,\n * `values`, `denseShape`}. The output SparseTensor has the same `denseShape`\n * but with indices `outputIndices` and values `outputValues`. This op inserts a\n * single entry for every row that doesn't have any values. The index is created\n * as `[row, 0, ..., 0]` and the inserted value is `defaultValue`.\n *\n * For example, suppose `spInput` has shape [5, 6] and non-empty values:\n * [0, 1]: a\n * [0, 3]: b\n * [2, 0]: c\n * [3, 1]: d\n *\n * Rows 1 and 4 are empty, so the output will be of shape [5, 6] with values:\n * [0, 1]: a\n * [0, 3]: b\n * [1, 0]: `defaultValue`\n * [2, 0]: c\n * [3, 1]: d\n * [4, 0]: `defaultValue`\n *\n * The output SparseTensor will be in row-major order and will have the same\n * shape as the input.\n *\n * This op also returns an indicator vector shaped [dense_shape[0]] such that\n * emptyRowIndicator[i] = True iff row i was an empty row.\n *\n * And a reverse index map vector shaped [indices.shape[0]] that is used during\n * backpropagation, reverseIndexMap[i] = outi s.t. indices[i, j] ==\n * outputIndices[outi, j] for all j\n *\n * ```js\n * const result = tf.sparse.sparseFillEmptyRows(\n *   [[0, 0], [1, 0], [1, 3], [1, 4], [3, 2], [3, 3]],\n *   [0, 10, 13, 14, 32, 33], [5, 6], -1);\n * console.log(result);\n * result['outputIndices'].print(); // [[0, 0], [1, 0], [1, 3], [1, 4],\n *                                  //  [2, 0], [3, 2], [3, 3], [4, 0]]\n * result['outputValues'].print(); // [0, 10, 13, 14,-1, 32, 33, -1]\n * result['emptyRowIndicator'].print(); // [false, false, true, false, true]\n * result['reverseIndexMap'].print(); // [0, 1, 2, 3, 5, 6]\n * ```\n * @param indices: 2-D. The indices of the sparse tensor.\n * @param values: 1-D. The values of the sparse tensor.\n * @param denseShape: 1-D. The shape of the sparse tensor.\n * @param defaultValue: 0-D. Default value to insert into location [row, 0, ...,\n *     0] for rows missing from the input sparse tensor.\n * @return A map with the following properties:\n *     - outputIndices\n *     - outputValues: 1-D. The values of the filled sparse tensor.\n *     - emptyRowIndicator: 1-D. Whether the dense row was missing in the input\n * sparse tensor.\n *     - reverseIndexMap: 1-D. A map from the input indices to the output\n * indices.\n * @doc {heading: 'Operations', subheading: 'Sparse'}\n */\nfunction sparseFillEmptyRows_(\n    indices: Tensor2D|TensorLike, values: Tensor1D|TensorLike,\n    denseShape: Tensor1D|TensorLike,\n    defaultValue: Scalar|ScalarLike): NamedTensorMap {\n  const $indices =\n      convertToTensor(indices, 'indices', 'sparseFillEmptyRows', 'int32');\n  const $values = convertToTensor(values, 'values', 'sparseFillEmptyRows');\n  const $denseShape =\n      convertToTensor(denseShape, 'denseShape', 'sparseFillEmptyRows', 'int32');\n  const $defaultValue = convertToTensor(\n      defaultValue, 'defaultValue', 'sparseFillEmptyRows', $values.dtype);\n\n  if ($indices.rank !== 2) {\n    throw new Error(`Indices should be Tensor2D but received shape\n        ${$indices.shape}`);\n  }\n  if ($values.rank !== 1) {\n    throw new Error(\n        `Values should be Tensor1D but received shape ${$values.shape}`);\n  }\n  if ($denseShape.rank !== 1) {\n    throw new Error(`Dense shape should be Tensor1D but received shape ${\n        $denseShape.shape}`);\n  }\n  if ($defaultValue.rank !== 0) {\n    throw new Error(`Default value should be a scalar but received shape ${\n        $defaultValue.shape}`);\n  }\n\n  const inputs: SparseFillEmptyRowsInputs = {\n    indices: $indices,\n    values: $values,\n    denseShape: $denseShape,\n    defaultValue: $defaultValue\n  };\n\n  const result: Tensor[] = ENGINE.runKernel(SparseFillEmptyRows, inputs as {});\n  return {\n    outputIndices: result[0],\n    outputValues: result[1],\n    emptyRowIndicator: result[2],\n    reverseIndexMap: result[3]\n  };\n}\n\nexport const sparseFillEmptyRows = /* @__PURE__ */ op({sparseFillEmptyRows_});\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../../engine';\nimport {SparseReshape, SparseReshapeInputs} from '../../kernel_names';\nimport {Tensor, Tensor1D, Tensor2D} from '../../tensor';\nimport {NamedTensorMap} from '../../tensor_types';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\nimport {op} from '../operation';\n\n/**\n * This operation has the same semantics as reshape on the represented dense\n * tensor. The `inputIndices` are recomputed based on the requested `newShape`.\n * If one component of `newShape` is the special value -1, the size of that\n * dimension is computed so that the total dense size remains constant. At most\n * one component of `newShape` can be -1. The number of dense elements implied\n * by `newShape` must be the same as the number of dense elements originally\n * implied by `inputShape`. Reshaping does not affect the order of values in the\n * SparseTensor. If the input tensor has rank R_in and N non-empty values, and\n * `newShape` has length R_out, then `inputIndices` has shape [N, R_in],\n * `inputShape` has length R_in, `outputIndices` has shape [N, R_out], and\n * `outputShape` has length R_out.\n *\n * ```js\n * const result = tf.sparse.sparseReshape(\n *   [[0, 0, 0], [0, 0, 1], [0, 1, 0], [1, 0, 0], [1, 2, 3]],\n *   [2, 3, 6], [9, -1]);\n * console.log(result);\n * result['outputIndices'].print(); //[[0, 0], [0, 1], [1, 2], [4, 2], [8, 1]]\n * result['outputShape'].print(); // [9, 4]\n * ```\n * @param inputIndices: 2-D. N x R_in matrix with the indices of non-empty\n * values in a SparseTensor.\n * @param inputShape: 1-D. R_in Tensor1D with the input SparseTensor's dense\n * shape.\n * @param newShape: 1-D. R_out Tensor1D with the requested new dense shape.\n * @return A map with the following properties:\n *     - outputIndices: 2-D. N x R_out matrix with the updated indices of\n *       non-empty values in the output SparseTensor.\n *     - outputShape: 1-D. R_out vector with the full dense shape of the output\n *       SparseTensor. This is the same as newShape but with any -1 dimensions\n *        filled in.\n * @doc {heading: 'Operations', subheading: 'Sparse'}\n */\nfunction sparseReshape_(\n    inputIndices: Tensor2D|TensorLike, inputShape: Tensor1D|TensorLike,\n    newShape: Tensor1D|TensorLike): NamedTensorMap {\n  const $inputIndices =\n      convertToTensor(inputIndices, 'inputIndices', 'sparseReshape', 'int32');\n  const $inputShape =\n      convertToTensor(inputShape, 'inputShape', 'sparseReshape', 'int32');\n  const $newShape =\n      convertToTensor(newShape, 'newShape', 'sparseReshape', 'int32');\n\n  if ($inputIndices.rank !== 2) {\n    throw new Error(`Input indices should be Tensor2D but received shape\n        ${$inputIndices.shape}`);\n  }\n  if ($inputShape.rank !== 1) {\n    throw new Error(`Input shape should be Tensor1D but received shape ${\n        $inputShape.shape}`);\n  }\n  if ($newShape.rank !== 1) {\n    throw new Error(\n        `New shape should be Tensor1D but received shape ${$newShape.shape}`);\n  }\n\n  const inputs: SparseReshapeInputs = {\n    inputIndices: $inputIndices,\n    inputShape: $inputShape,\n    newShape: $newShape\n  };\n  const result: Tensor[] = ENGINE.runKernel(SparseReshape, inputs as {});\n  return {outputIndices: result[0], outputShape: result[1]};\n}\n\nexport const sparseReshape = /* @__PURE__ */ op({sparseReshape_});\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../../engine';\nimport {SparseSegmentMean, SparseSegmentMeanInputs} from '../../kernel_names';\nimport {Tensor, Tensor1D} from '../../tensor';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\nimport {op} from '../operation';\n\n/**\n * Computes the mean along sparse segments of a tensor.\n *\n * ```js\n * const c = tf.tensor2d([[1,2,3,4], [-1,-2,-3,-4], [6,7,8,9]]);\n * // Select two rows, one segment.\n * const result1 = tf.sparse.sparseSegmentMean(c,\n *                                           tf.tensor1d([0, 1], 'int32'),\n *                                           tf.tensor1d([0, 0], 'int32'));\n * result1.print(); // [[0, 0, 0, 0]]\n *\n * // Select two rows, two segments.\n * const result2 = tf.sparse.sparseSegmentMean(c,\n *                                             tf.tensor1d([0, 1], 'int32'),\n *                                             tf.tensor1d([0, 1], 'int32'));\n * result2.print(); // [[1, 2, 3, 4], [-1, -2, -3, -4]]\n *\n * // Select all rows, two segments.\n * const result3 = tf.sparse.sparseSegmentMean(c,\n *                                             tf.tensor1d([0, 1, 2], 'int32'),\n *                                             tf.tensor1d([0, 1, 1], 'int32'));\n * result3.print(); // [[1.0, 2.0, 3.0, 4.0], [2.5, 2.5, 2.5, 2.5]]\n * ```\n * @param data: A Tensor of at least one dimension with data that will be\n *     assembled in the output.\n * @param indices: A 1-D Tensor with indices into data. Has same rank as\n *     segmentIds.\n * @param segmentIds: A 1-D Tensor with indices into the output Tensor. Values\n *     should be sorted and can be repeated.\n * @return Has same shape as data, except for dimension 0 which has equal to\n *         the number of segments.\n *\n * @doc {heading: 'Operations', subheading: 'Sparse'}\n */\nfunction sparseSegmentMean_(\n    data: Tensor|TensorLike, indices: Tensor1D|TensorLike,\n    segmentIds: Tensor1D|TensorLike): Tensor {\n  const $data = convertToTensor(data, 'data', 'sparseSegmentMean');\n  const $indices =\n      convertToTensor(indices, 'indices', 'sparseSegmentMean', 'int32');\n  const $segmentIds =\n      convertToTensor(segmentIds, 'segmentIds', 'sparseSegmentMean', 'int32');\n\n  if ($data.rank < 1) {\n    throw new Error(\n        `Data should be at least 1 dimensional but received scalar`);\n  }\n  if ($indices.rank !== 1) {\n    throw new Error(`Indices should be Tensor1D but received shape\n          ${$indices.shape}`);\n  }\n  if ($segmentIds.rank !== 1) {\n    throw new Error(`Segment ids should be Tensor1D but received shape\n          ${$segmentIds.shape}`);\n  }\n\n  const inputs: SparseSegmentMeanInputs = {\n    data: $data,\n    indices: $indices,\n    segmentIds: $segmentIds\n  };\n\n  return ENGINE.runKernel(SparseSegmentMean, inputs as {});\n}\n\nexport const sparseSegmentMean = /* @__PURE__ */ op({sparseSegmentMean_});\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../../engine';\nimport {SparseSegmentSum, SparseSegmentSumInputs} from '../../kernel_names';\nimport {Tensor, Tensor1D} from '../../tensor';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\nimport {op} from '../operation';\n\n/**\n * Computes the sum along sparse segments of a tensor.\n *\n * ```js\n * const c = tf.tensor2d([[1,2,3,4], [-1,-2,-3,-4], [5,6,7,8]]);\n * // Select two rows, one segment.\n * const result1 = tf.sparse.sparseSegmentSum(c,\n *                                           tf.tensor1d([0, 1], 'int32'),\n *                                           tf.tensor1d([0, 0], 'int32'));\n * result1.print(); // [[0, 0, 0, 0]]\n *\n * // Select two rows, two segments.\n * const result2 = tf.sparse.sparseSegmentSum(c,\n *                                           tf.tensor1d([0, 1], 'int32'),\n *                                           tf.tensor1d([0, 1], 'int32'));\n * result2.print(); // [[1, 2, 3, 4], [-1, -2, -3, -4]]\n *\n * // Select all rows, two segments.\n * const result3 = tf.sparse.sparseSegmentSum(c,\n *                                           tf.tensor1d([0, 1, 2], 'int32'),\n *                                           tf.tensor1d([0, 0, 1], 'int32'));\n * result3.print(); // [[0, 0, 0, 0], [5, 6, 7, 8]]\n * ```\n * @param data: A Tensor of at least one dimension with data that will be\n *     assembled in the output.\n * @param indices: A 1-D Tensor with indices into data. Has same rank as\n *     segmentIds.\n * @param segmentIds: A 1-D Tensor with indices into the output Tensor. Values\n *     should be sorted and can be repeated.\n * @return Has same shape as data, except for dimension 0 which has equal to\n *         the number of segments.\n *\n * @doc {heading: 'Operations', subheading: 'Sparse'}\n */\nfunction sparseSegmentSum_(\n    data: Tensor|TensorLike, indices: Tensor1D|TensorLike,\n    segmentIds: Tensor1D|TensorLike): Tensor {\n  const $data = convertToTensor(data, 'data', 'sparseSegmentSum');\n  const $indices =\n      convertToTensor(indices, 'indices', 'sparseSegmentSum', 'int32');\n  const $segmentIds =\n      convertToTensor(segmentIds, 'segmentIds', 'sparseSegmentSum', 'int32');\n\n  if ($data.rank < 1) {\n    throw new Error(\n        `Data should be at least 1 dimensional but received scalar`);\n  }\n  if ($indices.rank !== 1) {\n    throw new Error(`Indices should be Tensor1D but received shape\n         ${$indices.shape}`);\n  }\n  if ($segmentIds.rank !== 1) {\n    throw new Error(`Segment ids should be Tensor1D but received shape\n         ${$segmentIds.shape}`);\n  }\n\n  const inputs: SparseSegmentSumInputs = {\n    data: $data,\n    indices: $indices,\n    segmentIds: $segmentIds\n  };\n\n  return ENGINE.runKernel(SparseSegmentSum, inputs as {});\n}\n\nexport const sparseSegmentSum = /* @__PURE__ */ op({sparseSegmentSum_});\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../../engine';\nimport {StringNGrams, StringNGramsAttrs, StringNGramsInputs} from '../../kernel_names';\nimport {Tensor, Tensor1D} from '../../tensor';\nimport {NamedTensorMap} from '../../tensor_types';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\nimport {op} from '../operation';\n\n/**\n * Creates ngrams from ragged string data.\n *\n * This op accepts a ragged tensor with 1 ragged dimension containing only\n * strings and outputs a ragged tensor with 1 ragged dimension containing ngrams\n * of that string, joined along the innermost axis.\n *\n * ```js\n * const result = tf.string.stringNGrams(\n *   ['a', 'b', 'c', 'd'], tf.tensor1d([0, 2, 4], 'int32'),\n *   '|', [1, 2], 'LP', 'RP', -1, false);\n * result['nGrams'].print(); // ['a', 'b', 'LP|a', 'a|b', 'b|RP',\n *                           //  'c', 'd', 'LP|c', 'c|d', 'd|RP']\n * result['nGramsSplits'].print(); // [0, 5, 10]\n * ```\n * @param data: The values tensor of the ragged string tensor to make ngrams out\n *     of. Must be a 1D string tensor.\n * @param dataSplits: The splits tensor of the ragged string tensor to make\n *     ngrams out of.\n * @param separator: The string to append between elements of the token. Use \"\"\n *     for no separator.\n * @param nGramWidths: The sizes of the ngrams to create.\n * @param leftPad: The string to use to pad the left side of the ngram sequence.\n *     Only used if pad_width !== 0.\n * @param rightPad: The string to use to pad the right side of the ngram\n *     sequence. Only used if pad_width !== 0.\n * @param padWidth: The number of padding elements to add to each side of each\n *     sequence. Note that padding will never be greater than `nGramWidths`-1\n *     regardless of this value. If `padWidth`=-1, then add max(`nGramWidths`)-1\n *     elements.\n * @param preserveShortSequences: If true, then ensure that at least one ngram\n *     is generated for each input sequence. In particular, if an input sequence\n *     is shorter than min(ngramWidth) + 2*padWidth, then generate a single\n *     ngram containing the entire sequence. If false, then no ngrams are\n *     generated for these short input sequences.\n * @return A map with the following properties:\n *     - nGrams: The values tensor of the output ngrams ragged tensor.\n *     - nGramsSplits: The splits tensor of the output ngrams ragged tensor.\n *\n * @doc {heading: 'Operations', subheading: 'String'}\n */\nfunction stringNGrams_(\n    data: Tensor1D|TensorLike, dataSplits: Tensor|TensorLike, separator: string,\n    nGramWidths: number[], leftPad: string, rightPad: string, padWidth: number,\n    preserveShortSequences: boolean): NamedTensorMap {\n  const $data = convertToTensor(data, 'data', 'stringNGrams', 'string');\n  if ($data.dtype !== 'string') {\n    throw new Error('Data must be of datatype string');\n  }\n  if ($data.shape.length !== 1) {\n    throw new Error(`Data must be a vector, saw: ${$data.shape}`);\n  }\n\n  const $dataSplits = convertToTensor(dataSplits, 'dataSplits', 'stringNGrams');\n  if ($dataSplits.dtype !== 'int32') {\n    throw new Error('Data splits must be of datatype int32');\n  }\n\n  const attrs: StringNGramsAttrs = {\n    separator,\n    nGramWidths,\n    leftPad,\n    rightPad,\n    padWidth,\n    preserveShortSequences\n  };\n\n  const inputs: StringNGramsInputs = {data: $data, dataSplits: $dataSplits};\n  const result: Tensor[] =\n      ENGINE.runKernel(StringNGrams, inputs as {}, attrs as {});\n  return {nGrams: result[0], nGramsSplits: result[1]};\n}\n\nexport const stringNGrams = /* @__PURE__ */ op({stringNGrams_});\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../../engine';\nimport {StringSplit, StringSplitAttrs, StringSplitInputs} from '../../kernel_names';\nimport {Scalar, Tensor, Tensor1D} from '../../tensor';\nimport {NamedTensorMap} from '../../tensor_types';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {ScalarLike, TensorLike} from '../../types';\nimport {op} from '../operation';\n\n/**\n * Split elements of `input` based on `delimiter` into a SparseTensor .\n *\n * Let N be the size of source (typically N will be the batch size). Split each\n * element of `input` based on `delimiter` and return a SparseTensor containing\n * the splitted tokens. Empty tokens are ignored if `skipEmpty` is set to True.\n *\n * `delimiter` can be empty, or a string of split characters. If `delimiter` is\n * an empty string, each element of `input` is split into individual\n * character strings. Otherwise every character of `delimiter` is a potential\n * split point.\n *\n * ```js\n * const result = tf.string.stringSplit(['hello world',  'a b c'], ' ');\n * result['indices'].print(); // [[0, 0], [0, 1], [1, 0], [1, 1], [1, 2]]\n * result['values'].print(); // ['hello', 'world', 'a', 'b', 'c']\n * result['shape'].print(); // [2, 3]\n * ```\n * @param input: 1-D. Strings to split.\n * @param delimiter: 0-D. Delimiter characters, or empty string.\n * @param skipEmpty: Optional. If true, skip the empty strings from the result.\n *     Defaults to true.\n * @return A map with the following properties:\n *     - indices: A dense matrix of int32 representing the indices of the sparse\n *       tensor.\n *     - values: A vector of strings corresponding to the splited values.\n *     - shape: a length-2 vector of int32 representing the shape of the sparse\n * tensor, where the first value is N and the second value is the maximum number\n * of tokens in a single input entry.\n *\n * @doc {heading: 'Operations', subheading: 'String'}\n */\nfunction stringSplit_(\n    input: Tensor1D|TensorLike, delimiter: Scalar|ScalarLike,\n    skipEmpty = true): NamedTensorMap {\n  const $input = convertToTensor(input, 'input', 'stringSplit', 'string');\n  const $delimiter =\n      convertToTensor(delimiter, 'delimiter', 'stringSplit', 'string');\n\n  if ($input.rank !== 1) {\n    throw new Error(\n        `Input should be Tensor1D but received shape ${$input.shape}`);\n  }\n  if ($delimiter.rank !== 0) {\n    throw new Error(\n        `Delimiter should be a scalar but received shape ${$delimiter.shape}`);\n  }\n\n  const attrs: StringSplitAttrs = {skipEmpty};\n  const inputs: StringSplitInputs = {input: $input, delimiter: $delimiter};\n  const result: Tensor[] =\n      ENGINE.runKernel(StringSplit, inputs as {}, attrs as {});\n  return {indices: result[0], values: result[1], shape: result[2]};\n}\n\nexport const stringSplit = /* @__PURE__ */ op({stringSplit_});\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../../engine';\nimport {StringToHashBucketFast, StringToHashBucketFastAttrs, StringToHashBucketFastInputs} from '../../kernel_names';\nimport {Tensor} from '../../tensor';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\nimport {op} from '../operation';\n\n/**\n * Converts each string in the input Tensor to its hash mod by a number of\n * buckets.\n *\n * The hash function is deterministic on the content of the string within the\n * process and will never change. However, it is not suitable for cryptography.\n * This function may be used when CPU time is scarce and inputs are trusted or\n * unimportant. There is a risk of adversaries constructing inputs that all hash\n * to the same bucket.\n *\n * ```js\n * const result = tf.string.stringToHashBucketFast(\n *   ['Hello', 'TensorFlow', '2.x'], 3);\n * result.print(); // [0, 2, 2]\n * ```\n * @param input: The strings to assign a hash bucket.\n * @param numBuckets: The number of buckets.\n * @return A Tensor of the same shape as the input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'String'}\n */\nfunction stringToHashBucketFast_(\n    input: Tensor|TensorLike, numBuckets: number): Tensor {\n  const $input =\n      convertToTensor(input, 'input', 'stringToHashBucketFast', 'string');\n  const attrs: StringToHashBucketFastAttrs = {numBuckets};\n\n  if (numBuckets <= 0) {\n    throw new Error(`Number of buckets must be at least 1`);\n  }\n\n  const inputs: StringToHashBucketFastInputs = {input: $input};\n  return ENGINE.runKernel(StringToHashBucketFast, inputs as {}, attrs as {});\n}\n\nexport const stringToHashBucketFast = /* @__PURE__ */ op({stringToHashBucketFast_});\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport enum RowPartitionType {\n  FIRST_DIM_SIZE,\n  VALUE_ROWIDS,\n  ROW_LENGTHS,\n  ROW_SPLITS,\n  ROW_LIMITS,\n  ROW_STARTS\n}\n\nexport function combineRaggedTensorToTensorShapes(\n    raggedRank: number, shape: number[], valueShape: number[]) {\n  // Test for consistency of valueShape and shape specified.\n  // If shape is unspecified and valueShape is specified, then copy\n  // over the size from the valueShape dimension.\n\n  let outputShape: number[] = new Array();\n  if (valueShape == null && shape == null) {\n    return outputShape;\n  }\n\n  if (shape == null) {\n    // Here, value_shape must be of known size.\n    while (outputShape.length < raggedRank + valueShape.length) {\n      outputShape.push(-1);\n    }\n  } else {\n    outputShape = shape.slice();\n  }\n  if (valueShape == null) {\n    return outputShape;\n  }\n  // At this point, valueShape and output_shape have known ranks.\n  if (raggedRank + valueShape.length !== outputShape.length) {\n    throw new Error(\n        `rt input.shape and shape=${shape} are incompatible: rt input.rank = ${\n            raggedRank +\n            valueShape.length}, but shape.rank = ${outputShape.length}`);\n  }\n\n  for (let i = 1; i < valueShape.length; ++i) {\n    const valueDim = valueShape[i];\n    const outputShapeDimIndex =\n        outputShape[outputShape.length - valueShape.length + i];\n    const outputShapeDim = outputShape[outputShapeDimIndex];\n\n    if (valueDim >= 0) {\n      if (outputShapeDim >= 0) {\n        if (outputShapeDim !== valueDim) {\n          throw new Error(`rt input.shape and shape=${\n              shape} are incompatible: rt input.shape[${i + raggedRank}] = ${\n              valueDim} but shape[${i + raggedRank}] = ${outputShapeDim}`);\n        }\n      } else {\n        outputShape[outputShapeDimIndex] = valueDim;\n      }\n    }\n  }\n  return outputShape;\n}\n\nexport function getRowPartitionTypesHelper(rowPartitionTypeStrings: string[]) {\n  const stringToType = {\n    'FIRST_DIM_SIZE': RowPartitionType.FIRST_DIM_SIZE,\n    'VALUE_ROWIDS': RowPartitionType.VALUE_ROWIDS,\n    'ROW_LENGTHS': RowPartitionType.ROW_LENGTHS,\n    'ROW_SPLITS': RowPartitionType.ROW_SPLITS,\n    'ROW_LIMITS': RowPartitionType.ROW_LIMITS,\n    'ROW_STARTS': RowPartitionType.ROW_STARTS\n  };\n\n  const result: RowPartitionType[] = [];\n  for (const typeStr of rowPartitionTypeStrings) {\n    if (typeStr in stringToType) {\n      result.push(stringToType[typeStr as keyof typeof stringToType]);\n    } else {\n      break;\n    }\n  }\n\n  return result;\n}\n\nexport function getRaggedRank(rowPartitionTypes: RowPartitionType[]) {\n  if (rowPartitionTypes.length === 0) {\n    return 0;\n  }\n  if (rowPartitionTypes[0] === RowPartitionType.FIRST_DIM_SIZE) {\n    return rowPartitionTypes.length - 1;\n  }\n  return rowPartitionTypes.length;\n}\n\nexport function validateDefaultValueShape(\n    defaultValueShape: number[], valueShape: number[]) {\n  if (defaultValueShape == null || valueShape == null) {\n    return;\n  }\n\n  const defaultNDims = defaultValueShape.length;\n  const valuesNDims = valueShape.length;\n  if (defaultNDims >= valuesNDims) {\n    throw new Error(`defaultValue.shape=${\n        defaultValueShape} and ragged tensor flatValues.shape=${\n        valueShape}, are incompatible: defaultValue.rank = ${\n        defaultNDims} must be less than ragged tensor input flatValues.rank = ${\n        valuesNDims})`);\n  }\n  for (let i = 0; i < Math.min(defaultNDims, valuesNDims - 1); ++i) {\n    const defaultDim = defaultValueShape[i];\n    const valueDim = valueShape[i + 1];\n    if (defaultDim >= 0 && valueDim >= 0 && defaultDim !== 1 &&\n        defaultDim !== valueDim) {\n      throw new Error(`defaultValue.shape=${\n          defaultValueShape}, and ragged tensor input flatValues.shape=${\n          valueShape} are incompatible: defaultValue.shape[${\n          i - defaultValueShape.length}] = ${\n          defaultDim} but ragged tensor input.flatValues.shape[${\n          i - defaultValueShape.length}] = ${valueDim}`);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Modularized ops.\nexport {abs} from './abs';\nexport {acos} from './acos';\nexport {acosh} from './acosh';\nexport {add} from './add';\nexport {addN} from './add_n';\nexport {all} from './all';\nexport {any} from './any';\nexport {argMax} from './arg_max';\nexport {argMin} from './arg_min';\nexport {asin} from './asin';\nexport {asinh} from './asinh';\nexport {atan} from './atan';\nexport {atan2} from './atan2';\nexport {atanh} from './atanh';\nexport {avgPool} from './avg_pool';\nexport {avgPool3d} from './avg_pool_3d';\nexport {basicLSTMCell} from './basic_lstm_cell';\nexport {batchToSpaceND} from './batch_to_space_nd';\nexport {batchNorm} from './batchnorm';\nexport {batchNorm2d} from './batchnorm2d';\nexport {batchNorm3d} from './batchnorm3d';\nexport {batchNorm4d} from './batchnorm4d';\nexport {bincount} from './bincount';\nexport {broadcastArgs} from './broadcast_args';\nexport {broadcastTo} from './broadcast_to';\nexport {buffer} from './buffer';\nexport {cast} from './cast';\nexport {ceil} from './ceil';\nexport {clipByValue} from './clip_by_value';\nexport {clone} from './clone';\nexport {complex} from './complex';\nexport {concat} from './concat';\nexport {concat1d} from './concat_1d';\nexport {concat2d} from './concat_2d';\nexport {concat3d} from './concat_3d';\nexport {concat4d} from './concat_4d';\nexport {conv1d} from './conv1d';\nexport {conv2d} from './conv2d';\nexport {conv2dTranspose} from './conv2d_transpose';\nexport {conv3d} from './conv3d';\nexport {conv3dTranspose} from './conv3d_transpose';\nexport {cos} from './cos';\nexport {cosh} from './cosh';\nexport {cumprod} from './cumprod';\nexport {cumsum} from './cumsum';\nexport {denseBincount} from './dense_bincount';\nexport {depthToSpace} from './depth_to_space';\nexport {depthwiseConv2d} from './depthwise_conv2d';\nexport {diag} from './diag';\nexport {dilation2d} from './dilation2d';\nexport {div} from './div';\nexport {divNoNan} from './div_no_nan';\nexport {dot} from './dot';\nexport {einsum} from './einsum';\nexport {elu} from './elu';\nexport {equal} from './equal';\nexport {erf} from './erf';\nexport {euclideanNorm} from './euclidean_norm';\nexport {exp} from './exp';\nexport {expandDims} from './expand_dims';\nexport {expm1} from './expm1';\nexport {eye} from './eye';\nexport {fill} from './fill';\nexport {floor} from './floor';\nexport {floorDiv} from './floorDiv';\nexport {gather} from './gather';\nexport {greater} from './greater';\nexport {greaterEqual} from './greater_equal';\nexport {imag} from './imag';\nexport {isFinite} from './is_finite';\nexport {isInf} from './is_inf';\nexport {isNaN} from './is_nan';\nexport {leakyRelu} from './leaky_relu';\nexport {less} from './less';\nexport {lessEqual} from './less_equal';\nexport {linspace} from './linspace';\nexport {localResponseNormalization} from './local_response_normalization';\nexport {log} from './log';\nexport {log1p} from './log1p';\nexport {logSigmoid} from './log_sigmoid';\nexport {logSoftmax} from './log_softmax';\nexport {logSumExp} from './log_sum_exp';\nexport {logicalAnd} from './logical_and';\nexport {logicalNot} from './logical_not';\nexport {logicalOr} from './logical_or';\nexport {logicalXor} from './logical_xor';\nexport {lowerBound} from './lower_bound';\nexport {matMul} from './mat_mul';\nexport {max} from './max';\nexport {maxPool} from './max_pool';\nexport {maxPool3d} from './max_pool_3d';\nexport {maxPoolWithArgmax} from './max_pool_with_argmax';\nexport {maximum} from './maximum';\nexport {mean} from './mean';\nexport {meshgrid} from './meshgrid';\nexport {min} from './min';\nexport {minimum} from './minimum';\nexport {mirrorPad} from './mirror_pad';\nexport {mod} from './mod';\nexport {moments} from './moments';\nexport {mul} from './mul';\nexport {LSTMCellFunc, multiRNNCell} from './multi_rnn_cell';\nexport {multinomial} from './multinomial';\nexport {neg} from './neg';\nexport {notEqual} from './not_equal';\nexport {oneHot} from './one_hot';\nexport {ones} from './ones';\nexport {onesLike} from './ones_like';\nexport {outerProduct} from './outer_product';\nexport {pad} from './pad';\nexport {pad1d} from './pad1d';\nexport {pad2d} from './pad2d';\nexport {pad3d} from './pad3d';\nexport {pad4d} from './pad4d';\nexport {pool} from './pool';\nexport {pow} from './pow';\nexport {prelu} from './prelu';\nexport {print} from './print';\nexport {prod} from './prod';\nexport {raggedGather} from './ragged_gather';\nexport {raggedRange} from './ragged_range';\nexport {raggedTensorToTensor} from './ragged_tensor_to_tensor';\nexport {rand} from './rand';\nexport {randomGamma} from './random_gamma';\nexport {randomNormal} from './random_normal';\nexport {randomStandardNormal} from './random_standard_normal';\nexport {randomUniform} from './random_uniform';\nexport {range} from './range';\nexport {real} from './real';\nexport {reciprocal} from './reciprocal';\nexport {relu} from './relu';\nexport {relu6} from './relu6';\nexport {reshape} from './reshape';\nexport {reverse} from './reverse';\nexport {reverse1d} from './reverse_1d';\nexport {reverse2d} from './reverse_2d';\nexport {reverse3d} from './reverse_3d';\nexport {reverse4d} from './reverse_4d';\nexport {round} from './round';\nexport {rsqrt} from './rsqrt';\nexport {scalar} from './scalar';\nexport {selu} from './selu';\nexport {separableConv2d} from './separable_conv2d';\nexport {setdiff1dAsync} from './setdiff1d_async';\nexport {sigmoid} from './sigmoid';\nexport {sign} from './sign';\nexport {sin} from './sin';\nexport {sinh} from './sinh';\nexport {slice} from './slice';\nexport {slice1d} from './slice1d';\nexport {slice2d} from './slice2d';\nexport {slice3d} from './slice3d';\nexport {slice4d} from './slice4d';\nexport {softmax} from './softmax';\nexport {softplus} from './softplus';\nexport {spaceToBatchND} from './space_to_batch_nd';\nexport {fft} from './spectral/fft';\nexport {ifft} from './spectral/ifft';\nexport {irfft} from './spectral/irfft';\nexport {rfft} from './spectral/rfft';\nexport {split} from './split';\nexport {sqrt} from './sqrt';\nexport {square} from './square';\nexport {squaredDifference} from './squared_difference';\nexport {squeeze} from './squeeze';\nexport {stack} from './stack';\nexport {step} from './step';\nexport {stridedSlice} from './strided_slice';\nexport {sub} from './sub';\nexport {sum} from './sum';\nexport {tan} from './tan';\nexport {tanh} from './tanh';\nexport {tensor} from './tensor';\nexport {tensor1d} from './tensor1d';\nexport {tensor2d} from './tensor2d';\nexport {tensor3d} from './tensor3d';\nexport {tensor4d} from './tensor4d';\nexport {tensor5d} from './tensor5d';\nexport {tensor6d} from './tensor6d';\nexport {tile} from './tile';\nexport {topk} from './topk';\nexport {truncatedNormal} from './truncated_normal';\nexport {unique} from './unique';\nexport {unsortedSegmentSum} from './unsorted_segment_sum';\nexport {unstack} from './unstack';\nexport {upperBound} from './upper_bound';\nexport {variable} from './variable';\nexport {where} from './where';\nexport {whereAsync} from './where_async';\nexport {zeros} from './zeros';\nexport {zerosLike} from './zeros_like';\n\nexport * from './boolean_mask';\nexport * from './transpose';\nexport * from './norm';\nexport * from './moving_average';\nexport * from './scatter_nd';\nexport * from './search_sorted';\nexport * from './sparse_to_dense';\nexport * from './gather_nd';\nexport * from './dropout';\nexport * from './signal_ops_util';\nexport * from './in_top_k';\n\nexport {op, OP_SCOPE_SUFFIX} from './operation';\n\nimport {rfft} from './spectral/rfft';\nimport {fft} from './spectral/fft';\nimport {ifft} from './spectral/ifft';\nimport {irfft} from './spectral/irfft';\nconst spectral = {\n  fft,\n  ifft,\n  rfft,\n  irfft\n};\n\nimport * as fused from './fused_ops';\n\nimport {hammingWindow} from './signal/hamming_window';\nimport {hannWindow} from './signal/hann_window';\nimport {frame} from './signal/frame';\nimport {stft} from './signal/stft';\nconst signal = {\n  hammingWindow,\n  hannWindow,\n  frame,\n  stft,\n};\n\n// Image Ops namespace\nimport {cropAndResize} from './image/crop_and_resize';\nimport {flipLeftRight} from './image/flip_left_right';\nimport {grayscaleToRGB} from './image/grayscale_to_rgb';\nimport {rotateWithOffset} from './image/rotate_with_offset';\nimport {nonMaxSuppression} from './image/non_max_suppression';\nimport {nonMaxSuppressionAsync} from './image/non_max_suppression_async';\nimport {nonMaxSuppressionWithScore} from './image/non_max_suppression_with_score';\nimport {nonMaxSuppressionWithScoreAsync} from './image/non_max_suppression_with_score_async';\nimport {nonMaxSuppressionPadded} from './image/non_max_suppression_padded';\nimport {nonMaxSuppressionPaddedAsync} from './image/non_max_suppression_padded_async';\nimport {resizeBilinear} from './image/resize_bilinear';\nimport {resizeNearestNeighbor} from './image/resize_nearest_neighbor';\nimport {threshold} from './image/threshold';\nimport {transform} from './image/transform';\nconst image = {\n  flipLeftRight,\n  grayscaleToRGB,\n  resizeNearestNeighbor,\n  resizeBilinear,\n  rotateWithOffset,\n  cropAndResize,\n  nonMaxSuppression,\n  nonMaxSuppressionAsync,\n  nonMaxSuppressionWithScore,\n  nonMaxSuppressionWithScoreAsync,\n  nonMaxSuppressionPadded,\n  nonMaxSuppressionPaddedAsync,\n  threshold,\n  transform\n};\n\n// linalg namespace\nimport {bandPart} from './linalg/band_part';\nimport {gramSchmidt} from './linalg/gram_schmidt';\nimport {qr} from './linalg/qr';\nconst linalg = {\n  bandPart,\n  gramSchmidt,\n  qr\n};\n\n// losses namespace;\nimport {absoluteDifference} from './losses/absolute_difference';\nimport {computeWeightedLoss} from './losses/compute_weighted_loss';\nimport {cosineDistance} from './losses/cosine_distance';\nimport {hingeLoss} from './losses/hinge_loss';\nimport {huberLoss} from './losses/huber_loss';\nimport {logLoss} from './losses/log_loss';\nimport {meanSquaredError} from './losses/mean_squared_error';\nimport {sigmoidCrossEntropy} from './losses/sigmoid_cross_entropy';\nimport {softmaxCrossEntropy} from './losses/softmax_cross_entropy';\nconst losses = {\n  absoluteDifference,\n  computeWeightedLoss,\n  cosineDistance,\n  hingeLoss,\n  huberLoss,\n  logLoss,\n  meanSquaredError,\n  sigmoidCrossEntropy,\n  softmaxCrossEntropy\n};\n\nimport {sparseFillEmptyRows} from './sparse/sparse_fill_empty_rows';\nimport {sparseReshape} from './sparse/sparse_reshape';\nimport {sparseSegmentMean} from './sparse/sparse_segment_mean';\nimport {sparseSegmentSum} from './sparse/sparse_segment_sum';\nconst sparse = {\n  sparseFillEmptyRows,\n  sparseReshape,\n  sparseSegmentMean,\n  sparseSegmentSum\n};\n\nimport {stringNGrams} from './string/string_n_grams';\nimport {stringSplit} from './string/string_split';\nimport {stringToHashBucketFast} from './string/string_to_hash_bucket_fast';\n// tslint:disable-next-line:variable-name\nconst string = {\n  stringNGrams,\n  stringSplit,\n  stringToHashBucketFast\n};\n\n// Second level exports.\nexport {image, linalg, losses, spectral, fused, signal, sparse, string};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nconst delayCallback: Function = (() => {\n  if (typeof requestAnimationFrame !== 'undefined') {\n    return requestAnimationFrame;\n  } else if (typeof setImmediate !== 'undefined') {\n    return setImmediate;\n  }\n  return (f: Function) => f();  // no delays\n})();\n\n/**\n * Returns a promise that resolves when a requestAnimationFrame has completed.\n *\n * On Node.js this uses setImmediate instead of requestAnimationFrame.\n *\n * This is simply a sugar method so that users can do the following:\n * `await tf.nextFrame();`\n *\n * @doc {heading: 'Performance', subheading: 'Timing'}\n */\nfunction nextFrame(): Promise<void> {\n  return new Promise<void>(resolve => delayCallback(() => resolve()));\n}\n\nexport {nextFrame};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as util from '../util';\n\nexport function assertParamsConsistent(shapes: number[][], axis: number) {\n  const rank = shapes[0].length;\n  shapes.forEach((shape, i) => {\n    util.assert(\n        shape.length === rank,\n        () =>\n            `Error in concat${rank}D: rank of tensors[${i}] must be the same ` +\n            `as the rank of the rest (${rank})`);\n  });\n\n  util.assert(\n      axis >= 0 && axis < rank,\n      () => `Error in concat${rank}D: axis must be between 0 and ${rank - 1}.`);\n\n  const firstShape = shapes[0];\n  shapes.forEach((shape, i) => {\n    for (let r = 0; r < rank; r++) {\n      util.assert(\n          (r === axis) || (shape[r] === firstShape[r]),\n          () => `Error in concat${rank}D: Shape of tensors[${i}] (${shape}) ` +\n              `does not match the shape of the rest (${firstShape}) ` +\n              `along the non-concatenated axis ${i}.`);\n    }\n  });\n}\n\nexport function computeOutShape(shapes: number[][], axis: number): number[] {\n  const outputShape = shapes[0].slice();\n  for (let i = 1; i < shapes.length; i++) {\n    outputShape[axis] += shapes[i][axis];\n  }\n  return outputShape;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * Inputs of size above this threshold will be parallelized by calling multiple\n * shader programs.\n */\nimport {nearestDivisor} from '../util';\n\nexport const PARALLELIZE_THRESHOLD = 30;\n\nexport interface ReduceInfo {\n  windowSize: number;\n  batchSize: number;\n  inSize: number;\n  outSize: number;\n}\n\nexport function computeOptimalWindowSize(inSize: number): number {\n  if (inSize <= PARALLELIZE_THRESHOLD) {\n    return inSize;\n  }\n  return nearestDivisor(inSize, Math.floor(Math.sqrt(inSize)));\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * Gets the new shape of the input Tensor after it's been reshaped\n * to:\n * [blockShape[0], ..., blockShape[M-1], batch / prod(blockShape),\n * inputShape[1], ..., inputShape[N-1]]\n *\n * See step 1: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd\n */\nexport function getReshaped(\n    inputShape: number[], blockShape: number[], prod: number,\n    batchToSpace = true): number[] {\n  let reshaped: number[] = [];\n  if (batchToSpace) {\n    reshaped = reshaped.concat(blockShape.slice(0));\n    reshaped.push(inputShape[0] / prod);\n    reshaped = reshaped.concat(inputShape.slice(1));\n  } else {\n    reshaped = reshaped.concat(inputShape[0]);\n    const spatialLength = blockShape.length;\n    for (let i = 0; i < spatialLength; ++i) {\n      reshaped =\n          reshaped.concat([inputShape[i + 1] / blockShape[i], blockShape[i]]);\n    }\n    reshaped = reshaped.concat(inputShape.slice(spatialLength + 1));\n  }\n  return reshaped;\n}\n\n/**\n * Gets the permutation that will transpose the dimensions of the\n * reshaped tensor to shape:\n *\n * [batch / prod(block_shape),inputShape[1], blockShape[0], ...,\n * inputShape[M], blockShape[M-1],inputShape[M+1], ..., inputShape[N-1]]\n *\n * see step 2: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd\n */\nexport function getPermuted(\n    reshapedRank: number, blockShapeRank: number,\n    batchToSpace = true): number[] {\n  const permuted = [];\n  if (batchToSpace) {\n    permuted.push(blockShapeRank);\n    for (let i = blockShapeRank + 1; i < reshapedRank; ++i) {\n      if (i <= 2 * blockShapeRank) {\n        permuted.push(i);\n        permuted.push(i - (blockShapeRank + 1));\n      } else {\n        permuted.push(i);\n      }\n    }\n  } else {\n    const permutedBeforeBatch = [];\n    const permutedAfterBatch = [];\n    for (let i = 1; i < reshapedRank; ++i) {\n      if (i >= blockShapeRank * 2 + 1 || i % 2 === 1) {\n        permutedAfterBatch.push(i);\n      } else {\n        permutedBeforeBatch.push(i);\n      }\n    }\n    permuted.push(...permutedBeforeBatch);\n    permuted.push(0);\n    permuted.push(...permutedAfterBatch);\n  }\n  return permuted;\n}\n\n/**\n * Gets the shape of the reshaped and permuted input Tensor before any cropping\n * is applied.  The new shape will be:\n *\n * [batch / prod(blockShape),inputShape[1] * blockShape[0], ...,\n * inputShape[M] * blockShape[M-1],inputShape[M+1], ..., inputShape[N-1]]\n *\n * See step 3: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd\n */\nexport function getReshapedPermuted(\n    inputShape: number[], blockShape: number[], prod: number,\n    batchToSpace = true): number[] {\n  const reshapedPermuted = [];\n\n  if (batchToSpace) {\n    reshapedPermuted.push(inputShape[0] / prod);\n  } else {\n    reshapedPermuted.push(inputShape[0] * prod);\n  }\n\n  for (let i = 1; i < inputShape.length; ++i) {\n    if (i <= blockShape.length) {\n      if (batchToSpace) {\n        reshapedPermuted.push(blockShape[i - 1] * inputShape[i]);\n      } else {\n        reshapedPermuted.push(inputShape[i] / blockShape[i - 1]);\n      }\n    } else {\n      reshapedPermuted.push(inputShape[i]);\n    }\n  }\n\n  return reshapedPermuted;\n}\n\n/**\n * Converts the crops argument into the beginning coordinates of a slice\n * operation.\n */\nexport function getSliceBeginCoords(\n    crops: number[][], blockShape: number): number[] {\n  const sliceBeginCoords = [0];\n  for (let i = 0; i < blockShape; ++i) {\n    sliceBeginCoords.push(crops[i][0]);\n  }\n  return sliceBeginCoords;\n}\n\n/**\n * Converts the crops argument into the size of a slice operation.  When\n * combined with getSliceBeginCoords this function allows the reshaped and\n * permuted Tensor to be cropped to its final output shape of:\n *\n * inputShape[1] * blockShape[0] - crops[0,0] - crops[0,1], ...,\n * inputShape[M] * blockShape[M-1] -crops[M-1,0] -\n * crops[M-1,1],inputShape[M+1], ..., inputShape[N-1]]\n *\n * See step 4: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd\n */\nexport function getSliceSize(\n    uncroppedShape: number[], crops: number[][], blockShape: number): number[] {\n  const sliceSize = uncroppedShape.slice(0, 1);\n  for (let i = 0; i < blockShape; ++i) {\n    sliceSize.push(uncroppedShape[i + 1] - crops[i][0] - crops[i][1]);\n  }\n\n  return sliceSize;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray} from '../types';\n/**\n * Merges real and imaginary Float32Arrays into a single complex Float32Array.\n *\n * The memory layout is interleaved as follows:\n * real: [r0, r1, r2]\n * imag: [i0, i1, i2]\n * complex: [r0, i0, r1, i1, r2, i2]\n *\n * This is the inverse of splitRealAndImagArrays.\n *\n * @param real The real values of the complex tensor values.\n * @param imag The imag values of the complex tensor values.\n * @returns A complex tensor as a Float32Array with merged values.\n */\nexport function mergeRealAndImagArrays(\n    real: Float32Array, imag: Float32Array): Float32Array {\n  if (real.length !== imag.length) {\n    throw new Error(\n        `Cannot merge real and imag arrays of different lengths. real:` +\n        `${real.length}, imag: ${imag.length}.`);\n  }\n  const result = new Float32Array(real.length * 2);\n  for (let i = 0; i < result.length; i += 2) {\n    result[i] = real[i / 2];\n    result[i + 1] = imag[i / 2];\n  }\n  return result;\n}\n\n/**\n * Splits a complex Float32Array into real and imag parts.\n *\n * The memory layout is interleaved as follows:\n * complex: [r0, i0, r1, i1, r2, i2]\n * real: [r0, r1, r2]\n * imag: [i0, i1, i2]\n *\n * This is the inverse of mergeRealAndImagArrays.\n *\n * @param complex The complex tensor values.\n * @returns An object with real and imag Float32Array components of the complex\n *     tensor.\n */\nexport function splitRealAndImagArrays(complex: Float32Array):\n    {real: Float32Array, imag: Float32Array} {\n  const real = new Float32Array(complex.length / 2);\n  const imag = new Float32Array(complex.length / 2);\n  for (let i = 0; i < complex.length; i += 2) {\n    real[i / 2] = complex[i];\n    imag[i / 2] = complex[i + 1];\n  }\n  return {real, imag};\n}\n\n/**\n * Extracts even indexed complex values in the given array.\n * @param complex The complex tensor values\n */\nexport function complexWithEvenIndex(complex: Float32Array):\n    {real: Float32Array, imag: Float32Array} {\n  const len = Math.ceil(complex.length / 4);\n  const real = new Float32Array(len);\n  const imag = new Float32Array(len);\n  for (let i = 0; i < complex.length; i += 4) {\n    real[Math.floor(i / 4)] = complex[i];\n    imag[Math.floor(i / 4)] = complex[i + 1];\n  }\n  return {real, imag};\n}\n\n/**\n * Extracts odd indexed comple values in the given array.\n * @param complex The complex tensor values\n */\nexport function complexWithOddIndex(complex: Float32Array):\n    {real: Float32Array, imag: Float32Array} {\n  const len = Math.floor(complex.length / 4);\n  const real = new Float32Array(len);\n  const imag = new Float32Array(len);\n  for (let i = 2; i < complex.length; i += 4) {\n    real[Math.floor(i / 4)] = complex[i];\n    imag[Math.floor(i / 4)] = complex[i + 1];\n  }\n  return {real, imag};\n}\n\n/**\n * Get the map representing a complex value in the given array.\n * @param complex The complex tensor values.\n * @param index An index of the target complex value.\n */\nexport function getComplexWithIndex(\n    complex: Float32Array, index: number): {real: number, imag: number} {\n  const real = complex[index * 2];\n  const imag = complex[index * 2 + 1];\n  return {real, imag};\n}\n\n/**\n * Insert a given complex value into the TypedArray.\n * @param data The array in which the complex value is inserted.\n * @param c The complex value to be inserted.\n * @param index An index of the target complex value.\n */\nexport function assignToTypedArray(\n    data: TypedArray, real: number, imag: number, index: number) {\n  data[index * 2] = real;\n  data[index * 2 + 1] = imag;\n}\n\n/**\n * Make the list of exponent terms used by FFT.\n */\nexport function exponents(\n    n: number, inverse: boolean): {real: Float32Array, imag: Float32Array} {\n  const real = new Float32Array(n / 2);\n  const imag = new Float32Array(n / 2);\n  for (let i = 0; i < Math.ceil(n / 2); i++) {\n    const x = (inverse ? 2 : -2) * Math.PI * (i / n);\n    real[i] = Math.cos(x);\n    imag[i] = Math.sin(x);\n  }\n  return {real, imag};\n}\n\n/**\n * Make the exponent term used by FFT.\n */\nexport function exponent(\n    k: number, n: number, inverse: boolean): {real: number, imag: number} {\n  const x = (inverse ? 2 : -2) * Math.PI * (k / n);\n  const real = Math.cos(x);\n  const imag = Math.sin(x);\n  return {real, imag};\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * Utility functions for computing einsum (tensor contraction and summation\n * based on Einstein summation.)\n */\n\nimport {Tensor} from '../tensor';\nimport {assert} from '../util_base';\n\nconst ARROW = '->';\nconst ARROW_REGEX = /->/g;\nconst COMMA = ',';\nconst ELLIPSIS = '...';\n\n/**\n * Parse an equation for einsum.\n *\n * @param equation The einsum equation (e.g., \"ij,jk->ik\").\n * @param numTensors Number of tensors provided along with `equation`. Used to\n *   check matching number of input tensors.\n * @returns An object consisting of the following fields:\n *   - allDims: all dimension names as strings.\n *   - summedDims: a list of all dimensions being summed over, as indices to\n *     the elements of `allDims`.\n *   - idDims: indices of the dimensions in each input tensor, as indices to\n *     the elements of `allDims.\n */\nexport function decodeEinsumEquation(equation: string, numTensors: number): {\n  allDims: string[],\n  summedDims: number[],\n  idDims: number[][],\n} {\n  equation = equation.replace(/\\s/g, '');  // Remove witespace in equation.\n  const numArrows =\n      (equation.length - equation.replace(ARROW_REGEX, '').length) /\n      ARROW.length;\n  if (numArrows < 1) {\n    throw new Error('Equations without an arrow are not supported.');\n  } else if (numArrows > 1) {\n    throw new Error(`Equation must contain exactly one arrow (\"${ARROW}\").`);\n  }\n  const [inputString, outputString] = equation.split(ARROW);\n  assert(\n      inputString.indexOf(ELLIPSIS) === -1,\n      () => `The ellipsis notation (\"${ELLIPSIS}\") is not supported yet.`);\n  const inputTerms = inputString.split(COMMA);\n  const numInputs = inputTerms.length;\n  if (numTensors !== numInputs) {\n    throw new Error(\n        `Expected ${numInputs} input tensors, received ${numTensors}`);\n  }\n  if (numInputs > 2) {\n    throw new Error(\n        'Support for more than 2 input tensors is not implemented yet.');\n  }\n\n  const allDims: string[] = [];\n  for (let i = 0; i < outputString.length; ++i) {\n    const dimName = outputString[i];\n    if (!inputTerms.some(inputTerm => inputTerm.indexOf(dimName) !== -1)) {\n      throw new Error(\n          `Output subscripts contain the label ${dimName} ` +\n          `not present in the input subscripts.`);\n    }\n    if (allDims.indexOf(dimName) === -1) {\n      allDims.push(dimName);\n    }\n  }\n  for (let i = 0; i < inputString.length; ++i) {\n    const dimName = inputString[i];\n    if (allDims.indexOf(dimName) === -1 && dimName !== COMMA) {\n      allDims.push(dimName);\n    }\n  }\n\n  const idDims: number[][] = new Array<number[]>(inputTerms.length);\n  for (let i = 0; i < numInputs; ++i) {\n    if (new Set(inputTerms[i].split('')).size !== inputTerms[i].length) {\n      throw new Error(\n          `Found duplicate axes in input component ${inputTerms[i]}. ` +\n          `Support for duplicate axes in input is not implemented yet.`);\n    }\n    idDims[i] = [];\n    for (let j = 0; j < inputTerms[i].length; ++j) {\n      idDims[i].push(allDims.indexOf(inputTerms[i][j]));\n    }\n  }\n\n  const numDims = allDims.length;          // Number of unique dimensions.\n  const numOutDims = outputString.length;  // Number of output dimensions.\n  const summedDims: number[] = [];         // Dimensions being summed over.\n  for (let i = numOutDims; i < numDims; ++i) {\n    summedDims.push(i);\n  }\n  return {allDims, summedDims, idDims};\n}\n\n/**\n * Get the permutation for a given input tensor.\n *\n * @param nDims Total number of dimension of all tensors involved in the einsum\n *   operation.\n * @param idDims Dimension indices involve in the tensor in question.\n * @returns An object consisting of the following fields:\n *   - permutationIndices: Indices to permute the axes of the tensor with.\n *   - expandDims: Indices to the dimension that need to be expanded from the\n *     tensor after permutation.\n */\nexport function getEinsumPermutation(nDims: number, idDims: number[]):\n    {permutationIndices: number[], expandDims: number[]} {\n  let permutationIndices: number[] = new Array<number>(nDims);\n  permutationIndices.fill(-1);\n  for (let i = 0; i < idDims.length; ++i) {\n    permutationIndices[idDims[i]] = i;\n  }\n  const expandDims: number[] = [];\n  for (let i = 0; i < nDims; ++i) {\n    if (permutationIndices[i] === -1) {\n      expandDims.push(i);\n    }\n  }\n  permutationIndices = permutationIndices.filter(d => d !== -1);\n  return {permutationIndices, expandDims};\n}\n\n/**\n * Checks that the dimension sizes from different input tensors match the\n * equation.\n */\nexport function checkEinsumDimSizes(\n    nDims: number, idDims: number[][], tensors: Tensor[]) {\n  const dimSizes: number[] = new Array<number>(nDims);\n  for (let i = 0; i < tensors.length; ++i) {\n    const shape: number[] = tensors[i].shape;\n    for (let j = 0; j < idDims[i].length; ++j) {\n      if (dimSizes[idDims[i][j]] === undefined) {\n        dimSizes[idDims[i][j]] = shape[j];\n      } else {\n        assert(\n            dimSizes[idDims[i][j]] === shape[j],\n            () => `Expected dimension ${dimSizes[idDims[i][j]]} at axis ${j} ` +\n                `of input shaped ${JSON.stringify(shape)}, ` +\n                `but got dimension ${shape[j]}`);\n      }\n    }\n  }\n}\n\n/**\n * Gets path of computation for einsum.\n *\n * @param summedDims indices to the dimensions being summed over.\n * @param idDims A look up table for the dimensions present in each input\n *     tensor. Each consituent array contains indices for the dimensions in the\n *     corresponding input tensor.\n *\n * @return A map with two fields:\n *   - path: The path of computation, with each element indicating the dimension\n *     being summed over after the element-wise multiplication in that step.\n *   - steps: With the same length as `path`. Each element contains the indices\n *     to the input tensors being used for element-wise multiplication in the\n *     corresponding step.\n */\nexport function getEinsumComputePath(summedDims: number[], idDims: number[][]):\n    {path: number[], steps: number[][]} {\n  const path: number[] = summedDims;\n  const steps: number[][] = [];\n  let nSteps = 0;\n  if (summedDims.length === 0) {\n    // Einsum that involes no summing: e.g., transpose and outer product.\n    path.push(-1);\n  }\n  nSteps = summedDims.length + 1;\n  for (let i = 0; i < nSteps; ++i) {\n    steps.push([]);\n  }\n  const computedTermIndices: number[] = [];\n  for (let i = 0; i < path.length; ++i) {\n    const summedDim = path[i];\n    const termIndices = findTermsWithDim(idDims, summedDim);\n    for (const termIndex of termIndices) {\n      if (computedTermIndices.indexOf(termIndex) === -1) {\n        steps[i].push(termIndex);\n        computedTermIndices.push(termIndex);\n      }\n    }\n  }\n  return {path, steps};\n}\n\n/** Determines if an axes permutation is the identity permutation. */\nexport function isIdentityPermutation(perm: number[]): boolean {\n  return perm.every((dim: number, index: number) => dim === index);\n}\n\nfunction findTermsWithDim(idDims: number[][], dim: number): number[] {\n  const termIndices: number[] = [];\n  for (let i = 0; i < idDims.length; ++i) {\n    if (idDims[i].length === 0 || idDims[i].indexOf(dim) !== -1 || dim === -1) {\n      termIndices.push(i);\n    }\n  }\n  return termIndices;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n\n/* tslint:disable */\n\n/** Properties of an Any. */\nexport declare interface IAny {\n  /** Any typeUrl */\n  typeUrl?: (string|null);\n\n  /** Any value */\n  value?: (Uint8Array|null);\n}\n\n/** DataType enum. */\nexport enum DataType {\n  // Not a legal value for DataType.  Used to indicate a DataType field\n  // has not been set.\n  DT_INVALID = 0,\n\n  // Data types that all computation devices are expected to be\n  // capable to support.\n  DT_FLOAT = 1,\n  DT_DOUBLE = 2,\n  DT_INT32 = 3,\n  DT_UINT8 = 4,\n  DT_INT16 = 5,\n  DT_INT8 = 6,\n  DT_STRING = 7,\n  DT_COMPLEX64 = 8,  // Single-precision complex\n  DT_INT64 = 9,\n  DT_BOOL = 10,\n  DT_QINT8 = 11,     // Quantized int8\n  DT_QUINT8 = 12,    // Quantized uint8\n  DT_QINT32 = 13,    // Quantized int32\n  DT_BFLOAT16 = 14,  // Float32 truncated to 16 bits.  Only for cast ops.\n  DT_QINT16 = 15,    // Quantized int16\n  DT_QUINT16 = 16,   // Quantized uint16\n  DT_UINT16 = 17,\n  DT_COMPLEX128 = 18,  // Double-precision complex\n  DT_HALF = 19,\n  DT_RESOURCE = 20,\n  DT_VARIANT = 21,  // Arbitrary C++ data types\n  DT_UINT32 = 22,\n  DT_UINT64 = 23,\n\n  // Do not use!  These are only for parameters.  Every enum above\n  // should have a corresponding value below (verified by types_test).\n  DT_FLOAT_REF = 101,\n  DT_DOUBLE_REF = 102,\n  DT_INT32_REF = 103,\n  DT_UINT8_REF = 104,\n  DT_INT16_REF = 105,\n  DT_INT8_REF = 106,\n  DT_STRING_REF = 107,\n  DT_COMPLEX64_REF = 108,\n  DT_INT64_REF = 109,\n  DT_BOOL_REF = 110,\n  DT_QINT8_REF = 111,\n  DT_QUINT8_REF = 112,\n  DT_QINT32_REF = 113,\n  DT_BFLOAT16_REF = 114,\n  DT_QINT16_REF = 115,\n  DT_QUINT16_REF = 116,\n  DT_UINT16_REF = 117,\n  DT_COMPLEX128_REF = 118,\n  DT_HALF_REF = 119,\n  DT_RESOURCE_REF = 120,\n  DT_VARIANT_REF = 121,\n  DT_UINT32_REF = 122,\n  DT_UINT64_REF = 123,\n}\n\n/** Properties of a TensorShape. */\nexport declare interface ITensorShape {\n  /** TensorShape dim */\n  dim?: (TensorShape.IDim[]|null);\n\n  /** TensorShape unknownRank */\n  unknownRank?: (boolean|null);\n}\n\nexport namespace TensorShape {\n  /** Properties of a Dim. */\n  export declare interface IDim {\n    /** Dim size */\n    size?: (number|string|null);\n\n    /** Dim name */\n    name?: (string|null);\n  }\n}\n\n/** Properties of a Tensor. */\nexport declare interface ITensor {\n  /** Tensor dtype */\n  dtype?: (DataType|null);\n\n  /** Tensor tensorShape */\n  tensorShape?: (ITensorShape|null);\n\n  /** Tensor versionNumber */\n  versionNumber?: (number|null);\n\n  /** Tensor tensorContent */\n  tensorContent?: (Uint8Array|null);\n\n  /** Tensor floatVal */\n  floatVal?: (number[]|null);\n\n  /** Tensor doubleVal */\n  doubleVal?: (number[]|null);\n\n  /** Tensor intVal */\n  intVal?: (number[]|null);\n\n  /** Tensor stringVal */\n  stringVal?: (Uint8Array[]|null);\n\n  /** Tensor scomplexVal */\n  scomplexVal?: (number[]|null);\n\n  /** Tensor int64Val */\n  int64Val?: ((number | string)[]|null);\n\n  /** Tensor boolVal */\n  boolVal?: (boolean[]|null);\n\n  /** Tensor uint32Val */\n  uint32Val?: (number[]|null);\n\n  /** Tensor uint64Val */\n  uint64Val?: ((number | string)[]|null);\n}\n\n/** Properties of an AttrValue. */\nexport declare interface IAttrValue {\n  /** AttrValue list */\n  list?: (AttrValue.IListValue|null);\n\n  /** AttrValue s */\n  s?: (string|null);\n\n  /** AttrValue i */\n  i?: (number|string|null);\n\n  /** AttrValue f */\n  f?: (number|null);\n\n  /** AttrValue b */\n  b?: (boolean|null);\n\n  /** AttrValue type */\n  type?: (DataType|null);\n\n  /** AttrValue shape */\n  shape?: (ITensorShape|null);\n\n  /** AttrValue tensor */\n  tensor?: (ITensor|null);\n\n  /** AttrValue placeholder */\n  placeholder?: (string|null);\n\n  /** AttrValue func */\n  func?: (INameAttrList|null);\n}\n\nexport namespace AttrValue {\n  /** Properties of a ListValue. */\n  export declare interface IListValue {\n    /** ListValue s */\n    s?: (string[]|null);\n\n    /** ListValue i */\n    i?: ((number | string)[]|null);\n\n    /** ListValue f */\n    f?: (number[]|null);\n\n    /** ListValue b */\n    b?: (boolean[]|null);\n\n    /** ListValue type */\n    type?: (DataType[]|null);\n\n    /** ListValue shape */\n    shape?: (ITensorShape[]|null);\n\n    /** ListValue tensor */\n    tensor?: (ITensor[]|null);\n\n    /** ListValue func */\n    func?: (INameAttrList[]|null);\n  }\n}\n\n/** Properties of a NameAttrList. */\nexport declare interface INameAttrList {\n  /** NameAttrList name */\n  name?: (string|null);\n\n  /** NameAttrList attr */\n  attr?: ({[k: string]: IAttrValue}|null);\n}\n\n/** Properties of a NodeDef. */\nexport declare interface INodeDef {\n  /** NodeDef name */\n  name?: (string|null);\n\n  /** NodeDef op */\n  op?: (string|null);\n\n  /** NodeDef input */\n  input?: (string[]|null);\n\n  /** NodeDef device */\n  device?: (string|null);\n\n  /** NodeDef attr */\n  attr?: ({[k: string]: IAttrValue}|null);\n}\n\n/** Properties of a VersionDef. */\nexport declare interface IVersionDef {\n  /** VersionDef producer */\n  producer?: (number|null);\n\n  /** VersionDef minConsumer */\n  minConsumer?: (number|null);\n\n  /** VersionDef badConsumers */\n  badConsumers?: (number[]|null);\n}\n\n/** Properties of a GraphDef. */\nexport declare interface IGraphDef {\n  /** GraphDef node */\n  node?: (INodeDef[]|null);\n\n  /** GraphDef versions */\n  versions?: (IVersionDef|null);\n\n  /** GraphDef library */\n  library?: (IFunctionDefLibrary|null);\n}\n\n/** Properties of a CollectionDef. */\nexport declare interface ICollectionDef {\n  /** CollectionDef nodeList */\n  nodeList?: (CollectionDef.INodeList|null);\n\n  /** CollectionDef bytesList */\n  bytesList?: (CollectionDef.IBytesList|null);\n\n  /** CollectionDef int64List */\n  int64List?: (CollectionDef.IInt64List|null);\n\n  /** CollectionDef floatList */\n  floatList?: (CollectionDef.IFloatList|null);\n\n  /** CollectionDef anyList */\n  anyList?: (CollectionDef.IAnyList|null);\n}\n\nexport namespace CollectionDef {\n  /** Properties of a NodeList. */\n  export declare interface INodeList {\n    /** NodeList value */\n    value?: (string[]|null);\n  }\n\n  /** Properties of a BytesList. */\n  export declare interface IBytesList {\n    /** BytesList value */\n    value?: (Uint8Array[]|null);\n  }\n\n  /** Properties of an Int64List. */\n  export declare interface IInt64List {\n    /** Int64List value */\n    value?: ((number | string)[]|null);\n  }\n\n  /** Properties of a FloatList. */\n  export declare interface IFloatList {\n    /** FloatList value */\n    value?: (number[]|null);\n  }\n\n  /** Properties of an AnyList. */\n  export declare interface IAnyList {\n    /** AnyList value */\n    value?: (IAny[]|null);\n  }\n}\n\n/** Properties of a SaverDef. */\nexport declare interface ISaverDef {\n  /** SaverDef filenameTensorName */\n  filenameTensorName?: (string|null);\n\n  /** SaverDef saveTensorName */\n  saveTensorName?: (string|null);\n\n  /** SaverDef restoreOpName */\n  restoreOpName?: (string|null);\n\n  /** SaverDef maxToKeep */\n  maxToKeep?: (number|null);\n\n  /** SaverDef sharded */\n  sharded?: (boolean|null);\n\n  /** SaverDef keepCheckpointEveryNHours */\n  keepCheckpointEveryNHours?: (number|null);\n\n  /** SaverDef version */\n  version?: (SaverDef.CheckpointFormatVersion|null);\n}\n\nexport namespace SaverDef {\n  /** CheckpointFormatVersion enum. */\n  export enum CheckpointFormatVersion {'LEGACY' = 0, 'V1' = 1, 'V2' = 2}\n}\n\n/** Properties of a TensorInfo. */\nexport declare interface ITensorInfo {\n  /** TensorInfo name */\n  name?: (string|null);\n\n  /** TensorInfo cooSparse */\n  cooSparse?: (TensorInfo.ICooSparse|null);\n\n  /** TensorInfo dtype */\n  dtype?: (DataType|string|null);\n\n  /** TensorInfo tensorShape */\n  tensorShape?: (ITensorShape|null);\n\n  /** Resource id tensor was originally assigned to.  */\n  resourceId?: (number|null);\n}\n\nexport namespace TensorInfo {\n  /** Properties of a CooSparse. */\n  export declare interface ICooSparse {\n    /** CooSparse valuesTensorName */\n    valuesTensorName?: (string|null);\n\n    /** CooSparse indicesTensorName */\n    indicesTensorName?: (string|null);\n\n    /** CooSparse denseShapeTensorName */\n    denseShapeTensorName?: (string|null);\n  }\n}\n\n/** Properties of a SignatureDef. */\nexport declare interface ISignatureDef {\n  /** SignatureDef inputs */\n  inputs?: ({[k: string]: ITensorInfo}|null);\n\n  /** SignatureDef outputs */\n  outputs?: ({[k: string]: ITensorInfo}|null);\n\n  /** SignatureDef methodName */\n  methodName?: (string|null);\n}\n\n/** Properties of an AssetFileDef. */\nexport declare interface IAssetFileDef {\n  /** AssetFileDef tensorInfo */\n  tensorInfo?: (ITensorInfo|null);\n\n  /** AssetFileDef filename */\n  filename?: (string|null);\n}\n\n/** Properties of an OpDef. */\nexport declare interface IOpDef {\n  /** OpDef name */\n  name?: (string|null);\n\n  /** OpDef inputArg */\n  inputArg?: (OpDef.IArgDef[]|null);\n\n  /** OpDef outputArg */\n  outputArg?: (OpDef.IArgDef[]|null);\n\n  /** OpDef attr */\n  attr?: (OpDef.IAttrDef[]|null);\n\n  /** OpDef deprecation */\n  deprecation?: (OpDef.IOpDeprecation|null);\n\n  /** OpDef summary */\n  summary?: (string|null);\n\n  /** OpDef description */\n  description?: (string|null);\n\n  /** OpDef isCommutative */\n  isCommutative?: (boolean|null);\n\n  /** OpDef isAggregate */\n  isAggregate?: (boolean|null);\n\n  /** OpDef isStateful */\n  isStateful?: (boolean|null);\n\n  /** OpDef allowsUninitializedInput */\n  allowsUninitializedInput?: (boolean|null);\n}\n\nexport namespace OpDef {\n  /** Properties of an ArgDef. */\n  export declare interface IArgDef {\n    /** ArgDef name */\n    name?: (string|null);\n\n    /** ArgDef description */\n    description?: (string|null);\n\n    /** ArgDef type */\n    type?: (DataType|null);\n\n    /** ArgDef typeAttr */\n    typeAttr?: (string|null);\n\n    /** ArgDef numberAttr */\n    numberAttr?: (string|null);\n\n    /** ArgDef typeListAttr */\n    typeListAttr?: (string|null);\n\n    /** ArgDef isRef */\n    isRef?: (boolean|null);\n  }\n\n  /** Properties of an AttrDef. */\n  export declare interface IAttrDef {\n    /** AttrDef name */\n    name?: (string|null);\n\n    /** AttrDef type */\n    type?: (string|null);\n\n    /** AttrDef defaultValue */\n    defaultValue?: (IAttrValue|null);\n\n    /** AttrDef description */\n    description?: (string|null);\n\n    /** AttrDef hasMinimum */\n    hasMinimum?: (boolean|null);\n\n    /** AttrDef minimum */\n    minimum?: (number|string|null);\n\n    /** AttrDef allowedValues */\n    allowedValues?: (IAttrValue|null);\n  }\n\n  /** Properties of an OpDeprecation. */\n  export declare interface IOpDeprecation {\n    /** OpDeprecation version */\n    version?: (number|null);\n\n    /** OpDeprecation explanation */\n    explanation?: (string|null);\n  }\n}\n\n/** Properties of an OpList. */\nexport declare interface IOpList {\n  /** OpList op */\n  op?: (IOpDef[]|null);\n}\n\n/** Properties of a MetaGraphDef. */\nexport declare interface IMetaGraphDef {\n  /** MetaGraphDef metaInfoDef */\n  metaInfoDef?: (MetaGraphDef.IMetaInfoDef|null);\n\n  /** MetaGraphDef graphDef */\n  graphDef?: (IGraphDef|null);\n\n  /** MetaGraphDef saverDef */\n  saverDef?: (ISaverDef|null);\n\n  /** MetaGraphDef collectionDef */\n  collectionDef?: ({[k: string]: ICollectionDef}|null);\n\n  /** MetaGraphDef signatureDef */\n  signatureDef?: ({[k: string]: ISignatureDef}|null);\n\n  /** MetaGraphDef assetFileDef */\n  assetFileDef?: (IAssetFileDef[]|null);\n}\n\nexport namespace MetaGraphDef {\n  /** Properties of a MetaInfoDef. */\n  export declare interface IMetaInfoDef {\n    /** MetaInfoDef metaGraphVersion */\n    metaGraphVersion?: (string|null);\n\n    /** MetaInfoDef strippedOpList */\n    strippedOpList?: (IOpList|null);\n\n    /** MetaInfoDef anyInfo */\n    anyInfo?: (IAny|null);\n\n    /** MetaInfoDef tags */\n    tags?: (string[]|null);\n\n    /** MetaInfoDef tensorflowVersion */\n    tensorflowVersion?: (string|null);\n\n    /** MetaInfoDef tensorflowGitVersion */\n    tensorflowGitVersion?: (string|null);\n  }\n}\n\n/** Properties of a SavedModel. */\nexport declare interface ISavedModel {\n  /** SavedModel savedModelSchemaVersion */\n  savedModelSchemaVersion?: (number|string|null);\n\n  /** SavedModel metaGraphs */\n  metaGraphs?: (IMetaGraphDef[]|null);\n}\n\n/** Properties of a FunctionDefLibrary. */\nexport declare interface IFunctionDefLibrary {\n  /** FunctionDefLibrary function */\n  'function'?: (IFunctionDef[]|null);\n\n  /** FunctionDefLibrary gradient */\n  gradient?: (IGradientDef[]|null);\n}\n\n/** Properties of a FunctionDef. */\nexport declare interface IFunctionDef {\n  /** FunctionDef signature */\n  signature?: (IOpDef|null);\n\n  /** FunctionDef attr */\n  attr?: ({[k: string]: IAttrValue}|null);\n\n  /** FunctionDef nodeDef */\n  nodeDef?: (INodeDef[]|null);\n\n  /** FunctionDef ret */\n  ret?: ({[k: string]: string}|null);\n}\n\n/** Properties of a GradientDef. */\nexport declare interface IGradientDef {\n  /** GradientDef functionName */\n  functionName?: (string|null);\n\n  /** GradientDef gradientFunc */\n  gradientFunc?: (string|null);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * Generates sparse fill empty rows indices, dense shape mismatch error message.\n *\n * @param indicesLength The first dimension of indices.\n */\nexport function getSparseFillEmptyRowsIndicesDenseShapeMismatch(\n    indicesLength: number) {\n  return `Received SparseTensor with denseShape[0] = 0 but\n  indices.shape[0] = ${indicesLength}`;\n}\n\n/**\n * Generates sparse fill empty rows negative index error message.\n *\n * @param index The index with a negative value.\n * @param value The negative value.\n */\nexport function getSparseFillEmptyRowsNegativeIndexErrorMessage(\n    index: number, value: number) {\n  return `indices(${index}, 0) is invalid: ${value} < 0`;\n}\n\n/**\n * Generates sparse fill empty rows out of range index error message.\n *\n * @param index The index with an out of range value.\n * @param value The out of range value.\n * @param limit The upper limit for indices.\n */\nexport function getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(\n    index: number, value: number, limit: number) {\n  return `indices(${index}, 0) is invalid: ${value} >= ${limit}`;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * Generates sparse segment reduction negative segment ids error message.\n *\n */\nexport function getSparseSegmentReductionNegativeSegmentIdsErrorMessage() {\n  return `segment ids must be >= 0`;\n}\n\n/**\n * Generates sparse segment reduction non increasing segment ids error message.\n *\n */\nexport function getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage() {\n  return `segment ids are not increasing`;\n}\n\n/**\n * Generates sparse segment reduction segment id out of range error message.\n *\n * @param segmentId The segment id index that is out of range.\n * @param outputRows Upper bound of valid segment id values.\n */\nexport function getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(\n    segmentId: number, outputRows: number) {\n  return `Segment id ${segmentId} out of range [0, ${\n      outputRows}), possibly because segmentIds input is not sorted.`;\n}\n\n/**\n * Generates sparse segment reduction input indice out of range error message.\n *\n * @param index The index that holds the out of range value.\n * @param indexValue The value that is out of range.\n * @param inputRows Upper bound of valid index values.\n */\nexport function getSparseSegmentReductionIndicesOutOfRangeErrorMessage(\n    index: number, indexValue: number, inputRows: number) {\n  return `Bad: indices[${index}] == ${indexValue} out of range [0, ${\n      inputRows})`;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {decodeString, encodeString} from '../util';\n\n// Utilities needed by backend consumers of tf-core.\nexport * from '../ops/axis_util';\nexport * from '../ops/broadcast_util';\nexport * from '../ops/concat_util';\nexport * from '../ops/conv_util';\nexport * from '../ops/fused_util';\nexport * from '../ops/fused_types';\nexport * from '../ops/ragged_to_dense_util';\nexport * from '../ops/reduce_util';\n\nimport * as slice_util from '../ops/slice_util';\nexport {slice_util};\n\nexport {BackendValues, TypedArray, upcastType, PixelData} from '../types';\nexport {MemoryInfo, TimingInfo} from '../engine';\nexport * from '../ops/rotate_util';\nexport * from '../ops/array_ops_util';\nexport * from '../ops/gather_nd_util';\nexport * from '../ops/scatter_nd_util';\nexport * from '../ops/selu_util';\nexport * from '../ops/fused_util';\nexport * from '../ops/erf_util';\nexport * from '../log';\nexport * from '../backends/complex_util';\nexport * from '../backends/einsum_util';\nexport * from '../ops/split_util';\nexport * from '../ops/sparse/sparse_fill_empty_rows_util';\nexport * from '../ops/sparse/sparse_reshape_util';\nexport * from '../ops/sparse/sparse_segment_reduction_util';\n\nimport * as segment_util from '../ops/segment_util';\nexport {segment_util};\n\nexport function fromUint8ToStringArray(vals: Uint8Array[]) {\n  try {\n    // Decode the bytes into string.\n    return vals.map(val => decodeString(val));\n  } catch (err) {\n    throw new Error(\n        `Failed to decode encoded string bytes into utf-8, error: ${err}`);\n  }\n}\n\nexport function fromStringArrayToUint8(strings: string[]) {\n  return strings.map(s => encodeString(s));\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Required side effectful code.\nimport './base_side_effects';\n\n// TODO(mattSoulanille): Move this to base_side_effects.ts\n// It is here for now because custom bundles need to avoid calling it, and they\n// only replace the index.js file, not the base_side_effects file.\nimport {registerOptimizers} from './optimizers/register_optimizers';\nregisterOptimizers();\n\n// All exports from this package should be in base.\nexport * from './base';\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env} from '@tensorflow/tfjs-core';\n\nconst ENV = env();\n\n/** Whether to keep intermediate tensors. */\nENV.registerFlag('KEEP_INTERMEDIATE_TENSORS', () => false, debugValue => {\n  if (debugValue) {\n    console.warn(\n        'Keep intermediate tensors is ON. This will print the values of all ' +\n        'intermediate tensors during model inference. Not all models ' +\n        'support this mode. For details, check e2e/benchmarks/ ' +\n        'model_config.js. This significantly impacts performance.');\n  }\n});\n","\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpExecutor, OpMapper} from '../types';\n\nconst CUSTOM_OPS: {[key: string]: OpMapper} = {};\n\n/**\n * Register an Op for graph model executor. This allows you to register\n * TensorFlow custom op or override existing op.\n *\n * Here is an example of registering a new MatMul Op.\n * ```js\n * const customMatmul = (node) =>\n *    tf.matMul(\n *        node.inputs[0], node.inputs[1],\n *        node.attrs['transpose_a'], node.attrs['transpose_b']);\n *\n * tf.registerOp('MatMul', customMatmul);\n * ```\n * The inputs and attrs of the node object are based on the TensorFlow op\n * registry.\n *\n * @param name The Tensorflow Op name.\n * @param opFunc An op function which is called with the current graph node\n * during execution and needs to return a tensor or a list of tensors. The node\n * has the following attributes:\n *    - attr: A map from attribute name to its value\n *    - inputs: A list of input tensors\n *\n * @doc {heading: 'Models', subheading: 'Op Registry'}\n */\nexport function registerOp(name: string, opFunc: OpExecutor) {\n  const opMapper: OpMapper = {\n    tfOpName: name,\n    category: 'custom',\n    inputs: [],\n    attrs: [],\n    customExecutor: opFunc\n  };\n\n  CUSTOM_OPS[name] = opMapper;\n}\n\n/**\n * Retrieve the OpMapper object for the registered op.\n *\n * @param name The Tensorflow Op name.\n *\n * @doc {heading: 'Models', subheading: 'Op Registry'}\n */\nexport function getRegisteredOp(name: string): OpMapper {\n  return CUSTOM_OPS[name];\n}\n\n/**\n * Deregister the Op for graph model executor.\n *\n * @param name The Tensorflow Op name.\n *\n * @doc {heading: 'Models', subheading: 'Op Registry'}\n */\nexport function deregisterOp(name: string) {\n  delete CUSTOM_OPS[name];\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {clone, Tensor, util} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {ResourceManager} from '../../executor/resource_manager';\nimport {Node, ValueType} from '../types';\n\nexport function getParamValue(\n    paramName: string, node: Node, tensorMap: NamedTensorsMap,\n    context: ExecutionContext, resourceManager?: ResourceManager): ValueType {\n  const inputParam = node.inputParams[paramName];\n  if (inputParam && inputParam.inputIndexStart !== undefined) {\n    const start = inputParam.inputIndexStart;\n    const end = inputParam.inputIndexEnd === 0 ?\n        undefined :\n        (inputParam.inputIndexEnd === undefined ? start + 1 :\n                                                  inputParam.inputIndexEnd);\n    if (inputParam.type === 'tensor') {\n      return getTensor(\n          node.inputNames[inputParam.inputIndexStart], tensorMap, context,\n          resourceManager);\n    }\n    if (inputParam.type === 'tensors') {\n      const inputs = node.inputNames.slice(start, end);\n\n      return inputs.map(\n          name => getTensor(name, tensorMap, context, resourceManager));\n    }\n    const tensor = getTensor(\n        node.inputNames.slice(start)[0], tensorMap, context, resourceManager);\n    const data = tensor.dataSync();\n    return inputParam.type === 'number' ?\n        data[0] :\n        util.toNestedArray(tensor.shape, data);\n  }\n  const attrParam = node.attrParams[paramName];\n  return attrParam && attrParam.value;\n}\n\n/**\n * Retrieve the tensor from tensorsMap based on input name.\n * @param name Node input name\n * @param tensorsMap Tensors map keyed by the node\n * @param context contains tensors and information for running the current node.\n * @param resourceManager Optional. Contains global resources of the model.\n */\nexport function getTensor(\n    name: string, tensorsMap: NamedTensorsMap, context: ExecutionContext,\n    resourceManager?: ResourceManager): Tensor {\n  const [nodeName, index] = parseNodeName(name);\n\n  if (resourceManager != null) {\n    const tensor = resourceManager.getHashTableHandleByName(nodeName);\n    if (tensor != null) {\n      return tensor;\n    }\n  }\n\n  const contextId = context.currentContextIds.find(contextId => {\n    return !!tensorsMap[getNodeNameWithContextId(nodeName, contextId)];\n  });\n\n  return contextId !== undefined ?\n      tensorsMap[getNodeNameWithContextId(nodeName, contextId)][index] :\n      undefined;\n}\n\n/**\n * Retrieve the tensors based on input name for current context.\n * @param name Node input name\n * @param tensorsMap Tensors map keyed by the node\n */\nexport function getTensorsForCurrentContenxt(\n    name: string, tensorsMap: NamedTensorsMap,\n    context: ExecutionContext): Tensor[] {\n  return tensorsMap[getNodeNameWithContextId(name, context.currentContextId)];\n}\n\n/**\n * Returns the node name, outputName and index from the Node input name.\n * @param inputName The input name of the node, in format of\n * node_name:output_index, i.e. MatMul:0, if the output_index is not set, it is\n * default to 0.\n * If the input name contains output name i.e. StringSplit:indices:0, it will\n * return ['StringSplit', 0, 'indices'].\n */\nexport function getNodeNameAndIndex(\n    inputName: string, context?: ExecutionContext): [string, number, string] {\n  const [nodeName, index, outputName] = parseNodeName(inputName);\n\n  return [\n    getNodeNameWithContextId(nodeName, context && context.currentContextId),\n    index, outputName\n  ];\n}\n\nfunction getNodeNameWithContextId(name: string, contextId?: string): string {\n  return !!contextId ? `${name}-${contextId}` : name;\n}\n\nexport function parseNodeName(name: string): [string, number, string] {\n  const parts = name.split(':');\n  if (parts.length === 1) {\n    return [name, 0, undefined];\n  }\n\n  const nodeName = parts[0];\n  const outputName = parts.length === 3 ? parts[1] : undefined;\n  const index = Number(parts[parts.length - 1]);\n  return [nodeName, index, outputName];\n}\n\nexport function split(arr: number[], size: number) {\n  const res = [];\n  for (let i = 0; i < arr.length; i += size) {\n    res.push(arr.slice(i, i + size));\n  }\n  return res;\n}\nexport function getPadding(\n    node: Node, tensorMap: NamedTensorsMap,\n    context: ExecutionContext): ValueType {\n  let pad = getParamValue('pad', node, tensorMap, context);\n  if (pad === 'explicit') {\n    // This is 1d array, we need to convert it to 2d array\n    pad = getParamValue('explicitPaddings', node, tensorMap, context);\n    const explicitPadding: [\n      [number, number], [number, number], [number, number], [number, number]\n    ] = [[0, 0], [0, 0], [0, 0], [0, 0]];\n    for (let i = 0; i < 4; i++) {\n      explicitPadding[i][0] = (pad as number[])[i * 2];\n      explicitPadding[i][1] = (pad as number[])[i * 2 + 1];\n    }\n    return explicitPadding;\n  }\n  return pad;\n}\n\n/**\n *  Reuse the tensor if it is marked as keep, otherwise clone the tensor to\n *  avoid disposal. This is important for TensorArray and TensorList ops, since\n *  internally they use a tensor as the id for TensorArray and TensorList, and\n * to simplify lookup, they also use Tensor.id as the key to the internal map.\n * These id tensors have been marked as kept in the backend, we need avoid clone\n * them in order to create new Tensor.id.\n * @param tensor\n */\nexport function cloneTensor(tensor: Tensor): Tensor {\n  return tensor.kept ? tensor : clone(tensor);\n}\n","\n/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpMapper} from '../types';\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Add',\n    'category': 'arithmetic',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'a',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'b',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'AddV2',\n    'category': 'arithmetic',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'a',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'b',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'AddN',\n    'category': 'arithmetic',\n    'inputs': [\n      {\n        'start': 0,\n        'end': 0,\n        'name': 'tensors',\n        'type': 'tensors'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'BiasAdd',\n    'category': 'arithmetic',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'a',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'b',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Sub',\n    'category': 'arithmetic',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'a',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'b',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'RealDiv',\n    'category': 'arithmetic',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'a',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'b',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Div',\n    'category': 'arithmetic',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'a',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'b',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'DivNoNan',\n    'category': 'arithmetic',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'a',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'b',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'FloorDiv',\n    'category': 'arithmetic',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'a',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'b',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Mul',\n    'category': 'arithmetic',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'a',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'b',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Maximum',\n    'category': 'arithmetic',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'a',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'b',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Minimum',\n    'category': 'arithmetic',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'a',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'b',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Pow',\n    'category': 'arithmetic',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'a',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'b',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'SquaredDifference',\n    'category': 'arithmetic',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'a',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'b',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Mod',\n    'category': 'arithmetic',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'a',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'b',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'FloorMod',\n    'category': 'arithmetic',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'a',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'b',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  }\n];\n","\n/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpMapper} from '../types';\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Abs',\n    'category': 'basic_math',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Acos',\n    'category': 'basic_math',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Asin',\n    'category': 'basic_math',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Atan',\n    'category': 'basic_math',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Atan2',\n    'category': 'basic_math',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'y',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Ceil',\n    'category': 'basic_math',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'ClipByValue',\n    'category': 'basic_math',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'clipValueMin',\n        'type': 'number'\n      },\n      {\n        'start': 2,\n        'name': 'clipValueMax',\n        'type': 'number'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Complex',\n    'category': 'basic_math',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'real',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'imag',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'ComplexAbs',\n    'category': 'basic_math',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Cos',\n    'category': 'basic_math',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Cosh',\n    'category': 'basic_math',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Elu',\n    'category': 'basic_math',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Exp',\n    'category': 'basic_math',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Floor',\n    'category': 'basic_math',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Log',\n    'category': 'basic_math',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Imag',\n    'category': 'basic_math',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      },\n      {\n        'tfName': 'Tout',\n        'name': 'outputType',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Neg',\n    'category': 'basic_math',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Real',\n    'category': 'basic_math',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      },\n      {\n        'tfName': 'Tout',\n        'name': 'outputType',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Prelu',\n    'category': 'basic_math',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'alpha',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Relu',\n    'category': 'basic_math',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Relu6',\n    'category': 'basic_math',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Selu',\n    'category': 'basic_math',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Sigmoid',\n    'category': 'basic_math',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Sin',\n    'category': 'basic_math',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Sinh',\n    'category': 'basic_math',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Sqrt',\n    'category': 'basic_math',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Rsqrt',\n    'category': 'basic_math',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Square',\n    'category': 'basic_math',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Tan',\n    'category': 'basic_math',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Tanh',\n    'category': 'basic_math',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Sign',\n    'category': 'basic_math',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Round',\n    'category': 'basic_math',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Expm1',\n    'category': 'basic_math',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Log1p',\n    'category': 'basic_math',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Reciprocal',\n    'category': 'basic_math',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Softplus',\n    'category': 'basic_math',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Asinh',\n    'category': 'basic_math',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Acosh',\n    'category': 'basic_math',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Atanh',\n    'category': 'basic_math',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Erf',\n    'category': 'basic_math',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Prod',\n    'category': 'basic_math',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'axes',\n        'type': 'number[]'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'keep_dims',\n        'name': 'keepDims',\n        'type': 'bool',\n        'notSupported': true\n      },\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'LeakyRelu',\n    'category': 'basic_math',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'alpha',\n        'name': 'alpha',\n        'type': 'number',\n        'defaultValue': 0.2\n      },\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'IsNan',\n    'category': 'basic_math',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  }\n];\n","\n/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpMapper} from '../types';\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'EmptyTensorList',\n    'category': 'control',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'elementShape',\n        'type': 'shape'\n      },\n      {\n        'start': 1,\n        'name': 'maxNumElements',\n        'type': 'number'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'element_dtype',\n        'name': 'elementDType',\n        'type': 'dtype'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'LoopCond',\n    'category': 'control',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'pred',\n        'type': 'tensor'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Switch',\n    'category': 'control',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'data',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'pred',\n        'type': 'tensor'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Merge',\n    'category': 'control',\n    'inputs': [\n      {\n        'start': 0,\n        'end': 0,\n        'name': 'tensors',\n        'type': 'tensors'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Enter',\n    'category': 'control',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'tensor',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      },\n      {\n        'tfName': 'frame_name',\n        'name': 'frameName',\n        'type': 'string'\n      },\n      {\n        'tfName': 'is_constant',\n        'name': 'isConstant',\n        'type': 'bool'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Exit',\n    'category': 'control',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'tensor',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'NextIteration',\n    'category': 'control',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'tensor',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayV3',\n    'category': 'control',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'size',\n        'type': 'number'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'dtype',\n        'name': 'dtype',\n        'type': 'dtype'\n      },\n      {\n        'tfName': 'element_shape',\n        'name': 'elementShape',\n        'type': 'shape'\n      },\n      {\n        'tfName': 'dynamic_size',\n        'name': 'dynamicSize',\n        'type': 'bool'\n      },\n      {\n        'tfName': 'clear_after_read',\n        'name': 'clearAfterRead',\n        'type': 'bool'\n      },\n      {\n        'tfName': 'identical_element_shapes',\n        'name': 'identicalElementShapes',\n        'type': 'bool'\n      },\n      {\n        'tfName': 'tensor_array_name',\n        'name': 'name',\n        'type': 'string'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayWriteV3',\n    'category': 'control',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'tensorArrayId',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'index',\n        'type': 'number'\n      },\n      {\n        'start': 2,\n        'name': 'tensor',\n        'type': 'tensor'\n      },\n      {\n        'start': 3,\n        'name': 'flowIn',\n        'type': 'number'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayReadV3',\n    'category': 'control',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'tensorArrayId',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'index',\n        'type': 'number'\n      },\n      {\n        'start': 2,\n        'name': 'flowIn',\n        'type': 'number'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'dtype',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayGatherV3',\n    'category': 'control',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'tensorArrayId',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'indices',\n        'type': 'number[]'\n      },\n      {\n        'start': 2,\n        'name': 'flowIn',\n        'type': 'number'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'dtype',\n        'name': 'dtype',\n        'type': 'dtype'\n      },\n      {\n        'tfName': 'element_shape',\n        'name': 'elementShape',\n        'type': 'shape'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayScatterV3',\n    'category': 'control',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'tensorArrayId',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'indices',\n        'type': 'number[]'\n      },\n      {\n        'start': 2,\n        'name': 'tensor',\n        'type': 'tensor'\n      },\n      {\n        'start': 3,\n        'name': 'flowIn',\n        'type': 'number'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayConcatV3',\n    'category': 'control',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'tensorArrayId',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'flowIn',\n        'type': 'number'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'dtype',\n        'name': 'dtype',\n        'type': 'dtype'\n      },\n      {\n        'tfName': 'element_shape_except0',\n        'name': 'elementShapeExcept0',\n        'type': 'shape',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'TensorArraySplitV3',\n    'category': 'control',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'tensorArrayId',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'tensor',\n        'type': 'tensor'\n      },\n      {\n        'start': 2,\n        'name': 'lengths',\n        'type': 'number[]'\n      },\n      {\n        'start': 3,\n        'name': 'flowIn',\n        'type': 'number'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'TensorArraySizeV3',\n    'category': 'control',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'tensorArrayId',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'flowIn',\n        'type': 'number'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayCloseV3',\n    'category': 'control',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'tensorArrayId',\n        'type': 'tensor'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'StatelessIf',\n    'category': 'control',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'cond',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'end': 0,\n        'name': 'args',\n        'type': 'tensors'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'then_branch',\n        'name': 'thenBranch',\n        'type': 'func'\n      },\n      {\n        'tfName': 'else_branch',\n        'name': 'elseBranch',\n        'type': 'func'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'If',\n    'category': 'control',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'cond',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'end': 0,\n        'name': 'args',\n        'type': 'tensors'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'then_branch',\n        'name': 'thenBranch',\n        'type': 'func'\n      },\n      {\n        'tfName': 'else_branch',\n        'name': 'elseBranch',\n        'type': 'func'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'StatelessWhile',\n    'category': 'control',\n    'inputs': [\n      {\n        'start': 0,\n        'end': 0,\n        'name': 'args',\n        'type': 'tensors'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'cond',\n        'name': 'cond',\n        'type': 'func'\n      },\n      {\n        'tfName': 'body',\n        'name': 'body',\n        'type': 'func'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'While',\n    'category': 'control',\n    'inputs': [\n      {\n        'start': 0,\n        'end': 0,\n        'name': 'args',\n        'type': 'tensors'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'cond',\n        'name': 'cond',\n        'type': 'func'\n      },\n      {\n        'tfName': 'body',\n        'name': 'body',\n        'type': 'func'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'TensorListScatter',\n    'category': 'control',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'tensor',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'indices',\n        'type': 'number[]'\n      },\n      {\n        'start': 2,\n        'name': 'elementShape',\n        'type': 'shape'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'element_dtype',\n        'name': 'elementDType',\n        'type': 'dtype'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'TensorListScatterV2',\n    'category': 'control',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'tensor',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'indices',\n        'type': 'number[]'\n      },\n      {\n        'start': 2,\n        'name': 'elementShape',\n        'type': 'shape'\n      },\n      {\n        'start': 3,\n        'name': 'numElements',\n        'type': 'number'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'element_dtype',\n        'name': 'elementDType',\n        'type': 'dtype'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'TensorListGather',\n    'category': 'control',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'tensorListId',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'indices',\n        'type': 'number[]'\n      },\n      {\n        'start': 2,\n        'name': 'elementShape',\n        'type': 'shape'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'element_dtype',\n        'name': 'elementDType',\n        'type': 'dtype'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'TensorListGetItem',\n    'category': 'control',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'tensorListId',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'index',\n        'type': 'number'\n      },\n      {\n        'start': 2,\n        'name': 'elementShape',\n        'type': 'shape'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'element_dtype',\n        'name': 'elementDType',\n        'type': 'dtype'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'TensorListSetItem',\n    'category': 'control',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'tensorListId',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'index',\n        'type': 'number'\n      },\n      {\n        'start': 2,\n        'name': 'tensor',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'element_dtype',\n        'name': 'elementDType',\n        'type': 'dtype'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'TensorListReserve',\n    'category': 'control',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'elementShape',\n        'type': 'shape'\n      },\n      {\n        'start': 1,\n        'name': 'numElements',\n        'type': 'number'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'element_dtype',\n        'name': 'elementDType',\n        'type': 'dtype'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'TensorListFromTensor',\n    'category': 'control',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'tensor',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'elementShape',\n        'type': 'shape'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'element_dtype',\n        'name': 'elementDType',\n        'type': 'dtype'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'TensorListStack',\n    'category': 'control',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'tensorListId',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'elementShape',\n        'type': 'shape'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'element_dtype',\n        'name': 'elementDType',\n        'type': 'dtype'\n      },\n      {\n        'tfName': 'num_elements',\n        'name': 'numElements',\n        'type': 'dtype'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'TensorListSplit',\n    'category': 'control',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'tensor',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'elementShape',\n        'type': 'shape'\n      },\n      {\n        'start': 2,\n        'name': 'lengths',\n        'type': 'number[]'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'element_dtype',\n        'name': 'elementDType',\n        'type': 'dtype'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'TensorListConcat',\n    'category': 'control',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'tensorListId',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'element_shape',\n        'name': 'elementShape',\n        'type': 'shape'\n      },\n      {\n        'tfName': 'element_dtype',\n        'name': 'elementDType',\n        'type': 'dtype'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'TensorListConcatV2',\n    'category': 'control',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'tensorListId',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'element_shape',\n        'name': 'elementShape',\n        'type': 'shape'\n      },\n      {\n        'tfName': 'element_dtype',\n        'name': 'elementDType',\n        'type': 'dtype'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'TensorListPopBack',\n    'category': 'control',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'tensorListId',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'elementShape',\n        'type': 'shape'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'element_dtype',\n        'name': 'elementDType',\n        'type': 'dtype'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'TensorListPushBack',\n    'category': 'control',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'tensorListId',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'tensor',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'element_dtype',\n        'name': 'elementDType',\n        'type': 'dtype'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'TensorListLength',\n    'category': 'control',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'tensorListId',\n        'type': 'tensor'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'TensorListResize',\n    'category': 'control',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'tensorListId',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'size',\n        'type': 'number'\n      }\n    ]\n  }\n]\n;\n","\n/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpMapper} from '../types';\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'AvgPool',\n    'category': 'convolution',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'strides',\n        'name': 'strides',\n        'type': 'number[]'\n      },\n      {\n        'tfName': 'padding',\n        'name': 'pad',\n        'type': 'string'\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      },\n      {\n        'tfName': 'ksize',\n        'name': 'kernelSize',\n        'type': 'number[]'\n      },\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'MaxPool',\n    'category': 'convolution',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'strides',\n        'name': 'strides',\n        'type': 'number[]'\n      },\n      {\n        'tfName': 'padding',\n        'name': 'pad',\n        'type': 'string'\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      },\n      {\n        'tfName': 'ksize',\n        'name': 'kernelSize',\n        'type': 'number[]'\n      },\n      {\n        'tfName': 'explicit_paddings',\n        'name': 'explicitPaddings',\n        'type': 'number[]',\n        'defaultValue': [],\n        'notSupported': true\n      },\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'MaxPoolWithArgmax',\n    'category': 'convolution',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'strides',\n        'name': 'strides',\n        'type': 'number[]'\n      },\n      {\n        'tfName': 'padding',\n        'name': 'pad',\n        'type': 'string'\n      },\n      {\n        'tfName': 'ksize',\n        'name': 'kernelSize',\n        'type': 'number[]'\n      },\n      {\n        'tfName': 'include_batch_in_index',\n        'name': 'includeBatchInIndex',\n        'type': 'bool'\n      },\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'AvgPool3D',\n    'category': 'convolution',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'strides',\n        'name': 'strides',\n        'type': 'number[]'\n      },\n      {\n        'tfName': 'padding',\n        'name': 'pad',\n        'type': 'string'\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      },\n      {\n        'tfName': 'ksize',\n        'name': 'kernelSize',\n        'type': 'number[]'\n      },\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'MaxPool3D',\n    'category': 'convolution',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'strides',\n        'name': 'strides',\n        'type': 'number[]'\n      },\n      {\n        'tfName': 'padding',\n        'name': 'pad',\n        'type': 'string'\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      },\n      {\n        'tfName': 'ksize',\n        'name': 'kernelSize',\n        'type': 'number[]'\n      },\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Conv1D',\n    'category': 'convolution',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'filter',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'stride',\n        'name': 'stride',\n        'type': 'number'\n      },\n      {\n        'tfName': 'padding',\n        'name': 'pad',\n        'type': 'string'\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NWC'\n      },\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      },\n      {\n        'tfName': 'dilation',\n        'name': 'dilation',\n        'type': 'number',\n        'defaultValue': 1\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Conv2D',\n    'category': 'convolution',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'filter',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      },\n      {\n        'tfName': 'strides',\n        'name': 'strides',\n        'type': 'number[]'\n      },\n      {\n        'tfName': 'padding',\n        'name': 'pad',\n        'type': 'string'\n      },\n      {\n        'tfName': 'useCudnnOnGpu',\n        'name': 'useCudnnOnGpu',\n        'type': 'bool'\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {\n        'tfName': 'explicit_paddings',\n        'name': 'explicitPaddings',\n        'type': 'number[]',\n        'defaultValue': []\n      },\n      {\n        'tfName': 'dilations',\n        'name': 'dilations',\n        'type': 'number[]'\n      }\n    ]\n  },\n  {\n    'tfOpName': '_FusedConv2D',\n    'category': 'convolution',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'filter',\n        'type': 'tensor'\n      },\n      {\n        'start': 2,\n        'end': 0,\n        'name': 'args',\n        'type': 'tensors'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'num_args',\n        'name': 'numArgs',\n        'type': 'number'\n      },\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      },\n      {\n        'tfName': 'strides',\n        'name': 'strides',\n        'type': 'number[]'\n      },\n      {\n        'tfName': 'padding',\n        'name': 'pad',\n        'type': 'string'\n      },\n      {\n        'tfName': 'explicit_paddings',\n        'name': 'explicitPaddings',\n        'type': 'number[]',\n        'defaultValue': []\n      },\n      {\n        'tfName': 'use_cudnn_on_gpu',\n        'name': 'useCudnnOnGpu',\n        'type': 'bool',\n        'defaultValue': true\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {\n        'tfName': 'dilations',\n        'name': 'dilations',\n        'type': 'number[]',\n        'defaultValue': [\n          1,\n          1,\n          1,\n          1\n        ]\n      },\n      {\n        'tfName': 'fused_ops',\n        'name': 'fusedOps',\n        'type': 'string[]',\n        'defaultValue': []\n      },\n      {\n        'tfName': 'epsilon',\n        'name': 'epsilon',\n        'type': 'number',\n        'defaultValue': 0.0001\n      },\n      {\n        'tfName': 'leakyrelu_alpha',\n        'name': 'leakyreluAlpha',\n        'type': 'number',\n        'defaultValue': 0.2\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Conv2DBackpropInput',\n    'category': 'convolution',\n    'inputs': [\n      {\n        'start': 2,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'filter',\n        'type': 'tensor'\n      },\n      {\n        'start': 0,\n        'name': 'outputShape',\n        'type': 'number[]'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'strides',\n        'name': 'strides',\n        'type': 'number[]'\n      },\n      {\n        'tfName': 'padding',\n        'name': 'pad',\n        'type': 'string'\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      },\n      {\n        'tfName': 'explicit_paddings',\n        'name': 'explicitPaddings',\n        'type': 'number[]',\n        'defaultValue': []\n      },\n      {\n        'tfName': 'dilations',\n        'name': 'dilations',\n        'type': 'number[]',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'DepthwiseConv2d',\n    'category': 'convolution',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'input',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'filter',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'strides',\n        'name': 'strides',\n        'type': 'number[]'\n      },\n      {\n        'tfName': 'padding',\n        'name': 'pad',\n        'type': 'string'\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {\n        'tfName': 'explicit_paddings',\n        'name': 'explicitPaddings',\n        'type': 'number[]',\n        'defaultValue': []\n      },\n      {\n        'tfName': 'dilations',\n        'name': 'dilations',\n        'type': 'number[]'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'DepthwiseConv2dNative',\n    'category': 'convolution',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'input',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'filter',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'strides',\n        'name': 'strides',\n        'type': 'number[]'\n      },\n      {\n        'tfName': 'padding',\n        'name': 'pad',\n        'type': 'string'\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {\n        'tfName': 'explicit_paddings',\n        'name': 'explicitPaddings',\n        'type': 'number[]',\n        'defaultValue': []\n      },\n      {\n        'tfName': 'dilations',\n        'name': 'dilations',\n        'type': 'number[]'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'FusedDepthwiseConv2dNative',\n    'category': 'convolution',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'filter',\n        'type': 'tensor'\n      },\n      {\n        'start': 2,\n        'end': 0,\n        'name': 'args',\n        'type': 'tensors'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'num_args',\n        'name': 'numArgs',\n        'type': 'number'\n      },\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      },\n      {\n        'tfName': 'strides',\n        'name': 'strides',\n        'type': 'number[]'\n      },\n      {\n        'tfName': 'padding',\n        'name': 'pad',\n        'type': 'string'\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {\n        'tfName': 'dilations',\n        'name': 'dilations',\n        'type': 'number[]',\n        'defaultValue': [\n          1,\n          1,\n          1,\n          1\n        ]\n      },\n      {\n        'tfName': 'fused_ops',\n        'name': 'fusedOps',\n        'type': 'string[]',\n        'defaultValue': []\n      },\n      {\n        'tfName': 'explicit_paddings',\n        'name': 'explicitPaddings',\n        'type': 'number[]',\n        'defaultValue': []\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Conv3D',\n    'category': 'convolution',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'filter',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'strides',\n        'name': 'strides',\n        'type': 'number[]'\n      },\n      {\n        'tfName': 'padding',\n        'name': 'pad',\n        'type': 'string'\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {\n        'tfName': 'dilations',\n        'name': 'dilations',\n        'type': 'number[]'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Dilation2D',\n    'category': 'convolution',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'filter',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'strides',\n        'name': 'strides',\n        'type': 'number[]'\n      },\n      {\n        'tfName': 'rates',\n        'name': 'dilations',\n        'type': 'number[]'\n      },\n      {\n        'tfName': 'padding',\n        'name': 'pad',\n        'type': 'string'\n      }\n    ]\n  }\n]\n;\n","\n/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpMapper} from '../types';\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Fill',\n    'category': 'creation',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'shape',\n        'type': 'number[]'\n      },\n      {\n        'start': 1,\n        'name': 'value',\n        'type': 'number'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'LinSpace',\n    'category': 'creation',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'start',\n        'type': 'number'\n      },\n      {\n        'start': 1,\n        'name': 'stop',\n        'type': 'number'\n      },\n      {\n        'start': 2,\n        'name': 'num',\n        'type': 'number'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'OneHot',\n    'category': 'creation',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'indices',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'depth',\n        'type': 'number'\n      },\n      {\n        'start': 2,\n        'name': 'onValue',\n        'type': 'number',\n        'defaultValue': 1\n      },\n      {\n        'start': 3,\n        'name': 'offValue',\n        'type': 'number',\n        'defaultValue': 0\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'axis',\n        'name': 'axis',\n        'type': 'number',\n        'notSupported': true\n      },\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Ones',\n    'category': 'creation',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'shape',\n        'type': 'number[]'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'OnesLike',\n    'category': 'creation',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'dtype',\n        'name': 'dtype',\n        'type': 'dtype'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'RandomStandardNormal',\n    'category': 'creation',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'shape',\n        'type': 'number[]'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'seed',\n        'name': 'seed',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'seed2',\n        'name': 'seed2',\n        'type': 'number',\n        'defaultValue': 0,\n        'notSupported': true\n      },\n      {\n        'tfName': 'dtype',\n        'name': 'dtype',\n        'type': 'dtype'\n      },\n      {\n        'tfName': 'T',\n        'name': 'T',\n        'type': 'number',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'RandomUniform',\n    'category': 'creation',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'shape',\n        'type': 'number[]'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'minval',\n        'name': 'minval',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'maxval',\n        'name': 'maxval',\n        'type': 'number',\n        'defaultValue': 1\n      },\n      {\n        'tfName': 'dtype',\n        'name': 'dtype',\n        'type': 'dtype'\n      },\n      {\n        'tfName': 'seed',\n        'name': 'seed',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'seed2',\n        'name': 'seed2',\n        'type': 'number',\n        'defaultValue': 0,\n        'notSupported': true\n      },\n      {\n        'tfName': 'T',\n        'name': 'T',\n        'type': 'number',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Range',\n    'category': 'creation',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'start',\n        'type': 'number'\n      },\n      {\n        'start': 1,\n        'name': 'stop',\n        'type': 'number'\n      },\n      {\n        'start': 2,\n        'name': 'step',\n        'type': 'number',\n        'defaultValue': 0\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'Tidx',\n        'name': 'dtype',\n        'type': 'dtype'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'TruncatedNormal',\n    'category': 'creation',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'shape',\n        'type': 'number[]'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'means',\n        'name': 'mean',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'stddev',\n        'name': 'stdDev',\n        'type': 'number',\n        'defaultValue': 1\n      },\n      {\n        'tfName': 'seed',\n        'name': 'seed',\n        'type': 'number'\n      },\n      {\n        'tfName': 'seed2',\n        'name': 'seed2',\n        'type': 'number',\n        'defaultValue': 0,\n        'notSupported': true\n      },\n      {\n        'tfName': 'dtype',\n        'name': 'dtype',\n        'type': 'dtype'\n      },\n      {\n        'tfName': 'T',\n        'name': 'T',\n        'type': 'number',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Zeros',\n    'category': 'creation',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'shape',\n        'type': 'number[]'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'ZerosLike',\n    'category': 'creation',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Multinomial',\n    'category': 'creation',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'logits',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'numSamples',\n        'type': 'number'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'seed',\n        'name': 'seed',\n        'type': 'number'\n      },\n      {\n        'tfName': 'seed2',\n        'name': 'seed2',\n        'type': 'number'\n      },\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype'\n      },\n      {\n        'tfName': 'output_dtype',\n        'name': 'output_dtype',\n        'type': 'dtype'\n      }\n    ]\n  }\n]\n;\n","\n/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpMapper} from '../types';\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'NonMaxSuppressionV2',\n    'category': 'dynamic',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'boxes',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'scores',\n        'type': 'tensor'\n      },\n      {\n        'start': 2,\n        'name': 'maxOutputSize',\n        'type': 'number'\n      },\n      {\n        'start': 3,\n        'name': 'iouThreshold',\n        'type': 'number'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'NonMaxSuppressionV3',\n    'category': 'dynamic',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'boxes',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'scores',\n        'type': 'tensor'\n      },\n      {\n        'start': 2,\n        'name': 'maxOutputSize',\n        'type': 'number'\n      },\n      {\n        'start': 3,\n        'name': 'iouThreshold',\n        'type': 'number'\n      },\n      {\n        'start': 4,\n        'name': 'scoreThreshold',\n        'type': 'number'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'NonMaxSuppressionV4',\n    'category': 'dynamic',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'boxes',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'scores',\n        'type': 'tensor'\n      },\n      {\n        'start': 2,\n        'name': 'maxOutputSize',\n        'type': 'number'\n      },\n      {\n        'start': 3,\n        'name': 'iouThreshold',\n        'type': 'number'\n      },\n      {\n        'start': 4,\n        'name': 'scoreThreshold',\n        'type': 'number'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      },\n      {\n        'tfName': 'T_threshold',\n        'name': 'threshold',\n        'type': 'dtype',\n        'notSupported': true\n      },\n      {\n        'tfName': 'pad_to_max_output_size',\n        'name': 'padToMaxOutputSize',\n        'type': 'bool'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'NonMaxSuppressionV5',\n    'category': 'dynamic',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'boxes',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'scores',\n        'type': 'tensor'\n      },\n      {\n        'start': 2,\n        'name': 'maxOutputSize',\n        'type': 'number'\n      },\n      {\n        'start': 3,\n        'name': 'iouThreshold',\n        'type': 'number'\n      },\n      {\n        'start': 4,\n        'name': 'scoreThreshold',\n        'type': 'number'\n      },\n      {\n        'start': 5,\n        'name': 'softNmsSigma',\n        'type': 'number'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Where',\n    'category': 'dynamic',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'condition',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'ListDiff',\n    'category': 'dynamic',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'y',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  }\n];\n","\n/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpMapper} from '../types';\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'LowerBound',\n    'category': 'evaluation',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'sortedSequence',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'values',\n        'type': 'tensor'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'TopKV2',\n    'category': 'evaluation',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'k',\n        'type': 'number'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'sorted',\n        'name': 'sorted',\n        'type': 'bool'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'UpperBound',\n    'category': 'evaluation',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'sortedSequence',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'values',\n        'type': 'tensor'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Unique',\n    'category': 'evaluation',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'UniqueV2',\n    'category': 'evaluation',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'axis',\n        'type': 'number'\n      }\n    ]\n  }\n]\n;\n","\n/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpMapper} from '../types';\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'PlaceholderWithDefault',\n    'category': 'graph',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'default',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'shape',\n        'name': 'shape',\n        'type': 'shape'\n      },\n      {\n        'tfName': 'dtype',\n        'name': 'dtype',\n        'type': 'dtype'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Placeholder',\n    'category': 'graph',\n    'attrs': [\n      {\n        'tfName': 'shape',\n        'name': 'shape',\n        'type': 'shape'\n      },\n      {\n        'tfName': 'dtype',\n        'name': 'dtype',\n        'type': 'dtype'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Const',\n    'category': 'graph'\n  },\n  {\n    'tfOpName': 'Identity',\n    'category': 'graph',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'IdentityN',\n    'category': 'graph',\n    'inputs': [\n      {\n        'start': 0,\n        'end': 0,\n        'name': 'x',\n        'type': 'tensors'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Snapshot',\n    'category': 'graph',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Rank',\n    'category': 'graph',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Size',\n    'category': 'graph',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Shape',\n    'category': 'graph',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'ShapeN',\n    'category': 'graph',\n    'inputs': [\n      {\n        'start': 0,\n        'end': 0,\n        'name': 'x',\n        'type': 'tensors'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Print',\n    'category': 'graph',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'data',\n        'type': 'tensors'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'message',\n        'name': 'message',\n        'type': 'string'\n      },\n      {\n        'tfName': 'first_n',\n        'name': 'firstN',\n        'type': 'number',\n        'notSupported': true\n      },\n      {\n        'tfName': 'summarize',\n        'name': 'summarize',\n        'type': 'number',\n        'defaultValue': 3\n      }\n    ]\n  },\n  {\n    'tfOpName': 'NoOp',\n    'category': 'graph',\n    'inputs': []\n  },\n  {\n    'tfOpName': 'StopGradient',\n    'category': 'graph',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'FakeQuantWithMinMaxVars',\n    'category': 'graph',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'min',\n        'name': 'min',\n        'type': 'number'\n      },\n      {\n        'tfName': 'max',\n        'name': 'max',\n        'type': 'number'\n      }\n    ]\n  }\n];\n","\n/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpMapper} from '../types';\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'HashTable',\n    'category': 'hash_table',\n    'inputs': [],\n    'attrs': [\n      {\n        'tfName': 'shared_name',\n        'name': 'sharedName',\n        'type': 'string'\n      },\n      {\n        'tfName': 'use_node_name_sharing',\n        'name': 'useNodeNameSharing',\n        'type': 'bool'\n      },\n      {\n        'tfName': 'key_dtype',\n        'name': 'keyDType',\n        'type': 'dtype'\n      },\n      {\n        'tfName': 'value_dtype',\n        'name': 'valueDType',\n        'type': 'dtype'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'HashTableV2',\n    'category': 'hash_table',\n    'inputs': [],\n    'attrs': [\n      {\n        'tfName': 'shared_name',\n        'name': 'sharedName',\n        'type': 'string'\n      },\n      {\n        'tfName': 'use_node_name_sharing',\n        'name': 'useNodeNameSharing',\n        'type': 'bool'\n      },\n      {\n        'tfName': 'key_dtype',\n        'name': 'keyDType',\n        'type': 'dtype'\n      },\n      {\n        'tfName': 'value_dtype',\n        'name': 'valueDType',\n        'type': 'dtype'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'LookupTableImport',\n    'category': 'hash_table',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'tableHandle',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'keys',\n        'type': 'tensor'\n      },\n      {\n        'start': 2,\n        'name': 'values',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'Tin',\n        'name': 'tIn',\n        'type': 'dtype',\n        'notSupported': true\n      },\n      {\n        'tfName': 'Tout',\n        'name': 'tOut',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'LookupTableImportV2',\n    'category': 'hash_table',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'tableHandle',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'keys',\n        'type': 'tensor'\n      },\n      {\n        'start': 2,\n        'name': 'values',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'Tin',\n        'name': 'tIn',\n        'type': 'dtype',\n        'notSupported': true\n      },\n      {\n        'tfName': 'Tout',\n        'name': 'tOut',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'LookupTableFind',\n    'category': 'hash_table',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'tableHandle',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'keys',\n        'type': 'tensor'\n      },\n      {\n        'start': 2,\n        'name': 'defaultValue',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'Tin',\n        'name': 'tIn',\n        'type': 'dtype',\n        'notSupported': true\n      },\n      {\n        'tfName': 'Tout',\n        'name': 'tOut',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'LookupTableFindV2',\n    'category': 'hash_table',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'tableHandle',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'keys',\n        'type': 'tensor'\n      },\n      {\n        'start': 2,\n        'name': 'defaultValue',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'Tin',\n        'name': 'tIn',\n        'type': 'dtype',\n        'notSupported': true\n      },\n      {\n        'tfName': 'Tout',\n        'name': 'tOut',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'LookupTableSize',\n    'category': 'hash_table',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'tableHandle',\n        'type': 'tensor'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'LookupTableSizeV2',\n    'category': 'hash_table',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'tableHandle',\n        'type': 'tensor'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'InitializeTable',\n    'category': 'hash_table',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'tableHandle',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'keys',\n        'type': 'tensor'\n      },\n      {\n        'start': 2,\n        'name': 'values',\n        'type': 'tensor'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'InitializeTableV2',\n    'category': 'hash_table',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'tableHandle',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'keys',\n        'type': 'tensor'\n      },\n      {\n        'start': 2,\n        'name': 'values',\n        'type': 'tensor'\n      }\n    ]\n  }\n]\n;\n","\n/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpMapper} from '../types';\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'ResizeBilinear',\n    'category': 'image',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'images',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'size',\n        'type': 'number[]'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'align_corners',\n        'name': 'alignCorners',\n        'type': 'bool'\n      },\n      {\n        'tfName': 'half_pixel_centers',\n        'name': 'halfPixelCenters',\n        'type': 'bool'\n      },\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'ResizeNearestNeighbor',\n    'category': 'image',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'images',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'size',\n        'type': 'number[]'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'align_corners',\n        'name': 'alignCorners',\n        'type': 'bool'\n      },\n      {\n        'tfName': 'half_pixel_centers',\n        'name': 'halfPixelCenters',\n        'type': 'bool'\n      },\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'CropAndResize',\n    'category': 'image',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'image',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'boxes',\n        'type': 'tensor'\n      },\n      {\n        'start': 2,\n        'name': 'boxInd',\n        'type': 'tensor'\n      },\n      {\n        'start': 3,\n        'name': 'cropSize',\n        'type': 'number[]'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'method',\n        'name': 'method',\n        'type': 'string'\n      },\n      {\n        'tfName': 'extrapolation_value',\n        'name': 'extrapolationValue',\n        'type': 'number'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'ImageProjectiveTransformV3',\n    'category': 'image',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'images',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'transforms',\n        'type': 'tensor'\n      },\n      {\n        'start': 2,\n        'name': 'outputShape',\n        'type': 'number[]'\n      },\n      {\n        'start': 3,\n        'name': 'fillValue',\n        'type': 'number'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'interpolation',\n        'name': 'interpolation',\n        'type': 'string'\n      },\n      {\n        'tfName': 'fill_mode',\n        'name': 'fillMode',\n        'type': 'string'\n      }\n    ]\n  }\n];\n","\n/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpMapper} from '../types';\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Equal',\n    'category': 'logical',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'a',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'b',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'NotEqual',\n    'category': 'logical',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'a',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'b',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Greater',\n    'category': 'logical',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'a',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'b',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'GreaterEqual',\n    'category': 'logical',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'a',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'b',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Less',\n    'category': 'logical',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'a',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'b',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'LessEqual',\n    'category': 'logical',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'a',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'b',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'LogicalAnd',\n    'category': 'logical',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'a',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'b',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'LogicalNot',\n    'category': 'logical',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'a',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'LogicalOr',\n    'category': 'logical',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'a',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'b',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Select',\n    'category': 'logical',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'condition',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'a',\n        'type': 'tensor'\n      },\n      {\n        'start': 2,\n        'name': 'b',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'SelectV2',\n    'category': 'logical',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'condition',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'a',\n        'type': 'tensor'\n      },\n      {\n        'start': 2,\n        'name': 'b',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  }\n];\n","\n/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpMapper} from '../types';\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': '_FusedMatMul',\n    'category': 'matrices',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'a',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'b',\n        'type': 'tensor'\n      },\n      {\n        'start': 2,\n        'end': 0,\n        'name': 'args',\n        'type': 'tensors'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'num_args',\n        'name': 'numArgs',\n        'type': 'number'\n      },\n      {\n        'tfName': 'fused_ops',\n        'name': 'fusedOps',\n        'type': 'string[]',\n        'defaultValue': []\n      },\n      {\n        'tfName': 'epsilon',\n        'name': 'epsilon',\n        'type': 'number',\n        'defaultValue': 0.0001\n      },\n      {\n        'tfName': 'transpose_a',\n        'name': 'transposeA',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {\n        'tfName': 'transpose_b',\n        'name': 'transposeB',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {\n        'tfName': 'leakyrelu_alpha',\n        'name': 'leakyreluAlpha',\n        'type': 'number',\n        'defaultValue': 0.2\n      },\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'MatMul',\n    'category': 'matrices',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'a',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'b',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'transpose_a',\n        'name': 'transposeA',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {\n        'tfName': 'transpose_b',\n        'name': 'transposeB',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'BatchMatMul',\n    'category': 'matrices',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'a',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'b',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'adj_x',\n        'name': 'transposeA',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {\n        'tfName': 'adj_y',\n        'name': 'transposeB',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'BatchMatMulV2',\n    'category': 'matrices',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'a',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'b',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'adj_x',\n        'name': 'transposeA',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {\n        'tfName': 'adj_y',\n        'name': 'transposeB',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Transpose',\n    'category': 'matrices',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'perm',\n        'type': 'number[]'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Einsum',\n    'category': 'matrices',\n    'inputs': [\n      {\n        'start': 0,\n        'end': 0,\n        'name': 'tensors',\n        'type': 'tensors'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'equation',\n        'name': 'equation',\n        'type': 'string'\n      },\n      {\n        'tfName': 'N',\n        'name': 'n',\n        'type': 'number',\n        'defaultValue': 2\n      },\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype'\n      }\n    ]\n  }\n]\n;\n","\n/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpMapper} from '../types';\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'EuclideanNorm',\n    'category': 'normalization',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'axis',\n        'type': 'number[]'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'keep_dims',\n        'name': 'keepDims',\n        'type': 'bool',\n        'defaultValue': false\n      }\n    ]\n  },\n  {\n    'tfOpName': 'FusedBatchNorm',\n    'category': 'normalization',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'scale',\n        'type': 'tensor'\n      },\n      {\n        'start': 2,\n        'name': 'offset',\n        'type': 'tensor'\n      },\n      {\n        'start': 3,\n        'name': 'mean',\n        'type': 'tensor'\n      },\n      {\n        'start': 4,\n        'name': 'variance',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'epsilon',\n        'name': 'epsilon',\n        'type': 'number',\n        'defaultValue': 0.001\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'FusedBatchNormV2',\n    'category': 'normalization',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'scale',\n        'type': 'tensor'\n      },\n      {\n        'start': 2,\n        'name': 'offset',\n        'type': 'tensor'\n      },\n      {\n        'start': 3,\n        'name': 'mean',\n        'type': 'tensor'\n      },\n      {\n        'start': 4,\n        'name': 'variance',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'epsilon',\n        'name': 'epsilon',\n        'type': 'number',\n        'defaultValue': 0.001\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'FusedBatchNormV3',\n    'category': 'normalization',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'scale',\n        'type': 'tensor'\n      },\n      {\n        'start': 2,\n        'name': 'offset',\n        'type': 'tensor'\n      },\n      {\n        'start': 3,\n        'name': 'mean',\n        'type': 'tensor'\n      },\n      {\n        'start': 4,\n        'name': 'variance',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'epsilon',\n        'name': 'epsilon',\n        'type': 'number',\n        'defaultValue': 0.001\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'LRN',\n    'category': 'normalization',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'depth_radius',\n        'name': 'radius',\n        'type': 'number',\n        'defaultValue': 5\n      },\n      {\n        'tfName': 'bias',\n        'name': 'bias',\n        'type': 'number',\n        'defaultValue': 1\n      },\n      {\n        'tfName': 'alpha',\n        'name': 'alpha',\n        'type': 'number',\n        'defaultValue': 1\n      },\n      {\n        'tfName': 'beta',\n        'name': 'beta',\n        'type': 'number',\n        'defaultValue': 0.5\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Softmax',\n    'category': 'normalization',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'LogSoftmax',\n    'category': 'normalization',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'SparseToDense',\n    'category': 'normalization',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'sparseIndices',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'outputShape',\n        'type': 'number[]'\n      },\n      {\n        'start': 2,\n        'name': 'sparseValues',\n        'type': 'tensor'\n      },\n      {\n        'start': 3,\n        'name': 'defaultValue',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'validate_indices',\n        'name': 'validateIndices',\n        'type': 'bool',\n        'defaultValue': true,\n        'notSupported': true\n      }\n    ]\n  }\n]\n;\n","\n/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpMapper} from '../types';\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Bincount',\n    'category': 'reduction',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'size',\n        'type': 'number'\n      },\n      {\n        'start': 2,\n        'name': 'weights',\n        'type': 'tensor'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'DenseBincount',\n    'category': 'reduction',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'size',\n        'type': 'number'\n      },\n      {\n        'start': 2,\n        'name': 'weights',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'binary_output',\n        'name': 'binaryOutput',\n        'type': 'bool'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Max',\n    'category': 'reduction',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'axis',\n        'type': 'number[]'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'keep_dims',\n        'name': 'keepDims',\n        'type': 'bool'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Mean',\n    'category': 'reduction',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'axis',\n        'type': 'number[]'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'keep_dims',\n        'name': 'keepDims',\n        'type': 'bool'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Min',\n    'category': 'reduction',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'axis',\n        'type': 'number[]'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'keep_dims',\n        'name': 'keepDims',\n        'type': 'bool'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Sum',\n    'category': 'reduction',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'axis',\n        'type': 'number[]'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'keep_dims',\n        'name': 'keepDims',\n        'type': 'bool'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'All',\n    'category': 'reduction',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'axis',\n        'type': 'number[]'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'keep_dims',\n        'name': 'keepDims',\n        'type': 'bool'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Any',\n    'category': 'reduction',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'axis',\n        'type': 'number[]'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'keep_dims',\n        'name': 'keepDims',\n        'type': 'bool'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'ArgMax',\n    'category': 'reduction',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'axis',\n        'type': 'number'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'ArgMin',\n    'category': 'reduction',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'axis',\n        'type': 'number'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Prod',\n    'category': 'reduction',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'axis',\n        'type': 'number[]'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'keep_dims',\n        'name': 'keepDims',\n        'type': 'bool'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Cumprod',\n    'category': 'reduction',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'axis',\n        'type': 'number'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'exclusive',\n        'name': 'exclusive',\n        'type': 'bool'\n      },\n      {\n        'tfName': 'reverse',\n        'name': 'reverse',\n        'type': 'bool'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Cumsum',\n    'category': 'reduction',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'axis',\n        'type': 'number'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'exclusive',\n        'name': 'exclusive',\n        'type': 'bool'\n      },\n      {\n        'tfName': 'reverse',\n        'name': 'reverse',\n        'type': 'bool'\n      }\n    ]\n  }\n]\n;\n","\n/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpMapper} from '../types';\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'ConcatV2',\n    'category': 'slice_join',\n    'inputs': [\n      {\n        'start': 0,\n        'end': -1,\n        'name': 'tensors',\n        'type': 'tensors'\n      },\n      {\n        'start': -1,\n        'name': 'axis',\n        'type': 'number'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'N',\n        'name': 'n',\n        'type': 'number',\n        'defaultValue': 2\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Concat',\n    'category': 'slice_join',\n    'inputs': [\n      {\n        'start': 1,\n        'end': 0,\n        'name': 'tensors',\n        'type': 'tensors'\n      },\n      {\n        'start': 0,\n        'name': 'axis',\n        'type': 'number'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'N',\n        'name': 'n',\n        'type': 'number',\n        'defaultValue': 2\n      }\n    ]\n  },\n  {\n    'tfOpName': 'GatherV2',\n    'category': 'slice_join',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'indices',\n        'type': 'tensor'\n      },\n      {\n        'start': 2,\n        'name': 'axis',\n        'type': 'number',\n        'defaultValue': 0\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'batch_dims',\n        'name': 'batchDims',\n        'type': 'number',\n        'defaultValue': 0\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Gather',\n    'category': 'slice_join',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'indices',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'validate_indices',\n        'name': 'validateIndices',\n        'type': 'bool',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Reverse',\n    'category': 'slice_join',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'dims',\n        'type': 'bool[]'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'ReverseV2',\n    'category': 'slice_join',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'axis',\n        'type': 'number[]'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Slice',\n    'category': 'slice_join',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'begin',\n        'type': 'number[]'\n      },\n      {\n        'start': 2,\n        'name': 'size',\n        'type': 'number[]'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'StridedSlice',\n    'category': 'slice_join',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'begin',\n        'type': 'number[]'\n      },\n      {\n        'start': 2,\n        'name': 'end',\n        'type': 'number[]'\n      },\n      {\n        'start': 3,\n        'name': 'strides',\n        'type': 'number[]'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'begin_mask',\n        'name': 'beginMask',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'end_mask',\n        'name': 'endMask',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'new_axis_mask',\n        'name': 'newAxisMask',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'ellipsis_mask',\n        'name': 'ellipsisMask',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'shrink_axis_mask',\n        'name': 'shrinkAxisMask',\n        'type': 'number',\n        'defaultValue': 0\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Pack',\n    'category': 'slice_join',\n    'inputs': [\n      {\n        'start': 0,\n        'end': 0,\n        'name': 'tensors',\n        'type': 'tensors'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'axis',\n        'name': 'axis',\n        'type': 'number',\n        'defaultValue': 0\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Unpack',\n    'category': 'slice_join',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'tensor',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'axis',\n        'name': 'axis',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'num',\n        'name': 'num',\n        'type': 'number',\n        'defaultValue': 0,\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Tile',\n    'category': 'slice_join',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'reps',\n        'type': 'number[]'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Split',\n    'category': 'slice_join',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'axis',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'start': 1,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'num_split',\n        'name': 'numOrSizeSplits',\n        'type': 'number',\n        'defaultValue': 1\n      }\n    ]\n  },\n  {\n    'tfOpName': 'SplitV',\n    'category': 'slice_join',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'numOrSizeSplits',\n        'type': 'number[]'\n      },\n      {\n        'start': 2,\n        'name': 'axis',\n        'type': 'number',\n        'defaultValue': 0\n      }\n    ]\n  },\n  {\n    'tfOpName': 'ScatterNd',\n    'category': 'slice_join',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'indices',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'values',\n        'type': 'tensor'\n      },\n      {\n        'start': 2,\n        'name': 'shape',\n        'type': 'number[]'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'GatherNd',\n    'category': 'slice_join',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'indices',\n        'type': 'tensor'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'SparseToDense',\n    'category': 'slice_join',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'sparseIndices',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'outputShape',\n        'type': 'number[]'\n      },\n      {\n        'start': 2,\n        'name': 'sparseValues',\n        'type': 'tensor'\n      },\n      {\n        'start': 3,\n        'name': 'defaultValue',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'validate_indices',\n        'name': 'validateIndices',\n        'type': 'bool',\n        'defaultValue': false,\n        'notSupported': true\n      }\n    ]\n  }\n];\n","\n/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpMapper} from '../types';\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'SparseFillEmptyRows',\n    'category': 'sparse',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'indices',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'values',\n        'type': 'tensor'\n      },\n      {\n        'start': 2,\n        'name': 'denseShape',\n        'type': 'tensor'\n      },\n      {\n        'start': 3,\n        'name': 'defaultValue',\n        'type': 'tensor'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'SparseReshape',\n    'category': 'sparse',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'inputIndices',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'inputShape',\n        'type': 'tensor'\n      },\n      {\n        'start': 2,\n        'name': 'newShape',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'SparseSegmentMean',\n    'category': 'sparse',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'data',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'indices',\n        'type': 'tensor'\n      },\n      {\n        'start': 2,\n        'name': 'segmentIds',\n        'type': 'tensor'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'SparseSegmentSum',\n    'category': 'sparse',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'data',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'indices',\n        'type': 'tensor'\n      },\n      {\n        'start': 2,\n        'name': 'segmentIds',\n        'type': 'tensor'\n      }\n    ]\n  }\n];\n","\n/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpMapper} from '../types';\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'FFT',\n    'category': 'spectral',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'IFFT',\n    'category': 'spectral',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'RFFT',\n    'category': 'spectral',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'fft_length',\n        'type': 'number',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'IRFFT',\n    'category': 'spectral',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'fft_length',\n        'type': 'number',\n        'notSupported': true\n      }\n    ]\n  }\n];\n","\n/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpMapper} from '../types';\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'StringNGrams',\n    'category': 'string',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'data',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'dataSplits',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'separator',\n        'name': 'separator',\n        'type': 'string'\n      },\n      {\n        'tfName': 'ngram_widths',\n        'name': 'nGramWidths',\n        'type': 'number[]'\n      },\n      {\n        'tfName': 'left_pad',\n        'name': 'leftPad',\n        'type': 'string'\n      },\n      {\n        'tfName': 'right_pad',\n        'name': 'rightPad',\n        'type': 'string'\n      },\n      {\n        'tfName': 'pad_width',\n        'name': 'padWidth',\n        'type': 'number'\n      },\n      {\n        'tfName': 'preserve_short_sequences',\n        'name': 'preserveShortSequences',\n        'type': 'bool'\n      }\n    ],\n    'outputs': [\n      'ngrams',\n      'ngrams_splits'\n    ]\n  },\n  {\n    'tfOpName': 'StringSplit',\n    'category': 'string',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'input',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'delimiter',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'skip_empty',\n        'name': 'skipEmpty',\n        'type': 'bool'\n      }\n    ],\n    'outputs': [\n      'indices',\n      'values',\n      'shape'\n    ]\n  },\n  {\n    'tfOpName': 'StringToHashBucketFast',\n    'category': 'string',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'input',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'num_buckets',\n        'name': 'numBuckets',\n        'type': 'number'\n      }\n    ]\n  }\n];\n","\n/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpMapper} from '../types';\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Cast',\n    'category': 'transformation',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'SrcT',\n        'name': 'sdtype',\n        'type': 'dtype',\n        'notSupported': true\n      },\n      {\n        'tfName': 'DstT',\n        'name': 'dtype',\n        'type': 'dtype'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'ExpandDims',\n    'category': 'transformation',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'axis',\n        'type': 'number'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'MirrorPad',\n    'category': 'transformation',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'padding',\n        'type': 'number[]'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'mode',\n        'name': 'mode',\n        'type': 'string'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Pad',\n    'category': 'transformation',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'padding',\n        'type': 'number[]'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'constant_value',\n        'name': 'constantValue',\n        'type': 'number',\n        'defaultValue': 0\n      }\n    ]\n  },\n  {\n    'tfOpName': 'PadV2',\n    'category': 'transformation',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'padding',\n        'type': 'number[]'\n      },\n      {\n        'start': 2,\n        'name': 'constantValue',\n        'type': 'number',\n        'defaultValue': 0\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Reshape',\n    'category': 'transformation',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'shape',\n        'type': 'number[]'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Squeeze',\n    'category': 'transformation',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'axis',\n        'tfDeprecatedName': 'squeeze_dims',\n        'name': 'axis',\n        'type': 'number[]'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'SpaceToBatchND',\n    'category': 'transformation',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'blockShape',\n        'type': 'number[]'\n      },\n      {\n        'start': 2,\n        'name': 'paddings',\n        'type': 'number[]'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'BatchToSpaceND',\n    'category': 'transformation',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'blockShape',\n        'type': 'number[]'\n      },\n      {\n        'start': 2,\n        'name': 'crops',\n        'type': 'number[]'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'DepthToSpace',\n    'category': 'transformation',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'block_size',\n        'name': 'blockSize',\n        'type': 'number'\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'BroadcastTo',\n    'category': 'transformation',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'shape',\n        'type': 'number[]'\n      }\n    ],\n    'attrs': []\n  },\n  {\n    'tfOpName': 'BroadcastArgs',\n    'category': 'transformation',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 's0',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 's1',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': []\n  }\n];\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, env} from '@tensorflow/tfjs-core';\n\nimport * as tensorflow from '../data/compiled_api';\n\nimport {getRegisteredOp} from './custom_op/register';\nimport {getNodeNameAndIndex} from './executors/utils';\nimport * as arithmetic from './op_list/arithmetic';\nimport * as basicMath from './op_list/basic_math';\nimport * as control from './op_list/control';\nimport * as convolution from './op_list/convolution';\nimport * as creation from './op_list/creation';\nimport * as dynamic from './op_list/dynamic';\nimport * as evaluation from './op_list/evaluation';\nimport * as graph from './op_list/graph';\nimport * as hashTable from './op_list/hash_table';\nimport * as image from './op_list/image';\nimport * as logical from './op_list/logical';\nimport * as matrices from './op_list/matrices';\nimport * as normalization from './op_list/normalization';\nimport * as reduction from './op_list/reduction';\nimport * as sliceJoin from './op_list/slice_join';\nimport * as sparse from './op_list/sparse';\nimport * as spectral from './op_list/spectral';\nimport * as string from './op_list/string';\nimport * as transformation from './op_list/transformation';\nimport {Graph, InputParamValue, Node, OpMapper, ParamValue} from './types';\n\nexport class OperationMapper {\n  private static _instance: OperationMapper;\n\n  private opMappers: {[key: string]: OpMapper};\n\n  // Singleton instance for the mapper\n  public static get Instance() {\n    return this._instance || (this._instance = new this());\n  }\n\n  // Loads the op mapping from the JSON file.\n  private constructor() {\n    const ops = [\n      arithmetic, basicMath, control, convolution, creation, dynamic,\n      evaluation, graph, hashTable, image, logical, matrices, normalization,\n      reduction, sliceJoin, sparse, spectral, string, transformation\n    ];\n    const mappersJson: OpMapper[] = [].concat(...ops.map(op => op.json));\n\n    this.opMappers = mappersJson.reduce<{[key: string]: OpMapper}>(\n        (map, mapper: OpMapper) => {\n          map[mapper.tfOpName] = mapper;\n          return map;\n        },\n        {});\n  }\n\n  // Converts the model inference graph from Tensorflow GraphDef to local\n  // representation for TensorFlow.js API\n  transformGraph(\n      graph: tensorflow.IGraphDef,\n      signature: tensorflow.ISignatureDef = {}): Graph {\n    const tfNodes = graph.node;\n    const placeholders: Node[] = [];\n    const weights: Node[] = [];\n    const initNodes: Node[] = [];\n    const nodes = tfNodes.reduce<{[key: string]: Node}>((map, node) => {\n      map[node.name] = this.mapNode(node);\n      if (node.op.startsWith('Placeholder')) {\n        placeholders.push(map[node.name]);\n      } else if (node.op === 'Const') {\n        weights.push(map[node.name]);\n      } else if (node.input == null || node.input.length === 0) {\n        initNodes.push(map[node.name]);\n      }\n      return map;\n    }, {});\n\n    let inputs: Node[] = [];\n    const outputs: Node[] = [];\n    let inputNodeNameToKey: {[key: string]: string} = {};\n    let outputNodeNameToKey: {[key: string]: string} = {};\n    if (signature != null) {\n      inputNodeNameToKey = this.mapSignatureEntries(signature.inputs);\n      outputNodeNameToKey = this.mapSignatureEntries(signature.outputs);\n    }\n    const allNodes = Object.keys(nodes);\n    allNodes.forEach(key => {\n      const node = nodes[key];\n      node.inputNames.forEach((name, index) => {\n        const [nodeName, , outputName] = getNodeNameAndIndex(name);\n        const inputNode = nodes[nodeName];\n        if (inputNode.outputs != null) {\n          const outputIndex = inputNode.outputs.indexOf(outputName);\n          if (outputIndex !== -1) {\n            const inputName = `${nodeName}:${outputIndex}`;\n            // update the input name to use the mapped output index directly.\n            node.inputNames[index] = inputName;\n          }\n        }\n        node.inputs.push(inputNode);\n        inputNode.children.push(node);\n      });\n    });\n\n    // if signature has not outputs set, add any node that does not have\n    // outputs.\n    if (Object.keys(outputNodeNameToKey).length === 0) {\n      allNodes.forEach(key => {\n        const node = nodes[key];\n        if (node.children.length === 0) {\n          outputs.push(node);\n        }\n      });\n    } else {\n      Object.keys(outputNodeNameToKey).forEach(name => {\n        const [nodeName, ] = getNodeNameAndIndex(name);\n        const node = nodes[nodeName];\n        if (node != null) {\n          node.signatureKey = outputNodeNameToKey[name];\n          outputs.push(node);\n        }\n      });\n    }\n\n    if (Object.keys(inputNodeNameToKey).length > 0) {\n      Object.keys(inputNodeNameToKey).forEach(name => {\n        const [nodeName, ] = getNodeNameAndIndex(name);\n        const node = nodes[nodeName];\n        if (node) {\n          node.signatureKey = inputNodeNameToKey[name];\n          inputs.push(node);\n        }\n      });\n    } else {\n      inputs = placeholders;\n    }\n\n    let functions = {};\n    if (graph.library != null && graph.library.function != null) {\n      functions = graph.library.function.reduce((functions, func) => {\n        functions[func.signature.name] = this.mapFunction(func);\n        return functions;\n      }, {} as {[key: string]: Graph});\n    }\n\n    const result: Graph =\n        {nodes, inputs, outputs, weights, placeholders, signature, functions};\n\n    if (initNodes.length > 0) {\n      result.initNodes = initNodes;\n    }\n\n    return result;\n  }\n\n  private mapSignatureEntries(entries: {[k: string]: tensorflow.ITensorInfo}) {\n    return Object.keys(entries || {})\n        .reduce<{[key: string]: string}>((prev, curr) => {\n          prev[entries[curr].name] = curr;\n          return prev;\n        }, {});\n  }\n\n  private mapNode(node: tensorflow.INodeDef): Node {\n    // Unsupported ops will cause an error at run-time (not parse time), since\n    // they may not be used by the actual execution subgraph.\n    const mapper =\n        getRegisteredOp(node.op) || this.opMappers[node.op] || {} as OpMapper;\n    if (node.attr == null) {\n      node.attr = {};\n    }\n\n    const newNode: Node = {\n      name: node.name,\n      op: node.op,\n      category: mapper.category,\n      inputNames:\n          (node.input ||\n           []).map(input => input.startsWith('^') ? input.slice(1) : input),\n      inputs: [],\n      children: [],\n      inputParams: {},\n      attrParams: {},\n      rawAttrs: node.attr,\n      outputs: mapper.outputs\n    };\n\n    if (mapper.inputs != null) {\n      newNode.inputParams =\n          mapper.inputs.reduce<{[key: string]: InputParamValue}>(\n              (map, param) => {\n                map[param.name] = {\n                  type: param.type,\n                  inputIndexStart: param.start,\n                  inputIndexEnd: param.end\n                };\n                return map;\n              },\n              {});\n    }\n    if (mapper.attrs != null) {\n      newNode.attrParams =\n          mapper.attrs.reduce<{[key: string]: ParamValue}>((map, param) => {\n            const type = param.type;\n            let value = undefined;\n            switch (param.type) {\n              case 'string':\n                value = getStringParam(\n                    node.attr, param.tfName, param.defaultValue as string);\n\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getStringParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as string);\n                }\n                break;\n              case 'string[]':\n                value = getStringArrayParam(\n                    node.attr, param.tfName, param.defaultValue as string[]);\n\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getStringArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as string[]);\n                }\n                break;\n              case 'number':\n                value = getNumberParam(\n                    node.attr, param.tfName,\n                    (param.defaultValue || 0) as number);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getNumberParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as number);\n                }\n                break;\n              case 'number[]':\n                value = getNumericArrayParam(\n                    node.attr, param.tfName, param.defaultValue as number[]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getNumericArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as number[]);\n                }\n                break;\n              case 'bool':\n                value = getBoolParam(\n                    node.attr, param.tfName, param.defaultValue as boolean);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getBoolParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as boolean);\n                }\n                break;\n              case 'bool[]':\n                value = getBoolArrayParam(\n                    node.attr, param.tfName, param.defaultValue as boolean[]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getBoolArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as boolean[]);\n                }\n                break;\n              case 'shape':\n                value = getTensorShapeParam(\n                    node.attr, param.tfName, param.defaultValue as number[]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getTensorShapeParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as number[]);\n                }\n                break;\n              case 'shape[]':\n                value = getTensorShapeArrayParam(\n                    node.attr, param.tfName, param.defaultValue as number[][]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getTensorShapeArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as number[][]);\n                }\n                break;\n              case 'dtype':\n                value = getDtypeParam(\n                    node.attr, param.tfName, param.defaultValue as DataType);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getDtypeParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as DataType);\n                }\n                break;\n              case 'dtype[]':\n                value = getDtypeArrayParam(\n                    node.attr, param.tfName, param.defaultValue as DataType[]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getDtypeArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as DataType[]);\n                }\n                break;\n              case 'func':\n                value = getFuncParam(\n                    node.attr, param.tfName, param.defaultValue as string);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getFuncParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as string);\n                }\n                break;\n              case 'tensor':\n              case 'tensors':\n                break;\n              default:\n                throw new Error(\n                    `Unsupported param type: ${param.type} for op: ${node.op}`);\n            }\n            map[param.name] = {value, type};\n            return map;\n          }, {});\n    }\n    return newNode;\n  }\n\n  // map the TFunctionDef to TFJS graph object\n  private mapFunction(functionDef: tensorflow.IFunctionDef): Graph {\n    const tfNodes = functionDef.nodeDef;\n    const placeholders: Node[] = [];\n    const weights: Node[] = [];\n    let nodes: {[key: string]: Node} = {};\n    if (tfNodes != null) {\n      nodes = tfNodes.reduce<{[key: string]: Node}>((map, node) => {\n        map[node.name] = this.mapNode(node);\n        if (node.op === 'Const') {\n          weights.push(map[node.name]);\n        }\n        return map;\n      }, {});\n    }\n    const inputs: Node[] = [];\n    const outputs: Node[] = [];\n\n    functionDef.signature.inputArg.forEach(arg => {\n      const [nodeName, ] = getNodeNameAndIndex(arg.name);\n      const node: Node = {\n        name: nodeName,\n        op: 'Placeholder',\n        inputs: [],\n        inputNames: [],\n        category: 'graph',\n        inputParams: {},\n        attrParams: {dtype: {value: parseDtypeParam(arg.type), type: 'dtype'}},\n        children: []\n      };\n      node.signatureKey = arg.name;\n      inputs.push(node);\n      nodes[nodeName] = node;\n    });\n\n    const allNodes = Object.keys(nodes);\n    allNodes.forEach(key => {\n      const node = nodes[key];\n      node.inputNames.forEach((name, index) => {\n        const [nodeName, , outputName] = getNodeNameAndIndex(name);\n        const inputNode = nodes[nodeName];\n        if (inputNode.outputs != null) {\n          const outputIndex = inputNode.outputs.indexOf(outputName);\n          if (outputIndex !== -1) {\n            const inputName = `${nodeName}:${outputIndex}`;\n            // update the input name to use the mapped output index directly.\n            node.inputNames[index] = inputName;\n          }\n        }\n        node.inputs.push(inputNode);\n        inputNode.children.push(node);\n      });\n    });\n\n    const returnNodeMap = functionDef.ret;\n\n    functionDef.signature.outputArg.forEach(output => {\n      const [nodeName, index] = getNodeNameAndIndex(returnNodeMap[output.name]);\n      const node = nodes[nodeName];\n      if (node != null) {\n        node.defaultOutput = index;\n        outputs.push(node);\n      }\n    });\n\n    const signature = this.mapArgsToSignature(functionDef);\n    return {nodes, inputs, outputs, weights, placeholders, signature};\n  }\n\n  private mapArgsToSignature(functionDef: tensorflow.IFunctionDef):\n      tensorflow.ISignatureDef {\n    return {\n      methodName: functionDef.signature.name,\n      inputs: functionDef.signature.inputArg.reduce(\n          (map, arg) => {\n            map[arg.name] = this.mapArgToTensorInfo(arg);\n            return map;\n          },\n          {} as {[key: string]: tensorflow.ITensorInfo}),\n      outputs: functionDef.signature.outputArg.reduce(\n          (map, arg) => {\n            map[arg.name] = this.mapArgToTensorInfo(arg, functionDef.ret);\n            return map;\n          },\n          {} as {[key: string]: tensorflow.ITensorInfo}),\n    };\n  }\n\n  private mapArgToTensorInfo(\n      arg: tensorflow.OpDef.IArgDef,\n      nameMap?: {[key: string]: string}): tensorflow.ITensorInfo {\n    let name = arg.name;\n    if (nameMap != null) {\n      name = nameMap[name];\n    }\n    return {name, dtype: arg.type};\n  }\n}\n\nexport function decodeBase64(text: string): string {\n  const global = env().global;\n  if (typeof global.atob !== 'undefined') {\n    return global.atob(text);\n  } else if (typeof Buffer !== 'undefined') {\n    return new Buffer(text, 'base64').toString();\n  } else {\n    throw new Error(\n        'Unable to decode base64 in this environment. ' +\n        'Missing built-in atob() or Buffer()');\n  }\n}\n\nexport function parseStringParam(s: []|string, keepCase: boolean): string {\n  const value =\n      Array.isArray(s) ? String.fromCharCode.apply(null, s) : decodeBase64(s);\n  return keepCase ? value : value.toLowerCase();\n}\n\nexport function getStringParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string, def: string,\n    keepCase = false): string {\n  const param = attrs[name];\n  if (param != null) {\n    return parseStringParam(param.s, keepCase);\n  }\n  return def;\n}\n\nexport function getBoolParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: boolean): boolean {\n  const param = attrs[name];\n  return param ? param.b : def;\n}\n\nexport function getNumberParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: number): number {\n  const param = attrs[name] || {};\n  const value =\n      param['i'] != null ? param['i'] : (param['f'] != null ? param['f'] : def);\n  return (typeof value === 'number') ? value : parseInt(value, 10);\n}\n\nexport function parseDtypeParam(value: string|tensorflow.DataType): DataType {\n  if (typeof (value) === 'string') {\n    // tslint:disable-next-line:no-any\n    value = tensorflow.DataType[value as any];\n  }\n  switch (value) {\n    case tensorflow.DataType.DT_FLOAT:\n    case tensorflow.DataType.DT_HALF:\n      return 'float32';\n    case tensorflow.DataType.DT_INT32:\n    case tensorflow.DataType.DT_INT64:\n    case tensorflow.DataType.DT_INT8:\n    case tensorflow.DataType.DT_UINT8:\n      return 'int32';\n    case tensorflow.DataType.DT_BOOL:\n      return 'bool';\n    case tensorflow.DataType.DT_DOUBLE:\n      return 'float32';\n    case tensorflow.DataType.DT_STRING:\n      return 'string';\n    default:\n      // Unknown dtype error will happen at runtime (instead of parse time),\n      // since these nodes might not be used by the actual subgraph execution.\n      return null;\n  }\n}\n\nexport function getFuncParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: string): string {\n  const param = attrs[name];\n  if (param && param.func) {\n    return param.func.name;\n  }\n  return def;\n}\n\nexport function getDtypeParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: DataType): DataType {\n  const param = attrs[name];\n  if (param && param.type) {\n    return parseDtypeParam(param.type);\n  }\n  return def;\n}\n\nexport function getDtypeArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: DataType[]): DataType[] {\n  const param = attrs[name];\n  if (param && param.list && param.list.type) {\n    return param.list.type.map(v => parseDtypeParam(v));\n  }\n  return def;\n}\n\nexport function parseTensorShapeParam(shape: tensorflow.ITensorShape): number[]|\n    undefined {\n  if (shape.unknownRank) {\n    return undefined;\n  }\n  if (shape.dim != null) {\n    return shape.dim.map(\n        dim =>\n            (typeof dim.size === 'number') ? dim.size : parseInt(dim.size, 10));\n  }\n  return [];\n}\n\nexport function getTensorShapeParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def?: number[]): number[]|undefined {\n  const param = attrs[name];\n  if (param && param.shape) {\n    return parseTensorShapeParam(param.shape);\n  }\n  return def;\n}\n\nexport function getNumericArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: number[]): number[] {\n  const param = attrs[name];\n  if (param) {\n    return ((param.list.f && param.list.f.length ? param.list.f :\n                                                   param.list.i) ||\n            [])\n        .map(v => (typeof v === 'number') ? v : parseInt(v, 10));\n  }\n  return def;\n}\n\nexport function getStringArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string, def: string[],\n    keepCase = false): string[] {\n  const param = attrs[name];\n  if (param && param.list && param.list.s) {\n    return param.list.s.map((v) => {\n      return parseStringParam(v, keepCase);\n    });\n  }\n  return def;\n}\n\nexport function getTensorShapeArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: number[][]): number[][] {\n  const param = attrs[name];\n  if (param && param.list && param.list.shape) {\n    return param.list.shape.map((v) => {\n      return parseTensorShapeParam(v);\n    });\n  }\n  return def;\n}\n\nexport function getBoolArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: boolean[]): boolean[] {\n  const param = attrs[name];\n  if (param && param.list && param.list.b) {\n    return param.list.b;\n  }\n  return def;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, Tensor} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {getTensor} from '../executors/utils';\nimport {getBoolArrayParam, getBoolParam, getDtypeArrayParam, getDtypeParam, getNumberParam, getNumericArrayParam, getStringArrayParam, getStringParam, getTensorShapeArrayParam, getTensorShapeParam} from '../operation_mapper';\nimport {GraphNode, Node, ValueType} from '../types';\n\n/**\n * Helper class for lookup inputs and params for nodes in the model graph.\n */\nexport class NodeValueImpl implements GraphNode {\n  public readonly inputs: Tensor[] = [];\n  public readonly attrs: {[key: string]: ValueType} = {};\n  constructor(\n      private node: Node, private tensorMap: NamedTensorsMap,\n      private context: ExecutionContext) {\n    this.inputs = node.inputNames.map(name => this.getInput(name));\n    if (node.rawAttrs != null) {\n      this.attrs = Object.keys(node.rawAttrs)\n                       .reduce((attrs: {[key: string]: ValueType}, key) => {\n                         attrs[key] = this.getAttr(key);\n                         return attrs;\n                       }, {});\n    }\n  }\n\n  /**\n   * Return the value of the attribute or input param.\n   * @param name String: name of attribute or input param.\n   */\n  private getInput(name: string): Tensor {\n    return getTensor(name, this.tensorMap, this.context);\n  }\n\n  /**\n   * Return the value of the attribute or input param.\n   * @param name String: name of attribute or input param.\n   */\n  private getAttr(name: string, defaultValue?: ValueType): ValueType {\n    const value = this.node.rawAttrs[name];\n    if (value.tensor != null) {\n      return getTensor(name, this.tensorMap, this.context);\n    }\n    if (value.i != null || value.f != null) {\n      return getNumberParam(this.node.rawAttrs, name, defaultValue as number);\n    }\n    if (value.s != null) {\n      return getStringParam(this.node.rawAttrs, name, defaultValue as string);\n    }\n    if (value.b != null) {\n      return getBoolParam(this.node.rawAttrs, name, defaultValue as boolean);\n    }\n    if (value.shape != null) {\n      return getTensorShapeParam(\n          this.node.rawAttrs, name, defaultValue as number[]);\n    }\n    if (value.type != null) {\n      return getDtypeParam(this.node.rawAttrs, name, defaultValue as DataType);\n    }\n    if (value.list != null) {\n      if (value.list.i != null || value.list.f != null) {\n        return getNumericArrayParam(\n            this.node.rawAttrs, name, defaultValue as number[]);\n      }\n      if (value.list.s != null) {\n        return getStringArrayParam(\n            this.node.rawAttrs, name, defaultValue as string[]);\n      }\n      if (value.list.shape != null) {\n        return getTensorShapeArrayParam(\n            this.node.rawAttrs, name, defaultValue as number[][]);\n      }\n      if (value.list.b != null) {\n        return getBoolArrayParam(\n            this.node.rawAttrs, name, defaultValue as boolean[]);\n      }\n      if (value.list.type != null) {\n        return getDtypeArrayParam(\n            this.node.rawAttrs, name, defaultValue as DataType[]);\n      }\n    }\n\n    return defaultValue;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext, ops = tfOps): Tensor[] => {\n      switch (node.op) {\n        case 'BiasAdd':\n        case 'AddV2':\n        case 'Add': {\n          return [ops.add(\n              (getParamValue('a', node, tensorMap, context) as Tensor),\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'AddN': {\n          return [ops.addN((\n              getParamValue('tensors', node, tensorMap, context) as Tensor[]))];\n        }\n        case 'FloorMod':\n        case 'Mod':\n          return [ops.mod(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        case 'Mul':\n          return [ops.mul(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        case 'RealDiv':\n        case 'Div': {\n          return [ops.div(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'DivNoNan': {\n          return [ops.divNoNan(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'FloorDiv': {\n          return [ops.floorDiv(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'Sub': {\n          return [ops.sub(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'Minimum': {\n          return [ops.minimum(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'Maximum': {\n          return [ops.maximum(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'Pow': {\n          return [ops.pow(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'SquaredDifference': {\n          return [ops.squaredDifference(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'arithmetic';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue, getTensor} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext, ops = tfOps): Tensor[] => {\n      switch (node.op) {\n        case 'Abs':\n        case 'ComplexAbs':\n          return [ops.abs(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Acos':\n          return [ops.acos(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Acosh':\n          return [ops.acosh(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Asin':\n          return [ops.asin(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Asinh':\n          return [ops.asinh(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Atan':\n          return [ops.atan(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Atan2':\n          return [ops.atan2(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('y', node, tensorMap, context) as Tensor)];\n        case 'Atanh':\n          return [ops.atanh(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Ceil':\n          return [ops.ceil(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Complex':\n          return [ops.complex(\n              getParamValue('real', node, tensorMap, context) as Tensor,\n              getParamValue('imag', node, tensorMap, context) as Tensor)];\n        case 'Cos':\n          return [ops.cos(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Cosh':\n          return [ops.cosh(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Elu':\n          return [ops.elu(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Erf':\n          return [ops.erf(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Exp':\n          return [ops.exp(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Expm1': {\n          return [ops.expm1(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Floor':\n          return [ops.floor(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Log':\n          return [ops.log(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Log1p': {\n          return [ops.log1p(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Imag':\n          return [ops.imag(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n\n        case 'Neg':\n          return [ops.neg(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Reciprocal': {\n          return [ops.reciprocal(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Real':\n          return [ops.real(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Relu':\n          return [ops.relu(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Round': {\n          return [ops.round(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Selu':\n          return [ops.selu(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Sigmoid':\n          return [ops.sigmoid(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Sin':\n          return [ops.sin(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Sign': {\n          return [ops.sign(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Sinh': {\n          return [ops.sinh(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Softplus': {\n          return [ops.softplus(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Sqrt': {\n          return [ops.sqrt(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Square': {\n          return [ops.square(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Tanh': {\n          return [ops.tanh(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Tan':\n          return [ops.tan(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'ClipByValue':\n          return [ops.clipByValue(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('clipValueMin', node, tensorMap, context) as number,\n              getParamValue('clipValueMax', node, tensorMap, context) as\n                  number)];\n        case 'Relu6':\n          return [ops.relu6(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Rsqrt':\n          return [ops.rsqrt(\n              getTensor(node.inputNames[0], tensorMap, context))];\n        case 'Prod':\n          return [ops.prod(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('axes', node, tensorMap, context) as number[])];\n        case 'LeakyRelu':\n          return [ops.leakyRelu(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('alpha', node, tensorMap, context) as number)];\n        case 'Prelu':\n          return [ops.prelu(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('alpha', node, tensorMap, context) as Tensor)];\n        case 'IsNan':\n          return [ops.isNaN(\n              getTensor(node.inputNames[0], tensorMap, context))];\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'basic_math';\n","\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * This differs from util.assertShapesMatch in that it allows values of\n * negative one, an undefined size of a dimensinon, in a shape to match\n * anything.\n */\n\nimport {Tensor, util} from '@tensorflow/tfjs-core';\n\n/**\n * Used by TensorList and TensorArray to verify if elementShape matches, support\n * negative value as the dim shape.\n * @param shapeA\n * @param shapeB\n * @param errorMessagePrefix\n */\nexport function assertShapesMatchAllowUndefinedSize(\n    shapeA: number|number[], shapeB: number|number[],\n    errorMessagePrefix = ''): void {\n  // constant shape means unknown rank\n  if (typeof shapeA === 'number' || typeof shapeB === 'number') {\n    return;\n  }\n  util.assert(\n      shapeA.length === shapeB.length,\n      () => errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);\n  for (let i = 0; i < shapeA.length; i++) {\n    const dim0 = shapeA[i];\n    const dim1 = shapeB[i];\n    util.assert(\n        dim0 < 0 || dim1 < 0 || dim0 === dim1,\n        () =>\n            errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);\n  }\n}\n\nexport function fullDefinedShape(elementShape: number|number[]): boolean {\n  if (typeof elementShape === 'number' || elementShape.some(dim => dim < 0)) {\n    return false;\n  }\n  return true;\n}\n/**\n * Generate the output element shape from the list elementShape, list tensors\n * and input param.\n * @param listElementShape\n * @param tensors\n * @param elementShape\n */\nexport function inferElementShape(\n    listElementShape: number|number[], tensors: Tensor[],\n    elementShape: number|number[]): number[] {\n  let partialShape = mergeElementShape(listElementShape, elementShape);\n  const notfullDefinedShape = !fullDefinedShape(partialShape);\n  if (notfullDefinedShape && tensors.length === 0) {\n    throw new Error(\n        `Tried to calculate elements of an empty list` +\n        ` with non-fully-defined elementShape: ${partialShape}`);\n  }\n  if (notfullDefinedShape) {\n    tensors.forEach(tensor => {\n      partialShape = mergeElementShape(tensor.shape, partialShape);\n    });\n  }\n  if (!fullDefinedShape(partialShape)) {\n    throw new Error(`Non-fully-defined elementShape: ${partialShape}`);\n  }\n  return partialShape as number[];\n}\n\nexport function mergeElementShape(\n    elementShapeA: number|number[], elementShapeB: number|number[]): number|\n    number[] {\n  if (typeof elementShapeA === 'number') {\n    return elementShapeB;\n  }\n  if (typeof elementShapeB === 'number') {\n    return elementShapeA;\n  }\n\n  if (elementShapeA.length !== elementShapeB.length) {\n    throw new Error(`Incompatible ranks during merge: ${elementShapeA} vs. ${\n        elementShapeB}`);\n  }\n\n  const result: number[] = [];\n  for (let i = 0; i < elementShapeA.length; ++i) {\n    const dim0 = elementShapeA[i];\n    const dim1 = elementShapeB[i];\n    if (dim0 >= 0 && dim1 >= 0 && dim0 !== dim1) {\n      throw new Error(`Incompatible shape during merge: ${elementShapeA} vs. ${\n          elementShapeB}`);\n    }\n    result[i] = dim0 >= 0 ? dim0 : dim1;\n  }\n  return result;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {concat, DataType, keep, reshape, scalar, slice, stack, Tensor, tensor, tidy, unstack} from '@tensorflow/tfjs-core';\n\nimport {assertShapesMatchAllowUndefinedSize} from './tensor_utils';\n\nexport interface TensorWithState {\n  tensor?: Tensor;\n  written?: boolean;\n  read?: boolean;\n  cleared?: boolean;\n}\n/**\n * The TensorArray object keeps an array of Tensors.  It\n * allows reading from the array and writing to the array.\n */\nexport class TensorArray {\n  private tensors: TensorWithState[] = [];\n  private closed_ = false;\n  readonly idTensor: Tensor;\n  constructor(\n      readonly name: string, readonly dtype: DataType, private maxSize: number,\n      private elementShape: number[], readonly identicalElementShapes: boolean,\n      readonly dynamicSize: boolean, readonly clearAfterRead: boolean) {\n    this.idTensor = scalar(0);\n    keep(this.idTensor);\n  }\n\n  get id() {\n    return this.idTensor.id;\n  }\n\n  get closed() {\n    return this.closed_;\n  }\n\n  /**\n   * Dispose the tensors and idTensor and mark the TensoryArray as closed.\n   */\n  clearAndClose(keepIds?: Set<number>) {\n    this.tensors.forEach(tensor => {\n      if (keepIds == null || !keepIds.has(tensor.tensor.id)) {\n        tensor.tensor.dispose();\n      }\n    });\n    this.tensors = [];\n    this.closed_ = true;\n    this.idTensor.dispose();\n  }\n\n  size(): number {\n    return this.tensors.length;\n  }\n\n  /**\n   * Read the value at location index in the TensorArray.\n   * @param index Number the index to read from.\n   */\n  read(index: number): Tensor {\n    if (this.closed_) {\n      throw new Error(`TensorArray ${this.name} has already been closed.`);\n    }\n\n    if (index < 0 || index >= this.size()) {\n      throw new Error(`Tried to read from index ${index}, but array size is: ${\n          this.size()}`);\n    }\n\n    const tensorWithState = this.tensors[index];\n    if (tensorWithState.cleared) {\n      throw new Error(\n          `TensorArray ${this.name}: Could not read index ${\n              index} twice because it was cleared after a previous read ` +\n          `(perhaps try setting clear_after_read = false?).`);\n    }\n\n    if (this.clearAfterRead) {\n      tensorWithState.cleared = true;\n    }\n\n    tensorWithState.read = true;\n    return tensorWithState.tensor;\n  }\n\n  /**\n   * Helper method to read multiple tensors from the specified indices.\n   */\n  readMany(indices: number[]): Tensor[] {\n    return indices.map(index => this.read(index));\n  }\n\n  /**\n   * Write value into the index of the TensorArray.\n   * @param index number the index to write to.\n   * @param tensor\n   */\n  write(index: number, tensor: Tensor) {\n    if (this.closed_) {\n      throw new Error(`TensorArray ${this.name} has already been closed.`);\n    }\n\n    if (index < 0 || !this.dynamicSize && index >= this.maxSize) {\n      throw new Error(`Tried to write to index ${\n          index}, but array is not resizeable and size is: ${this.maxSize}`);\n    }\n\n    const t = this.tensors[index] || {};\n\n    if (tensor.dtype !== this.dtype) {\n      throw new Error(`TensorArray ${\n          this.name}: Could not write to TensorArray index ${index},\n          because the value dtype is ${\n          tensor.dtype}, but TensorArray dtype is ${this.dtype}.`);\n    }\n\n    // Set the shape for the first time write to unknow shape tensor array\n    if (this.size() === 0 &&\n        (this.elementShape == null || this.elementShape.length === 0)) {\n      this.elementShape = tensor.shape;\n    }\n\n    assertShapesMatchAllowUndefinedSize(\n        this.elementShape, tensor.shape,\n        `TensorArray ${this.name}: Could not write to TensorArray index ${\n            index}.`);\n\n    if (t.read) {\n      throw new Error(\n          `TensorArray ${this.name}: Could not write to TensorArray index ${\n              index}, because it has already been read.`);\n    }\n\n    if (t.written) {\n      throw new Error(\n          `TensorArray ${this.name}: Could not write to TensorArray index ${\n              index}, because it has already been written.`);\n    }\n\n    t.tensor = tensor;\n    keep(tensor);\n    t.written = true;\n\n    this.tensors[index] = t;\n  }\n\n  /**\n   * Helper method to write multiple tensors to the specified indices.\n   */\n  writeMany(indices: number[], tensors: Tensor[]) {\n    if (indices.length !== tensors.length) {\n      throw new Error(\n          `TensorArray ${this.name}: could not write multiple tensors,` +\n          `because the index size: ${\n              indices.length} is not the same as tensors size: ${\n              tensors.length}.`);\n    }\n\n    indices.forEach((i, index) => this.write(i, tensors[index]));\n  }\n\n  /**\n   * Return selected values in the TensorArray as a packed Tensor. All of\n   * selected values must have been written and their shapes must all match.\n   * @param [indices] number[] Optional. Taking values in [0, max_value). If the\n   *    TensorArray is not dynamic, max_value=size(). If not specified returns\n   *    all tensors in the original order.\n   * @param [dtype]\n   */\n  gather(indices?: number[], dtype?: DataType): Tensor {\n    if (!!dtype && dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${\n          this.dtype} but gather requested dtype ${dtype}`);\n    }\n\n    if (!indices) {\n      indices = [];\n      for (let i = 0; i < this.size(); i++) {\n        indices.push(i);\n      }\n    } else {\n      indices = indices.slice(0, this.size());\n    }\n\n    if (indices.length === 0) {\n      return tensor([], [0].concat(this.elementShape));\n    }\n\n    // Read all the PersistentTensors into a vector to keep track of\n    // their memory.\n    const tensors = this.readMany(indices);\n\n    assertShapesMatchAllowUndefinedSize(\n        this.elementShape, tensors[0].shape, 'TensorArray shape mismatch: ');\n\n    return stack(tensors, 0);\n  }\n\n  /**\n   * Return the values in the TensorArray as a concatenated Tensor.\n   */\n  concat(dtype?: DataType): Tensor {\n    if (!!dtype && dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${\n          this.dtype} but concat requested dtype ${dtype}`);\n    }\n\n    if (this.size() === 0) {\n      return tensor([], [0].concat(this.elementShape));\n    }\n\n    const indices = [];\n    for (let i = 0; i < this.size(); i++) {\n      indices.push(i);\n    }\n    // Collect all the tensors from the tensors array.\n    const tensors = this.readMany(indices);\n\n    assertShapesMatchAllowUndefinedSize(\n        this.elementShape, tensors[0].shape,\n        `TensorArray shape mismatch: tensor array shape (${\n            this.elementShape}) vs first tensor shape (${tensors[0].shape})`);\n\n    return concat(tensors, 0);\n  }\n\n  /**\n   * Scatter the values of a Tensor in specific indices of a TensorArray.\n   * @param indices nummber[] values in [0, max_value). If the\n   *    TensorArray is not dynamic, max_value=size().\n   * @param tensor Tensor input tensor.\n   */\n  scatter(indices: number[], tensor: Tensor) {\n    if (tensor.dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${\n          this.dtype} but tensor has dtype ${tensor.dtype}`);\n    }\n\n    if (indices.length !== tensor.shape[0]) {\n      throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${\n          indices.length} vs. ${tensor.shape[0]}`);\n    }\n\n    const maxIndex = Math.max(...indices);\n\n    if (!this.dynamicSize && maxIndex >= this.maxSize) {\n      throw new Error(\n          `Max index must be < array size (${maxIndex}  vs. ${this.maxSize})`);\n    }\n\n    this.writeMany(indices, unstack(tensor, 0));\n  }\n\n  /**\n   * Split the values of a Tensor into the TensorArray.\n   * @param length number[] with the lengths to use when splitting value along\n   *    its first dimension.\n   * @param tensor Tensor, the tensor to split.\n   */\n  split(length: number[], tensor: Tensor) {\n    if (tensor.dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${\n          this.dtype} but tensor has dtype ${tensor.dtype}`);\n    }\n    let totalLength = 0;\n    const cumulativeLengths = length.map(len => {\n      totalLength += len;\n      return totalLength;\n    });\n\n    if (totalLength !== tensor.shape[0]) {\n      throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${totalLength}, and tensor's shape is: ${tensor.shape}`);\n    }\n\n    if (!this.dynamicSize && length.length !== this.maxSize) {\n      throw new Error(\n          `TensorArray's size is not equal to the size of lengths (${\n              this.maxSize} vs. ${length.length}), ` +\n          'and the TensorArray is not marked as dynamically resizeable');\n    }\n\n    const elementPerRow = totalLength === 0 ? 0 : tensor.size / totalLength;\n    const tensors: Tensor[] = [];\n    tidy(() => {\n      tensor = reshape(tensor, [1, totalLength, elementPerRow]);\n      for (let i = 0; i < length.length; ++i) {\n        const previousLength = (i === 0) ? 0 : cumulativeLengths[i - 1];\n        const indices = [0, previousLength, 0];\n        const sizes = [1, length[i], elementPerRow];\n        tensors[i] = reshape(slice(tensor, indices, sizes), this.elementShape);\n      }\n      return tensors;\n    });\n    const indices = [];\n    for (let i = 0; i < length.length; i++) {\n      indices[i] = i;\n    }\n    this.writeMany(indices, tensors);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {concat, DataType, keep, reshape, scalar, slice, stack, Tensor, tensor, tidy, unstack} from '@tensorflow/tfjs-core';\n\nimport {assertShapesMatchAllowUndefinedSize, inferElementShape, mergeElementShape} from './tensor_utils';\n\n/**\n * TensorList stores a container of `tf.Tensor` objects, which are accessible\n * via tensors field.\n *\n * In order to get a copy of the underlying list, use the copy method:\n * ```\n *    TensorList b = a.copy();\n *    b.tensors().pushBack(t);  // This does not modify a.tensors().\n * ```\n *\n * Note that this is not a deep copy: the memory locations of the underlying\n * tensors will still point to the same locations of the corresponding tensors\n * in the original.\n */\n\nexport class TensorList {\n  readonly idTensor: Tensor;\n  maxNumElements: number;\n\n  get id() {\n    return this.idTensor.id;\n  }\n  /**\n   *\n   * @param tensors list of tensors\n   * @param elementShape shape of each tensor, this can be a single number (any\n   * shape is allowed) or partial shape (dim = -1).\n   * @param elementDtype data type of each tensor\n   * @param maxNumElements The maximum allowed size of `tensors`. Defaults to -1\n   *   meaning that the size of `tensors` is unbounded.\n   */\n  constructor(\n      readonly tensors: Tensor[], readonly elementShape: number|number[],\n      readonly elementDtype: DataType, maxNumElements = -1) {\n    if (tensors != null) {\n      tensors.forEach(tensor => {\n        if (elementDtype !== tensor.dtype) {\n          throw new Error(`Invalid data types; op elements ${\n              elementDtype}, but list elements ${tensor.dtype}`);\n        }\n        assertShapesMatchAllowUndefinedSize(\n            elementShape, tensor.shape, 'TensorList shape mismatch: ');\n\n        keep(tensor);\n      });\n    }\n    this.idTensor = scalar(0);\n    this.maxNumElements = maxNumElements;\n    keep(this.idTensor);\n  }\n\n  /**\n   * Get a new TensorList containing a copy of the underlying tensor container.\n   */\n  copy(): TensorList {\n    return new TensorList(\n        [...this.tensors], this.elementShape, this.elementDtype);\n  }\n\n  /**\n   * Dispose the tensors and idTensor and clear the tensor list.\n   */\n  clearAndClose(keepIds?: Set<number>) {\n    this.tensors.forEach(tensor => {\n      if (keepIds == null || !keepIds.has(tensor.id)) {\n        tensor.dispose();\n      }\n    });\n    this.tensors.length = 0;\n    this.idTensor.dispose();\n  }\n  /**\n   * The size of the tensors in the tensor list.\n   */\n  size() {\n    return this.tensors.length;\n  }\n\n  /**\n   * Return a tensor that stacks a list of rank-R tf.Tensors into one rank-(R+1)\n   * tf.Tensor.\n   * @param elementShape shape of each tensor\n   * @param elementDtype data type of each tensor\n   * @param numElements the number of elements to stack\n   */\n  stack(elementShape: number[], elementDtype: DataType, numElements = -1):\n      Tensor {\n    if (elementDtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${\n          elementDtype}, but list elements ${this.elementDtype}`);\n    }\n    if (numElements !== -1 && this.tensors.length !== numElements) {\n      throw new Error(`Operation expected a list with ${\n          numElements} elements but got a list with ${\n          this.tensors.length} elements.`);\n    }\n    assertShapesMatchAllowUndefinedSize(\n        elementShape, this.elementShape, 'TensorList shape mismatch: ');\n    const outputElementShape =\n        inferElementShape(this.elementShape, this.tensors, elementShape);\n    return tidy(() => {\n      const reshapedTensors =\n          this.tensors.map(tensor => reshape(tensor, outputElementShape));\n      return stack(reshapedTensors, 0);\n    });\n  }\n\n  /**\n   * Pop a tensor from the end of the list.\n   * @param elementShape shape of the tensor\n   * @param elementDtype data type of the tensor\n   */\n  popBack(elementShape: number[], elementDtype: DataType): Tensor {\n    if (elementDtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${\n          elementDtype}, but list elements ${this.elementDtype}`);\n    }\n\n    if (this.size() === 0) {\n      throw new Error('Trying to pop from an empty list.');\n    }\n    const outputElementShape =\n        inferElementShape(this.elementShape, this.tensors, elementShape);\n    const tensor = this.tensors.pop();\n    tensor.kept = false;\n\n    assertShapesMatchAllowUndefinedSize(\n        tensor.shape, elementShape, 'TensorList shape mismatch: ');\n\n    return reshape(tensor, outputElementShape);\n  }\n\n  /**\n   * Push a tensor to the end of the list.\n   * @param tensor Tensor to be pushed.\n   */\n  pushBack(tensor: Tensor) {\n    if (tensor.dtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${\n          tensor.dtype}, but list elements ${this.elementDtype}`);\n    }\n\n    assertShapesMatchAllowUndefinedSize(\n        tensor.shape, this.elementShape, 'TensorList shape mismatch: ');\n\n    if (this.maxNumElements === this.size()) {\n      throw new Error(`Trying to push element into a full list.`);\n    }\n    keep(tensor);\n    this.tensors.push(tensor);\n  }\n\n  /**\n   * Update the size of the list.\n   * @param size the new size of the list.\n   */\n  resize(size: number) {\n    if (size < 0) {\n      throw new Error(\n          `TensorListResize expects size to be non-negative. Got: ${size}`);\n    }\n\n    if (this.maxNumElements !== -1 && size > this.maxNumElements) {\n      throw new Error(`TensorListResize input size ${\n          size} is greater maxNumElement ${this.maxNumElements}.`);\n    }\n\n    const destTensorList: TensorList = new TensorList(\n        [], this.elementShape, this.elementDtype, this.maxNumElements);\n    destTensorList.tensors.length = size;\n    for (let i = 0; i < Math.min(this.tensors.length, size); ++i) {\n      destTensorList.tensors[i] = this.tensors[i];\n    }\n    return destTensorList;\n  }\n\n  /**\n   * Retrieve the element at the provided index\n   * @param elementShape shape of the tensor\n   * @param elementDtype dtype of the tensor\n   * @param elementIndex index of the tensor\n   */\n  getItem(elementIndex: number, elementShape: number[], elementDtype: DataType):\n      Tensor {\n    if (elementDtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${\n          elementDtype}, but list elements ${this.elementDtype}`);\n    }\n    if (elementIndex < 0 || elementIndex > this.tensors.length) {\n      throw new Error(`Trying to access element ${\n          elementIndex} in a list with ${this.tensors.length} elements.`);\n    }\n\n    if (this.tensors[elementIndex] == null) {\n      throw new Error(`element at index ${elementIndex} is null.`);\n    }\n\n    assertShapesMatchAllowUndefinedSize(\n        this.tensors[elementIndex].shape, elementShape,\n        'TensorList shape mismatch: ');\n    const outputElementShape =\n        inferElementShape(this.elementShape, this.tensors, elementShape);\n    return reshape(this.tensors[elementIndex], outputElementShape);\n  }\n\n  /**\n   * Set the tensor at the index\n   * @param elementIndex index of the tensor\n   * @param tensor the tensor to be inserted into the list\n   */\n  setItem(elementIndex: number, tensor: Tensor) {\n    if (tensor.dtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${\n          tensor.dtype}, but list elements ${this.elementDtype}`);\n    }\n\n    if (elementIndex < 0 ||\n        this.maxNumElements !== -1 && elementIndex >= this.maxNumElements) {\n      throw new Error(`Trying to set element ${\n          elementIndex} in a list with max ${this.maxNumElements} elements.`);\n    }\n\n    assertShapesMatchAllowUndefinedSize(\n        this.elementShape, tensor.shape, 'TensorList shape mismatch: ');\n    keep(tensor);\n\n    // dispose the previous value if it is replacing.\n    if (this.tensors[elementIndex] != null) {\n      this.tensors[elementIndex].kept = false;\n    }\n\n    this.tensors[elementIndex] = tensor;\n  }\n\n  /**\n   * Return selected values in the TensorList as a stacked Tensor. All of\n   * selected values must have been written and their shapes must all match.\n   * @param indices indices of tensors to gather\n   * @param elementDtype output tensor dtype\n   * @param elementShape output tensor element shape\n   */\n  gather(indices: number[], elementDtype: DataType, elementShape: number[]):\n      Tensor {\n    if (elementDtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${\n          elementDtype}, but list elements ${this.elementDtype}`);\n    }\n\n    assertShapesMatchAllowUndefinedSize(\n        this.elementShape, elementShape, 'TensorList shape mismatch: ');\n\n    // When indices is greater than the size of the list, indices beyond the\n    // size of the list are ignored.\n    indices = indices.slice(0, this.size());\n    const outputElementShape =\n        inferElementShape(this.elementShape, this.tensors, elementShape);\n    if (indices.length === 0) {\n      return tensor([], [0].concat(outputElementShape));\n    }\n\n    return tidy(() => {\n      const tensors =\n          indices.map(i => reshape(this.tensors[i], outputElementShape));\n      return stack(tensors, 0);\n    });\n  }\n\n  /**\n   * Return the values in the TensorList as a concatenated Tensor.\n   * @param elementDtype output tensor dtype\n   * @param elementShape output tensor element shape\n   */\n  concat(elementDtype: DataType, elementShape: number[]): Tensor {\n    if (!!elementDtype && elementDtype !== this.elementDtype) {\n      throw new Error(`TensorList dtype is ${\n          this.elementDtype} but concat requested dtype ${elementDtype}`);\n    }\n\n    assertShapesMatchAllowUndefinedSize(\n        this.elementShape, elementShape, 'TensorList shape mismatch: ');\n    const outputElementShape =\n        inferElementShape(this.elementShape, this.tensors, elementShape);\n\n    if (this.size() === 0) {\n      return tensor([], [0].concat(outputElementShape));\n    }\n    return tidy(() => {\n      const tensors = this.tensors.map(t => reshape(t, outputElementShape));\n      return concat(tensors, 0);\n    });\n  }\n}\n\n/**\n * Creates a TensorList which, when stacked, has the value of tensor.\n * @param tensor from tensor\n * @param elementShape output tensor element shape\n */\nexport function fromTensor(\n    tensor: Tensor, elementShape: number[], elementDtype: DataType) {\n  const dtype = tensor.dtype;\n  if (tensor.shape.length < 1) {\n    throw new Error(\n        `Tensor must be at least a vector, but saw shape: ${tensor.shape}`);\n  }\n  if (tensor.dtype !== elementDtype) {\n    throw new Error(`Invalid data types; op elements ${\n        tensor.dtype}, but list elements ${elementDtype}`);\n  }\n  const tensorElementShape = tensor.shape.slice(1);\n  assertShapesMatchAllowUndefinedSize(\n      tensorElementShape, elementShape, 'TensorList shape mismatch: ');\n  const tensorList: Tensor[] = unstack(tensor);\n  return new TensorList(tensorList, elementShape, dtype);\n}\n\n/**\n * Return a TensorList of the given size with empty elements.\n * @param elementShape the shape of the future elements of the list\n * @param elementDtype the desired type of elements in the list\n * @param numElements the number of elements to reserve\n * @param maxNumElements the maximum number of elements in th list\n */\nexport function reserve(\n    elementShape: number[], elementDtype: DataType, numElements: number,\n    maxNumElements: number) {\n  return new TensorList([], elementShape, elementDtype, maxNumElements);\n}\n\n/**\n * Put tensors at specific indices of a stacked tensor into a TensorList.\n * @param indices list of indices on how to scatter the tensor.\n * @param tensor input tensor.\n * @param elementShape the shape of the future elements of the list\n * @param numElements the number of elements to scatter\n */\nexport function scatter(\n    tensor: Tensor, indices: number[], elementShape: number[],\n    numElements?: number): TensorList {\n  if (indices.length !== tensor.shape[0]) {\n    throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${\n        indices.length} vs. ${tensor.shape[0]}`);\n  }\n\n  const maxIndex = Math.max(...indices);\n\n  if (numElements != null && numElements !== -1 && maxIndex >= numElements) {\n    throw new Error(\n        `Max index must be < array size (${maxIndex}  vs. ${numElements})`);\n  }\n\n  const list = new TensorList([], elementShape, tensor.dtype, numElements);\n  const tensors = unstack(tensor, 0);\n  indices.forEach((value, index) => {\n    list.setItem(value, tensors[index]);\n  });\n  return list;\n}\n\n/**\n * Split the values of a Tensor into a TensorList.\n * @param length the lengths to use when splitting value along\n *    its first dimension.\n * @param tensor the tensor to split.\n * @param elementShape the shape of the future elements of the list\n */\nexport function split(\n    tensor: Tensor, length: number[], elementShape: number[]) {\n  let totalLength = 0;\n  const cumulativeLengths = length.map(len => {\n    totalLength += len;\n    return totalLength;\n  });\n\n  if (totalLength !== tensor.shape[0]) {\n    throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${totalLength}, and tensor's shape is: ${tensor.shape}`);\n  }\n\n  const shapeWithoutFirstDim = tensor.shape.slice(1);\n  const outputElementShape =\n      mergeElementShape(shapeWithoutFirstDim, elementShape);\n  const elementPerRow = totalLength === 0 ? 0 : tensor.size / totalLength;\n  const tensors: Tensor[] = tidy(() => {\n    const tensors = [];\n    tensor = reshape(tensor, [1, totalLength, elementPerRow]);\n    for (let i = 0; i < length.length; ++i) {\n      const previousLength = (i === 0) ? 0 : cumulativeLengths[i - 1];\n      const indices = [0, previousLength, 0];\n      const sizes = [1, length[i], elementPerRow];\n      tensors[i] = reshape(\n          slice(tensor, indices, sizes), outputElementShape as number[]);\n    }\n    tensor.dispose();\n    return tensors;\n  });\n\n  const list = new TensorList([], elementShape, tensor.dtype, length.length);\n\n  for (let i = 0; i < tensors.length; i++) {\n    list.setItem(i, tensors[i]);\n  }\n  return list;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, scalar, Tensor} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {TensorArray} from '../../executor/tensor_array';\nimport {fromTensor, reserve, scatter, split} from '../../executor/tensor_list';\nimport {InternalOpAsyncExecutor, Node} from '../types';\n\nimport {cloneTensor, getParamValue, getTensor} from './utils';\n\nexport const executeOp: InternalOpAsyncExecutor = async(\n    node: Node, tensorMap: NamedTensorsMap,\n    context: ExecutionContext): Promise<Tensor[]> => {\n  switch (node.op) {\n    case 'If':\n    case 'StatelessIf': {\n      const thenFunc =\n          getParamValue('thenBranch', node, tensorMap, context) as string;\n      const elseFunc =\n          getParamValue('elseBranch', node, tensorMap, context) as string;\n      const cond = getParamValue('cond', node, tensorMap, context) as Tensor;\n      const args = getParamValue('args', node, tensorMap, context) as Tensor[];\n      const condValue = await cond.data();\n      if (condValue[0]) {\n        return context.functionMap[thenFunc].executeFunctionAsync(\n            args, context.tensorArrayMap, context.tensorListMap);\n      } else {\n        return context.functionMap[elseFunc].executeFunctionAsync(\n            args, context.tensorArrayMap, context.tensorListMap);\n      }\n    }\n    case 'While':\n    case 'StatelessWhile': {\n      const bodyFunc =\n          getParamValue('body', node, tensorMap, context) as string;\n      const condFunc =\n          getParamValue('cond', node, tensorMap, context) as string;\n      const args = getParamValue('args', node, tensorMap, context) as Tensor[];\n\n      // Calculate the condition of the loop\n      const condResult =\n          (await context.functionMap[condFunc].executeFunctionAsync(\n              args, context.tensorArrayMap, context.tensorListMap));\n      const argIds = args.map(tensor => tensor.id);\n      let condValue = await condResult[0].data();\n      // Dispose the intermediate tensors for condition function\n      condResult.forEach(tensor => {\n        if (!tensor.kept && argIds.indexOf(tensor.id) === -1) {\n          tensor.dispose();\n        }\n      });\n\n      let result: Tensor[] = args;\n\n      while (condValue[0]) {\n        // Record the previous result for intermediate tensor tracking\n        const origResult = result;\n        // Execution the body of the loop\n        result = await context.functionMap[bodyFunc].executeFunctionAsync(\n            result, context.tensorArrayMap, context.tensorListMap);\n        const resultIds = result.map(tensor => tensor.id);\n\n        // Dispose the intermediate tensor for body function that is not global\n        // kept, not input/output of the body function\n        origResult.forEach(tensor => {\n          if (!tensor.kept && argIds.indexOf(tensor.id) === -1 &&\n              resultIds.indexOf(tensor.id) === -1) {\n            tensor.dispose();\n          }\n        });\n\n        // Recalcuate the condition of the loop using the latest results.\n        const condResult =\n            (await context.functionMap[condFunc].executeFunctionAsync(\n                result, context.tensorArrayMap, context.tensorListMap));\n        condValue = await condResult[0].data();\n        // Dispose the intermediate tensors for condition function\n        condResult.forEach(tensor => {\n          if (!tensor.kept && argIds.indexOf(tensor.id) === -1 &&\n              resultIds.indexOf(tensor.id) === -1) {\n            tensor.dispose();\n          }\n        });\n      }\n      return result;\n    }\n    case 'LoopCond': {\n      const pred = getParamValue('pred', node, tensorMap, context) as Tensor;\n      return [cloneTensor(pred)];\n    }\n    case 'Switch': {\n      const pred = getParamValue('pred', node, tensorMap, context) as Tensor;\n      let data = getParamValue('data', node, tensorMap, context) as Tensor;\n      if (!data.kept) {\n        data = cloneTensor(data);\n      }\n      // Outputs nodes :0 => false, :1 => true\n      return (await pred.data())[0] ? [undefined, data] : [data, undefined];\n    }\n    case 'Merge': {\n      const inputName = node.inputNames.find(\n          name => getTensor(name, tensorMap, context) !== undefined);\n      if (inputName) {\n        const data = getTensor(inputName, tensorMap, context);\n        return [cloneTensor(data)];\n      }\n      return undefined;\n    }\n    case 'Enter': {\n      const frameId =\n          getParamValue('frameName', node, tensorMap, context) as string;\n      const data = getParamValue('tensor', node, tensorMap, context) as Tensor;\n      context.enterFrame(frameId);\n      return [cloneTensor(data)];\n    }\n    case 'Exit': {\n      const data = getParamValue('tensor', node, tensorMap, context) as Tensor;\n      context.exitFrame();\n      return [cloneTensor(data)];\n    }\n    case 'NextIteration': {\n      const data = getParamValue('tensor', node, tensorMap, context) as Tensor;\n      context.nextIteration();\n      return [cloneTensor(data)];\n    }\n    case 'TensorArrayV3': {\n      const size = getParamValue('size', node, tensorMap, context) as number;\n      const dtype =\n          getParamValue('dtype', node, tensorMap, context) as DataType;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const dynamicSize =\n          getParamValue('dynamicSize', node, tensorMap, context) as boolean;\n      const clearAfterRead =\n          getParamValue('clearAfterRead', node, tensorMap, context) as boolean;\n      const identicalElementShapes =\n          getParamValue('identicalElementShapes', node, tensorMap, context) as\n          boolean;\n      const name = getParamValue('name', node, tensorMap, context) as string;\n      const tensorArray = new TensorArray(\n          name, dtype, size, elementShape, identicalElementShapes, dynamicSize,\n          clearAfterRead);\n      context.addTensorArray(tensorArray);\n      return [tensorArray.idTensor, scalar(1.0)];\n    }\n    case 'TensorArrayWriteV3': {\n      const id =\n          getParamValue('tensorArrayId', node, tensorMap, context) as Tensor;\n      const index = getParamValue('index', node, tensorMap, context) as number;\n      const writeTensor =\n          getParamValue('tensor', node, tensorMap, context) as Tensor;\n      const writeTensorArray = context.getTensorArray(id.id);\n      writeTensorArray.write(index, writeTensor);\n      return [writeTensorArray.idTensor];\n    }\n    case 'TensorArrayReadV3': {\n      const readId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as Tensor;\n      const readIndex =\n          getParamValue('index', node, tensorMap, context) as number;\n      const readTensorArray = context.getTensorArray(readId.id);\n      return [readTensorArray.read(readIndex)];\n    }\n    case 'TensorArrayGatherV3': {\n      const gatherId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as Tensor;\n      const gatherIndices =\n          getParamValue('indices', node, tensorMap, context) as number[];\n      const gatherDtype =\n          getParamValue('dtype', node, tensorMap, context) as DataType;\n      const gatherTensorArray = context.getTensorArray(gatherId.id);\n      return [gatherTensorArray.gather(gatherIndices, gatherDtype)];\n    }\n    case 'TensorArrayScatterV3': {\n      const scatterId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as Tensor;\n      const scatterIndices =\n          getParamValue('indices', node, tensorMap, context) as number[];\n      const scatterTensor =\n          getParamValue('tensor', node, tensorMap, context) as Tensor;\n      const scatterTensorArray = context.getTensorArray(scatterId.id);\n      scatterTensorArray.scatter(scatterIndices, scatterTensor);\n      return [scatterTensorArray.idTensor];\n    }\n    case 'TensorArrayConcatV3': {\n      const concatId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as Tensor;\n      const concatTensorArray = context.getTensorArray(concatId.id);\n      const concatDtype =\n          getParamValue('dtype', node, tensorMap, context) as DataType;\n      return [concatTensorArray.concat(concatDtype)];\n    }\n    case 'TensorArraySplitV3': {\n      const splitId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as Tensor;\n      const splitTensor =\n          getParamValue('tensor', node, tensorMap, context) as Tensor;\n      const lengths =\n          getParamValue('lengths', node, tensorMap, context) as number[];\n      const splitTensorArray = context.getTensorArray(splitId.id);\n      splitTensorArray.split(lengths, splitTensor);\n      return [splitTensorArray.idTensor];\n    }\n    case 'TensorArraySizeV3': {\n      const sizeId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as Tensor;\n      const sizeTensorArray = context.getTensorArray(sizeId.id);\n      return [scalar(sizeTensorArray.size(), 'int32')];\n    }\n    case 'TensorArrayCloseV3': {\n      const closeId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as Tensor;\n      const closeTensorArray = context.getTensorArray(closeId.id);\n      closeTensorArray.clearAndClose();\n      return [closeTensorArray.idTensor];\n    }\n    case 'TensorListSetItem': {\n      const idTensor =\n          getParamValue('tensorListId', node, tensorMap, context) as Tensor;\n      const index = getParamValue('index', node, tensorMap, context) as number;\n      const writeTensor =\n          getParamValue('tensor', node, tensorMap, context) as Tensor;\n      const tensorList = context.getTensorList(idTensor.id);\n      tensorList.setItem(index, writeTensor);\n      return [tensorList.idTensor];\n    }\n    case 'TensorListGetItem': {\n      const idTensor =\n          getParamValue('tensorListId', node, tensorMap, context) as Tensor;\n      const readIndex =\n          getParamValue('index', node, tensorMap, context) as number;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n\n      const elementDType =\n          getParamValue('elementDType', node, tensorMap, context) as DataType;\n      const tensorList = context.getTensorList(idTensor.id);\n      return [tensorList.getItem(readIndex, elementShape, elementDType)];\n    }\n    case 'TensorListScatterV2':\n    case 'TensorListScatter': {\n      const scatterIndices =\n          getParamValue('indices', node, tensorMap, context) as number[];\n      const scatterTensor =\n          getParamValue('tensor', node, tensorMap, context) as Tensor;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const numElements =\n          getParamValue('numElements', node, tensorMap, context) as number;\n      const tensorList =\n          scatter(scatterTensor, scatterIndices, elementShape, numElements);\n      context.addTensorList(tensorList);\n      return [tensorList.idTensor];\n    }\n    case 'TensorListReserve':\n    case 'EmptyTensorList': {\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const elementDtype =\n          getParamValue('elementDType', node, tensorMap, context) as DataType;\n      let numElementsParam;\n\n      if (node.op === 'TensorListReserve') {\n        numElementsParam = 'numElements';\n      } else {\n        numElementsParam = 'maxNumElements';\n      }\n\n      const numElements =\n          getParamValue(numElementsParam, node, tensorMap, context) as number;\n      const maxNumElements = node.op === 'TensorListReserve' ? -1 : numElements;\n      const tensorList =\n          reserve(elementShape, elementDtype, numElements, maxNumElements);\n      context.addTensorList(tensorList);\n      return [tensorList.idTensor];\n    }\n    case 'TensorListGather': {\n      const gatherId =\n          getParamValue('tensorListId', node, tensorMap, context) as Tensor;\n      const gatherIndices =\n          getParamValue('indices', node, tensorMap, context) as number[];\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const elementDtype =\n          getParamValue('elementDType', node, tensorMap, context) as DataType;\n      const tensorList = context.getTensorList(gatherId.id);\n      return [tensorList.gather(gatherIndices, elementDtype, elementShape)];\n    }\n    case 'TensorListStack': {\n      const idTensor =\n          getParamValue('tensorListId', node, tensorMap, context) as Tensor;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const elementDtype =\n          getParamValue('elementDType', node, tensorMap, context) as DataType;\n      const numElements =\n          getParamValue('numElements', node, tensorMap, context) as number;\n      const tensorList = context.getTensorList(idTensor.id);\n      return [tensorList.stack(elementShape, elementDtype, numElements)];\n    }\n    case 'TensorListFromTensor': {\n      const tensor =\n          getParamValue('tensor', node, tensorMap, context) as Tensor;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const elementDtype =\n          getParamValue('elementDType', node, tensorMap, context) as DataType;\n      const tensorList = fromTensor(tensor, elementShape, elementDtype);\n      context.addTensorList(tensorList);\n      return [tensorList.idTensor];\n    }\n    case 'TensorListConcat':\n    case 'TensorListConcatV2': {\n      const concatId =\n          getParamValue('tensorListId', node, tensorMap, context) as Tensor;\n      const tensorList = context.getTensorList(concatId.id);\n      const concatDtype =\n          getParamValue('dtype', node, tensorMap, context) as DataType;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      return [tensorList.concat(concatDtype, elementShape)];\n    }\n    case 'TensorListPushBack': {\n      const idTensor =\n          getParamValue('tensorListId', node, tensorMap, context) as Tensor;\n      const writeTensor =\n          getParamValue('tensor', node, tensorMap, context) as Tensor;\n      const tensorList = context.getTensorList(idTensor.id);\n      tensorList.pushBack(writeTensor);\n      return [tensorList.idTensor];\n    }\n    case 'TensorListPopBack': {\n      const idTensor =\n          getParamValue('tensorListId', node, tensorMap, context) as Tensor;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const elementDType =\n          getParamValue('elementDType', node, tensorMap, context) as DataType;\n      const tensorList = context.getTensorList(idTensor.id);\n      return [tensorList.popBack(elementShape, elementDType)];\n    }\n    case 'TensorListSplit': {\n      const splitTensor =\n          getParamValue('tensor', node, tensorMap, context) as Tensor;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const lengths =\n          getParamValue('lengths', node, tensorMap, context) as number[];\n\n      const tensorList = split(splitTensor, lengths, elementShape);\n      context.addTensorList(tensorList);\n      return [tensorList.idTensor];\n    }\n    case 'TensorListLength': {\n      const idTensor =\n          getParamValue('tensorListId', node, tensorMap, context) as Tensor;\n      const tensorList = context.getTensorList(idTensor.id);\n      return [scalar(tensorList.size(), 'int32')];\n    }\n    case 'TensorListResize': {\n      const idTensor =\n          getParamValue('tensorListId', node, tensorMap, context) as Tensor;\n      const size = getParamValue('size', node, tensorMap, context) as number;\n\n      const srcTensorList = context.getTensorList(idTensor.id);\n      const destTensorList = srcTensorList.resize(size);\n      context.addTensorList(destTensorList);\n      return [destTensorList.idTensor];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'control';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Rank, Tensor, Tensor3D, Tensor4D, Tensor5D} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getPadding, getParamValue} from './utils';\n\nfunction fusedConvAndDepthWiseParams(\n    node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext) {\n  const [extraOp, activationFunc] =\n      (getParamValue('fusedOps', node, tensorMap, context) as string[]);\n\n  const isBiasAdd = extraOp === 'biasadd';\n  const noBiasAdd = !isBiasAdd;\n  const isPrelu = activationFunc === 'prelu';\n  const isBatchNorm = extraOp === 'fusedbatchnorm';\n\n  const numArgs =\n      (getParamValue('numArgs', node, tensorMap, context) as number);\n  if (isBiasAdd) {\n    if (isPrelu && numArgs !== 2) {\n      throw new Error(\n          'FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu ' +\n          'must have two extra arguments: bias and alpha.');\n    }\n    if (!isPrelu && isBiasAdd && numArgs !== 1) {\n      throw new Error(\n          'FusedConv2d and DepthwiseConv2d with BiasAdd must have ' +\n          'one extra argument: bias.');\n    }\n  }\n  if (isBatchNorm) {\n    throw new Error(\n        'FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported');\n  }\n  const stride = getParamValue('strides', node, tensorMap, context) as number[];\n  const pad = getPadding(node, tensorMap, context);\n  const dataFormat =\n      (getParamValue('dataFormat', node, tensorMap, context) as string)\n          .toUpperCase();\n  const dilations =\n      getParamValue('dilations', node, tensorMap, context) as number[];\n  let [biasArg, preluArg] =\n      getParamValue('args', node, tensorMap, context) as Tensor[];\n  if (noBiasAdd) {\n    preluArg = biasArg;\n    biasArg = undefined;\n  }\n  const leakyreluAlpha =\n      getParamValue('leakyreluAlpha', node, tensorMap, context) as number;\n\n  return {\n    stride,\n    pad,\n    dataFormat,\n    dilations,\n    biasArg,\n    preluArg,\n    activationFunc,\n    leakyreluAlpha\n  };\n}\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext, ops = tfOps): Tensor[] => {\n      switch (node.op) {\n        case 'Conv1D': {\n          const stride =\n              getParamValue('stride', node, tensorMap, context) as number;\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const dataFormat =\n              (getParamValue('dataFormat', node, tensorMap, context) as string)\n                  .toUpperCase();\n          const dilation =\n              getParamValue('dilation', node, tensorMap, context) as number;\n          return [ops.conv1d(\n              getParamValue('x', node, tensorMap, context) as Tensor3D,\n              getParamValue('filter', node, tensorMap, context) as Tensor3D,\n              stride, pad as 'valid' | 'same', dataFormat as 'NWC' | 'NCW',\n              dilation)];\n        }\n        case 'Conv2D': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getPadding(node, tensorMap, context);\n          const dataFormat =\n              (getParamValue('dataFormat', node, tensorMap, context) as string)\n                  .toUpperCase();\n          const dilations =\n              getParamValue('dilations', node, tensorMap, context) as number[];\n          return [ops.conv2d(\n              getParamValue('x', node, tensorMap, context) as Tensor3D |\n                  Tensor4D,\n              getParamValue('filter', node, tensorMap, context) as Tensor4D,\n              [stride[1], stride[2]], pad as 'valid' | 'same',\n              dataFormat as 'NHWC' | 'NCHW', [dilations[1], dilations[2]])];\n        }\n        case '_FusedConv2D': {\n          const {\n            stride,\n            pad,\n            dataFormat,\n            dilations,\n            biasArg,\n            preluArg,\n            activationFunc,\n            leakyreluAlpha\n          } = fusedConvAndDepthWiseParams(node, tensorMap, context);\n\n          return [ops.fused.conv2d({\n            x: getParamValue('x', node, tensorMap, context) as Tensor3D |\n                Tensor4D,\n            filter: getParamValue('filter', node, tensorMap, context) as\n                Tensor4D,\n            strides: [stride[1], stride[2]],\n            pad: pad as 'valid' | 'same',\n            dataFormat: dataFormat as 'NHWC' | 'NCHW',\n            dilations: [dilations[1], dilations[2]],\n            bias: biasArg,\n            activation: activationFunc as tfOps.fused.Activation,\n            preluActivationWeights: preluArg,\n            leakyreluAlpha\n          })];\n        }\n\n        case 'FusedDepthwiseConv2dNative': {\n          const {\n            stride,\n            pad,\n            dataFormat,\n            dilations,\n            biasArg,\n            preluArg,\n            activationFunc,\n            leakyreluAlpha,\n          } = fusedConvAndDepthWiseParams(node, tensorMap, context);\n\n          return [ops.fused.depthwiseConv2d({\n            x: getParamValue('x', node, tensorMap, context) as Tensor3D |\n                Tensor4D,\n            filter: getParamValue('filter', node, tensorMap, context) as\n                Tensor4D,\n            strides: [stride[1], stride[2]],\n            pad: pad as 'valid' | 'same',\n            dataFormat: dataFormat as 'NHWC' | 'NCHW',\n            dilations: [dilations[1], dilations[2]],\n            bias: biasArg,\n            activation: activationFunc as tfOps.fused.Activation,\n            preluActivationWeights: preluArg,\n            leakyreluAlpha\n          })];\n        }\n        case 'Conv2DBackpropInput':\n        case 'Conv2dTranspose': {\n          const shape = getParamValue(\n                            'outputShape', node, tensorMap,\n                            context) as [number, number, number] |\n              [number, number, number, number];\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getPadding(node, tensorMap, context);\n          return [ops.conv2dTranspose(\n              getParamValue('x', node, tensorMap, context) as Tensor3D |\n                  Tensor4D,\n              getParamValue('filter', node, tensorMap, context) as Tensor4D,\n              shape, [stride[1], stride[2]], pad as 'valid' | 'same')];\n        }\n        case 'DepthwiseConv2dNative':\n        case 'DepthwiseConv2d': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getPadding(node, tensorMap, context);\n          const dilations =\n              getParamValue('dilations', node, tensorMap, context) as number[];\n          const dataFormat =\n              (getParamValue('dataFormat', node, tensorMap, context) as string)\n                  .toUpperCase();\n\n          return [ops.depthwiseConv2d(\n              getParamValue('input', node, tensorMap, context) as Tensor3D |\n                  Tensor4D,\n              getParamValue('filter', node, tensorMap, context) as Tensor4D,\n              [stride[1], stride[2]], pad as 'valid' | 'same',\n              dataFormat as 'NHWC' | 'NCHW', [dilations[1], dilations[2]])];\n        }\n        case 'Conv3D': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const dataFormat =\n              (getParamValue('dataFormat', node, tensorMap, context) as string)\n                  .toUpperCase();\n          const dilations =\n              getParamValue('dilations', node, tensorMap, context) as number[];\n          return [ops.conv3d(\n              getParamValue('x', node, tensorMap, context) as Tensor4D |\n                  Tensor<Rank.R5>,\n              getParamValue('filter', node, tensorMap, context) as\n                  Tensor<Rank.R5>,\n              [stride[1], stride[2], stride[3]], pad as 'valid' | 'same',\n              dataFormat as 'NDHWC' | 'NCDHW',\n              [dilations[1], dilations[2], dilations[3]])];\n        }\n        case 'AvgPool': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const kernelSize =\n              getParamValue('kernelSize', node, tensorMap, context) as number[];\n\n          return [ops.avgPool(\n              getParamValue('x', node, tensorMap, context) as Tensor3D |\n                  Tensor4D,\n              [kernelSize[1], kernelSize[2]], [stride[1], stride[2]],\n              pad as 'valid' | 'same')];\n        }\n        case 'MaxPool': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const kernelSize =\n              getParamValue('kernelSize', node, tensorMap, context) as number[];\n\n          return [ops.maxPool(\n              getParamValue('x', node, tensorMap, context) as Tensor3D |\n                  Tensor4D,\n              [kernelSize[1], kernelSize[2]], [stride[1], stride[2]],\n              pad as 'valid' | 'same')];\n        }\n        case 'MaxPoolWithArgmax': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const kernelSize =\n              getParamValue('kernelSize', node, tensorMap, context) as number[];\n          const includeBatchInIndex =\n              getParamValue('includeBatchInIndex', node, tensorMap, context) as\n              boolean;\n          const {result, indexes} = ops.maxPoolWithArgmax(\n              getParamValue('x', node, tensorMap, context) as Tensor4D,\n              [kernelSize[1], kernelSize[2]], [stride[1], stride[2]],\n              pad as 'valid' | 'same', includeBatchInIndex);\n          return [result, indexes];\n        }\n        case 'AvgPool3D': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const kernelSize =\n              getParamValue('kernelSize', node, tensorMap, context) as number[];\n\n          return [ops.avgPool3d(\n              getParamValue('x', node, tensorMap, context) as Tensor5D,\n              [kernelSize[1], kernelSize[2], kernelSize[3]],\n              [stride[1], stride[2], stride[3]], pad as 'valid' | 'same')];\n        }\n\n        case 'MaxPool3D': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const kernelSize =\n              getParamValue('kernelSize', node, tensorMap, context) as number[];\n\n          return [ops.maxPool3d(\n              getParamValue('x', node, tensorMap, context) as Tensor5D,\n              [kernelSize[1], kernelSize[2], kernelSize[3]],\n              [stride[1], stride[2], stride[3]], pad as 'valid' | 'same')];\n        }\n\n        case 'Dilation2D': {\n          const strides =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const dilations =\n              getParamValue('dilations', node, tensorMap, context) as number[];\n\n          // strides: [1, stride_height, stride_width, 1].\n          const strideHeight = strides[1];\n          const strideWidth = strides[2];\n\n          // dilations: [1, dilation_height, dilation_width, 1].\n          const dilationHeight = dilations[1];\n          const dilationWidth = dilations[2];\n\n          return [ops.dilation2d(\n              getParamValue('x', node, tensorMap, context) as Tensor3D |\n                  Tensor4D,\n              getParamValue('filter', node, tensorMap, context) as Tensor3D,\n              [strideHeight, strideWidth], pad as 'valid' | 'same',\n              [dilationHeight, dilationWidth], 'NHWC' /* dataFormat */)];\n        }\n\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'convolution';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, Tensor, Tensor1D} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext,\n     ops = tfOps): Tensor[] => {\n      switch (node.op) {\n        case 'Fill': {\n          const shape =\n              getParamValue('shape', node, tensorMap, context) as number[];\n          const dtype =\n              getParamValue('dtype', node, tensorMap, context) as DataType;\n          const value =\n              getParamValue('value', node, tensorMap, context) as number;\n          return [ops.fill(shape, value, dtype)];\n        }\n        case 'LinSpace': {\n          const start =\n              getParamValue('start', node, tensorMap, context) as number;\n          const stop =\n              getParamValue('stop', node, tensorMap, context) as number;\n          const num = getParamValue('num', node, tensorMap, context) as number;\n          return [ops.linspace(start, stop, num)];\n        }\n        case 'Multinomial': {\n          const logits =\n              getParamValue('logits', node, tensorMap, context) as Tensor1D;\n          const numSamples =\n              getParamValue('numSamples', node, tensorMap, context) as number;\n          const seed =\n              getParamValue('seed', node, tensorMap, context) as number;\n          return [ops.multinomial(logits, numSamples, seed)];\n        }\n        case 'OneHot': {\n          const indices =\n              getParamValue('indices', node, tensorMap, context) as Tensor1D;\n          const depth =\n              getParamValue('depth', node, tensorMap, context) as number;\n          const onValue =\n              getParamValue('onValue', node, tensorMap, context) as number;\n          const offValue =\n              getParamValue('offValue', node, tensorMap, context) as number;\n          const dtype =\n              getParamValue('dtype', node, tensorMap, context) as DataType;\n          return [ops.oneHot(indices, depth, onValue, offValue, dtype)];\n        }\n        case 'Ones': {\n          return [ops.ones(\n              getParamValue('shape', node, tensorMap, context) as number[],\n              getParamValue('dtype', node, tensorMap, context) as DataType)];\n        }\n        case 'OnesLike': {\n          return [ops.onesLike(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'RandomStandardNormal': {\n          return [ops.randomStandardNormal(\n              getParamValue('shape', node, tensorMap, context) as number[],\n              getParamValue('dtype', node, tensorMap, context) as 'float32' |\n                  'int32',\n              getParamValue('seed', node, tensorMap, context) as number)];\n        }\n        case 'RandomUniform': {\n          return [ops.randomUniform(\n              // tslint:disable-next-line:no-any\n              getParamValue('shape', node, tensorMap, context) as any,\n              getParamValue('minval', node, tensorMap, context) as number,\n              getParamValue('maxval', node, tensorMap, context) as number,\n              getParamValue('dtype', node, tensorMap, context) as DataType)];\n        }\n        case 'Range': {\n          const start =\n              getParamValue('start', node, tensorMap, context) as number;\n          const stop =\n              getParamValue('stop', node, tensorMap, context) as number;\n          const step =\n              getParamValue('step', node, tensorMap, context) as number;\n          return [ops.range(\n              start, stop, step,\n              getParamValue('dtype', node, tensorMap, context) as 'float32' |\n                  'int32')];\n        }\n        case 'TruncatedNormal': {\n          const shape =\n              getParamValue('shape', node, tensorMap, context) as number[];\n          const mean =\n              getParamValue('mean', node, tensorMap, context) as number;\n          const stdDev =\n              getParamValue('stdDev', node, tensorMap, context) as number;\n          const seed =\n              getParamValue('seed', node, tensorMap, context) as number;\n          return [ops.truncatedNormal(\n              shape, mean, stdDev,\n              getParamValue('dtype', node, tensorMap, context) as 'float32' |\n                  'int32',\n              seed)];\n        }\n        case 'Zeros': {\n          return [ops.zeros(\n              getParamValue('shape', node, tensorMap, context) as number[],\n              getParamValue('dtype', node, tensorMap, context) as DataType)];\n        }\n        case 'ZerosLike': {\n          return [ops.zerosLike(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'creation';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor, Tensor1D, Tensor2D} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport { ResourceManager } from '../../executor/resource_manager';\nimport {InternalOpAsyncExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nfunction nmsParams(\n    node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext) {\n  const boxes = getParamValue('boxes', node, tensorMap, context) as Tensor;\n  const scores = getParamValue('scores', node, tensorMap, context) as Tensor;\n  const maxOutputSize =\n      getParamValue('maxOutputSize', node, tensorMap, context) as number;\n  const iouThreshold =\n      getParamValue('iouThreshold', node, tensorMap, context) as number;\n  const scoreThreshold =\n      getParamValue('scoreThreshold', node, tensorMap, context) as number;\n  const softNmsSigma =\n      getParamValue('softNmsSigma', node, tensorMap, context) as number;\n\n  return {\n    boxes,\n    scores,\n    maxOutputSize,\n    iouThreshold,\n    scoreThreshold,\n    softNmsSigma\n  };\n}\n\nexport const executeOp: InternalOpAsyncExecutor = async(\n    node: Node, tensorMap: NamedTensorsMap,\n    context: ExecutionContext, resourceManager: ResourceManager,\n    ops = tfOps): Promise<Tensor[]> => {\n  switch (node.op) {\n    case 'NonMaxSuppressionV5': {\n      const {\n        boxes,\n        scores,\n        maxOutputSize,\n        iouThreshold,\n        scoreThreshold,\n        softNmsSigma\n      } = nmsParams(node, tensorMap, context);\n\n      const result = await ops.image.nonMaxSuppressionWithScoreAsync(\n          boxes as Tensor2D, scores as Tensor1D, maxOutputSize, iouThreshold,\n          scoreThreshold, softNmsSigma);\n\n      return [result.selectedIndices, result.selectedScores];\n    }\n    case 'NonMaxSuppressionV4': {\n      const {boxes, scores, maxOutputSize, iouThreshold, scoreThreshold} =\n          nmsParams(node, tensorMap, context);\n\n      const padToMaxOutputSize =\n          getParamValue('padToMaxOutputSize', node, tensorMap, context) as\n          boolean;\n\n      const result = await ops.image.nonMaxSuppressionPaddedAsync(\n          boxes as Tensor2D, scores as Tensor1D, maxOutputSize, iouThreshold,\n          scoreThreshold, padToMaxOutputSize);\n\n      return [result.selectedIndices, result.validOutputs];\n    }\n    case 'NonMaxSuppressionV3':\n    case 'NonMaxSuppressionV2': {\n      const {boxes, scores, maxOutputSize, iouThreshold, scoreThreshold} =\n          nmsParams(node, tensorMap, context);\n\n      return [await ops.image.nonMaxSuppressionAsync(\n          boxes as Tensor2D, scores as Tensor1D, maxOutputSize, iouThreshold,\n          scoreThreshold)];\n    }\n    case 'Where': {\n      const condition = ops.cast(\n          (getParamValue('condition', node, tensorMap, context) as Tensor),\n          'bool');\n      const result = [await ops.whereAsync(condition)];\n      condition.dispose();\n      return result;\n    }\n    case 'ListDiff': {\n      return ops.setdiff1dAsync(\n          getParamValue('x', node, tensorMap, context) as Tensor,\n          getParamValue('y', node, tensorMap, context) as Tensor);\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'dynamic';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext,\n     ops = tfOps):\n        Tensor[] => {\n          switch (node.op) {\n            case 'LowerBound': {\n              const sortedSequence =\n                  getParamValue('sortedSequence', node, tensorMap, context) as\n                  Tensor;\n              const values =\n                  getParamValue('values', node, tensorMap, context) as Tensor;\n              return [ops.lowerBound(sortedSequence, values)];\n            }\n            case 'TopKV2': {\n              const x = getParamValue('x', node, tensorMap, context) as Tensor;\n              const k = getParamValue('k', node, tensorMap, context) as number;\n              const sorted =\n                  getParamValue('sorted', node, tensorMap, context) as boolean;\n              const result = ops.topk(x, k, sorted);\n              return [result.values, result.indices];\n            }\n            case 'UpperBound': {\n              const sortedSequence =\n                  getParamValue('sortedSequence', node, tensorMap, context) as\n                  Tensor;\n              const values =\n                  getParamValue('values', node, tensorMap, context) as Tensor;\n              return [ops.upperBound(sortedSequence, values)];\n            }\n            case 'Unique': {\n              const x = getParamValue('x', node, tensorMap, context) as Tensor;\n              const result = ops.unique(x);\n              return [result.values, result.indices];\n            }\n            case 'UniqueV2': {\n              const x = getParamValue('x', node, tensorMap, context) as Tensor;\n              const axis =\n                  getParamValue('axis', node, tensorMap, context) as number;\n              const result = ops.unique(x, axis);\n              return [result.values, result.indices];\n            }\n            default:\n              throw TypeError(`Node type ${node.op} is not implemented`);\n          }\n        };\n\nexport const CATEGORY = 'evaluation';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {cloneTensor, getParamValue, getTensor} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext, ops = tfOps): Tensor[] => {\n      switch (node.op) {\n        case 'Const': {\n          return tensorMap[node.name];\n        }\n        case 'PlaceholderWithDefault':\n          const def =\n              getParamValue('default', node, tensorMap, context) as Tensor;\n          return [getTensor(node.name, tensorMap, context) || def];\n        case 'Placeholder':\n          return [getTensor(node.name, tensorMap, context)];\n        case 'Identity':\n        case 'StopGradient':\n        case 'FakeQuantWithMinMaxVars': {  // This op is currently ignored.\n          const data = getParamValue('x', node, tensorMap, context) as Tensor;\n          return [cloneTensor(data)];\n        }\n        case 'IdentityN':\n          return (getParamValue('x', node, tensorMap, context) as Tensor[])\n              .map((t: Tensor) => cloneTensor(t));\n        case 'Snapshot':\n          const snapshot =\n              (getParamValue('x', node, tensorMap, context) as Tensor);\n          return [cloneTensor(snapshot)];\n        case 'Shape':\n          return [ops.tensor1d(\n              (getParamValue('x', node, tensorMap, context) as Tensor).shape,\n              'int32')];\n        case 'ShapeN':\n          return (getParamValue('x', node, tensorMap, context) as Tensor[])\n              .map((t: Tensor) => ops.tensor1d(t.shape));\n        case 'Size':\n          return [ops.scalar(\n              (getParamValue('x', node, tensorMap, context) as Tensor).size,\n              'int32')];\n        case 'Rank':\n          return [ops.scalar(\n              (getParamValue('x', node, tensorMap, context) as Tensor).rank,\n              'int32')];\n        case 'NoOp':\n          return [ops.scalar(1)];\n        case 'Print':\n          const input = getParamValue('x', node, tensorMap, context) as Tensor;\n          const data =\n              getParamValue('data', node, tensorMap, context) as Tensor[];\n          const message =\n              getParamValue('message', node, tensorMap, context) as string;\n          const summarize =\n              getParamValue('summarize', node, tensorMap, context) as number;\n          console.warn(\n              'The graph has a tf.print() operation,' +\n              'usually used for debugging, which slows down performance.');\n          console.log(message);\n          for (let i = 0; i < data.length; i++) {\n            console.log(Array.prototype.slice.call(data[i].dataSync())\n                            .slice(0, summarize));\n          }\n          return [input];\n\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'graph';\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {DataType, keep, scalar, stack, Tensor, tidy, unstack, util} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\n/**\n * Hashtable contains a set of tensors, which can be accessed by key.\n */\nexport class HashTable {\n  readonly handle: Tensor;\n\n  // tslint:disable-next-line: no-any\n  private tensorMap: Map<any, Tensor>;\n\n  get id() {\n    return this.handle.id;\n  }\n\n  /**\n   * Constructor of HashTable. Creates a hash table.\n   *\n   * @param keyDType `dtype` of the table keys.\n   * @param valueDType `dtype` of the table values.\n   */\n  constructor(readonly keyDType: DataType, readonly valueDType: DataType) {\n    this.handle = scalar(0);\n    // tslint:disable-next-line: no-any\n    this.tensorMap = new Map<any, Tensor>();\n\n    keep(this.handle);\n  }\n\n  /**\n   * Dispose the tensors and handle and clear the hashtable.\n   */\n  clearAndClose() {\n    this.tensorMap.forEach(value => value.dispose());\n    this.tensorMap.clear();\n    this.handle.dispose();\n  }\n\n  /**\n   * The number of items in the hash table.\n   */\n  size(): number {\n    return this.tensorMap.size;\n  }\n\n  /**\n   * The number of items in the hash table as a rank-0 tensor.\n   */\n  tensorSize(): Tensor {\n    return tfOps.scalar(this.size(), 'int32');\n  }\n\n  /**\n   * Replaces the contents of the table with the specified keys and values.\n   * @param keys Keys to store in the hashtable.\n   * @param values Values to store in the hashtable.\n   */\n  async import(keys: Tensor, values: Tensor): Promise<Tensor> {\n    this.checkKeyAndValueTensor(keys, values);\n\n    // We only store the primitive values of the keys, this allows lookup\n    // to be O(1).\n    const $keys = await keys.data();\n\n    // Clear the hashTable before inserting new values.\n    this.tensorMap.forEach(value => value.dispose());\n    this.tensorMap.clear();\n\n    return tidy(() => {\n      const $values = unstack(values);\n\n      const keysLength = $keys.length;\n      const valuesLength = $values.length;\n\n      util.assert(\n          keysLength === valuesLength,\n          () => `The number of elements doesn't match, keys has ` +\n              `${keysLength} elements, the values has ${valuesLength} ` +\n              `elements.`);\n\n      for (let i = 0; i < keysLength; i++) {\n        const key = $keys[i];\n        const value = $values[i];\n\n        keep(value);\n        this.tensorMap.set(key, value);\n      }\n\n      return this.handle;\n    });\n  }\n\n  /**\n   * Looks up keys in a hash table, outputs the corresponding values.\n   *\n   * Performs batch lookups, for every element in the key tensor, `find`\n   * stacks the corresponding value into the return tensor.\n   *\n   * If an element is not present in the table, the given `defaultValue` is\n   * used.\n   *\n   * @param keys Keys to look up. Must have the same type as the keys of the\n   *     table.\n   * @param defaultValue The scalar `defaultValue` is the value output for keys\n   *     not present in the table. It must also be of the same type as the\n   *     table values.\n   */\n  async find(keys: Tensor, defaultValue: Tensor): Promise<Tensor> {\n    this.checkKeyAndValueTensor(keys, defaultValue);\n\n    const $keys = await keys.data();\n\n    return tidy(() => {\n      const result: Tensor[] = [];\n\n      for (let i = 0; i < $keys.length; i++) {\n        const key = $keys[i];\n\n        const value = this.findWithDefault(key, defaultValue);\n        result.push(value);\n      }\n\n      return stack(result);\n    });\n  }\n\n  // tslint:disable-next-line: no-any\n  private findWithDefault(key: any, defaultValue: Tensor): Tensor {\n    const result = this.tensorMap.get(key);\n\n    return result != null ? result : defaultValue;\n  }\n\n  private checkKeyAndValueTensor(key: Tensor, value: Tensor) {\n    if (key.dtype !== this.keyDType) {\n      throw new Error(\n          `Expect key dtype ${this.keyDType}, but got ` +\n          `${key.dtype}`);\n    }\n\n    if (value.dtype !== this.valueDType) {\n      throw new Error(\n          `Expect value dtype ${this.valueDType}, but got ` +\n          `${value.dtype}`);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, Tensor} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {HashTable} from '../../executor/hash_table';\nimport {ResourceManager} from '../../executor/resource_manager';\nimport {InternalOpAsyncExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpAsyncExecutor = async(\n    node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext,\n    resourceManager: ResourceManager): Promise<Tensor[]> => {\n  switch (node.op) {\n    case 'HashTable':\n    case 'HashTableV2': {\n      const existingTableHandle =\n          resourceManager.getHashTableHandleByName(node.name);\n      // Table is shared with initializer.\n      if (existingTableHandle != null) {\n        return [existingTableHandle];\n      } else {\n        const keyDType =\n            getParamValue('keyDType', node, tensorMap, context) as DataType;\n        const valueDType =\n            getParamValue('valueDType', node, tensorMap, context) as DataType;\n\n        const hashTable = new HashTable(keyDType, valueDType);\n        resourceManager.addHashTable(node.name, hashTable);\n        return [hashTable.handle];\n      }\n    }\n    case 'InitializeTable':\n    case 'InitializeTableV2':\n    case 'LookupTableImport':\n    case 'LookupTableImportV2': {\n      const handle = getParamValue(\n                         'tableHandle', node, tensorMap, context,\n                         resourceManager) as Tensor;\n      const keys = getParamValue('keys', node, tensorMap, context) as Tensor;\n      const values =\n          getParamValue('values', node, tensorMap, context) as Tensor;\n\n      const hashTable = resourceManager.getHashTableById(handle.id);\n\n      return [await hashTable.import(keys, values)];\n    }\n    case 'LookupTableFind':\n    case 'LookupTableFindV2': {\n      const handle = getParamValue(\n                         'tableHandle', node, tensorMap, context,\n                         resourceManager) as Tensor;\n      const keys = getParamValue('keys', node, tensorMap, context) as Tensor;\n      const defaultValue =\n          getParamValue('defaultValue', node, tensorMap, context) as Tensor;\n\n      const hashTable = resourceManager.getHashTableById(handle.id);\n      return [await hashTable.find(keys, defaultValue)];\n    }\n    case 'LookupTableSize':\n    case 'LookupTableSizeV2': {\n      const handle = getParamValue(\n                         'tableHandle', node, tensorMap, context,\n                         resourceManager) as Tensor;\n\n      const hashTable = resourceManager.getHashTableById(handle.id);\n      return [hashTable.tensorSize()];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'hash_table';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor, Tensor1D, Tensor2D, Tensor3D, Tensor4D} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext, ops = tfOps): Tensor[] => {\n      switch (node.op) {\n        case 'ResizeBilinear': {\n          const images =\n              getParamValue('images', node, tensorMap, context) as Tensor;\n          const size =\n              getParamValue('size', node, tensorMap, context) as number[];\n          const alignCorners =\n              getParamValue('alignCorners', node, tensorMap, context) as\n              boolean;\n          const halfPixelCenters =\n              getParamValue('halfPixelCenters', node, tensorMap, context) as\n              boolean;\n          return [ops.image.resizeBilinear(\n              images as Tensor3D | Tensor4D, [size[0], size[1]], alignCorners,\n              halfPixelCenters)];\n        }\n        case 'ResizeNearestNeighbor': {\n          const images =\n              getParamValue('images', node, tensorMap, context) as Tensor;\n          const size =\n              getParamValue('size', node, tensorMap, context) as number[];\n          const alignCorners =\n              getParamValue('alignCorners', node, tensorMap, context) as\n              boolean;\n          const halfPixelCenters =\n              getParamValue('halfPixelCenters', node, tensorMap, context) as\n              boolean;\n          return [ops.image.resizeNearestNeighbor(\n              images as Tensor3D | Tensor4D, [size[0], size[1]], alignCorners,\n              halfPixelCenters)];\n        }\n        case 'CropAndResize': {\n          const image =\n              getParamValue('image', node, tensorMap, context) as Tensor;\n          const boxes =\n              getParamValue('boxes', node, tensorMap, context) as Tensor;\n          const boxInd =\n              getParamValue('boxInd', node, tensorMap, context) as Tensor;\n          const cropSize =\n              getParamValue('cropSize', node, tensorMap, context) as number[];\n          const method =\n              getParamValue('method', node, tensorMap, context) as string;\n          const extrapolationValue =\n              getParamValue('extrapolationValue', node, tensorMap, context) as\n              number;\n          return [ops.image.cropAndResize(\n              image as Tensor4D, boxes as Tensor2D, boxInd as Tensor1D,\n              cropSize as [number, number], method as 'bilinear' | 'nearest',\n              extrapolationValue)];\n        }\n        case 'ImageProjectiveTransformV3': {\n          const images =\n              getParamValue('images', node, tensorMap, context) as Tensor;\n          const transforms =\n              getParamValue('transforms', node, tensorMap, context) as Tensor;\n          const outputShape =\n              getParamValue('outputShape', node, tensorMap, context) as\n              number[];\n          const fillValue =\n              getParamValue('fillValue', node, tensorMap, context) as number;\n          const interpolation =\n              getParamValue('interpolation', node, tensorMap, context) as\n              string;\n          const fillMode =\n              getParamValue('fillMode', node, tensorMap, context) as string;\n          return [ops.image.transform(\n              images as Tensor4D,\n              transforms as Tensor2D,\n              interpolation.toLowerCase() as 'bilinear' | 'nearest',\n              fillMode.toLowerCase() as 'constant' | 'reflect' | 'wrap' | 'nearest',\n              fillValue,\n              outputShape as [number, number])];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'image';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext, ops = tfOps): Tensor[] => {\n      switch (node.op) {\n        case 'Equal': {\n          return [ops.equal(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'NotEqual': {\n          return [ops.notEqual(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'Greater': {\n          return [ops.greater(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'GreaterEqual': {\n          return [ops.greaterEqual(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'Less': {\n          return [ops.less(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'LessEqual': {\n          return [ops.lessEqual(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'LogicalAnd': {\n          return [ops.logicalAnd(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'LogicalNot': {\n          return [ops.logicalNot(\n              getParamValue('a', node, tensorMap, context) as Tensor)];\n        }\n        case 'LogicalOr': {\n          return [ops.logicalOr(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'Select':\n        case 'SelectV2': {\n          return [ops.where(\n              getParamValue('condition', node, tensorMap, context) as Tensor,\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'logical';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor, Tensor2D} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext, ops = tfOps): Tensor[] => {\n      switch (node.op) {\n        case 'BatchMatMul':\n        case 'BatchMatMulV2':\n        case 'MatMul':\n          return [ops.matMul(\n              getParamValue('a', node, tensorMap, context) as Tensor2D,\n              getParamValue('b', node, tensorMap, context) as Tensor2D,\n              getParamValue('transposeA', node, tensorMap, context) as boolean,\n              getParamValue('transposeB', node, tensorMap, context) as\n                  boolean)];\n\n        case 'Einsum':\n          return [ops.einsum(\n              getParamValue('equation', node, tensorMap, context) as string,\n              ...getParamValue('tensors', node, tensorMap, context) as\n                  Tensor[])];\n\n        case 'Transpose':\n          return [ops.transpose(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('perm', node, tensorMap, context) as number[])];\n\n        case '_FusedMatMul':\n          const [extraOp, activationFunc] =\n              (getParamValue('fusedOps', node, tensorMap, context) as string[]);\n\n          const isBiasAdd = extraOp === 'biasadd';\n          const isPrelu = activationFunc === 'prelu';\n\n          const numArgs =\n              (getParamValue('numArgs', node, tensorMap, context) as number);\n          const leakyreluAlpha =\n              getParamValue('leakyreluAlpha', node, tensorMap, context) as\n              number;\n\n          if (isBiasAdd) {\n            if (isPrelu && numArgs !== 2) {\n              throw new Error(\n                  'Fused MatMul with BiasAdd and Prelu must have two ' +\n                  'extra arguments: bias and alpha.');\n            }\n            if (!isPrelu && numArgs !== 1) {\n              throw new Error(\n                  'Fused MatMul with BiasAdd must have one extra argument: bias.');\n            }\n          }\n          const [biasArg, preluArg] =\n              getParamValue('args', node, tensorMap, context) as Tensor[];\n          return [ops.fused.matMul({\n            a: getParamValue('a', node, tensorMap, context) as Tensor2D,\n            b: getParamValue('b', node, tensorMap, context) as Tensor2D,\n            transposeA: getParamValue('transposeA', node, tensorMap, context) as\n                boolean,\n            transposeB: getParamValue('transposeB', node, tensorMap, context) as\n                boolean,\n            bias: biasArg,\n            activation: activationFunc as tfOps.fused.Activation,\n            preluActivationWeights: preluArg,\n            leakyreluAlpha\n          })];\n\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'matrices';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Scalar, Tensor, Tensor3D, Tensor4D} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext, ops = tfOps): Tensor[] => {\n      switch (node.op) {\n        case 'EuclideanNorm':\n          return [ops.euclideanNorm(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('axis', node, tensorMap, context) as number[],\n              getParamValue('keepDims', node, tensorMap, context) as boolean)];\n        case 'FusedBatchNorm':\n        case 'FusedBatchNormV2': {\n          return [ops.batchNorm(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('mean', node, tensorMap, context) as Tensor,\n              getParamValue('variance', node, tensorMap, context) as Tensor,\n              getParamValue('offset', node, tensorMap, context) as Tensor,\n              getParamValue('scale', node, tensorMap, context) as Tensor,\n              getParamValue('epsilon', node, tensorMap, context) as number)];\n        }\n        case 'FusedBatchNormV3': {\n          return [ops.batchNorm(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('mean', node, tensorMap, context) as Tensor,\n              getParamValue('variance', node, tensorMap, context) as Tensor,\n              getParamValue('offset', node, tensorMap, context) as Tensor,\n              getParamValue('scale', node, tensorMap, context) as Tensor,\n              getParamValue('epsilon', node, tensorMap, context) as number)];\n        }\n        case 'LRN': {\n          return [ops.localResponseNormalization(\n              getParamValue('x', node, tensorMap, context) as Tensor3D |\n                  Tensor4D,\n              getParamValue('radius', node, tensorMap, context) as number,\n              getParamValue('bias', node, tensorMap, context) as number,\n              getParamValue('alpha', node, tensorMap, context) as number,\n              getParamValue('beta', node, tensorMap, context) as number)];\n        }\n        case 'Softmax': {\n          return [ops.softmax(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'LogSoftmax': {\n          return [ops.logSoftmax(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'SparseToDense': {\n          return [ops.sparseToDense(\n              getParamValue('sparseIndices', node, tensorMap, context) as\n                  Tensor,\n              getParamValue('outputShape', node, tensorMap, context) as Tensor,\n              getParamValue('sparseValues', node, tensorMap, context) as\n                  number[],\n              getParamValue('defaultValue', node, tensorMap, context) as\n                  Scalar)];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'normalization';\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor, Tensor1D} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext,\n     ops = tfOps): Tensor[] => {\n      switch (node.op) {\n        case 'RaggedGather': {\n          const {\n            outputNestedSplits,\n            outputDenseValues,\n          } =\n              ops.raggedGather(\n                  getParamValue(\n                      'paramsNestedSplits', node, tensorMap, context) as\n                      Tensor[],\n                  getParamValue(\n                      'paramsDenseValues', node, tensorMap, context) as Tensor,\n                  getParamValue('indices', node, tensorMap, context) as Tensor,\n                  getParamValue('outputRaggedRank', node, tensorMap, context) as\n                      number);\n          return outputNestedSplits.concat(outputDenseValues);\n        }\n        case 'RaggedRange': {\n          const {rtNestedSplits, rtDenseValues} = ops.raggedRange(\n              getParamValue('starts', node, tensorMap, context) as Tensor,\n              getParamValue('limits', node, tensorMap, context) as Tensor,\n              getParamValue('splits', node, tensorMap, context) as Tensor);\n          return [rtNestedSplits, rtDenseValues];\n        }\n        case 'RaggedTensorToTensor': {\n          return [ops.raggedTensorToTensor(\n              getParamValue('shape', node, tensorMap, context) as Tensor,\n              getParamValue('values', node, tensorMap, context) as Tensor1D,\n              getParamValue('defaultValue', node, tensorMap, context) as Tensor,\n              getParamValue('rowPartitionTensors', node, tensorMap, context) as\n                  Tensor[],\n              getParamValue('rowPartitionTypes', node, tensorMap, context) as\n                  string[])];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'ragged';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor, Tensor1D, Tensor2D} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext, ops = tfOps): Tensor[] => {\n      switch (node.op) {\n        case 'Max': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number[];\n          const keepDims =\n              getParamValue('keepDims', node, tensorMap, context) as boolean;\n          return [ops.max(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis,\n              keepDims)];\n        }\n        case 'Mean': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number[];\n          const keepDims =\n              getParamValue('keepDims', node, tensorMap, context) as boolean;\n          return [ops.mean(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis,\n              keepDims)];\n        }\n        case 'Min': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number[];\n          const keepDims =\n              getParamValue('keepDims', node, tensorMap, context) as boolean;\n          return [ops.min(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis,\n              keepDims)];\n        }\n        case 'Sum': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number[];\n          const keepDims =\n              getParamValue('keepDims', node, tensorMap, context) as boolean;\n          return [ops.sum(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis,\n              keepDims)];\n        }\n        case 'All': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number[];\n          const keepDims =\n              getParamValue('keepDims', node, tensorMap, context) as boolean;\n          return [ops.all(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis,\n              keepDims)];\n        }\n        case 'Any': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number[];\n          const keepDims =\n              getParamValue('keepDims', node, tensorMap, context) as boolean;\n          return [ops.any(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis,\n              keepDims)];\n        }\n        case 'ArgMax': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number;\n          return [ops.argMax(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis)];\n        }\n        case 'ArgMin': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number;\n          return [ops.argMin(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis)];\n        }\n        case 'Prod': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number[];\n          const keepDims =\n              getParamValue('keepDims', node, tensorMap, context) as boolean;\n          return [ops.prod(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis,\n              keepDims)];\n        }\n        case 'Cumprod': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number;\n          const exclusive =\n              getParamValue('exclusive', node, tensorMap, context) as boolean;\n          const reverse =\n              getParamValue('reverse', node, tensorMap, context) as boolean;\n          return [ops.cumprod(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis,\n              exclusive, reverse)];\n        }\n        case 'Cumsum': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number;\n          const exclusive =\n              getParamValue('exclusive', node, tensorMap, context) as boolean;\n          const reverse =\n              getParamValue('reverse', node, tensorMap, context) as boolean;\n          return [ops.cumsum(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis,\n              exclusive, reverse)];\n        }\n        case 'Bincount':\n          const x = getParamValue('x', node, tensorMap, context) as Tensor1D;\n          const weights =\n              getParamValue('weights', node, tensorMap, context) as Tensor1D;\n          const size =\n              getParamValue('size', node, tensorMap, context) as number;\n\n          return [ops.bincount(x, weights, size)];\n        case 'DenseBincount': {\n          const x = getParamValue('x', node, tensorMap, context) as Tensor1D |\n              Tensor2D;\n          const weights =\n              getParamValue('weights', node, tensorMap, context) as Tensor1D |\n              Tensor2D;\n          const size =\n              getParamValue('size', node, tensorMap, context) as number;\n\n          const binaryOutput =\n              getParamValue('binaryOutput', node, tensorMap, context) as\n              boolean;\n\n          return [ops.denseBincount(x, weights, size, binaryOutput)];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'reduction';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Scalar, Tensor, Tensor1D, tidy, util} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext, ops = tfOps): Tensor[] => {\n      switch (node.op) {\n        case 'ConcatV2':\n        case 'Concat': {\n          const n = getParamValue('n', node, tensorMap, context) as number;\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number;\n          let inputs =\n              getParamValue('tensors', node, tensorMap, context) as Tensor[];\n          inputs = inputs.slice(0, n);\n          return [ops.concat(inputs, axis)];\n        }\n        case 'Gather': {\n          const input = getParamValue('x', node, tensorMap, context) as Tensor;\n          const indices =\n              getParamValue('indices', node, tensorMap, context) as Tensor1D;\n          return [ops.gather(input, ops.cast(indices, 'int32'), 0)];\n        }\n        case 'GatherV2': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number;\n          const batchDims =\n              getParamValue('batchDims', node, tensorMap, context) as number;\n          const input = getParamValue('x', node, tensorMap, context) as Tensor;\n          const indices =\n              getParamValue('indices', node, tensorMap, context) as Tensor1D;\n          return [ops.gather(\n              input, ops.cast(indices, 'int32'), axis, batchDims)];\n        }\n        case 'Reverse': {\n          const dims =\n              getParamValue('dims', node, tensorMap, context) as boolean[];\n          const axis = [];\n          for (let i = 0; i < dims.length; i++) {\n            if (dims[i]) {\n              axis.push(i);\n            }\n          }\n          const input = getParamValue('x', node, tensorMap, context) as Tensor;\n          return [ops.reverse(input, axis)];\n        }\n        case 'ReverseV2': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number[];\n          const input = getParamValue('x', node, tensorMap, context) as Tensor;\n          return [ops.reverse(input, axis)];\n        }\n        case 'Slice': {\n          // tslint:disable-next-line:no-any\n          const begin = getParamValue('begin', node, tensorMap, context) as any;\n          // tslint:disable-next-line:no-any\n          const size = getParamValue('size', node, tensorMap, context) as any;\n          return [ops.slice(\n              getParamValue('x', node, tensorMap, context) as Tensor, begin,\n              size)];\n        }\n        case 'StridedSlice': {\n          const begin =\n              getParamValue('begin', node, tensorMap, context) as number[];\n          const end =\n              getParamValue('end', node, tensorMap, context) as number[];\n          const strides =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const beginMask =\n              getParamValue('beginMask', node, tensorMap, context) as number;\n          const endMask =\n              getParamValue('endMask', node, tensorMap, context) as number;\n          const ellipsisMask =\n              getParamValue('ellipsisMask', node, tensorMap, context) as number;\n          const newAxisMask =\n              getParamValue('newAxisMask', node, tensorMap, context) as number;\n          const shrinkAxisMask =\n              getParamValue('shrinkAxisMask', node, tensorMap, context) as\n              number;\n          const tensor = getParamValue('x', node, tensorMap, context) as Tensor;\n\n          return [ops.stridedSlice(\n              tensor, begin, end, strides, beginMask, endMask, ellipsisMask,\n              newAxisMask, shrinkAxisMask)];\n        }\n        case 'Pack': {\n          return tidy(() => {\n            const axis =\n                getParamValue('axis', node, tensorMap, context) as number;\n            const tensors =\n                getParamValue('tensors', node, tensorMap, context) as Tensor[];\n            // Reshape the tensors to the first tensor's shape if they don't\n            // match.\n            const shape = tensors[0].shape;\n            const squeezedShape = ops.squeeze(tensors[0]).shape;\n            const mapped = tensors.map(tensor => {\n              const sameShape = util.arraysEqual(tensor.shape, shape);\n              if (!sameShape &&\n                  !util.arraysEqual(\n                      ops.squeeze(tensor).shape, squeezedShape)) {\n                throw new Error('the input tensors shape does not match');\n              }\n              return sameShape ? tensor : ops.reshape(tensor, shape);\n            });\n            return [ops.stack(mapped, axis)];\n          });\n        }\n        case 'Unpack': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number;\n          const tensor =\n              getParamValue('tensor', node, tensorMap, context) as Tensor;\n          return ops.unstack(tensor, axis);\n        }\n        case 'Tile': {\n          const reps =\n              getParamValue('reps', node, tensorMap, context) as number[];\n          return [ops.tile(\n              getParamValue('x', node, tensorMap, context) as Tensor, reps)];\n        }\n        case 'Split':\n        case 'SplitV': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number;\n          const numOrSizeSplits =\n              getParamValue('numOrSizeSplits', node, tensorMap, context) as\n                  number |\n              number[];\n          const tensor = getParamValue('x', node, tensorMap, context) as Tensor;\n\n          return ops.split(tensor, numOrSizeSplits, axis);\n        }\n        case 'ScatterNd': {\n          const indices =\n              getParamValue('indices', node, tensorMap, context) as Tensor;\n          const values =\n              getParamValue('values', node, tensorMap, context) as Tensor;\n          const shape =\n              getParamValue('shape', node, tensorMap, context) as number[];\n          return [ops.scatterND(indices, values, shape)];\n        }\n        case 'GatherNd': {\n          const x = getParamValue('x', node, tensorMap, context) as Tensor;\n          const indices =\n              getParamValue('indices', node, tensorMap, context) as Tensor;\n          return [ops.gatherND(x, indices)];\n        }\n        case 'SparseToDense': {\n          const indices =\n              getParamValue('sparseIndices', node, tensorMap, context) as\n              Tensor;\n          const shape =\n              getParamValue('outputShape', node, tensorMap, context) as\n              number[];\n          const sparseValues =\n              getParamValue('sparseValues', node, tensorMap, context) as Tensor;\n          const defaultValue =\n              getParamValue('defaultValue', node, tensorMap, context) as Scalar;\n          return [ops.sparseToDense(\n              indices, sparseValues, shape,\n              sparseValues.dtype === defaultValue.dtype ?\n                  defaultValue :\n                  ops.cast(defaultValue, sparseValues.dtype))];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'slice_join';\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Scalar, Tensor, Tensor1D, Tensor2D} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext, ops = tfOps): Tensor[] => {\n      switch (node.op) {\n        case 'SparseFillEmptyRows': {\n          const {\n            outputIndices,\n            outputValues,\n            emptyRowIndicator,\n            reverseIndexMap\n          } =\n              ops.sparse.sparseFillEmptyRows(\n                  getParamValue('indices', node, tensorMap, context) as\n                      Tensor2D,\n                  getParamValue('values', node, tensorMap, context) as Tensor1D,\n                  getParamValue('denseShape', node, tensorMap, context) as\n                      Tensor1D,\n                  getParamValue('defaultValue', node, tensorMap, context) as\n                      Scalar);\n          return [\n            outputIndices, outputValues, emptyRowIndicator, reverseIndexMap\n          ];\n        }\n        case 'SparseReshape': {\n          const {outputIndices, outputShape} = ops.sparse.sparseReshape(\n              getParamValue('inputIndices', node, tensorMap, context) as\n                  Tensor2D,\n              getParamValue('inputShape', node, tensorMap, context) as Tensor1D,\n              getParamValue('newShape', node, tensorMap, context) as Tensor1D);\n          return [outputIndices, outputShape];\n        }\n        case 'SparseSegmentMean': {\n          const outputData = ops.sparse.sparseSegmentMean(\n              getParamValue('data', node, tensorMap, context) as Tensor,\n              getParamValue('indices', node, tensorMap, context) as Tensor1D,\n              getParamValue('segmentIds', node, tensorMap, context) as\n                  Tensor1D);\n          return [outputData];\n        }\n        case 'SparseSegmentSum': {\n          const outputData = ops.sparse.sparseSegmentSum(\n              getParamValue('data', node, tensorMap, context) as Tensor,\n              getParamValue('indices', node, tensorMap, context) as Tensor1D,\n              getParamValue('segmentIds', node, tensorMap, context) as\n                  Tensor1D);\n          return [outputData];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'sparse';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext,\n     ops = tfOps): Tensor[] => {\n          switch (node.op) {\n            case 'FFT': {\n              return [ops.fft(\n                  getParamValue('x', node, tensorMap, context) as Tensor)];\n            }\n            case 'IFFT': {\n              return [ops.ifft(\n                  getParamValue('x', node, tensorMap, context) as Tensor)];\n            }\n            case 'RFFT': {\n              return [ops.rfft(\n                  getParamValue('x', node, tensorMap, context) as Tensor)];\n            }\n            case 'IRFFT': {\n              return [ops.irfft(\n                  getParamValue('x', node, tensorMap, context) as Tensor)];\n            }\n            default:\n              throw TypeError(`Node type ${node.op} is not implemented`);\n          }\n        };\n\nexport const CATEGORY = 'spectral';\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Scalar, Tensor, Tensor1D} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext, ops = tfOps): Tensor[] => {\n      switch (node.op) {\n        case 'StringNGrams': {\n          const {nGrams, nGramsSplits} = ops.string.stringNGrams(\n              getParamValue('data', node, tensorMap, context) as Tensor1D,\n              getParamValue('dataSplits', node, tensorMap, context) as Tensor,\n              getParamValue('separator', node, tensorMap, context) as string,\n              getParamValue('nGramWidths', node, tensorMap, context) as\n                  number[],\n              getParamValue('leftPad', node, tensorMap, context) as string,\n              getParamValue('rightPad', node, tensorMap, context) as string,\n              getParamValue('padWidth', node, tensorMap, context) as number,\n              getParamValue(\n                  'preserveShortSequences', node, tensorMap, context) as\n                  boolean);\n          return [nGrams, nGramsSplits];\n        }\n        case 'StringSplit': {\n          const {indices, values, shape} = ops.string.stringSplit(\n              getParamValue('input', node, tensorMap, context) as Tensor1D,\n              getParamValue('delimiter', node, tensorMap, context) as Scalar,\n              getParamValue('skipEmpty', node, tensorMap, context) as boolean);\n          return [indices, values, shape];\n        }\n        case 'StringToHashBucketFast': {\n          const output = ops.string.stringToHashBucketFast(\n              getParamValue('input', node, tensorMap, context) as Tensor,\n              getParamValue('numBuckets', node, tensorMap, context) as number);\n          return [output];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'string';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor, Tensor4D} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext, ops = tfOps): Tensor[] => {\n      switch (node.op) {\n        case 'Cast': {\n          return [ops.cast(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('dtype', node, tensorMap, context) as 'int32' |\n                  'float32' | 'bool')];\n        }\n        case 'ExpandDims': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number;\n          return [ops.expandDims(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis)];\n        }\n        case 'Squeeze': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number[];\n          return [ops.squeeze(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis)];\n        }\n\n        case 'Reshape': {\n          return [ops.reshape(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('shape', node, tensorMap, context) as number[])];\n        }\n        case 'MirrorPad': {\n          return [ops.mirrorPad(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('padding', node, tensorMap, context) as\n                  Array<[number, number]>,\n              getParamValue('mode', node, tensorMap, context) as 'reflect' |\n                  'symmetric')];\n        }\n        case 'PadV2':\n        case 'Pad': {\n          return [ops.pad(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('padding', node, tensorMap, context) as\n                  Array<[number, number]>,\n              getParamValue('constantValue', node, tensorMap, context) as\n                  number)];\n        }\n        case 'SpaceToBatchND': {\n          const blockShape =\n              getParamValue('blockShape', node, tensorMap, context) as number[];\n          const paddings =\n              getParamValue('paddings', node, tensorMap, context) as number[][];\n          return [ops.spaceToBatchND(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              blockShape, paddings)];\n        }\n        case 'BatchToSpaceND': {\n          const blockShape =\n              getParamValue('blockShape', node, tensorMap, context) as number[];\n          const crops =\n              getParamValue('crops', node, tensorMap, context) as number[][];\n          return [ops.batchToSpaceND(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              blockShape, crops)];\n        }\n        case 'DepthToSpace': {\n          const blockSize =\n              getParamValue('blockSize', node, tensorMap, context) as number;\n          const dataFormat =\n              (getParamValue('dataFormat', node, tensorMap, context) as\n               string).toUpperCase() as 'NHWC' |\n              'NCHW';\n          return [ops.depthToSpace(\n              getParamValue('x', node, tensorMap, context) as Tensor4D,\n              blockSize, dataFormat)];\n        }\n        case 'BroadcastTo': {\n          return [ops.broadcastTo(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('shape', node, tensorMap, context) as number[])];\n        }\n        case 'BroadcastArgs': {\n          return [ops.broadcastArgs(\n              getParamValue('s0', node, tensorMap, context) as Tensor,\n              getParamValue('s1', node, tensorMap, context) as Tensor)];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'transformation';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../data/types';\nimport {ExecutionContext} from '../executor/execution_context';\nimport {ResourceManager} from '../executor/resource_manager';\n\nimport {NodeValueImpl} from './custom_op/node_value_impl';\nimport {getRegisteredOp} from './custom_op/register';\nimport * as arithmetic from './executors/arithmetic_executor';\nimport * as basicMath from './executors/basic_math_executor';\nimport * as control from './executors/control_executor';\nimport * as convolution from './executors/convolution_executor';\nimport * as creation from './executors/creation_executor';\nimport * as dynamic from './executors/dynamic_executor';\nimport * as evaluation from './executors/evaluation_executor';\nimport * as graph from './executors/graph_executor';\nimport * as hashTable from './executors/hash_table_executor';\nimport * as image from './executors/image_executor';\nimport * as logical from './executors/logical_executor';\nimport * as matrices from './executors/matrices_executor';\nimport * as normalization from './executors/normalization_executor';\nimport * as ragged from './executors/ragged_executor';\nimport * as reduction from './executors/reduction_executor';\nimport * as sliceJoin from './executors/slice_join_executor';\nimport * as sparse from './executors/sparse_executor';\nimport * as spectral from './executors/spectral_executor';\nimport * as string from './executors/string_executor';\nimport * as transformation from './executors/transformation_executor';\nimport {Node} from './types';\n\n/**\n * Executes the op defined by the node object.\n * @param node\n * @param tensorMap contains tensors for executed nodes and weights\n * @param context contains tensors and information for running the current node.\n * @param resourceManager Optional. Contains global resources of the model.\n */\nexport function executeOp(\n    node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext,\n    resourceManager?: ResourceManager, tidy = tfc.tidy): tfc.Tensor[]|\n    Promise<tfc.Tensor[]> {\n  const value =\n      ((node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext) => {\n        switch (node.category) {\n          case 'arithmetic':\n            return tidy(() => arithmetic.executeOp(node, tensorMap, context));\n          case 'basic_math':\n            return tidy(() => basicMath.executeOp(node, tensorMap, context));\n          case 'control':\n            return control.executeOp(node, tensorMap, context);\n          case 'convolution':\n            return tidy(() => convolution.executeOp(node, tensorMap, context));\n          case 'creation':\n            return tidy(() => creation.executeOp(node, tensorMap, context));\n          case 'dynamic':\n            return dynamic.executeOp(node, tensorMap, context);\n          case 'evaluation':\n            return tidy(() => evaluation.executeOp(node, tensorMap, context));\n          case 'image':\n            return tidy(() => image.executeOp(node, tensorMap, context));\n          case 'graph':\n            return tidy(() => graph.executeOp(node, tensorMap, context));\n          case 'logical':\n            return tidy(() => logical.executeOp(node, tensorMap, context));\n          case 'matrices':\n            return tidy(() => matrices.executeOp(node, tensorMap, context));\n          case 'normalization':\n            return tidy(\n                () => normalization.executeOp(node, tensorMap, context));\n          case 'ragged':\n            return tidy(() => ragged.executeOp(node, tensorMap, context));\n          case 'reduction':\n            return tidy(() => reduction.executeOp(node, tensorMap, context));\n          case 'slice_join':\n            return tidy(() => sliceJoin.executeOp(node, tensorMap, context));\n          case 'sparse':\n            return tidy(() => sparse.executeOp(node, tensorMap, context));\n          case 'spectral':\n            return tidy(() => spectral.executeOp(node, tensorMap, context));\n          case 'string':\n            return tidy(() => string.executeOp(node, tensorMap, context));\n          case 'transformation':\n            return tidy(\n                () => transformation.executeOp(node, tensorMap, context));\n          case 'hash_table':\n            return hashTable.executeOp(\n                node, tensorMap, context, resourceManager);\n          case 'custom':\n            const opMapper = getRegisteredOp(node.op);\n            if (opMapper && opMapper.customExecutor) {\n              return opMapper.customExecutor(\n                  new NodeValueImpl(node, tensorMap, context));\n            } else {\n              throw TypeError(`Custom op ${node.op} is not registered.`);\n            }\n          default:\n            throw TypeError(\n                `Unknown op '${node.op}'. File an issue at ` +\n                `https://github.com/tensorflow/tfjs/issues so we can add it` +\n                `, or register a custom execution with tf.registerOp()`);\n        }\n      })(node, tensorMap, context);\n  if (tfc.util.isPromise(value)) {\n    return value.then((data) => [].concat(data));\n  }\n  return [].concat(value);\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Tensor} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap, TensorArrayMap, TensorListMap} from '../data/types';\n\nimport {TensorArray} from './tensor_array';\nimport {TensorList} from './tensor_list';\nimport {FunctionExecutor} from './types';\n\nexport interface ExecutionContextInfo {\n  id: number;           // the unique id of the context info\n  frameName: string;    // The frame name of the loop, this comes from\n                        // the TensorFlow NodeDef.\n  iterationId: number;  // The iteration id of the loop\n}\n\n/**\n * ExecutionContext captures the runtime environment of the node. It keeps\n * track of the current frame and iteration for the control flow ops.\n *\n * For example, typical Dynamic RNN model may contain loops, for which\n * TensorFlow will generate graphs with Enter/Exit nodes to control the\n * current execution frame, and NextIteration Nodes for iteration id increment.\n * For model with branch logic, TensorFLow will generate Switch/Merge ops.\n */\nexport class ExecutionContext {\n  private rootContext = {id: 0, frameName: '', iterationId: 0};\n  private contexts: ExecutionContextInfo[] = [this.rootContext];\n  private lastId = 0;\n  private _currentContextIds: string[];\n\n  constructor(\n      readonly weightMap: NamedTensorsMap = {},\n      readonly tensorArrayMap: TensorArrayMap = {},\n      readonly tensorListMap: TensorListMap = {},\n      readonly functionMap: {[key: string]: FunctionExecutor} = {}) {\n    this.generateCurrentContextIds();\n  }\n\n  private newFrame(id: number, frameName: string) {\n    return {id, frameName, iterationId: 0};\n  }\n\n  /**\n   * Set the current context\n   * @param contexts: ExecutionContextInfo[] the current path of execution\n   * frames\n   */\n  set currentContext(contexts: ExecutionContextInfo[]) {\n    if (this.contexts !== contexts) {\n      this.contexts = contexts;\n      this.generateCurrentContextIds();\n    }\n  }\n\n  get currentContext(): ExecutionContextInfo[] {\n    return this.contexts;\n  }\n\n  /**\n   * Returns the current context in string format.\n   */\n  get currentContextId(): string {\n    return this._currentContextIds[0];\n  }\n\n  /**\n   * Returns the current context and all parent contexts in string format.\n   * This allow access to the nodes in the current and parent frames.\n   */\n  get currentContextIds(): string[] {\n    return this._currentContextIds;\n  }\n\n  private generateCurrentContextIds() {\n    const names = [];\n    for (let i = 0; i < this.contexts.length - 1; i++) {\n      const contexts = this.contexts.slice(0, this.contexts.length - i);\n      names.push(this.contextIdforContexts(contexts));\n    }\n    names.push('');\n    this._currentContextIds = names;\n  }\n\n  private contextIdforContexts(contexts: ExecutionContextInfo[]) {\n    return contexts ?\n        contexts\n            .map(\n                context => (context.id === 0 && context.iterationId === 0) ?\n                    '' :\n                    `${context.frameName}-${context.iterationId}`)\n            .join('/') :\n        '';\n  }\n\n  /**\n   * Enter a new frame, a new context is pushed on the current context list.\n   * @param frameId new frame id\n   */\n  enterFrame(frameId: string) {\n    if (this.contexts) {\n      this.lastId++;\n      this.contexts = this.contexts.slice();\n      this.contexts.push(this.newFrame(this.lastId, frameId));\n      this._currentContextIds.unshift(this.contextIdforContexts(this.contexts));\n    }\n  }\n\n  /**\n   * Exit the current frame, the last context is removed from the current\n   * context list.\n   */\n  exitFrame() {\n    if (this.contexts && this.contexts.length > 1) {\n      this.contexts = this.contexts.slice();\n      this.contexts.splice(-1);\n      this.currentContextIds.shift();\n    } else {\n      throw new Error('Cannot exit frame, the context is empty');\n    }\n  }\n\n  /**\n   * Enter the next iteration of a loop, the iteration id of last context is\n   * increased.\n   */\n  nextIteration() {\n    if (this.contexts && this.contexts.length > 0) {\n      this.contexts = this.contexts.slice();\n      this.lastId++;\n      const context =\n          Object.assign({}, this.contexts[this.contexts.length - 1]);\n      context.iterationId += 1;\n      context.id = this.lastId;\n      this.contexts.splice(-1, 1, context);\n      this._currentContextIds.splice(\n          0, 1, this.contextIdforContexts(this.contexts));\n    } else {\n      throw new Error('Cannot increase frame iteration, the context is empty');\n    }\n  }\n\n  getWeight(name: string): Tensor[] {\n    return this.weightMap[name];\n  }\n\n  addTensorArray(tensorArray: TensorArray) {\n    this.tensorArrayMap[tensorArray.id] = tensorArray;\n  }\n\n  getTensorArray(id: number): TensorArray {\n    return this.tensorArrayMap[id];\n  }\n\n  addTensorList(tensorList: TensorList) {\n    this.tensorListMap[tensorList.id] = tensorList;\n  }\n\n  getTensorList(id: number): TensorList {\n    return this.tensorListMap[id];\n  }\n\n  dispose(keepIds: Set<number>) {\n    for (const key in this.tensorArrayMap) {\n      this.tensorArrayMap[key].clearAndClose(keepIds);\n    }\n\n    for (const key in this.tensorListMap) {\n      this.tensorListMap[key].clearAndClose(keepIds);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {NamedTensorMap} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../data/types';\nimport {parseNodeName} from '../operations/executors/utils';\nimport {Graph, Node} from '../operations/types';\n\nexport interface ExecutionInfo {\n  inputs: NamedTensorMap;\n  outputs: Node[];\n  usedNodes: Set<string>;\n  missingInputs: string[];\n  dynamicNode: Node;\n  syncInputs: string[];\n}\n\n/**\n * Given graph inputs and desired outputs, find the minimal set of nodes\n * to execute in order to compute the outputs. In addition return other useful\n * info such:\n * - Missing inputs needed to compute the output.\n * - Whether the subgraph contains dynamic ops (control flow, dynamic shape).\n * - Alternative inputs in order to avoid async (dynamic op) execution.\n */\nexport function getExecutionSubgraph(\n    inputs: NamedTensorMap, outputs: Node[], weightMap: NamedTensorsMap,\n    initNodes?: Node[]): ExecutionInfo {\n  const usedNodes = new Set<string>();\n  const missingInputs: string[] = [];\n  let dynamicNode: Node = null;\n  let syncInputs: string[] = null;\n\n  // Start with the outputs, going backwards and find all the nodes that are\n  // needed to compute those outputs.\n  const seen = new Set<string>();\n  const inputNodeNames =\n      Object.keys(inputs).map(name => parseNodeName(name)[0]);\n\n  let initNodeNames: string[] = [];\n  if (initNodes != null) {\n    initNodeNames = initNodes.map(node => parseNodeName(node.name)[0]);\n  }\n\n  const frontier = [...outputs];\n  while (frontier.length > 0) {\n    const node = frontier.pop();\n    if (isControlFlow(node) || isDynamicShape(node) || isHashTable(node)) {\n      if (dynamicNode == null) {\n        dynamicNode = node;\n        syncInputs = dynamicNode.children.map(child => child.name)\n                         .filter(name => usedNodes.has(name));\n      }\n    }\n    usedNodes.add(node.name);\n\n    // Weights are dead end since we already have their values.\n    if (weightMap[node.name] != null) {\n      continue;\n    }\n    // This node is a dead end since it's one of the user-provided inputs.\n    if (inputNodeNames.indexOf(node.name) !== -1) {\n      continue;\n    }\n    // This node is a dead end since it doesn't have any inputs.\n    if (initNodeNames.indexOf(node.name) !== -1) {\n      continue;\n    }\n    if (node.inputs.length === 0) {\n      missingInputs.push(node.name);\n      continue;\n    }\n    node.inputs.forEach(input => {\n      // Don't add to the frontier if it is already there.\n      if (seen.has(input.name)) {\n        return;\n      }\n      seen.add(input.name);\n      frontier.push(input);\n    });\n  }\n  return {inputs, outputs, usedNodes, missingInputs, dynamicNode, syncInputs};\n}\n\n/**\n * Given the execution info, return a list of nodes in topological order that\n * need to be executed to compute the output.\n */\nexport function getNodesInTopologicalOrder(\n    graph: Graph, weightMap: NamedTensorsMap,\n    executionInfo: ExecutionInfo): Node[] {\n  const {usedNodes, inputs} = executionInfo;\n  const frontier: Node[] = [];\n  const inputNodes = Object.keys(inputs)\n                         .map(name => parseNodeName(name)[0])\n                         .map(name => graph.nodes[name]);\n  const initNodes = graph.initNodes;\n\n  inputNodes.forEach(input => {\n    if (usedNodes.has(input.name)) {\n      frontier.push(input);\n    }\n  });\n  graph.weights.forEach(weight => {\n    if (usedNodes.has(weight.name)) {\n      frontier.push(weight);\n    }\n  });\n  if (initNodes != null) {\n    initNodes.forEach(node => {\n      if (usedNodes.has(node.name)) {\n        frontier.push(node);\n      }\n    });\n  }\n  const seen = new Set<string>();\n  const orderedNodes: Node[] = [];\n  while (frontier.length > 0) {\n    const node = frontier.pop();\n    seen.add(node.name);\n    if (!weightMap[node.name]) {\n      orderedNodes.push(node);\n    }\n    node.children.forEach(child => {\n      if (!seen.has(child.name) && usedNodes.has(child.name) &&\n          child.inputs.every(input => seen.has(input.name))) {\n        frontier.push(child);\n      }\n    });\n  }\n  return orderedNodes;\n}\n\nconst CONTROL_FLOW_OPS = [\n  'Switch', 'Merge', 'Enter', 'Exit', 'NextIteration', 'StatelessIf',\n  'StatelessWhile', 'if', 'While'\n];\nconst DYNAMIC_SHAPE_OPS = [\n  'NonMaxSuppressionV2', 'NonMaxSuppressionV3', 'NonMaxSuppressionV5', 'Where'\n];\nconst HASH_TABLE_OPS = [\n  'HashTable', 'HashTableV2', 'LookupTableImport', 'LookupTableImportV2',\n  'LookupTableFind', 'LookupTableFindV2', 'LookupTableSize', 'LookupTableSizeV2'\n];\n\nexport function isControlFlow(node: Node) {\n  return CONTROL_FLOW_OPS.indexOf(node.op) >= 0;\n}\n\nexport function isDynamicShape(node: Node) {\n  return DYNAMIC_SHAPE_OPS.indexOf(node.op) >= 0;\n}\n\nexport function isHashTable(node: Node) {\n  return HASH_TABLE_OPS.indexOf(node.op) >= 0;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, env, keep, NamedTensorMap, Tensor, tidy, util} from '@tensorflow/tfjs-core';\n\nimport {ISignatureDef} from '../data/compiled_api';\nimport {NamedTensorsMap, TensorArrayMap, TensorInfo, TensorListMap} from '../data/types';\nimport {getNodeNameAndIndex, getParamValue, getTensor, getTensorsForCurrentContenxt, parseNodeName} from '../operations/executors/utils';\nimport {executeOp} from '../operations/operation_executor';\nimport {Graph, Node} from '../operations/types';\n\nimport {ExecutionContext, ExecutionContextInfo} from './execution_context';\nimport {getExecutionSubgraph, getNodesInTopologicalOrder, isControlFlow} from './model_analysis';\nimport {ResourceManager} from './resource_manager';\nimport {FunctionExecutor} from './types';\n\ninterface NodeWithContexts {\n  contexts: ExecutionContextInfo[];\n  node: Node;\n}\n\nexport class GraphExecutor implements FunctionExecutor {\n  private compiledMap: Map<string, Node[]> = new Map();\n  private _weightMap: NamedTensorsMap = {};\n  private _weightIds: number[];\n  private _signature: ISignatureDef;\n  private _inputs: Node[];\n  private _outputs: Node[];\n  private _initNodes: Node[];  // Internal init nodes to start initialization.\n  private SEPERATOR = ',';\n  private _functions: {[key: string]: Graph} = {};\n  private _functionExecutorMap: {[key: string]: FunctionExecutor} = {};\n  private _resourceManager: ResourceManager;\n  private clonedTensorsMap: NamedTensorsMap;\n  private keepIntermediateTensors = false;\n\n  get weightIds(): number[] {\n    return this.parent ? this.parent.weightIds : this._weightIds;\n  }\n\n  get functionExecutorMap(): {[key: string]: FunctionExecutor} {\n    return this.parent ? this.parent.functionExecutorMap :\n                         this._functionExecutorMap;\n  }\n\n  get weightMap(): NamedTensorsMap {\n    return this.parent ? this.parent.weightMap : this._weightMap;\n  }\n\n  set weightMap(weightMap: NamedTensorsMap) {\n    const weightIds = Object.keys(weightMap).map(\n        key => weightMap[key].map(tensor => tensor.id));\n    this._weightIds = [].concat(...weightIds);\n    this._weightMap = weightMap;\n  }\n\n  /**\n   * Set `ResourceManager` shared by executors of a model.\n   * @param resourceManager: `ResourceManager` of the `GraphModel`.\n   */\n  set resourceManager(resourceManager: ResourceManager) {\n    this._resourceManager = resourceManager;\n  }\n\n  get inputs(): TensorInfo[] {\n    return this._inputs.map(node => {\n      return {\n        name: node.name,\n        shape: node.attrParams['shape'] ?\n            node.attrParams['shape'].value as number[] :\n            undefined,\n        dtype: node.attrParams['dtype'] ?\n            node.attrParams['dtype'].value as DataType :\n            undefined\n      };\n    });\n  }\n\n  get outputs(): TensorInfo[] {\n    return this._outputs.map(node => {\n      return {\n        name: node.name,\n        shape: node.attrParams['shape'] ?\n            node.attrParams['shape'].value as number[] :\n            undefined,\n        dtype: node.attrParams['dtype'] ?\n            node.attrParams['dtype'].value as DataType :\n            undefined\n      };\n    });\n  }\n\n  get inputNodes(): string[] {\n    return this._inputs.map(node => node.signatureKey || node.name);\n  }\n\n  get outputNodes(): string[] {\n    return this._outputs.map((node) => {\n      const name = node.signatureKey || node.name;\n      return node.defaultOutput ? (`${name}:${node.defaultOutput}`) : name;\n    });\n  }\n\n  get functions(): {[key: string]: ISignatureDef} {\n    return Object.keys(this._functions).reduce((map, key) => {\n      map[key] = this._functions[key].signature;\n      return map;\n    }, {} as {[key: string]: ISignatureDef});\n  }\n\n  /**\n   *\n   * @param graph Graph the model or function graph to be executed.\n   * @param parent When building function exector you need to set the parent\n   * executor. Since the weights and function executor maps are set at parant\n   * level, that function executor can access the function maps and weight maps\n   * through the parent.\n   */\n  constructor(private graph: Graph, private parent?: GraphExecutor) {\n    this._outputs = graph.outputs;\n    this._inputs = graph.inputs;\n    this._initNodes = graph.initNodes;\n    this._signature = graph.signature;\n    this._functions = graph.functions;\n    // create sub-graph executors\n    if (graph.functions != null) {\n      Object.keys(graph.functions).forEach(name => {\n        this._functionExecutorMap[name] =\n            new GraphExecutor(graph.functions[name], this);\n      });\n    }\n  }\n\n  private getCompilationKey(inputs: Node[], outputs: Node[]): string {\n    const sortedInputs = inputs.map(node => node.name).sort();\n    const sortedOutputs = outputs.map(node => node.name).sort();\n    return sortedInputs.join(this.SEPERATOR) + '--' +\n        sortedOutputs.join(this.SEPERATOR);\n  }\n\n  /**\n   * Compiles the inference graph and returns the minimal set of nodes that are\n   * required for execution, in the correct execution order.\n   */\n  private compile(inputs: NamedTensorMap, outputs: Node[]): Node[] {\n    const executionInfo =\n        getExecutionSubgraph(inputs, outputs, this.weightMap, this._initNodes);\n    const {missingInputs, dynamicNode, syncInputs} = executionInfo;\n    if (dynamicNode != null) {\n      throw new Error(\n          `This execution contains the node '${dynamicNode.name}', which has ` +\n          `the dynamic op '${dynamicNode.op}'. Please use ` +\n          `model.executeAsync() instead. Alternatively, to avoid the ` +\n          `dynamic ops, specify the inputs [${syncInputs}]`);\n    }\n\n    if (missingInputs.length > 0) {\n      const outNames = outputs.map(n => n.name);\n      const inNames = Object.keys(inputs);\n      throw new Error(\n          `Cannot compute the outputs [${outNames}] from the provided inputs ` +\n          `[${inNames}]. Missing the following inputs: [${missingInputs}]`);\n    }\n\n    return getNodesInTopologicalOrder(\n        this.graph, this.weightMap, executionInfo);\n  }\n\n  private cloneAndKeepTensor(tensor: Tensor) {\n    if (tensor == null) {\n      return null;\n    }\n    const clone = tensor.clone();\n    // Keep the clone because`model.execute()` may be called within\n    // a `tidy()`, but the user may inspect these tensors after the\n    // tidy.\n    keep(clone);\n    return clone;\n  }\n\n  private cloneTensorList(tensors: Tensor[]) {\n    if (!tensors) {\n      return null;\n    }\n    const clonedTensor = tensors.map(tensor => {\n      return this.cloneAndKeepTensor(tensor);\n    });\n    return clonedTensor;\n  }\n\n  private cloneTensorMap(tensorsMap: NamedTensorsMap): NamedTensorsMap {\n    return Object.fromEntries(\n        Object.entries(tensorsMap).map(([name, tensorsList]) => {\n          return [name, this.cloneTensorList(tensorsList)];\n        }));\n  }\n\n  /**\n   * Executes the inference for given input tensors.\n   * @param inputs Tensor map for the model inputs, keyed by the input node\n   * names.\n   * @param outputs Optional. output node name from the Tensorflow model, if\n   * no outputs are specified, the default outputs of the model would be used.\n   * You can inspect intermediate nodes of the model by adding them to the\n   * outputs array.\n   */\n  execute(inputs: NamedTensorMap, outputs?: string[]): Tensor[] {\n    // Dispose any tensors from a prior run to avoid leaking them.\n    this.disposeIntermediateTensors();\n    inputs = this.mapInputs(inputs);\n    const names = Object.keys(inputs).sort();\n    this.checkInputs(inputs);\n    this.checkInputShapeAndType(inputs);\n    outputs = this.mapOutputs(outputs);\n    this.checkOutputs(outputs);\n    const inputNodes =\n        names.map(name => this.graph.nodes[parseNodeName(name)[0]]);\n    const outputNodeNames = outputs.map(name => parseNodeName(name)[0]);\n    let outputNodes = outputNodeNames.map(name => this.graph.nodes[name]);\n    // If no outputs are specified, then use the default outputs of the model.\n    if (outputNodes.length === 0) {\n      outputNodes = this._outputs;\n    }\n\n    const compilationKey = this.getCompilationKey(inputNodes, outputNodes);\n\n    // Do nothing if the compiled graph cache contains the input.\n    let orderedNodes = this.compiledMap.get(compilationKey);\n    if (orderedNodes == null) {\n      orderedNodes = this.compile(inputs, outputNodes);\n      this.compiledMap.set(compilationKey, orderedNodes);\n    }\n\n    // Keep tensors if KEEP_INTERMEDIATE_TENSORS is on.\n    try {\n      this.keepIntermediateTensors = env().getBool('KEEP_INTERMEDIATE_TENSORS');\n    } catch (e) {\n      this.keepIntermediateTensors = false;\n      console.warn(e.message);\n    }\n    const tensorArrayMap: TensorArrayMap = {};\n    const tensorListMap: TensorListMap = {};\n\n    return tidy(() => {\n      const context = new ExecutionContext(\n          this.weightMap, tensorArrayMap, tensorListMap,\n          this.functionExecutorMap);\n      const tensorsMap: NamedTensorsMap = {...this.weightMap};\n      if (this.keepIntermediateTensors) {\n        this.clonedTensorsMap = this.cloneTensorMap(this.weightMap);\n      }\n\n      Object.keys(inputs).forEach(name => {\n        const [nodeName, index] = parseNodeName(name);\n        const tensors: Tensor[] = [];\n        tensors[index] = inputs[name];\n        tensorsMap[nodeName] = tensors;\n        if (this.keepIntermediateTensors) {\n          this.clonedTensorsMap[nodeName] = this.cloneTensorList(tensors);\n        }\n      });\n\n      const tensorsToKeep = this.getFrozenTensorIds(tensorsMap);\n      const intermediateTensorConsumerCount: {[key: number]: number} = {};\n      for (let i = 0; i < orderedNodes.length; i++) {\n        const node = orderedNodes[i];\n        if (!tensorsMap[node.name]) {\n          const tensors =\n              executeOp(node, tensorsMap, context, this._resourceManager) as\n              Tensor[];\n          if (util.isPromise(tensors)) {\n            throw new Error(\n                `The execution of the op '${node.op}' returned a promise. ` +\n                `Please use model.executeAsync() instead.`);\n          }\n          tensorsMap[node.name] = tensors;\n          if (this.keepIntermediateTensors) {\n            this.clonedTensorsMap[node.name] = this.cloneTensorList(tensors);\n          }\n          this.checkTensorForDisposal(\n              node.name, node, tensorsMap, context, tensorsToKeep,\n              outputNodeNames, intermediateTensorConsumerCount);\n        }\n      }\n\n      // dispose the context for the root executor\n      if (this.parent == null) {\n        context.dispose(tensorsToKeep);\n      }\n\n      return outputs.map(name => getTensor(name, tensorsMap, context));\n    });\n  }\n\n  private getFrozenTensorIds(tensorMap: NamedTensorsMap): Set<number> {\n    const ids = [].concat.apply(\n        [],\n        Object.keys(tensorMap)\n            .map(key => tensorMap[key])\n            .map(tensors => tensors.map(tensor => tensor.id)));\n    return new Set(ids);\n  }\n\n  private checkTensorForDisposal(\n      nodeName: string, node: Node, tensorMap: NamedTensorsMap,\n      context: ExecutionContext, tensorsToKeep: Set<number>,\n      outputNames: string[],\n      intermediateTensorConsumerCount: {[key: string]: number}) {\n    // Skip output nodes and any control flow nodes, since its dependency is\n    // tricky to track correctly.\n    if (node.category === 'control' || outputNames.indexOf(nodeName) !== -1) {\n      return;\n    }\n\n    tensorMap[nodeName].forEach(tensor => {\n      if (tensor != null) {\n        intermediateTensorConsumerCount[tensor.id] =\n            (intermediateTensorConsumerCount[tensor.id] || 0) +\n            node.children.length;\n      }\n    });\n    node.inputs.forEach(input => {\n      // Skip any control flow nodes, since its dependency is tricky to track\n      // correctly.\n      if (input.category !== 'control') {\n        const tensors =\n            getTensorsForCurrentContenxt(input.name, tensorMap, context);\n        if (tensors != null) {\n          tensors.forEach(tensor => {\n            if (tensor && !tensor.kept && !tensorsToKeep.has(tensor.id)) {\n              const count = intermediateTensorConsumerCount[tensor.id];\n              if (count === 1) {\n                tensor.dispose();\n                delete intermediateTensorConsumerCount[tensor.id];\n              } else if (count != null) {\n                // only intermediate nodes has count set, inputs and weights\n                // are not.\n                intermediateTensorConsumerCount[tensor.id]--;\n              }\n            }\n          });\n        }\n      }\n    });\n  }\n\n  /**\n   * Executes the inference for given input tensors in Async fashion.\n   * @param inputs Tensor map for the model inputs, keyed by the input node\n   * names.\n   * @param outputs output node name from the Tensorflow model, if no outputs\n   * are specified, the default outputs of the model would be used. You can\n   * inspect intermediate nodes of the model by adding them to the outputs\n   * array.\n   */\n  async executeAsync(inputs: NamedTensorMap, outputs?: string[]):\n      Promise<Tensor[]> {\n    return this._executeAsync(inputs, outputs);\n  }\n\n  disposeIntermediateTensors() {\n    if (!this.clonedTensorsMap) {\n      return;\n    }\n    Object.values(this.clonedTensorsMap).forEach(tensorsList => {\n      for (const tensor of tensorsList) {\n        if (tensor && !tensor.isDisposed) {\n          tensor.dispose();\n        }\n      }\n    });\n\n    this.clonedTensorsMap = null;\n  }\n\n  getIntermediateTensors(): NamedTensorsMap {\n    return this.clonedTensorsMap;\n  }\n\n  /**\n   * Executes the inference for given input tensors in Async fashion.\n   * @param inputs Tensor map for the model inputs, keyed by the input node\n   * names.\n   * @param outputs Optional. output node name from the Tensorflow model,\n   * if no outputs are specified, the default outputs of the model would be\n   * used. You can inspect intermediate nodes of the model by adding them to\n   * the outputs array.\n   * @param isFunctionExecution Optional. Flag for executing a function.\n   * @param tensorArrayMap Optional, global TensorArray map by id. Used for\n   * function execution.\n   * @param tensorArrayMap Optinal global TensorList map by id. Used for\n   * function execution.\n   */\n  private async _executeAsync(\n      inputs: NamedTensorMap, outputs?: string[], isFunctionExecution = false,\n      tensorArrayMap: TensorArrayMap = {},\n      tensorListMap: TensorListMap = {}): Promise<Tensor[]> {\n    // Dispose any tensors from a prior run to avoid leaking them.\n    this.disposeIntermediateTensors();\n    if (!isFunctionExecution) {\n      inputs = this.mapInputs(inputs);\n      this.checkInputs(inputs);\n      this.checkInputShapeAndType(inputs);\n      outputs = this.mapOutputs(outputs);\n      this.checkOutputs(outputs);\n    }\n\n    // Keep tensors if KEEP_INTERMEDIATE_TENSORS is on.\n    try {\n      this.keepIntermediateTensors = env().getBool('KEEP_INTERMEDIATE_TENSORS');\n    } catch (e) {\n      this.keepIntermediateTensors = false;\n      console.warn(e.message);\n    }\n\n    const context = new ExecutionContext(\n        this.weightMap, tensorArrayMap, tensorListMap,\n        this.functionExecutorMap);\n\n    if (this.keepIntermediateTensors) {\n      this.clonedTensorsMap = this.cloneTensorMap(this.weightMap);\n    }\n\n    // Graph with control flow op requires runtime evaluation of the execution\n    // order, while without control flow the execution order is pre-determined\n    // in the compile method.\n    const tensorsMap = await this.executeWithControlFlow(\n        inputs, context, outputs, isFunctionExecution);\n    const results = outputs.map(name => getTensor(name, tensorsMap, context));\n\n    // dispose all the intermediate tensors\n    const outputIds = results.map(t => t.id);\n    const inputIds = Object.keys(inputs).map(name => inputs[name].id);\n    const keepIds =\n        new Set<number>([...outputIds, ...inputIds, ...this.weightIds]);\n\n    Object.values(tensorsMap).forEach(tensorsList => {\n      tensorsList.forEach(tensor => {\n        if (tensor && !tensor.isDisposed && !keepIds.has(tensor.id)) {\n          tensor.dispose();\n        }\n      });\n    });\n\n    // dispose the context for the root executor\n    if (this.parent == null) {\n      context.dispose(keepIds);\n    }\n\n    return results;\n  }\n\n  async executeFunctionAsync(\n      inputs: Tensor[], tensorArrayMap: TensorArrayMap,\n      tensorListMap: TensorListMap): Promise<Tensor[]> {\n    const mappedInputs = inputs.reduce((map, tensor, index) => {\n      map[this.inputs[index].name] = tensor;\n      return map;\n    }, {} as NamedTensorMap);\n\n    return this._executeAsync(\n        mappedInputs, this.outputNodes, true, tensorArrayMap, tensorListMap);\n  }\n\n  /**\n   * When there are control flow nodes in the graph, the graph execution use\n   * ExecutionContext to keep track of the frames and loop iterators.\n   * @param inputs placeholder tensors for the graph.\n   * @param context the execution context object for current execution.\n   * @param outputNames Optional. output node name from the Tensorflow model,\n   * if no outputs are specified, the default outputs of the model would be\n   * used. You can inspect intermediate nodes of the model by adding them to\n   * the outputs array.\n   * @param isFunctionExecution Flag for executing a function.\n   */\n  private async executeWithControlFlow(\n      inputs: NamedTensorMap, context: ExecutionContext, outputNames?: string[],\n      isFunctionExecution?: boolean): Promise<NamedTensorsMap> {\n    const names = Object.keys(inputs);\n    const inputNodes =\n        names.map(name => this.graph.nodes[parseNodeName(name)[0]]);\n    const outputNodeNames = outputNames.map(name => parseNodeName(name)[0]);\n    let outputNodes = outputNodeNames.map(name => this.graph.nodes[name]);\n\n    // If no outputs are specified, then use the default outputs of the model.\n    if (outputNodes.length === 0) {\n      outputNodes = this._outputs;\n    }\n\n    const {usedNodes, missingInputs, dynamicNode, syncInputs} =\n        getExecutionSubgraph(\n            inputs, outputNodes, this.weightMap, this._initNodes);\n\n    // First nodes to execute include inputNodes, weights, and initNodes.\n    const stack: NodeWithContexts[] = [\n      ...inputNodes, ...this.graph.weights, ...(this._initNodes || [])\n    ].map(node => {\n      return {node, contexts: context.currentContext};\n    });\n    const tensorsMap: NamedTensorsMap = {...this.weightMap};\n    Object.keys(inputs).forEach(name => {\n      const [nodeName, index] = parseNodeName(name);\n      const tensors: Tensor[] = [];\n      tensors[index] = inputs[name];\n      tensorsMap[nodeName] = tensors;\n    });\n    const intermediateTensorConsumerCount: {[key: number]: number} = {};\n    const tensorsToKeep = this.getFrozenTensorIds(tensorsMap);\n    const added: {[key: string]: boolean} = {};\n    while (stack.length > 0) {\n      const promises = this.processStack(\n          inputNodes, stack, context, tensorsMap, added, tensorsToKeep,\n          outputNodeNames, intermediateTensorConsumerCount, usedNodes);\n      await Promise.all(promises);\n    }\n    if (dynamicNode == null && !isFunctionExecution) {\n      console.warn(\n          `This model execution did not contain any nodes with control flow ` +\n          `or dynamic output shapes. You can use model.execute() instead.`);\n    }\n    const missingOutputs =\n        outputNodes\n            .filter(\n                node => !isControlFlow(node) &&\n                    !getTensor(node.name, tensorsMap, context))\n            .map(node => node.name);\n    if (missingOutputs.length > 0) {\n      let alternativeMsg = '';\n      if (dynamicNode != null) {\n        alternativeMsg =\n            `Alternatively, to avoid the dynamic ops, use model.execute() ` +\n            `and specify the inputs [${syncInputs}]`;\n      }\n      throw new Error(\n          `Cannot compute the outputs [${missingOutputs}] from the provided ` +\n          `inputs [${names}]. Consider providing the following inputs: ` +\n          `[${missingInputs}]. ${alternativeMsg}`);\n    }\n    return tensorsMap;\n  }\n\n  private processStack(\n      inputNodes: Node[], stack: NodeWithContexts[], context: ExecutionContext,\n      tensorMap: NamedTensorsMap, added: {[key: string]: boolean},\n      tensorsToKeep: Set<number>, outputNames: string[],\n      intermediateTensorConsumerCount: {[key: number]: number},\n      usedNodes: Set<string>) {\n    const promises: Array<Promise<Tensor[]>> = [];\n    while (stack.length > 0) {\n      const item = stack.pop();\n      context.currentContext = item.contexts;\n      let nodeName = '';\n      // The tensor of the Enter op with isConstant set should be set\n      // in the parent scope, so it will be available as constant for the\n      // whole loop.\n      if (item.node.op === 'Enter' &&\n          getParamValue('isConstant', item.node, tensorMap, context)) {\n        [nodeName] = getNodeNameAndIndex(item.node.name, context);\n      }\n\n      // only process nodes that are not in the tensorMap yet, this include\n      // inputNodes and internal initNodes.\n      if (tensorMap[item.node.name] == null) {\n        const tensors =\n            executeOp(item.node, tensorMap, context, this._resourceManager);\n        if (!nodeName) {\n          [nodeName] = getNodeNameAndIndex(item.node.name, context);\n        }\n        const currentContext = context.currentContext;\n        if (util.isPromise(tensors)) {\n          promises.push(tensors.then(t => {\n            tensorMap[nodeName] = t;\n            if (this.keepIntermediateTensors) {\n              this.clonedTensorsMap[nodeName] = this.cloneTensorList(t);\n            }\n            context.currentContext = currentContext;\n            this.checkTensorForDisposal(\n                nodeName, item.node, tensorMap, context, tensorsToKeep,\n                outputNames, intermediateTensorConsumerCount);\n            this.processChildNodes(\n                item.node, stack, context, tensorMap, added, usedNodes);\n            return t;\n          }));\n        } else {\n          tensorMap[nodeName] = tensors;\n          if (this.keepIntermediateTensors) {\n            this.clonedTensorsMap[nodeName] = this.cloneTensorList(tensors);\n          }\n          this.checkTensorForDisposal(\n              nodeName, item.node, tensorMap, context, tensorsToKeep,\n              outputNames, intermediateTensorConsumerCount);\n          this.processChildNodes(\n              item.node, stack, context, tensorMap, added, usedNodes);\n        }\n      } else {\n        this.processChildNodes(\n            item.node, stack, context, tensorMap, added, usedNodes);\n      }\n    }\n    return promises;\n  }\n\n  private processChildNodes(\n      node: Node, stack: NodeWithContexts[], context: ExecutionContext,\n      tensorMap: NamedTensorsMap, added: {[key: string]: boolean},\n      usedNodes: Set<string>) {\n    node.children.forEach((childNode) => {\n      const [nodeName, ] = getNodeNameAndIndex(childNode.name, context);\n      if (added[nodeName] || !usedNodes.has(childNode.name)) {\n        return;\n      }\n      // Merge op can be pushed if any of its inputs has value.\n      if (childNode.op === 'Merge') {\n        if (childNode.inputNames.some(name => {\n              return !!getTensor(name, tensorMap, context);\n            })) {\n          added[nodeName] = true;\n          stack.push({contexts: context.currentContext, node: childNode});\n        }\n      } else  // Otherwise all inputs must to have value.\n          if (childNode.inputNames.every(name => {\n                return !!getTensor(name, tensorMap, context);\n              })) {\n        added[nodeName] = true;\n        stack.push({contexts: context.currentContext, node: childNode});\n      }\n    });\n  }\n\n  /**\n   * Releases the memory used by the weight tensors.\n   */\n  dispose() {\n    Object.keys(this.weightMap)\n        .forEach(\n            key => this.weightMap[key].forEach(tensor => tensor.dispose()));\n  }\n\n  private checkInputShapeAndType(inputs: NamedTensorMap) {\n    Object.keys(inputs).forEach(name => {\n      const input = inputs[name];\n      const [nodeName, ] = parseNodeName(name);\n      const node = this.graph.nodes[nodeName];\n      if (node.attrParams['shape'] && node.attrParams['shape'].value) {\n        const shape = node.attrParams['shape'].value as number[];\n        const match = shape.length === input.shape.length &&\n            input.shape.every(\n                (dim, index) => shape[index] === -1 || shape[index] === dim);\n        util.assert(\n            match,\n            () => `The shape of dict['${node.name}'] provided in ` +\n                `model.execute(dict) must be [${shape}], but was ` +\n                `[${input.shape}]`);\n      }\n      if (node.attrParams['dtype'] && node.attrParams['dtype'].value) {\n        util.assert(\n            input.dtype === node.attrParams['dtype'].value as string,\n            () => `The dtype of dict['${node.name}'] provided in ` +\n                `model.execute(dict) must be ` +\n                `${node.attrParams['dtype'].value}, but was ${input.dtype}`);\n      }\n    });\n  }\n\n  private mapInputs(inputs: NamedTensorMap) {\n    const result: NamedTensorMap = {};\n    for (const inputName in inputs) {\n      const tensor = this._signature ?.inputs ?.[inputName];\n      if (tensor != null) {\n        result[tensor.name] = inputs[inputName];\n      } else {\n        result[inputName] = inputs[inputName];\n      }\n    }\n    return result;\n  }\n\n  private checkInputs(inputs: NamedTensorMap) {\n    const notInGraph = Object.keys(inputs).filter(name => {\n      const [nodeName] = parseNodeName(name);\n      return this.graph.nodes[nodeName] == null;\n    });\n    if (notInGraph.length > 0) {\n      throw new Error(\n          `The dict provided in model.execute(dict) has ` +\n          `keys: [${notInGraph}] that are not part of graph`);\n    }\n  }\n\n  private mapOutputs(outputs: string[]) {\n    return outputs.map(name => {\n      const tensor = this._signature ?.outputs ?.[name];\n      if (tensor != null) {\n        return tensor.name;\n      }\n      return name;\n    }, {});\n  }\n\n  private checkOutputs(outputs: string[]): void {\n    outputs.forEach(name => {\n      const [normalizedName] = parseNodeName(name);\n      if (!this.graph.nodes[normalizedName]) {\n        throw new Error(`The output '${name}' is not found in the graph`);\n      }\n    });\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {HashTableMap, NamedTensorMap} from '../data/types';\nimport {HashTable} from './hash_table';\n\n/**\n * Contains global resources of a model.\n */\nexport class ResourceManager {\n  constructor(\n      readonly hashTableNameToHandle: NamedTensorMap = {},\n      readonly hashTableMap: HashTableMap = {}) {}\n\n  /**\n   * Register a `HashTable` in the resource manager.\n   *\n   * The `HashTable` can be retrieved by `resourceManager.getHashTableById`,\n   * where id is the table handle tensor's id.\n   *\n   * @param name Op node name that creates the `HashTable`.\n   * @param hashTable The `HashTable` to be added to resource manager.\n   */\n  addHashTable(name: string, hashTable: HashTable) {\n    this.hashTableNameToHandle[name] = hashTable.handle;\n    this.hashTableMap[hashTable.id] = hashTable;\n  }\n\n  /**\n   * Get the table handle by node name.\n   * @param name Op node name that creates the `HashTable`. This name is also\n   *     used in the inputs list of lookup and import `HashTable` ops.\n   */\n  getHashTableHandleByName(name: string) {\n    return this.hashTableNameToHandle[name];\n  }\n\n  /**\n   * Get the actual `HashTable` by its handle tensor's id.\n   * @param id The id of the handle tensor.\n   */\n  getHashTableById(id: number): HashTable {\n    return this.hashTableMap[id];\n  }\n\n  /**\n   * Dispose `ResourceManager`, including its hashTables and tensors in them.\n   */\n  dispose() {\n    for (const key in this.hashTableMap) {\n      this.hashTableMap[key].clearAndClose();\n      delete this.hashTableMap[key];\n    }\n\n    for (const name in this.hashTableNameToHandle) {\n      this.hashTableNameToHandle[name].dispose();\n      delete this.hashTableNameToHandle[name];\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {dispose, InferenceModel, io, ModelPredictConfig, NamedTensorMap, Tensor, util} from '@tensorflow/tfjs-core';\n\nimport * as tensorflow from '../data/compiled_api';\nimport {NamedTensorsMap, TensorInfo} from '../data/types';\nimport {OperationMapper} from '../operations/operation_mapper';\n\nimport {GraphExecutor} from './graph_executor';\nimport {ResourceManager} from './resource_manager';\n\nexport const TFHUB_SEARCH_PARAM = '?tfjs-format=file';\nexport const DEFAULT_MODEL_NAME = 'model.json';\ntype Url = string|io.IOHandler|io.IOHandlerSync;\ntype UrlIOHandler<T extends Url> = T extends string ? io.IOHandler : T;\n\n/**\n * A `tf.GraphModel` is a directed, acyclic graph built from a\n * SavedModel GraphDef and allows inference execution.\n *\n * A `tf.GraphModel` can only be created by loading from a model converted from\n * a [TensorFlow SavedModel](https://www.tensorflow.org/guide/saved_model) using\n * the command line converter tool and loaded via `tf.loadGraphModel`.\n *\n * @doc {heading: 'Models', subheading: 'Classes'}\n */\nexport class GraphModel<ModelURL extends Url = string | io.IOHandler> implements\n    InferenceModel {\n  private executor: GraphExecutor;\n  private version = 'n/a';\n  private handler: UrlIOHandler<ModelURL>;\n  private artifacts: io.ModelArtifacts;\n  private initializer: GraphExecutor;\n  private resourceIdToCapturedInput: {[key: number]: Tensor};\n  private resourceManager: ResourceManager;\n  private signature: tensorflow.ISignatureDef;\n  private initializerSignature: tensorflow.ISignatureDef;\n  private structuredOutputKeys: string[];\n  private readonly io: typeof io;\n\n  // Returns the version information for the tensorflow model GraphDef.\n  get modelVersion(): string {\n    return this.version;\n  }\n\n  get inputNodes(): string[] {\n    return this.executor.inputNodes;\n  }\n\n  get outputNodes(): string[] {\n    return this.executor.outputNodes;\n  }\n\n  get inputs(): TensorInfo[] {\n    return this.executor.inputs;\n  }\n\n  get outputs(): TensorInfo[] {\n    return this.executor.outputs;\n  }\n\n  get weights(): NamedTensorsMap {\n    return this.executor.weightMap;\n  }\n\n  get metadata(): {} {\n    return this.artifacts.userDefinedMetadata;\n  }\n\n  get modelSignature(): {} {\n    return this.signature;\n  }\n\n  get modelStructuredOutputKeys(): {} {\n    return this.structuredOutputKeys;\n  }\n\n  /**\n   * @param modelUrl url for the model, or an `io.IOHandler`.\n   * @param weightManifestUrl url for the weight file generated by\n   * scripts/convert.py script.\n   * @param requestOption options for Request, which allows to send credentials\n   * and custom headers.\n   * @param onProgress Optional, progress callback function, fired periodically\n   * before the load is completed.\n   */\n  constructor(\n      private modelUrl: ModelURL, private loadOptions: io.LoadOptions = {},\n      tfio = io) {\n    this.io = tfio;\n    if (loadOptions == null) {\n      this.loadOptions = {};\n    }\n    this.resourceManager = new ResourceManager();\n  }\n\n  private findIOHandler() {\n    type IOHandler = UrlIOHandler<ModelURL>;\n    const path = this.modelUrl;\n    if ((path as io.IOHandler).load != null) {\n      // Path is an IO Handler.\n      this.handler = path as IOHandler;\n    } else if (this.loadOptions.requestInit != null) {\n      this.handler = this.io.browserHTTPRequest(\n                         path as string, this.loadOptions) as IOHandler;\n    } else {\n      const handlers =\n          this.io.getLoadHandlers(path as string, this.loadOptions);\n      if (handlers.length === 0) {\n        // For backward compatibility: if no load handler can be found,\n        // assume it is a relative http path.\n        handlers.push(\n            this.io.browserHTTPRequest(path as string, this.loadOptions));\n      } else if (handlers.length > 1) {\n        throw new Error(\n            `Found more than one (${handlers.length}) load handlers for ` +\n            `URL '${[path]}'`);\n      }\n      this.handler = handlers[0] as IOHandler;\n    }\n  }\n\n  /**\n   * Loads the model and weight files, construct the in memory weight map and\n   * compile the inference graph.\n   */\n  load(): UrlIOHandler<ModelURL> extends io.IOHandlerSync? boolean:\n                                             Promise<boolean> {\n    type IOHandler = UrlIOHandler<ModelURL>;\n    this.findIOHandler();\n    if (this.handler.load == null) {\n      throw new Error(\n          'Cannot proceed with model loading because the IOHandler provided ' +\n          'does not have the `load` method implemented.');\n    }\n\n    type Result =\n        IOHandler extends io.IOHandlerSync ? boolean : Promise<boolean>;\n\n    const loadResult = this.handler.load() as ReturnType<IOHandler['load']>;\n    if (util.isPromise(loadResult)) {\n      return loadResult.then(artifacts => this.loadSync(artifacts)) as Result;\n    }\n\n    return this.loadSync(loadResult) as Result;\n  }\n\n  /**\n   * Synchronously construct the in memory weight map and\n   * compile the inference graph.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}\n   */\n  loadSync(artifacts: io.ModelArtifacts) {\n    this.artifacts = artifacts;\n    const graph = this.artifacts.modelTopology as tensorflow.IGraphDef;\n\n    let signature = this.artifacts.signature;\n    if (this.artifacts.userDefinedMetadata != null) {\n      const metadata = this.artifacts.userDefinedMetadata;\n      if (metadata.signature != null) {\n        signature = metadata.signature;\n      }\n\n      if (metadata.structuredOutputKeys != null) {\n        this.structuredOutputKeys = metadata.structuredOutputKeys as string[];\n      }\n    }\n    this.signature = signature;\n\n    this.version = `${graph.versions.producer}.${graph.versions.minConsumer}`;\n    const weightMap = this.io.decodeWeights(\n        this.artifacts.weightData, this.artifacts.weightSpecs);\n    this.executor = new GraphExecutor(\n        OperationMapper.Instance.transformGraph(graph, this.signature));\n    this.executor.weightMap = this.convertTensorMapToTensorsMap(weightMap);\n    // Attach a model-level resourceManager to each executor to share resources,\n    // such as `HashTable`.\n    this.executor.resourceManager = this.resourceManager;\n\n    if (artifacts.modelInitializer != null &&\n        (artifacts.modelInitializer as tensorflow.IGraphDef).node != null) {\n      const initializer =\n          OperationMapper.Instance.transformGraph(artifacts.modelInitializer);\n      this.initializer = new GraphExecutor(initializer);\n      this.initializer.weightMap = this.executor.weightMap;\n      // Attach a model-level resourceManager to the initializer, the\n      // hashTables created from when executing the initializer will be stored\n      // in the resourceManager.\n      this.initializer.resourceManager = this.resourceManager;\n      this.initializerSignature = artifacts.initializerSignature;\n    }\n\n    return true;\n  }\n\n  /**\n   * Save the configuration and/or weights of the GraphModel.\n   *\n   * An `IOHandler` is an object that has a `save` method of the proper\n   * signature defined. The `save` method manages the storing or\n   * transmission of serialized data (\"artifacts\") that represent the\n   * model's topology and weights onto or via a specific medium, such as\n   * file downloads, local storage, IndexedDB in the web browser and HTTP\n   * requests to a server. TensorFlow.js provides `IOHandler`\n   * implementations for a number of frequently used saving mediums, such as\n   * `tf.io.browserDownloads` and `tf.io.browserLocalStorage`. See `tf.io`\n   * for more details.\n   *\n   * This method also allows you to refer to certain types of `IOHandler`s\n   * as URL-like string shortcuts, such as 'localstorage://' and\n   * 'indexeddb://'.\n   *\n   * Example 1: Save `model`'s topology and weights to browser [local\n   * storage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage);\n   * then load it back.\n   *\n   * ```js\n   * const modelUrl =\n   *    'https://storage.googleapis.com/tfjs-models/savedmodel/mobilenet_v2_1.0_224/model.json';\n   * const model = await tf.loadGraphModel(modelUrl);\n   * const zeros = tf.zeros([1, 224, 224, 3]);\n   * model.predict(zeros).print();\n   *\n   * const saveResults = await model.save('localstorage://my-model-1');\n   *\n   * const loadedModel = await tf.loadGraphModel('localstorage://my-model-1');\n   * console.log('Prediction from loaded model:');\n   * model.predict(zeros).print();\n   * ```\n   *\n   * @param handlerOrURL An instance of `IOHandler` or a URL-like,\n   * scheme-based string shortcut for `IOHandler`.\n   * @param config Options for saving the model.\n   * @returns A `Promise` of `SaveResult`, which summarizes the result of\n   * the saving, such as byte sizes of the saved artifacts for the model's\n   *   topology and weight values.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}\n   */\n  async save(handlerOrURL: io.IOHandler|string, config?: io.SaveConfig):\n      Promise<io.SaveResult> {\n    if (typeof handlerOrURL === 'string') {\n      const handlers = this.io.getSaveHandlers(handlerOrURL);\n      if (handlers.length === 0) {\n        throw new Error(\n            `Cannot find any save handlers for URL '${handlerOrURL}'`);\n      } else if (handlers.length > 1) {\n        throw new Error(\n            `Found more than one (${handlers.length}) save handlers for ` +\n            `URL '${handlerOrURL}'`);\n      }\n      handlerOrURL = handlers[0];\n    }\n    if (handlerOrURL.save == null) {\n      throw new Error(\n          'GraphModel.save() cannot proceed because the IOHandler ' +\n          'provided does not have the `save` attribute defined.');\n    }\n\n    return handlerOrURL.save(this.artifacts);\n  }\n\n  private addStructuredOutputNames(outputTensors: Tensor|Tensor[]) {\n    if (this.structuredOutputKeys) {\n      const outputTensorsArray =\n          outputTensors instanceof Tensor ? [outputTensors] : outputTensors;\n      const outputTensorMap: NamedTensorMap = {};\n\n      outputTensorsArray.forEach(\n          (outputTensor, i) => outputTensorMap[this.structuredOutputKeys[i]] =\n              outputTensor);\n\n      return outputTensorMap;\n    }\n    return outputTensors;\n  }\n\n  /**\n   * Execute the inference for the input tensors.\n   *\n   * @param input The input tensors, when there is single input for the model,\n   * inputs param should be a `tf.Tensor`. For models with mutliple inputs,\n   * inputs params should be in either `tf.Tensor`[] if the input order is\n   * fixed, or otherwise NamedTensorMap format.\n   *\n   * For model with multiple inputs, we recommend you use NamedTensorMap as the\n   * input type, if you use `tf.Tensor`[], the order of the array needs to\n   * follow the\n   * order of inputNodes array. @see {@link GraphModel.inputNodes}\n   *\n   * You can also feed any intermediate nodes using the NamedTensorMap as the\n   * input type. For example, given the graph\n   *    InputNode => Intermediate => OutputNode,\n   * you can execute the subgraph Intermediate => OutputNode by calling\n   *    model.execute('IntermediateNode' : tf.tensor(...));\n   *\n   * This is useful for models that uses tf.dynamic_rnn, where the intermediate\n   * state needs to be fed manually.\n   *\n   * For batch inference execution, the tensors for each input need to be\n   * concatenated together. For example with mobilenet, the required input shape\n   * is [1, 244, 244, 3], which represents the [batch, height, width, channel].\n   * If we are provide a batched data of 100 images, the input tensor should be\n   * in the shape of [100, 244, 244, 3].\n   *\n   * @param config Prediction configuration for specifying the batch size.\n   * Currently the batch size option is ignored for graph model.\n   *\n   * @returns Inference result tensors. If the model is converted and it\n   * originally had structured_outputs in tensorflow, then a NamedTensorMap\n   * will be returned matching the structured_outputs. If no structured_outputs\n   * are present, the output will be single `tf.Tensor` if the model has single\n   * output node, otherwise Tensor[].\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  predict(inputs: Tensor|Tensor[]|NamedTensorMap, config?: ModelPredictConfig):\n      Tensor|Tensor[]|NamedTensorMap {\n    const outputTensors = this.execute(inputs, this.outputNodes);\n    return this.addStructuredOutputNames(outputTensors);\n  }\n\n  /**\n   * Execute the inference for the input tensors in async fashion, use this\n   * method when your model contains control flow ops.\n   *\n   * @param input The input tensors, when there is single input for the model,\n   * inputs param should be a `tf.Tensor`. For models with mutliple inputs,\n   * inputs params should be in either `tf.Tensor`[] if the input order is\n   * fixed, or otherwise NamedTensorMap format.\n   *\n   * For model with multiple inputs, we recommend you use NamedTensorMap as the\n   * input type, if you use `tf.Tensor`[], the order of the array needs to\n   * follow the\n   * order of inputNodes array. @see {@link GraphModel.inputNodes}\n   *\n   * You can also feed any intermediate nodes using the NamedTensorMap as the\n   * input type. For example, given the graph\n   *    InputNode => Intermediate => OutputNode,\n   * you can execute the subgraph Intermediate => OutputNode by calling\n   *    model.execute('IntermediateNode' : tf.tensor(...));\n   *\n   * This is useful for models that uses tf.dynamic_rnn, where the intermediate\n   * state needs to be fed manually.\n   *\n   * For batch inference execution, the tensors for each input need to be\n   * concatenated together. For example with mobilenet, the required input shape\n   * is [1, 244, 244, 3], which represents the [batch, height, width, channel].\n   * If we are provide a batched data of 100 images, the input tensor should be\n   * in the shape of [100, 244, 244, 3].\n   *\n   * @param config Prediction configuration for specifying the batch size.\n   * Currently the batch size option is ignored for graph model.\n   *\n   * @returns A Promise of inference result tensors. If the model is converted\n   * and it originally had structured_outputs in tensorflow, then a\n   * NamedTensorMap will be returned matching the structured_outputs. If no\n   * structured_outputs are present, the output will be single `tf.Tensor` if\n   * the model has single output node, otherwise Tensor[].\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  async predictAsync(\n      inputs: Tensor|Tensor[]|NamedTensorMap,\n      config?: ModelPredictConfig): Promise<Tensor|Tensor[]|NamedTensorMap> {\n    const outputTensors = await this.executeAsync(inputs, this.outputNodes);\n    return this.addStructuredOutputNames(outputTensors);\n  }\n\n  private normalizeInputs(inputs: Tensor|Tensor[]|\n                          NamedTensorMap): NamedTensorMap {\n    if (!(inputs instanceof Tensor) && !Array.isArray(inputs)) {\n      // The input is already a NamedTensorMap.\n      const signatureInputs = this.signature?.inputs;\n      if (signatureInputs != null) {\n        for (const input in signatureInputs) {\n          const tensor = signatureInputs[input];\n          if (tensor.resourceId != null) {\n            inputs[input] = this.resourceIdToCapturedInput[tensor.resourceId];\n          }\n        }\n      }\n      return inputs;\n    }\n    inputs = Array.isArray(inputs) ? inputs : [inputs];\n\n    const numCapturedInputs =\n        Object.keys(this.resourceIdToCapturedInput).length;\n    if (inputs.length + numCapturedInputs !== this.inputNodes.length) {\n      throw new Error(`Input tensor count mismatch, the graph model has ${\n          this.inputNodes.length -\n          numCapturedInputs} non-resource placeholders, while there are ${\n          inputs.length} input tensors provided.`);\n    }\n\n    let inputIndex = 0;\n    return this.inputNodes.reduce((map, inputName) => {\n      const resourceId = this.signature?.inputs?.[inputName]?.resourceId;\n      if (resourceId != null) {\n        map[inputName] = this.resourceIdToCapturedInput[resourceId];\n      } else {\n        map[inputName] = (inputs as Tensor[])[inputIndex++];\n      }\n      return map;\n    }, {} as NamedTensorMap);\n  }\n\n  private normalizeOutputs(outputs: string|string[]): string[] {\n    outputs = outputs || this.outputNodes;\n    return !Array.isArray(outputs) ? [outputs] : outputs;\n  }\n\n  private executeInitializerGraph() {\n    if (this.initializer == null) {\n      return [];\n    }\n    if (this.initializerSignature == null) {\n      return this.initializer.execute({}, []);\n    } else {\n      return this.initializer.execute(\n          {}, Object.keys(this.initializerSignature.outputs));\n    }\n  }\n\n  private async executeInitializerGraphAsync() {\n    if (this.initializer == null) {\n      return [];\n    }\n    if (this.initializerSignature == null) {\n      return this.initializer.executeAsync({}, []);\n    } else {\n      return this.initializer.executeAsync(\n          {}, Object.keys(this.initializerSignature.outputs));\n    }\n  }\n\n  private setResourceIdToCapturedInput(outputs: Tensor[]) {\n    this.resourceIdToCapturedInput = {};\n\n    if (this.initializerSignature) {\n      const signatureOutputs = this.initializerSignature.outputs;\n      const outputNames = Object.keys(signatureOutputs);\n      for (let i = 0; i < outputNames.length; i++) {\n        const outputName = outputNames[i];\n        const tensorInfo = signatureOutputs[outputName];\n        this.resourceIdToCapturedInput[tensorInfo.resourceId] = outputs[i];\n      }\n    }\n  }\n\n  /**\n   * Executes inference for the model for given input tensors.\n   * @param inputs tensor, tensor array or tensor map of the inputs for the\n   * model, keyed by the input node names.\n   * @param outputs output node name from the TensorFlow model, if no\n   * outputs are specified, the default outputs of the model would be used.\n   * You can inspect intermediate nodes of the model by adding them to the\n   * outputs array.\n   *\n   * @returns A single tensor if provided with a single output or no outputs\n   * are provided and there is only one default output, otherwise return a\n   * tensor array. The order of the tensor array is the same as the outputs\n   * if provided, otherwise the order of outputNodes attribute of the model.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  execute(inputs: Tensor|Tensor[]|NamedTensorMap, outputs?: string|string[]):\n      Tensor|Tensor[] {\n    if (this.resourceIdToCapturedInput == null) {\n      this.setResourceIdToCapturedInput(this.executeInitializerGraph());\n    }\n    inputs = this.normalizeInputs(inputs);\n    outputs = this.normalizeOutputs(outputs);\n    const result = this.executor.execute(inputs, outputs);\n    return result.length > 1 ? result : result[0];\n  }\n\n  /**\n   * Executes inference for the model for given input tensors in async\n   * fashion, use this method when your model contains control flow ops.\n   * @param inputs tensor, tensor array or tensor map of the inputs for the\n   * model, keyed by the input node names.\n   * @param outputs output node name from the TensorFlow model, if no outputs\n   * are specified, the default outputs of the model would be used. You can\n   * inspect intermediate nodes of the model by adding them to the outputs\n   * array.\n   *\n   * @returns A Promise of single tensor if provided with a single output or\n   * no outputs are provided and there is only one default output, otherwise\n   * return a tensor map.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  async executeAsync(\n      inputs: Tensor|Tensor[]|NamedTensorMap,\n      outputs?: string|string[]): Promise<Tensor|Tensor[]> {\n    if (this.resourceIdToCapturedInput == null) {\n      this.setResourceIdToCapturedInput(\n          await this.executeInitializerGraphAsync());\n    }\n    inputs = this.normalizeInputs(inputs);\n    outputs = this.normalizeOutputs(outputs);\n    const result = await this.executor.executeAsync(inputs, outputs);\n    return result.length > 1 ? result : result[0];\n  }\n\n  /**\n   * Get intermediate tensors for model debugging mode (flag\n   * KEEP_INTERMEDIATE_TENSORS is true).\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  getIntermediateTensors(): NamedTensorsMap {\n    return this.executor.getIntermediateTensors();\n  }\n\n  /**\n   * Dispose intermediate tensors for model debugging mode (flag\n   * KEEP_INTERMEDIATE_TENSORS is true).\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  disposeIntermediateTensors() {\n    this.executor.disposeIntermediateTensors();\n  }\n\n  private convertTensorMapToTensorsMap(map: NamedTensorMap): NamedTensorsMap {\n    return Object.keys(map).reduce((newMap: NamedTensorsMap, key) => {\n      newMap[key] = [map[key]];\n      return newMap;\n    }, {});\n  }\n\n  /**\n   * Releases the memory used by the weight tensors and resourceManager.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  dispose() {\n    this.executor.dispose();\n\n    if (this.initializer) {\n      this.initializer.dispose();\n      if (this.resourceIdToCapturedInput) {\n        dispose(this.resourceIdToCapturedInput);\n      }\n    }\n\n    this.resourceManager.dispose();\n  }\n}\n\n/**\n * Load a graph model given a URL to the model definition.\n *\n * Example of loading MobileNetV2 from a URL and making a prediction with a\n * zeros input:\n *\n * ```js\n * const modelUrl =\n *    'https://storage.googleapis.com/tfjs-models/savedmodel/mobilenet_v2_1.0_224/model.json';\n * const model = await tf.loadGraphModel(modelUrl);\n * const zeros = tf.zeros([1, 224, 224, 3]);\n * model.predict(zeros).print();\n * ```\n *\n * Example of loading MobileNetV2 from a TF Hub URL and making a prediction\n * with a zeros input:\n *\n * ```js\n * const modelUrl =\n *    'https://tfhub.dev/google/imagenet/mobilenet_v2_140_224/classification/2';\n * const model = await tf.loadGraphModel(modelUrl, {fromTFHub: true});\n * const zeros = tf.zeros([1, 224, 224, 3]);\n * model.predict(zeros).print();\n * ```\n * @param modelUrl The url or an `io.IOHandler` that loads the model.\n * @param options Options for the HTTP request, which allows to send\n *     credentials\n *    and custom headers.\n *\n * @doc {heading: 'Models', subheading: 'Loading'}\n */\nexport async function loadGraphModel(\n    modelUrl: string|io.IOHandler, options: io.LoadOptions = {},\n    tfio = io): Promise<GraphModel> {\n  if (modelUrl == null) {\n    throw new Error(\n        'modelUrl in loadGraphModel() cannot be null. Please provide a url ' +\n        'or an IOHandler that loads the model');\n  }\n  if (options == null) {\n    options = {};\n  }\n\n  if (options.fromTFHub && typeof modelUrl === 'string') {\n    modelUrl = getTFHubUrl(modelUrl);\n  }\n  const model = new GraphModel(modelUrl, options, tfio);\n  await model.load();\n  return model;\n}\n\n/**\n * Load a graph model given a synchronous IO handler with a 'load' method.\n *\n * @param modelSource The `io.IOHandlerSync` that loads the model, or the\n *     `io.ModelArtifacts` that encode the model, or a tuple of\n *     `[io.ModelJSON, ArrayBuffer]` of which the first element encodes the\n *      model and the second contains the weights.\n *\n * @doc {heading: 'Models', subheading: 'Loading'}\n */\nexport function loadGraphModelSync(\n    modelSource: io.IOHandlerSync|\n    io.ModelArtifacts|[io.ModelJSON, /* Weights */ ArrayBuffer]):\n    GraphModel<io.IOHandlerSync> {\n  if (modelSource == null) {\n    throw new Error(\n        'modelUrl in loadGraphModelSync() cannot be null. Please provide ' +\n        'model artifacts or an IOHandler that loads the model');\n  }\n\n  let ioHandler: io.IOHandlerSync;\n  if (modelSource instanceof Array) {\n    const [modelJSON, weights] = modelSource;\n    if (!modelJSON) {\n      throw new Error('modelJSON must be the first element of the array');\n    }\n    if (!weights || !(weights instanceof ArrayBuffer)) {\n      throw new Error(\n          'An ArrayBuffer of weights must be the second element of' +\n          ' the array');\n    }\n    if (!('modelTopology' in modelJSON)) {\n      throw new Error('Model JSON is missing \\'modelTopology\\'');\n    }\n    if (!('weightsManifest' in modelJSON)) {\n      throw new Error('Model JSON is missing \\'weightsManifest\\'');\n    }\n\n    const weightSpecs = io.getWeightSpecs(modelJSON.weightsManifest);\n    const modelArtifacts =\n        io.getModelArtifactsForJSONSync(modelJSON, weightSpecs, weights);\n    ioHandler = io.fromMemorySync(modelArtifacts);\n  } else if ('load' in modelSource) {\n    // Then modelSource is already an IOHandlerSync.\n    ioHandler = modelSource;\n  } else if (\n      'modelTopology' in modelSource && 'weightSpecs' in modelSource &&\n      'weightData' in modelSource) {\n    // modelSource is of type ModelArtifacts.\n    ioHandler = io.fromMemorySync(modelSource);\n  } else {\n    throw new Error('Unknown model format');\n  }\n\n  const model = new GraphModel(ioHandler);\n  model.load();\n  return model;\n}\n\nfunction getTFHubUrl(modelUrl: string): string {\n  if (!modelUrl.endsWith('/')) {\n    modelUrl = (modelUrl) + '/';\n  }\n  return `${modelUrl}${DEFAULT_MODEL_NAME}${TFHUB_SEARCH_PARAM}`;\n}\n","/**\n    * @license\n    * Copyright 2021 Google LLC. All Rights Reserved.\n    * Licensed under the Apache License, Version 2.0 (the \"License\");\n    * you may not use this file except in compliance with the License.\n    * You may obtain a copy of the License at\n    *\n    * http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software\n    * distributed under the License is distributed on an \"AS IS\" BASIS,\n    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    * See the License for the specific language governing permissions and\n    * limitations under the License.\n    * =============================================================================\n    */\nimport{loadGraphModel as t}from\"@tensorflow/tfjs-converter\";import{image as n,tensor2d as e,tensor1d as r,tidy as o,slice as i,add as s,div as a,mul as u,sub as h,concat2d as d,reshape as c,getBackend as f,env as l,squeeze as p,sigmoid as m,util as v,Tensor as P,browser as g,expandDims as b,cast as k}from\"@tensorflow/tfjs-core\";function y(t,n,e,r){return new(e||(e=Promise))((function(o,i){function s(t){try{u(r.next(t))}catch(t){i(t)}}function a(t){try{u(r.throw(t))}catch(t){i(t)}}function u(t){var n;t.done?o(t.value):(n=t.value,n instanceof e?n:new e((function(t){t(n)}))).then(s,a)}u((r=r.apply(t,n||[])).next())}))}function x(t,n){var e,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},\"function\"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(e)throw new TypeError(\"Generator is already executing.\");for(;s;)try{if(e=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=s.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=n.call(t,s)}catch(t){i=[6,t],r=0}finally{e=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}}function w(t){return[Math.abs(t.endPoint[0]-t.startPoint[0]),Math.abs(t.endPoint[1]-t.startPoint[1])]}function L(t){return[t.startPoint[0]+(t.endPoint[0]-t.startPoint[0])/2,t.startPoint[1]+(t.endPoint[1]-t.startPoint[1])/2]}function B(t,n){void 0===n&&(n=1.5);var e=L(t),r=w(t),o=[n*r[0]/2,n*r[1]/2];return{startPoint:[e[0]-o[0],e[1]-o[1]],endPoint:[e[0]+o[0],e[1]+o[1]],palmLandmarks:t.palmLandmarks}}function I(t){var n=L(t),e=w(t),r=Math.max.apply(Math,e)/2;return{startPoint:[n[0]-r,n[1]-r],endPoint:[n[0]+r,n[1]+r],palmLandmarks:t.palmLandmarks}}function C(t,n){var e=[t.endPoint[0]-t.startPoint[0],t.endPoint[1]-t.startPoint[1]],r=[e[0]*n[0],e[1]*n[1]];return{startPoint:[t.startPoint[0]+r[0],t.startPoint[1]+r[1]],endPoint:[t.endPoint[0]+r[0],t.endPoint[1]+r[1]],palmLandmarks:t.palmLandmarks}}var H=function(){function t(t,n,o,i,s,a){this.model=t,this.width=n,this.height=o,this.iouThreshold=s,this.scoreThreshold=a,this.anchors=i.map((function(t){return[t.x_center,t.y_center]})),this.anchorsTensor=e(this.anchors),this.inputSizeTensor=r([n,o]),this.doubleInputSizeTensor=r([2*n,2*o])}return t.prototype.normalizeBoxes=function(t){var n=this;return o((function(){var e=i(t,[0,0],[-1,2]),r=i(t,[0,2],[-1,2]),o=s(a(e,n.inputSizeTensor),n.anchorsTensor),c=a(r,n.doubleInputSizeTensor),f=u(h(o,c),n.inputSizeTensor),l=u(s(o,c),n.inputSizeTensor);return d([f,l],1)}))},t.prototype.normalizeLandmarks=function(t,n){var e=this;return o((function(){var r=s(a(c(t,[-1,7,2]),e.inputSizeTensor),e.anchors[n]);return u(r,e.inputSizeTensor)}))},t.prototype.getBoundingBoxes=function(t){return y(this,void 0,void 0,(function(){var e,r,s,a,d,v,P,g,b,k,y,w,L,B,I,C=this;return x(this,(function(x){switch(x.label){case 0:return e=o((function(){return u(h(t,.5),2)})),\"webgl\"===f()?(s=l().get(\"WEBGL_PACK_DEPTHWISECONV\"),l().set(\"WEBGL_PACK_DEPTHWISECONV\",!0),r=this.model.predict(e),l().set(\"WEBGL_PACK_DEPTHWISECONV\",s)):r=this.model.predict(e),a=p(r),d=o((function(){return p(m(i(a,[0,0],[-1,1])))})),v=i(a,[0,1],[-1,4]),P=this.normalizeBoxes(v),g=console.warn,console.warn=function(){},b=n.nonMaxSuppression(P,d,1,this.iouThreshold,this.scoreThreshold),console.warn=g,[4,b.array()];case 1:return k=x.sent(),y=[e,r,b,a,P,v,d],0===k.length?(y.forEach((function(t){return t.dispose()})),[2,null]):(w=k[0],L=i(P,[w,0],[1,-1]),B=i(a,[w,5],[1,14]),I=o((function(){return c(C.normalizeLandmarks(B,w),[-1,2])})),y.push(B),y.forEach((function(t){return t.dispose()})),[2,{boxes:L,palmLandmarks:I}])}}))}))},t.prototype.estimateHandBounds=function(t){return y(this,void 0,void 0,(function(){var e,r,i,s,u,h,d,c,f=this;return x(this,(function(l){switch(l.label){case 0:return e=t.shape[1],r=t.shape[2],i=o((function(){return a(n.resizeBilinear(t,[f.width,f.height]),255)})),[4,this.getBoundingBoxes(i)];case 1:return null===(s=l.sent())?(i.dispose(),[2,null]):(u=s.boxes.arraySync(),h=u[0].slice(0,2),d=u[0].slice(2,4),c=s.palmLandmarks.arraySync(),i.dispose(),s.boxes.dispose(),s.palmLandmarks.dispose(),[2,(p={startPoint:h,endPoint:d,palmLandmarks:c},m=[r/this.width,e/this.height],{startPoint:[p.startPoint[0]*m[0],p.startPoint[1]*m[1]],endPoint:[p.endPoint[0]*m[0],p.endPoint[1]*m[1]],palmLandmarks:p.palmLandmarks.map((function(t){return[t[0]*m[0],t[1]*m[1]]}))})])}var p,m}))}))},t}(),M={thumb:[1,2,3,4],indexFinger:[5,6,7,8],middleFinger:[9,10,11,12],ringFinger:[13,14,15,16],pinky:[17,18,19,20],palmBase:[0]};function T(t,n){var e,r=Math.PI/2-Math.atan2(-(n[1]-t[1]),n[0]-t[0]);return(e=r)-2*Math.PI*Math.floor((e+Math.PI)/(2*Math.PI))}var E=function(t,n){return[[1,0,t],[0,1,n],[0,0,1]]};function O(t,n){for(var e=0,r=0;r<t.length;r++)e+=t[r]*n[r];return e}function S(t,n){for(var e=[],r=0;r<t.length;r++)e.push(t[r][n]);return e}function W(t,n){for(var e=[],r=t.length,o=0;o<r;o++){e.push([]);for(var i=0;i<r;i++)e[o].push(O(t[o],S(n,i)))}return e}function D(t,n){var e=Math.cos(t),r=Math.sin(t),o=[[e,-r,0],[r,e,0],[0,0,1]],i=W(E(n[0],n[1]),o);return W(i,E(-n[0],-n[1]))}function z(t,n){return[O(t,n[0]),O(t,n[1])]}var _=[0,-.4],R=[0,-.1],j=[0,5,9,13,17,1,2],V=function(){function t(t,n,e,r,o,i){this.boundingBoxDetector=t,this.meshDetector=n,this.meshWidth=e,this.meshHeight=r,this.maxContinuousChecks=o,this.detectionConfidence=i,this.regionsOfInterest=[],this.runsWithoutHandDetector=0,this.maxHandsNumber=1}return t.prototype.getBoxForPalmLandmarks=function(t,n){var e=t.map((function(t){return z(t.concat([1]),n)}));return B(I(C(this.calculateLandmarksBoundingBox(e),_)),3)},t.prototype.getBoxForHandLandmarks=function(t){for(var n=B(I(C(this.calculateLandmarksBoundingBox(t),R)),1.65),e=[],r=0;r<j.length;r++)e.push(t[j[r]].slice(0,2));return n.palmLandmarks=e,n},t.prototype.transformRawCoords=function(t,n,e,r){var o,i,s,a,u=this,h=w(n),d=[h[0]/this.meshWidth,h[1]/this.meshHeight],c=t.map((function(t){return[d[0]*(t[0]-u.meshWidth/2),d[1]*(t[1]-u.meshHeight/2),t[2]]})),f=D(e,[0,0]),l=c.map((function(t){return z(t,f).concat([t[2]])})),p=(i=[[(o=r)[0][0],o[1][0]],[o[0][1],o[1][1]]],s=[o[0][2],o[1][2]],a=[-O(i[0],s),-O(i[1],s)],[i[0].concat(a[0]),i[1].concat(a[1]),[0,0,1]]),m=L(n).concat([1]),v=[O(m,p[0]),O(m,p[1])];return l.map((function(t){return[t[0]+v[0],t[1]+v[1],t[2]]}))},t.prototype.estimateHand=function(t){return y(this,void 0,void 0,(function(){var e,r,o,i,s,u,h,d,p,m,v,P,g,b,k,y,w,B,I,C;return x(this,(function(x){switch(x.label){case 0:return!0!==(e=this.shouldUpdateRegionsOfInterest())?[3,2]:[4,this.boundingBoxDetector.estimateHandBounds(t)];case 1:return null===(r=x.sent())?(t.dispose(),this.regionsOfInterest=[],[2,null]):(this.updateRegionsOfInterest(r,!0),this.runsWithoutHandDetector=0,[3,3]);case 2:this.runsWithoutHandDetector++,x.label=3;case 3:return o=this.regionsOfInterest[0],i=T(o.palmLandmarks[0],o.palmLandmarks[2]),s=L(o),u=[s[0]/t.shape[2],s[1]/t.shape[1]],h=n.rotateWithOffset(t,i,0,u),d=D(-i,s),p=!0===e?this.getBoxForPalmLandmarks(o.palmLandmarks,d):o,m=function(t,e,r){var o=e.shape[1],i=e.shape[2],s=[[t.startPoint[1]/o,t.startPoint[0]/i,t.endPoint[1]/o,t.endPoint[0]/i]];return n.cropAndResize(e,s,[0],r)}(p,h,[this.meshWidth,this.meshHeight]),v=a(m,255),m.dispose(),h.dispose(),\"webgl\"===f()?(g=l().get(\"WEBGL_PACK_DEPTHWISECONV\"),l().set(\"WEBGL_PACK_DEPTHWISECONV\",!0),P=this.meshDetector.predict(v),l().set(\"WEBGL_PACK_DEPTHWISECONV\",g)):P=this.meshDetector.predict(v),b=P[0],k=P[1],v.dispose(),y=b.dataSync()[0],b.dispose(),y<this.detectionConfidence?(k.dispose(),this.regionsOfInterest=[],[2,null]):(w=c(k,[-1,3]),B=w.arraySync(),k.dispose(),w.dispose(),I=this.transformRawCoords(B,p,i,d),C=this.getBoxForHandLandmarks(I),this.updateRegionsOfInterest(C,!1),[2,{landmarks:I,handInViewConfidence:y,boundingBox:{topLeft:C.startPoint,bottomRight:C.endPoint}}])}}))}))},t.prototype.calculateLandmarksBoundingBox=function(t){var n=t.map((function(t){return t[0]})),e=t.map((function(t){return t[1]}));return{startPoint:[Math.min.apply(Math,n),Math.min.apply(Math,e)],endPoint:[Math.max.apply(Math,n),Math.max.apply(Math,e)]}},t.prototype.updateRegionsOfInterest=function(t,n){if(n)this.regionsOfInterest=[t];else{var e=this.regionsOfInterest[0],r=0;if(null!=e&&null!=e.startPoint){var o=t.startPoint,i=o[0],s=o[1],a=t.endPoint,u=a[0],h=a[1],d=e.startPoint,c=d[0],f=d[1],l=e.endPoint,p=l[0],m=l[1],v=Math.max(i,c),P=Math.max(s,f),g=(Math.min(u,p)-v)*(Math.min(h,m)-P);r=g/((u-i)*(h-s)+(p-c)*(m-s)-g)}this.regionsOfInterest[0]=r>.8?e:t}},t.prototype.shouldUpdateRegionsOfInterest=function(){return this.regionsOfInterest.length!==this.maxHandsNumber||this.runsWithoutHandDetector>=this.maxContinuousChecks},t}();function F(){return y(this,void 0,void 0,(function(){return x(this,(function(n){return\"https://tfhub.dev/mediapipe/tfjs-model/handdetector/1/default/1\",[2,t(\"https://tfhub.dev/mediapipe/tfjs-model/handdetector/1/default/1\",{fromTFHub:!0})]}))}))}function A(){return y(this,void 0,void 0,(function(){return x(this,(function(n){return\"https://tfhub.dev/mediapipe/tfjs-model/handskeleton/1/default/1\",[2,t(\"https://tfhub.dev/mediapipe/tfjs-model/handskeleton/1/default/1\",{fromTFHub:!0})]}))}))}function N(){return y(this,void 0,void 0,(function(){return x(this,(function(t){return[2,v.fetch(\"https://tfhub.dev/mediapipe/tfjs-model/handskeleton/1/default/1/anchors.json?tfjs-format=file\").then((function(t){return t.json()}))]}))}))}function G(t){var n=void 0===t?{}:t,e=n.maxContinuousChecks,r=void 0===e?1/0:e,o=n.detectionConfidence,i=void 0===o?.8:o,s=n.iouThreshold,a=void 0===s?.3:s,u=n.scoreThreshold,h=void 0===u?.5:u;return y(this,void 0,void 0,(function(){var t,n,e,o,s,u;return x(this,(function(d){switch(d.label){case 0:return[4,Promise.all([N(),F(),A()])];case 1:return t=d.sent(),n=t[0],e=t[1],o=t[2],s=new H(e,256,256,n,a,h),u=new V(s,o,256,256,r,i),[2,new K(u)]}}))}))}var K=function(){function t(t){this.pipeline=t}return t.getAnnotations=function(){return M},t.prototype.estimateHands=function(t,n){return void 0===n&&(n=!1),y(this,void 0,void 0,(function(){var e,r,i,s,a,u,h,d,c;return x(this,(function(f){switch(f.label){case 0:return e=function(t){return t instanceof P?[t.shape[0],t.shape[1]]:[t.height,t.width]}(t),r=e[1],i=o((function(){return t instanceof P||(t=g.fromPixels(t)),b(k(t,\"float32\"))})),[4,this.pipeline.estimateHand(i)];case 1:if(s=f.sent(),i.dispose(),null===s)return[2,[]];for(a=s,!0===n&&(a=function(t,n){var e=t.handInViewConfidence,r=t.landmarks,o=t.boundingBox;return{handInViewConfidence:e,landmarks:r.map((function(t){return[n-1-t[0],t[1],t[2]]})),boundingBox:{topLeft:[n-1-o.topLeft[0],o.topLeft[1]],bottomRight:[n-1-o.bottomRight[0],o.bottomRight[1]]}}}(s,r)),u={},h=0,d=Object.keys(M);h<d.length;h++)c=d[h],u[c]=M[c].map((function(t){return a.landmarks[t]}));return[2,[{handInViewConfidence:a.handInViewConfidence,boundingBox:a.boundingBox,landmarks:a.landmarks,annotations:u}]]}}))}))},t}();export{K as HandPose,G as load};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataId, DataType, env, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nexport enum PackingScheme {\n  /**\n   * All values in a single texel are densely packed without any constraints.\n   *\n   * This is how the shader encodes a tensor with shape = [2, 3, 4]\n   * (indices are [batch, row, col]).\n   *\n   * 000|001   010|011   020|021\n   * -------   -------   -------\n   * 002|003   012|013   022|023\n   *\n   * 100|101   110|111   120|121\n   * -------   -------   -------\n   * 102|103   112|113   122|123\n   *\n   */\n  DENSE,\n\n  /**\n   * Single texels contain only values from the same batch, and from adjacent\n   * rows and columns.\n   *\n   * This is how the shader encodes a tensor with shape = [2, 3, 5]\n   * (indices are [batch, row, col]).\n   *\n   * 000|001   002|003   004|xxx   020|021   022|023   024|xxx\n   * -------   -------   -------   -------   -------   -------\n   * 010|011   012|013   014|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n   *\n   * 100|101   102|103   104|xxx   120|121   122|123   124|xxx\n   * -------   -------   -------   -------   -------   -------\n   * 110|111   112|113   114|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n   *\n   */\n  SHARED_BATCH\n}\n\nexport enum TextureUsage {\n  RENDER,\n  UPLOAD,\n  PIXELS,\n  DOWNLOAD\n}\n\nexport enum PhysicalTextureType {\n  UNPACKED_FLOAT16,\n  UNPACKED_FLOAT32,\n  PACKED_4X1_UNSIGNED_BYTE,\n  PACKED_2X2_FLOAT32,\n  PACKED_2X2_FLOAT16\n}\n\nexport interface Texture {\n  texture: WebGLTexture;\n  texShape: [number, number];\n}\nexport interface TextureData {\n  // Required.\n  shape: number[];\n  dtype: DataType;\n\n  // Optional.\n  values?: backend_util.BackendValues;\n  texture?: Texture;\n  // For complex numbers, the real and imaginary parts are stored as their own\n  // individual tensorInfos, with a parent joining the two with the\n  // complexTensors field. When this is defined, texture will be null.\n  complexTensorInfos?: {real: TensorInfo, imag: TensorInfo};\n  /** [rows, columns] shape of the texture. */\n  texShape?: [number, number];\n  usage?: TextureUsage;\n  isPacked?: boolean;\n\n  refCount: number;\n\n  // Available when the tensor has been sliced.\n  slice?: {\n    // Offset in the 'flat index' space.\n    flatOffset: number;\n    // Used for counting how many sliced tensors point to the same texture.\n    origDataId: DataId;\n  };\n}\n\nexport function getUnpackedMatrixTextureShapeWidthHeight(\n    rows: number, columns: number): [number, number] {\n  return [columns, rows];\n}\n\nexport function getUnpackedArraySizeFromMatrixSize(\n    matrixSize: number, channelsPerTexture: number): number {\n  return matrixSize * channelsPerTexture;\n}\n\nexport function getColorMatrixTextureShapeWidthHeight(\n    rows: number, columns: number): [number, number] {\n  return [columns * 4, rows];\n}\n\n/**\n * Get shape for densely packed RGBA texture.\n */\nexport function getDenseTexShape(shape: number[]): [number, number] {\n  const size = util.sizeFromShape(shape);\n  const texelsNeeded = Math.ceil(size / 4);\n  return util.sizeToSquarishShape(texelsNeeded);\n}\n\nexport function getMatrixSizeFromUnpackedArraySize(\n    unpackedSize: number, channelsPerTexture: number): number {\n  if (unpackedSize % channelsPerTexture !== 0) {\n    throw new Error(\n        `unpackedSize (${unpackedSize}) must be a multiple of ` +\n        `${channelsPerTexture}`);\n  }\n  return unpackedSize / channelsPerTexture;\n}\n\nexport function decodeMatrixFromUnpackedColorRGBAArray(\n    unpackedArray: Float32Array, matrix: Float32Array, channels: number) {\n  const requiredSize = unpackedArray.length * channels / 4;\n  if (matrix.length < requiredSize) {\n    throw new Error(\n        `matrix length (${matrix.length}) must be >= ${requiredSize}`);\n  }\n  let dst = 0;\n  for (let src = 0; src < unpackedArray.length; src += 4) {\n    for (let c = 0; c < channels; c++) {\n      matrix[dst++] = unpackedArray[src + c];\n    }\n  }\n}\n\nexport function getPackedMatrixTextureShapeWidthHeight(\n    rows: number, columns: number): [number, number] {\n  return [\n    Math.max(1, Math.ceil(columns / 2)), Math.max(1, Math.ceil(rows / 2))\n  ];\n}\n\nexport function getPackedRGBAArraySizeFromMatrixShape(\n    rows: number, columns: number): number {\n  const [w, h] = getPackedMatrixTextureShapeWidthHeight(rows, columns);\n  return w * h * 4;\n}\n\nexport interface TextureConfig {\n  internalFormatFloat: number;\n  textureFormatFloat: number;\n  internalFormatPackedHalfFloat: number;\n  internalFormatHalfFloat: number;\n  internalFormatPackedFloat: number;\n\n  // The format to use during a gl.readPixels call.\n  downloadTextureFormat: number;\n  // How many channels need to be unpacked after a gl.readPixels call.\n  downloadUnpackNumChannels: number;\n\n  defaultNumChannels: number;\n  textureTypeHalfFloat: number;\n  textureTypeFloat: number;\n}\n\nexport function getTextureConfig(\n    // tslint:disable-next-line:no-any\n    gl: WebGLRenderingContext, textureHalfFloatExtension?: any): TextureConfig {\n  // tslint:disable-next-line:no-any\n  const glany = gl as any;\n\n  let internalFormatFloat: number;\n  let internalFormatHalfFloat: number;\n  let internalFormatPackedHalfFloat: number;\n  let internalFormatPackedFloat: number;\n  let textureFormatFloat: number;\n\n  let downloadTextureFormat: number;\n  let downloadUnpackNumChannels: number;\n\n  let defaultNumChannels: number;\n  let textureTypeHalfFloat: number;\n  let textureTypeFloat: number;\n\n  if (env().getNumber('WEBGL_VERSION') === 2) {\n    internalFormatFloat = glany.R32F;\n    internalFormatHalfFloat = glany.R16F;\n    internalFormatPackedHalfFloat = glany.RGBA16F;\n    internalFormatPackedFloat = glany.RGBA32F;\n    textureFormatFloat = glany.RED;\n    downloadUnpackNumChannels = 4;\n    defaultNumChannels = 1;\n    textureTypeHalfFloat = glany.HALF_FLOAT;\n    textureTypeFloat = glany.FLOAT;\n    downloadTextureFormat = glany.RGBA8;\n  } else {\n    internalFormatFloat = gl.RGBA;\n    internalFormatHalfFloat = gl.RGBA;\n    internalFormatPackedHalfFloat = gl.RGBA;\n    internalFormatPackedFloat = glany.RGBA;\n    textureFormatFloat = gl.RGBA;\n    downloadUnpackNumChannels = 4;\n    defaultNumChannels = 4;\n    textureTypeHalfFloat = textureHalfFloatExtension != null ?\n        textureHalfFloatExtension.HALF_FLOAT_OES :\n        null;\n    textureTypeFloat = gl.FLOAT;\n    downloadTextureFormat = gl.RGBA;\n  }\n\n  return {\n    internalFormatFloat,\n    internalFormatHalfFloat,\n    internalFormatPackedHalfFloat,\n    internalFormatPackedFloat,\n    textureFormatFloat,\n    downloadTextureFormat,\n    downloadUnpackNumChannels,\n    defaultNumChannels,\n    textureTypeHalfFloat,\n    textureTypeFloat\n  };\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env} from '@tensorflow/tfjs-core';\n\nconst contexts: {[key: string]: WebGLRenderingContext} = {};\n\nconst WEBGL_ATTRIBUTES: WebGLContextAttributes = {\n  alpha: false,\n  antialias: false,\n  premultipliedAlpha: false,\n  preserveDrawingBuffer: false,\n  depth: false,\n  stencil: false,\n  failIfMajorPerformanceCaveat: true\n};\n\nexport function clearWebGLContext(webGLVersion: number) {\n  delete contexts[webGLVersion];\n}\n\nexport function setWebGLContext(\n    webGLVersion: number, gl: WebGLRenderingContext) {\n  contexts[webGLVersion] = gl;\n}\n\nexport function getWebGLContext(\n    webGLVersion: number,\n    customCanvas?: HTMLCanvasElement|OffscreenCanvas): WebGLRenderingContext {\n  if (!(webGLVersion in contexts) || customCanvas != null) {\n    const newCtx = getWebGLRenderingContext(webGLVersion, customCanvas);\n    if (newCtx !== null) {\n      contexts[webGLVersion] = newCtx;\n    } else {\n      console.log('Could not get context for WebGL version', webGLVersion);\n      return null;\n    }\n  }\n  const gl = contexts[webGLVersion];\n  if (gl == null || gl.isContextLost()) {\n    delete contexts[webGLVersion];\n    return getWebGLContext(webGLVersion);\n  }\n\n  gl.disable(gl.DEPTH_TEST);\n  gl.disable(gl.STENCIL_TEST);\n  gl.disable(gl.BLEND);\n  gl.disable(gl.DITHER);\n  gl.disable(gl.POLYGON_OFFSET_FILL);\n  gl.disable(gl.SAMPLE_COVERAGE);\n  gl.enable(gl.SCISSOR_TEST);\n  gl.enable(gl.CULL_FACE);\n  gl.cullFace(gl.BACK);\n\n  return contexts[webGLVersion];\n}\n\nfunction createCanvas(webGLVersion: number) {\n  if (typeof OffscreenCanvas !== 'undefined' && webGLVersion === 2) {\n    return new OffscreenCanvas(300, 150);\n  } else if (typeof document !== 'undefined') {\n    return document.createElement('canvas');\n  } else {\n    throw new Error('Cannot create a canvas in this context');\n  }\n}\n\nfunction getWebGLRenderingContext(\n    webGLVersion: number,\n    customCanvas?: HTMLCanvasElement|OffscreenCanvas): WebGLRenderingContext {\n  if (webGLVersion !== 1 && webGLVersion !== 2) {\n    throw new Error('Cannot get WebGL rendering context, WebGL is disabled.');\n  }\n  const canvas =\n      customCanvas == null ? createCanvas(webGLVersion) : customCanvas;\n\n  canvas.addEventListener('webglcontextlost', (ev: Event) => {\n    ev.preventDefault();\n    delete contexts[webGLVersion];\n  }, false);\n\n  if (env().getBool('SOFTWARE_WEBGL_ENABLED')) {\n    WEBGL_ATTRIBUTES.failIfMajorPerformanceCaveat = false;\n  }\n\n  if (webGLVersion === 1) {\n    return (canvas.getContext('webgl', WEBGL_ATTRIBUTES) ||\n      (canvas as HTMLCanvasElement)\n        .getContext('experimental-webgl', WEBGL_ATTRIBUTES));\n  }\n  return canvas.getContext('webgl2', WEBGL_ATTRIBUTES) as WebGLRenderingContext;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {getWebGLContext} from './canvas_util';\nimport {getTextureConfig} from './tex_util';\n\nexport function callAndCheck<T>(gl: WebGLRenderingContext, func: () => T): T {\n  const returnValue = func();\n  if (env().getBool('DEBUG')) {\n    checkWebGLError(gl);\n  }\n  return returnValue;\n}\n\nfunction checkWebGLError(gl: WebGLRenderingContext) {\n  const error = gl.getError();\n  if (error !== gl.NO_ERROR) {\n    throw new Error('WebGL Error: ' + getWebGLErrorMessage(gl, error));\n  }\n}\n\n// https://en.wikipedia.org/wiki/Half-precision_floating-point_format\nconst MIN_FLOAT16 = 5.96e-8;\nconst MAX_FLOAT16 = 65504;\n\nexport function canBeRepresented(num: number): boolean {\n  if (env().getBool('WEBGL_RENDER_FLOAT32_ENABLED') || num === 0 ||\n      (MIN_FLOAT16 < Math.abs(num) && Math.abs(num) < MAX_FLOAT16)) {\n    return true;\n  }\n  return false;\n}\n\nexport function getWebGLErrorMessage(\n    gl: WebGLRenderingContext, status: number): string {\n  switch (status) {\n    case gl.NO_ERROR:\n      return 'NO_ERROR';\n    case gl.INVALID_ENUM:\n      return 'INVALID_ENUM';\n    case gl.INVALID_VALUE:\n      return 'INVALID_VALUE';\n    case gl.INVALID_OPERATION:\n      return 'INVALID_OPERATION';\n    case gl.INVALID_FRAMEBUFFER_OPERATION:\n      return 'INVALID_FRAMEBUFFER_OPERATION';\n    case gl.OUT_OF_MEMORY:\n      return 'OUT_OF_MEMORY';\n    case gl.CONTEXT_LOST_WEBGL:\n      return 'CONTEXT_LOST_WEBGL';\n    default:\n      return `Unknown error code ${status}`;\n  }\n}\n\nexport function getExtensionOrThrow(\n    gl: WebGLRenderingContext, extensionName: string): {} {\n  return throwIfNull<{}>(\n      gl, () => gl.getExtension(extensionName),\n      'Extension \"' + extensionName + '\" not supported on this browser.');\n}\n\nexport function createVertexShader(\n    gl: WebGLRenderingContext, vertexShaderSource: string): WebGLShader {\n  const vertexShader: WebGLShader = throwIfNull<WebGLShader>(\n      gl, () => gl.createShader(gl.VERTEX_SHADER),\n      'Unable to create vertex WebGLShader.');\n  callAndCheck(gl, () => gl.shaderSource(vertexShader, vertexShaderSource));\n  callAndCheck(gl, () => gl.compileShader(vertexShader));\n  if (gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS) === false) {\n    console.log(gl.getShaderInfoLog(vertexShader));\n    throw new Error('Failed to compile vertex shader.');\n  }\n  return vertexShader;\n}\n\nexport function createFragmentShader(\n    gl: WebGLRenderingContext, fragmentShaderSource: string): WebGLShader {\n  const fragmentShader: WebGLShader = throwIfNull<WebGLShader>(\n      gl, () => gl.createShader(gl.FRAGMENT_SHADER),\n      'Unable to create fragment WebGLShader.');\n  callAndCheck(gl, () => gl.shaderSource(fragmentShader, fragmentShaderSource));\n  callAndCheck(gl, () => gl.compileShader(fragmentShader));\n  if (env().get('ENGINE_COMPILE_ONLY')) {\n    return fragmentShader;\n  }\n  if (gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS) === false) {\n    logShaderSourceAndInfoLog(\n        fragmentShaderSource, gl.getShaderInfoLog(fragmentShader));\n    throw new Error('Failed to compile fragment shader.');\n  }\n  return fragmentShader;\n}\n\nconst lineNumberRegex = /ERROR: [0-9]+:([0-9]+):/g;\nexport function logShaderSourceAndInfoLog(\n    shaderSource: string, shaderInfoLog: string) {\n  const lineNumberRegexResult = lineNumberRegex.exec(shaderInfoLog);\n  if (lineNumberRegexResult == null) {\n    console.log(`Couldn't parse line number in error: ${shaderInfoLog}`);\n    console.log(shaderSource);\n    return;\n  }\n\n  const lineNumber = +lineNumberRegexResult[1];\n\n  const shaderLines = shaderSource.split('\\n');\n  const pad = shaderLines.length.toString().length + 2;\n  const linesWithLineNumbers = shaderLines.map(\n      (line, lineNumber) =>\n          util.rightPad((lineNumber + 1).toString(), pad) + line);\n  let maxLineLength = 0;\n  for (let i = 0; i < linesWithLineNumbers.length; i++) {\n    maxLineLength = Math.max(linesWithLineNumbers[i].length, maxLineLength);\n  }\n\n  const beforeErrorLines = linesWithLineNumbers.slice(0, lineNumber - 1);\n  const errorLine = linesWithLineNumbers.slice(lineNumber - 1, lineNumber);\n  const afterErrorLines = linesWithLineNumbers.slice(lineNumber);\n\n  console.log(beforeErrorLines.join('\\n'));\n  console.log(shaderInfoLog.split('\\n')[0]);\n  console.log(\n      `%c ${util.rightPad(errorLine[0], maxLineLength)}`,\n      'border:1px solid red; background-color:#e3d2d2; color:#a61717');\n  console.log(afterErrorLines.join('\\n'));\n}\n\nexport function createProgram(gl: WebGLRenderingContext): WebGLProgram {\n  return throwIfNull<WebGLProgram>(\n      gl, () => gl.createProgram(), 'Unable to create WebGLProgram.');\n}\n\nexport function linkProgram(gl: WebGLRenderingContext, program: WebGLProgram) {\n  callAndCheck(gl, () => gl.linkProgram(program));\n  if (env().get('ENGINE_COMPILE_ONLY')) {\n    return;\n  }\n  if (gl.getProgramParameter(program, gl.LINK_STATUS) === false) {\n    console.log(gl.getProgramInfoLog(program));\n    throw new Error('Failed to link vertex and fragment shaders.');\n  }\n}\n\n/// validateProgram is effectively \"If we `useProgram(program); drawArrays();`,\n/// give feedback in log about perf/correctness warnings or errors that would\n/// occur.\"\n/// So make sure we set up all vertex/texture/sampler/uniform data before\n/// calling validateProgram!\nexport function validateProgram(\n    gl: WebGLRenderingContext, program: WebGLProgram) {\n  callAndCheck(gl, () => gl.validateProgram(program));\n  if (gl.getProgramParameter(program, gl.VALIDATE_STATUS) === false) {\n    console.log(gl.getProgramInfoLog(program));\n    throw new Error('Shader program validation failed.');\n  }\n}\n\nexport function createStaticVertexBuffer(\n    gl: WebGLRenderingContext, data: Float32Array): WebGLBuffer {\n  const buffer: WebGLBuffer = throwIfNull<WebGLBuffer>(\n      gl, () => gl.createBuffer(), 'Unable to create WebGLBuffer');\n  callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, buffer));\n  callAndCheck(gl, () => gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW));\n  return buffer;\n}\n\nexport function createStaticIndexBuffer(\n    gl: WebGLRenderingContext, data: Uint16Array): WebGLBuffer {\n  const buffer: WebGLBuffer = throwIfNull<WebGLBuffer>(\n      gl, () => gl.createBuffer(), 'Unable to create WebGLBuffer');\n  callAndCheck(gl, () => gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffer));\n  callAndCheck(\n      gl, () => gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, data, gl.STATIC_DRAW));\n  return buffer;\n}\n\nexport function getNumChannels(): number {\n  if (env().getNumber('WEBGL_VERSION') === 2) {\n    return 1;\n  }\n  return 4;\n}\n\nexport function createTexture(gl: WebGLRenderingContext): WebGLTexture {\n  return throwIfNull<WebGLTexture>(\n      gl, () => gl.createTexture(), 'Unable to create WebGLTexture.');\n}\n\nexport function validateTextureSize(width: number, height: number) {\n  const maxTextureSize = env().getNumber('WEBGL_MAX_TEXTURE_SIZE');\n  if ((width <= 0) || (height <= 0)) {\n    const requested = `[${width}x${height}]`;\n    throw new Error('Requested texture size ' + requested + ' is invalid.');\n  }\n  if ((width > maxTextureSize) || (height > maxTextureSize)) {\n    const requested = `[${width}x${height}]`;\n    const max = `[${maxTextureSize}x${maxTextureSize}]`;\n    throw new Error(\n        'Requested texture size ' + requested +\n        ' greater than WebGL maximum on this browser / GPU ' + max + '.');\n  }\n}\n\nexport function createFramebuffer(gl: WebGLRenderingContext): WebGLFramebuffer {\n  return throwIfNull<WebGLFramebuffer>(\n      gl, () => gl.createFramebuffer(), 'Unable to create WebGLFramebuffer.');\n}\n\nexport function bindVertexBufferToProgramAttribute(\n    gl: WebGLRenderingContext, program: WebGLProgram, attribute: string,\n    buffer: WebGLBuffer, arrayEntriesPerItem: number, itemStrideInBytes: number,\n    itemOffsetInBytes: number): boolean {\n  const loc = gl.getAttribLocation(program, attribute);\n  if (loc === -1) {\n    // The GPU compiler decided to strip out this attribute because it's unused,\n    // thus no need to bind.\n    return false;\n  }\n  callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, buffer));\n  callAndCheck(\n      gl,\n      () => gl.vertexAttribPointer(\n          loc, arrayEntriesPerItem, gl.FLOAT, false, itemStrideInBytes,\n          itemOffsetInBytes));\n  callAndCheck(gl, () => gl.enableVertexAttribArray(loc));\n  return true;\n}\n\nexport function bindTextureUnit(\n    gl: WebGLRenderingContext, texture: WebGLTexture, textureUnit: number) {\n  validateTextureUnit(gl, textureUnit);\n  callAndCheck(gl, () => gl.activeTexture(gl.TEXTURE0 + textureUnit));\n  callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n}\n\nexport function unbindTextureUnit(\n    gl: WebGLRenderingContext, textureUnit: number) {\n  validateTextureUnit(gl, textureUnit);\n  callAndCheck(gl, () => gl.activeTexture(gl.TEXTURE0 + textureUnit));\n  callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\n\nexport function getProgramUniformLocationOrThrow(\n    gl: WebGLRenderingContext, program: WebGLProgram,\n    uniformName: string): WebGLUniformLocation {\n  return throwIfNull<WebGLUniformLocation>(\n      gl, () => gl.getUniformLocation(program, uniformName),\n      'uniform \"' + uniformName + '\" not present in program.');\n}\n\nexport function getProgramUniformLocation(\n    gl: WebGLRenderingContext, program: WebGLProgram,\n    uniformName: string): WebGLUniformLocation {\n  return gl.getUniformLocation(program, uniformName);\n}\n\nexport function bindTextureToProgramUniformSampler(\n    gl: WebGLRenderingContext, texture: WebGLTexture,\n    uniformSamplerLocation: WebGLUniformLocation, textureUnit: number) {\n  callAndCheck(gl, () => bindTextureUnit(gl, texture, textureUnit));\n  callAndCheck(gl, () => gl.uniform1i(uniformSamplerLocation, textureUnit));\n}\n\nexport function bindCanvasToFramebuffer(gl: WebGLRenderingContext) {\n  callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, null));\n  callAndCheck(gl, () => gl.viewport(0, 0, gl.canvas.width, gl.canvas.height));\n  callAndCheck(gl, () => gl.scissor(0, 0, gl.canvas.width, gl.canvas.height));\n}\n\nexport function bindColorTextureToFramebuffer(\n    gl: WebGLRenderingContext, texture: WebGLTexture,\n    framebuffer: WebGLFramebuffer) {\n  callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer));\n  callAndCheck(\n      gl,\n      () => gl.framebufferTexture2D(\n          gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0));\n}\n\nexport function unbindColorTextureFromFramebuffer(\n    gl: WebGLRenderingContext, framebuffer: WebGLFramebuffer) {\n  callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer));\n  callAndCheck(\n      gl,\n      () => gl.framebufferTexture2D(\n          gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, null, 0));\n}\n\nexport function validateFramebuffer(gl: WebGLRenderingContext) {\n  const status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n  if (status !== gl.FRAMEBUFFER_COMPLETE) {\n    throw new Error(\n        'Error binding framebuffer: ' + getFramebufferErrorMessage(gl, status));\n  }\n}\n\nexport function getFramebufferErrorMessage(\n    gl: WebGLRenderingContext, status: number): string {\n  switch (status) {\n    case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:\n      return 'FRAMEBUFFER_INCOMPLETE_ATTACHMENT';\n    case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:\n      return 'FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT';\n    case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:\n      return 'FRAMEBUFFER_INCOMPLETE_DIMENSIONS';\n    case gl.FRAMEBUFFER_UNSUPPORTED:\n      return 'FRAMEBUFFER_UNSUPPORTED';\n    default:\n      return `unknown error ${status}`;\n  }\n}\n\nfunction throwIfNull<T>(\n    gl: WebGLRenderingContext, returnTOrNull: () => T | null,\n    failureMessage: string): T {\n  const tOrNull: T|null = callAndCheck(gl, () => returnTOrNull());\n  if (tOrNull == null) {\n    throw new Error(failureMessage);\n  }\n  return tOrNull;\n}\n\nfunction validateTextureUnit(gl: WebGLRenderingContext, textureUnit: number) {\n  const maxTextureUnit = gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS - 1;\n  const glTextureUnit = textureUnit + gl.TEXTURE0;\n  if (glTextureUnit < gl.TEXTURE0 || glTextureUnit > maxTextureUnit) {\n    const textureUnitRange = `[gl.TEXTURE0, gl.TEXTURE${maxTextureUnit}]`;\n    throw new Error(`textureUnit must be in ${textureUnitRange}.`);\n  }\n}\n\nexport function getBatchDim(shape: number[], dimsToSkip = 2): number {\n  return util.sizeFromShape(shape.slice(0, shape.length - dimsToSkip));\n}\n\nexport function getRowsCols(shape: number[]): [number, number] {\n  if (shape.length === 0) {\n    throw Error('Cannot get rows and columns of an empty shape array.');\n  }\n\n  return [\n    shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]\n  ];\n}\n\nexport function getShapeAs3D(shape: number[]): [number, number, number] {\n  let shapeAs3D: [number, number, number] = [1, 1, 1];\n  const isScalar = shape.length === 0 || (shape.length === 1 && shape[0] === 1);\n  if (!isScalar) {\n    shapeAs3D =\n        [getBatchDim(shape), ...getRowsCols(shape)] as [number, number, number];\n  }\n  return shapeAs3D;\n}\n\nexport function getTextureShapeFromLogicalShape(\n    logShape: number[], isPacked = false): [number, number] {\n  let maxTexSize = env().getNumber('WEBGL_MAX_TEXTURE_SIZE');\n  let maxSizeForNarrowTex =\n      env().getNumber('WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE');\n  if (maxSizeForNarrowTex === Infinity &&\n      env().getBool('WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE')) {\n    maxSizeForNarrowTex = maxTexSize / 2;\n  }\n\n  if (isPacked) {\n    maxTexSize = maxTexSize * 2;\n    maxSizeForNarrowTex = maxSizeForNarrowTex * 2;\n\n    // This logic ensures we accurately count the number of packed texels needed\n    // to accommodate the tensor. We can only pack values in the same texel if\n    // they are from adjacent pairs of rows/cols within the same batch. So if a\n    // tensor has 3 rows, we pretend it has 4 rows in order to account for the\n    // fact that the texels containing the third row are half empty.\n    logShape = logShape.map(\n        (d, i) => i >= logShape.length - 2 ?\n            util.nearestLargerEven(logShape[i]) :\n            logShape[i]);\n\n    // Packed texture height is at least 2 (the channel height of a single\n    // texel).\n    if (logShape.length === 1) {\n      logShape = [2, logShape[0]];\n    }\n  }\n\n  // If logical shape is 2, we don't squeeze, since we want to match physical.\n  if (logShape.length !== 2) {\n    const squeezeResult = util.squeezeShape(logShape);\n    logShape = squeezeResult.newShape;\n  }\n\n  let size = util.sizeFromShape(logShape);\n  let textureShape: [number, number] = null;\n  if (logShape.length <= 1 && size <= maxTexSize) {\n    textureShape = [1, size];\n  } else if (\n      logShape.length === 2 && logShape[0] <= maxTexSize &&\n      logShape[1] <= maxTexSize) {\n    textureShape = logShape as [number, number];\n  } else if (\n      logShape.length === 3 && logShape[0] * logShape[1] <= maxTexSize &&\n      logShape[2] <= maxTexSize) {\n    textureShape = [logShape[0] * logShape[1], logShape[2]];\n  } else if (\n      logShape.length === 3 && logShape[0] <= maxTexSize &&\n      logShape[1] * logShape[2] <= maxTexSize) {\n    textureShape = [logShape[0], logShape[1] * logShape[2]];\n  } else if (\n      logShape.length === 4 &&\n      logShape[0] * logShape[1] * logShape[2] <= maxTexSize &&\n      logShape[3] <= maxTexSize) {\n    textureShape = [logShape[0] * logShape[1] * logShape[2], logShape[3]];\n  } else if (\n      logShape.length === 4 && logShape[0] <= maxTexSize &&\n      logShape[1] * logShape[2] * logShape[3] <= maxTexSize) {\n    textureShape = [logShape[0], logShape[1] * logShape[2] * logShape[3]];\n  }\n\n  // true if one edge length is 1 (1 or 2, if packed), while another edge\n  // length exceeds maxSizeForNarrowTex.\n  const isLongNarrowTex = textureShape != null &&\n      Math.max(...textureShape) > maxSizeForNarrowTex &&\n      Math.min(...textureShape) <= (isPacked ? 2 : 1) &&\n      Math.min(...textureShape) > 0;\n\n  if (textureShape == null || isLongNarrowTex) {\n    if (isPacked) {\n      // For packed textures size equals the number of channels required to\n      // accommodate the texture data. However in order to squarify such that\n      // inner dimensions stay even, we rewrite size to equal the number of\n      // texels. Then in the return statement we rehydrate the squarified\n      // dimensions to channel units.\n\n      const batchDim = getBatchDim(logShape);\n      let rows = 2, cols = 2;\n      if (logShape.length) {\n        [rows, cols] = getRowsCols(logShape);\n      }\n      size = batchDim * (rows / 2) * (cols / 2);\n      textureShape =\n          util.sizeToSquarishShape(size).map(d => d * 2) as [number, number];\n    } else {\n      textureShape = util.sizeToSquarishShape(size);\n    }\n  }\n\n  return textureShape;\n}\n\nfunction isEven(n: number): boolean {\n  return n % 2 === 0;\n}\n\n/**\n * This determines whether reshaping a packed texture requires rearranging\n * the data within the texture, assuming 2x2 packing.\n */\nexport function isReshapeFree(shape1: number[], shape2: number[]): boolean {\n  shape1 = shape1.slice(-2);\n  shape2 = shape2.slice(-2);\n\n  if (util.arraysEqual(shape1, shape2)) {\n    return true;\n  }\n\n  if (!shape1.length || !shape2.length) {  // One of the shapes is a scalar.\n    return true;\n  }\n\n  if (shape1[0] === 0 || shape1[1] === 0 || shape2[0] === 0 ||\n      shape2[1] === 0) {\n    return true;\n  }\n\n  if (shape1.length !== shape2.length) {  // One of the shapes is a vector.\n    const shape1Cols = shape1.slice(-1)[0];\n    const shape2Cols = shape2.slice(-1)[0];\n    if (shape1Cols === shape2Cols) {\n      return true;\n    }\n\n    if (isEven(shape1Cols) && isEven(shape2Cols) &&\n        (shape1[0] === 1 || shape2[0] === 1)) {\n      return true;\n    }\n  }\n  return shape1[1] === shape2[1] && isEven(shape1[0]) && isEven(shape2[0]);\n}\n\n// We cache webgl params because the environment gets reset between\n// unit tests and we don't want to constantly query the WebGLContext for\n// MAX_TEXTURE_SIZE.\nlet MAX_TEXTURE_SIZE: number;\nlet MAX_TEXTURES_IN_SHADER: number;\n\nexport function getWebGLMaxTextureSize(webGLVersion: number): number {\n  if (MAX_TEXTURE_SIZE == null) {\n    const gl = getWebGLContext(webGLVersion);\n    MAX_TEXTURE_SIZE = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n  }\n  return MAX_TEXTURE_SIZE;\n}\n\nexport function resetMaxTextureSize() {\n  MAX_TEXTURE_SIZE = null;\n}\nexport function resetMaxTexturesInShader() {\n  MAX_TEXTURES_IN_SHADER = null;\n}\n\nexport function getMaxTexturesInShader(webGLVersion: number): number {\n  if (MAX_TEXTURES_IN_SHADER == null) {\n    const gl = getWebGLContext(webGLVersion);\n    MAX_TEXTURES_IN_SHADER = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n  }\n  // We cap at 16 to avoid spurious runtime \"memory exhausted\" error.\n  return Math.min(16, MAX_TEXTURES_IN_SHADER);\n}\n\nexport function getWebGLDisjointQueryTimerVersion(webGLVersion: number):\n    number {\n  if (webGLVersion === 0) {\n    return 0;\n  }\n\n  let queryTimerVersion: number;\n  const gl = getWebGLContext(webGLVersion);\n\n  if (hasExtension(gl, 'EXT_disjoint_timer_query_webgl2') &&\n      webGLVersion === 2) {\n    queryTimerVersion = 2;\n  } else if (hasExtension(gl, 'EXT_disjoint_timer_query')) {\n    queryTimerVersion = 1;\n  } else {\n    queryTimerVersion = 0;\n  }\n  return queryTimerVersion;\n}\n\nexport function hasExtension(gl: WebGLRenderingContext, extensionName: string) {\n  const ext = gl.getExtension(extensionName);\n  return ext != null;\n}\n\nexport function isWebGLVersionEnabled(webGLVersion: 1|2) {\n  try {\n    const gl = getWebGLContext(webGLVersion);\n    if (gl != null) {\n      return true;\n    }\n  } catch (e) {\n    console.log('Error when getting WebGL context: ', e);\n    return false;\n  }\n  return false;\n}\n\nexport function isCapableOfRenderingToFloatTexture(webGLVersion: number):\n    boolean {\n  if (webGLVersion === 0) {\n    return false;\n  }\n\n  const gl = getWebGLContext(webGLVersion);\n\n  if (webGLVersion === 1) {\n    if (!hasExtension(gl, 'OES_texture_float')) {\n      return false;\n    }\n  } else {\n    if (!hasExtension(gl, 'EXT_color_buffer_float')) {\n      return false;\n    }\n  }\n\n  const isFrameBufferComplete = createFloatTextureAndBindToFramebuffer(gl);\n  return isFrameBufferComplete;\n}\n\n/**\n * Check if we can download values from a float/half-float texture.\n *\n * Note that for performance reasons we use binding a texture to a framebuffer\n * as a proxy for ability to download float values later using readPixels. The\n * texture params of this texture will not match those in readPixels exactly\n * but if we are unable to bind some kind of float texture to the frameBuffer\n * then we definitely will not be able to read float values from it.\n */\nexport function isDownloadFloatTextureEnabled(webGLVersion: number): boolean {\n  if (webGLVersion === 0) {\n    return false;\n  }\n\n  const gl = getWebGLContext(webGLVersion);\n\n  if (webGLVersion === 1) {\n    if (!hasExtension(gl, 'OES_texture_float')) {\n      return false;\n    }\n    if (!hasExtension(gl, 'WEBGL_color_buffer_float')) {\n      return false;\n    }\n  } else {\n    if (hasExtension(gl, 'EXT_color_buffer_float')) {\n      return createFloatTextureAndBindToFramebuffer(gl);\n    }\n\n    const COLOR_BUFFER_HALF_FLOAT = 'EXT_color_buffer_half_float';\n    if (hasExtension(gl, COLOR_BUFFER_HALF_FLOAT)) {\n      const textureHalfFloatExtension =\n          gl.getExtension(COLOR_BUFFER_HALF_FLOAT);\n      return createHalfFloatTextureAndBindToFramebuffer(\n          gl, textureHalfFloatExtension);\n    }\n\n    return false;\n  }\n\n  const isFrameBufferComplete = createFloatTextureAndBindToFramebuffer(gl);\n  return isFrameBufferComplete;\n}\n\nfunction createFloatTextureAndBindToFramebuffer(gl: WebGLRenderingContext):\n    boolean {\n  const texConfig = getTextureConfig(gl);\n\n  const texture = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n\n  const width = 1;\n  const height = 1;\n  gl.texImage2D(\n      gl.TEXTURE_2D, 0, texConfig.internalFormatFloat, width, height, 0,\n      texConfig.textureFormatFloat, texConfig.textureTypeFloat, null);\n\n  const frameBuffer = gl.createFramebuffer();\n  gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n  gl.framebufferTexture2D(\n      gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n  const isFrameBufferComplete =\n      gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n\n  gl.bindTexture(gl.TEXTURE_2D, null);\n  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  gl.deleteTexture(texture);\n  gl.deleteFramebuffer(frameBuffer);\n\n  return isFrameBufferComplete;\n}\n\nfunction createHalfFloatTextureAndBindToFramebuffer(\n    // tslint:disable-next-line:no-any\n    gl: WebGLRenderingContext, textureHalfFloatExtension: any): boolean {\n  const texConfig = getTextureConfig(gl, textureHalfFloatExtension);\n  const texture = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n\n  const width = 1;\n  const height = 1;\n  gl.texImage2D(\n      gl.TEXTURE_2D, 0, texConfig.internalFormatHalfFloat, width, height, 0,\n      texConfig.textureFormatFloat, texConfig.textureTypeHalfFloat, null);\n\n  const frameBuffer = gl.createFramebuffer();\n  gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n  gl.framebufferTexture2D(\n      gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n  const isFrameBufferComplete =\n      gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n\n  gl.bindTexture(gl.TEXTURE_2D, null);\n  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  gl.deleteTexture(texture);\n  gl.deleteFramebuffer(frameBuffer);\n\n  return isFrameBufferComplete;\n}\n\nexport function isWebGLFenceEnabled(webGLVersion: number) {\n  if (webGLVersion !== 2) {\n    return false;\n  }\n  const gl = getWebGLContext(webGLVersion);\n\n  // tslint:disable-next-line:no-any\n  const isEnabled = (gl as any).fenceSync != null;\n  return isEnabled;\n}\n\nexport function assertNotComplex(\n    tensor: TensorInfo|TensorInfo[], opName: string): void {\n  if (!Array.isArray(tensor)) {\n    tensor = [tensor];\n  }\n  tensor.forEach(t => {\n    if (t != null) {\n      util.assert(\n          t.dtype !== 'complex64',\n          () => `${opName} does not support complex64 tensors ` +\n              'in the WebGL backend.');\n    }\n  });\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {device_util, env} from '@tensorflow/tfjs-core';\n\nimport {getMaxTexturesInShader, getWebGLDisjointQueryTimerVersion, getWebGLMaxTextureSize, isCapableOfRenderingToFloatTexture, isDownloadFloatTextureEnabled, isWebGLFenceEnabled, isWebGLVersionEnabled} from './webgl_util';\n\nconst ENV = env();\n\n/**\n * This file contains WebGL-specific flag registrations.\n */\n\n/**\n * True if WebGL is supported.\n */\nENV.registerFlag('HAS_WEBGL', () => ENV.getNumber('WEBGL_VERSION') > 0);\n\n/** 0: No WebGL, 1: WebGL 1.0, 2: WebGL 2.0. */\nENV.registerFlag('WEBGL_VERSION', () => {\n  if (isWebGLVersionEnabled(2)) {\n    return 2;\n  } else if (isWebGLVersionEnabled(1)) {\n    return 1;\n  }\n  return 0;\n});\n\n/** Whether to check for numerical representation problems. */\nENV.registerFlag('WEBGL_CHECK_NUMERICAL_PROBLEMS', () => false);\n\nENV.registerFlag(\n    'WEBGL_BUFFER_SUPPORTED', () => ENV.get('WEBGL_VERSION') === 2);\n\n/** Whether the WebGL backend will sometimes forward ops to the CPU. */\nENV.registerFlag('WEBGL_CPU_FORWARD', () => true);\n\n/** Whether the WebGL backend will always use f16 textures for rendering. */\nENV.registerFlag('WEBGL_FORCE_F16_TEXTURES', () => false);\n\n/** Whether to turn all packing related flags on. */\nENV.registerFlag('WEBGL_PACK', () => ENV.getBool('HAS_WEBGL'));\n\n/** Whether we will pack the batchnormalization op. */\nENV.registerFlag('WEBGL_PACK_NORMALIZATION', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack the clip op. */\nENV.registerFlag('WEBGL_PACK_CLIP', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack the depthwise conv op. */\nENV.registerFlag('WEBGL_PACK_DEPTHWISECONV', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack binary ops. */\nENV.registerFlag(\n    'WEBGL_PACK_BINARY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack unary ops. */\nENV.registerFlag(\n    'WEBGL_PACK_UNARY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack array ops. */\nENV.registerFlag(\n    'WEBGL_PACK_ARRAY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack image ops. */\nENV.registerFlag(\n    'WEBGL_PACK_IMAGE_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack reduce ops. */\nENV.registerFlag('WEBGL_PACK_REDUCE', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether packed WebGL kernels lazily unpack their outputs. */\nENV.registerFlag('WEBGL_LAZILY_UNPACK', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will use the im2col algorithm to speed up convolutions. */\nENV.registerFlag('WEBGL_CONV_IM2COL', () => ENV.getBool('WEBGL_PACK'));\n\n/** The maximum texture dimension. */\nENV.registerFlag(\n    'WEBGL_MAX_TEXTURE_SIZE',\n    () => getWebGLMaxTextureSize(ENV.getNumber('WEBGL_VERSION')));\n\n/** The maximum texture dimension. */\nENV.registerFlag(\n    'WEBGL_MAX_TEXTURES_IN_SHADER',\n    () => getMaxTexturesInShader(ENV.getNumber('WEBGL_VERSION')));\n\n/**\n * The disjoint_query_timer extension version.\n * 0: disabled, 1: EXT_disjoint_timer_query, 2:\n * EXT_disjoint_timer_query_webgl2.\n * In Firefox with WebGL 2.0,\n * EXT_disjoint_timer_query_webgl2 is not available, so we must use the\n * WebGL 1.0 extension.\n */\nENV.registerFlag('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION', () => {\n  const webGLVersion = ENV.getNumber('WEBGL_VERSION');\n\n  if (webGLVersion === 0) {\n    return 0;\n  }\n  return getWebGLDisjointQueryTimerVersion(webGLVersion);\n});\n\n/**\n * Whether the timer object from the disjoint_query_timer extension gives\n * timing information that is reliable.\n */\nENV.registerFlag(\n    'WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE',\n    () => ENV.getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0 &&\n        !device_util.isMobile());\n\n/**\n * Whether the device is physically capable of rendering to float32 textures.\n */\nENV.registerFlag(\n    'WEBGL_RENDER_FLOAT32_CAPABLE',\n    () => isCapableOfRenderingToFloatTexture(ENV.getNumber('WEBGL_VERSION')));\n\n/**\n * Whether rendering to float32 textures is enabled. If disabled, renders to\n * float16 textures.\n */\nENV.registerFlag('WEBGL_RENDER_FLOAT32_ENABLED', () => {\n  return ENV.getBool('WEBGL_FORCE_F16_TEXTURES') ?\n      false :\n      ENV.getBool('WEBGL_RENDER_FLOAT32_CAPABLE');\n});\n\n/**\n * Whether downloading float textures is enabled (16 or 32 bit). If disabled,\n * uses IEEE 754 encoding of the float32 values to 4 uint8 when downloading.\n */\nENV.registerFlag(\n    'WEBGL_DOWNLOAD_FLOAT_ENABLED',\n    () => isDownloadFloatTextureEnabled(ENV.getNumber('WEBGL_VERSION')));\n\n/** Whether the fence API is available. */\nENV.registerFlag(\n    'WEBGL_FENCE_API_ENABLED',\n    () => isWebGLFenceEnabled(ENV.getNumber('WEBGL_VERSION')));\n\n/**\n * Tensors with size <= than this will be uploaded as uniforms, not textures.\n */\nENV.registerFlag('WEBGL_SIZE_UPLOAD_UNIFORM', () => {\n  // Use uniform uploads only when 32bit floats are supported. In\n  // 16bit\n  // environments there are problems with comparing a 16bit texture value\n  // with a 32bit uniform value.\n  const useUniforms = ENV.getBool('WEBGL_RENDER_FLOAT32_ENABLED');\n  return useUniforms ? 4 : 0;\n});\n\n/**\n * If the total number of bytes allocated on the GPU is greater than this\n * number, we will aggressively delete textures upon disposal with\n * gl.deleteMatrixTexture, rather than making them available for reuse.\n *\n * Default value -1 indicates that we will never aggressively delete textures.\n */\nENV.registerFlag(\n    'WEBGL_DELETE_TEXTURE_THRESHOLD',\n    () => {\n      return -1;\n    },\n    threshold => {\n      if (threshold < 0 && threshold !== -1) {\n        throw new Error(\n            `WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never ` +\n            `delete) or at least 0, but got ${threshold}.`);\n      }\n    });\n\n/**\n * Trigger a manual GL command flush if the threshold of time has passed since\n * previous Kernel execution. This can be useful for Andorid device where GL\n * command flush are delayed un til the end of javascript task. This value is\n * measured in millisecond. Typically you want to set this value to close to 1.\n *\n * Default value 1 for mobile chrome, and -1 for rest cases. -1 indicates that\n * we will not enforce manual flush and depend on system default flush schedule.\n */\nENV.registerFlag(\n    'WEBGL_FLUSH_THRESHOLD',\n    () => {\n      return device_util.isMobile() ? 1 : -1;\n    },\n    threshold => {\n      if (threshold < 0 && threshold !== -1) {\n        throw new Error(\n            `WEBGL_FLUSH_THRESHOLD must be -1 (indicating never ` +\n            `manual flush) or at least 0, but got ${threshold}.`);\n      }\n    });\n\n/**\n * Threshold for input tensor size that determines whether WebGL backend will\n * delegate computation to CPU.\n *\n * Default value is 128.\n */\nENV.registerFlag('CPU_HANDOFF_SIZE_THRESHOLD', () => 128);\n\n/** Whether we will use shapes uniforms. */\nENV.registerFlag('WEBGL_USE_SHAPES_UNIFORMS', () => false);\n\n/**\n * Threshold for last dimension of input tensor that determines whether\n * WebGL backend for the Top K op will delegate computation to CPU. If input\n * is smaller than threshold then CPU will be used\n *\n * Default value is 100000.\n */\nENV.registerFlag('TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD', () => 100000);\n\n/**\n * Threshold for K that determines whether\n * WebGL backend for the Top K op will delegate computation to CPU. If k\n * is larger than threshold then CPU will be used\n *\n * Default value is 128.\n */\nENV.registerFlag('TOPK_K_CPU_HANDOFF_THRESHOLD', () => 128);\n\n/** Whether we will use the experimental conv op. */\nENV.registerFlag('WEBGL_EXP_CONV', () => false);\n\n/**\n * If the device performance is low or if no hardware GPU is available, whether\n * software WebGL will be used.\n */\nENV.registerFlag('SOFTWARE_WEBGL_ENABLED', () => ENV.getBool('IS_TEST'));\n\n/**\n * For narrow texture (physical height or physical width is 1), if the length of\n * any texture edges exceed the threshold, the texture will be reshaped to be\n * more squarish.\n *\n * This flag is used to help some GPUs that could not provide correct\n * interpolations for long skinny triangles. We found Mali GPU probably has this\n * problem: https://github.com/tensorflow/tfjs/issues/6775.\n */\nENV.registerFlag('WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE', () => Infinity);\n\n/**\n * If the flag is set to true, the max size of the narrow texture will be auto\n * computed and it will be considerred as a threshold to reshape the narrow\n * texture to be more squarish.\n *\n * This flag is used to help some GPUs that could not provide correct\n * interpolations for long skinny triangles. We found Mali GPU probably has this\n * problem: https://github.com/tensorflow/tfjs/issues/6775.\n */\nENV.registerFlag('WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE', () => false);\n\n/**\n * Whether to use the customized isnan. It's only useful for webgl2 since webgl1\n * doesn't have the builtin isnan.\n */\nENV.registerFlag('WEBGL2_ISNAN_CUSTOM', () => false);\n\n/** Experimental flag, whether enter compile only phase. */\nENV.registerFlag('ENGINE_COMPILE_ONLY', () => false);\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {env} from '@tensorflow/tfjs-core';\n\nexport type GLSL = {\n  version: string,\n  attribute: string,\n  varyingVs: string,\n  varyingFs: string,\n  texture2D: string,\n  output: string,\n  defineOutput: string,\n  defineSpecialNaN: string,\n  defineSpecialInf: string,\n  defineRound: string\n};\n\nexport function getGlslDifferences(): GLSL {\n  let version: string;\n  let attribute: string;\n  let varyingVs: string;\n  let varyingFs: string;\n  let texture2D: string;\n  let output: string;\n  let defineOutput: string;\n  let defineSpecialNaN: string;\n  let defineSpecialInf: string;\n  let defineRound: string;\n\n  if (env().getNumber('WEBGL_VERSION') === 2) {\n    version = '#version 300 es';\n    attribute = 'in';\n    varyingVs = 'out';\n    varyingFs = 'in';\n    texture2D = 'texture';\n    output = 'outputColor';\n    defineOutput = 'out vec4 outputColor;';\n\n    // Use custom isnan definition to work across differences between\n    // implementations on various platforms. While this should happen in ANGLE\n    // we still see differences between android and windows (on chrome) when\n    // using isnan directly. Since WebGL2 supports uint type and\n    // floatBitsToUinT built-in function, we could implment isnan following\n    // IEEE 754 rules.\n    // NaN defination in IEEE 754-1985 is :\n    //   - sign = either 0 or 1.\n    //   - biased exponent = all 1 bits.\n    //   - fraction = anything except all 0 bits (since all 0 bits represents\n    //   infinity).\n    // https://en.wikipedia.org/wiki/IEEE_754-1985#Representation_of_non-numbers\n    defineSpecialNaN = env().getBool('WEBGL2_ISNAN_CUSTOM') ? `\n      bool isnan_custom(float val) {\n        uint floatToUint = floatBitsToUint(val);\n        return (floatToUint & 0x7fffffffu) > 0x7f800000u;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ` :\n                                                              '';\n    // In webgl 2 we do not need to specify a custom isinf so there is no\n    // need for a special INFINITY constant.\n    defineSpecialInf = ``;\n    defineRound = `\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    `;\n  } else {\n    version = '';\n    attribute = 'attribute';\n    varyingVs = 'varying';\n    varyingFs = 'varying';\n    texture2D = 'texture2D';\n    output = 'gl_FragColor';\n    defineOutput = '';\n    // WebGL1 has no built in isnan so we define one here.\n    defineSpecialNaN = `\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    `;\n    defineSpecialInf = `\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    `;\n    defineRound = `\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    `;\n  }\n\n  return {\n    version,\n    attribute,\n    varyingVs,\n    varyingFs,\n    texture2D,\n    output,\n    defineOutput,\n    defineSpecialNaN,\n    defineSpecialInf,\n    defineRound\n  };\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {util} from '@tensorflow/tfjs-core';\n\n/**\n * Produces GLSL code that derives logical coordinates from a flat\n * index. The code performs integer division with each stride and decrements\n * the index until the index equals the final dimension coordinate.\n */\nexport function getLogicalCoordinatesFromFlatIndex(\n    coords: string[], shape: number[], index = 'index'): string {\n  const strides = util.computeStrides(shape);\n  return strides\n      .map((stride, i) => {\n        const line1 = `int ${coords[i]} = ${index} / ${stride}`;\n        const line2 = i === strides.length - 1 ?\n            `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${stride}` :\n            `index -= ${coords[i]} * ${stride}`;\n        return `${line1}; ${line2};`;\n      })\n      .join('');\n}\n\nexport function getOutputLogicalCoordinatesFromFlatIndexByUniform(\n    coords: string[], shape: number[], index = 'index'): string {\n  const strides = util.computeStrides(shape);\n  return strides\n      .map((_, i) => {\n        const line1 = `int ${coords[i]} = ${index} / outShapeStrides[${i}]`;\n        const line2 = i === strides.length - 1 ?\n            `int ${coords[i + 1]} = ${index} - ${coords[i]} * outShapeStrides[${\n                i}]` :\n            `index -= ${coords[i]} * outShapeStrides[${i}]`;\n        return `${line1}; ${line2};`;\n      })\n      .join('');\n}\n\n// Produces GLSL code that computes strides.\nfunction symbolicallyComputeStrides(\n    indicesArr: number[], variableName: string): string[] {\n  const numCoords = indicesArr.length;\n  const shape = indicesArr.map(d => `${variableName}[${d}]`);\n  const strides = new Array(numCoords - 1);\n  strides[numCoords - 2] = shape[numCoords - 1];\n  for (let i = numCoords - 3; i >= 0; --i) {\n    strides[i] = `(${strides[i + 1]} * ${shape[i + 1]})`;\n  }\n\n  return strides;\n}\n\nexport function getLogicalCoordinatesFromFlatIndexByUniform(\n    coords: string[], variableName: string, index = 'index'): string {\n  const indicesArray = coords.map((_, i) => i);\n  const strides = symbolicallyComputeStrides(indicesArray, variableName);\n  return strides\n      .map((_, i) => {\n        const line1 = `int ${coords[i]} = ${index} / ${strides[i]}`;\n        const line2 = i === strides.length - 1 ?\n            `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${strides[i]}` :\n            `index -= ${coords[i]} * ${strides[i]}`;\n        return `${line1}; ${line2};`;\n      })\n      .join('');\n}\n\nfunction buildVec(x: string[]): string {\n  if (x.length === 1) {\n    return `${x[0]}`;\n  }\n  return `vec${x.length}(${x.join(',')})`;\n}\n\n/**\n * Produces GLSL code that computes the dot product of the input x and y\n * vectors. Handles splitting inputs into increments of vec4s when necessary.\n */\nexport function dotify(x: string[], y: string[]): string {\n  if (x.length !== y.length) {\n    throw new Error(\n        `Vectors to be dotted must be of the same length -` +\n        `got ${x.length} and ${y.length}`);\n  }\n\n  const slices: string[] = [];\n  const nearestVec4 = Math.floor(x.length / 4);\n  const nearestVec4Remainder = x.length % 4;\n\n  for (let i = 0; i < nearestVec4; i++) {\n    const xSlice = x.slice(i * 4, i * 4 + 4);\n    const ySlice = y.slice(i * 4, i * 4 + 4);\n    slices.push(`${buildVec(xSlice)}, ${buildVec(ySlice)}`);\n  }\n\n  if (nearestVec4Remainder !== 0) {\n    let xSlice = x.slice(nearestVec4 * 4);\n    let ySlice = y.slice(nearestVec4 * 4);\n    if (xSlice.length === 1) {\n      xSlice = xSlice.map(d => `float(${d})`);\n      ySlice = ySlice.map(d => `float(${d})`);\n    }\n    slices.push(`${buildVec(xSlice)}, ${buildVec(ySlice)}`);\n  }\n\n  return slices.map((d, i) => `dot(${d})`).join('+');\n}\n\n/**\n * Produces GLSL that computes the flat index from 3D coordinates.\n */\nexport function getFlatIndexFrom3D(shape: [number, number, number]): string {\n  const strides = util.computeStrides(shape).map(d => d.toString());\n\n  return `\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${strides[0]} + coords.y * ${strides[1]} + coords.z;\n  }\n`;\n}\n\nexport function getFlatIndexFrom3DOutput(): string {\n  return `\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n`;\n}\n\nexport const ENCODE_FLOAT_SNIPPET = `\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n`;\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Please make sure the shaker key in makeShaderKey in gpgpu_math.ts is well\n// mapped if any shader source code is changed in this file.\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\nconst {getBroadcastDims} = backend_util;\nimport {getGlslDifferences, GLSL} from './glsl_version';\nimport * as shader_util from './shader_compiler_util';\n\nexport type ShapeInfo = {\n  logicalShape: number[],\n  texShape: [number, number],\n  isUniform: boolean,\n  isPacked: boolean,\n  flatOffset: number\n};\n\nexport type InputInfo = {\n  name: string,\n  shapeInfo: ShapeInfo\n};\n\nexport type UniformType =\n    'float'|'vec2'|'vec3'|'vec4'|'int'|'ivec2'|'ivec3'|'ivec4';\n\ninterface ProgramParams {\n  userCode: string;\n  enableShapeUniforms?: boolean;\n  packedInputs?: boolean;\n  customUniforms?:\n      Array<{name: string; arrayIndex?: number; type: UniformType;}>;\n}\n\nexport function makeShader(\n    inputsInfo: InputInfo[], outputShape: ShapeInfo,\n    program: ProgramParams): string {\n  const prefixSnippets: string[] = [];\n  inputsInfo.forEach(x => {\n    const size = util.sizeFromShape(x.shapeInfo.logicalShape);\n\n    // Snippet when we decided to upload the values as uniform.\n    if (x.shapeInfo.isUniform) {\n      prefixSnippets.push(\n          `uniform float ${x.name}${size > 1 ? `[${size}]` : ''};`);\n    } else {\n      prefixSnippets.push(`uniform sampler2D ${x.name};`);\n      prefixSnippets.push(`uniform int offset${x.name};`);\n    }\n\n    if (program.enableShapeUniforms) {\n      const {uniformShape} = getUniformInfoFromShape(\n          program.packedInputs, x.shapeInfo.logicalShape, x.shapeInfo.texShape);\n      switch (uniformShape.length) {\n        case 1:\n          prefixSnippets.push(`uniform int ${x.name}Shape;`);\n          break;\n        case 2:\n          prefixSnippets.push(`uniform ivec2 ${x.name}Shape;`);\n          break;\n        case 3:\n          prefixSnippets.push(`uniform ivec3 ${x.name}Shape;`);\n          break;\n        case 4:\n          prefixSnippets.push(`uniform ivec4 ${x.name}Shape;`);\n          break;\n        default:\n          break;\n      }\n      prefixSnippets.push(`uniform ivec2 ${x.name}TexShape;`);\n    }\n  });\n\n  if (program.enableShapeUniforms) {\n    switch (outputShape.logicalShape.length) {\n      case 1:\n        prefixSnippets.push(`uniform int outShape;`);\n        break;\n      case 2:\n        prefixSnippets.push(`uniform ivec2 outShape;`);\n        prefixSnippets.push(`uniform int outShapeStrides;`);\n        break;\n      case 3:\n        prefixSnippets.push(`uniform ivec3 outShape;`);\n        prefixSnippets.push(`uniform ivec2 outShapeStrides;`);\n        break;\n      case 4:\n        prefixSnippets.push(`uniform ivec4 outShape;`);\n        prefixSnippets.push(`uniform ivec3 outShapeStrides;`);\n        break;\n      default:\n        break;\n    }\n    prefixSnippets.push(`uniform ivec2 outTexShape;`);\n  }\n  if (program.customUniforms) {\n    program.customUniforms.forEach((d) => {\n      prefixSnippets.push(`uniform ${d.type} ${d.name}${\n          d.arrayIndex ? `[${d.arrayIndex}]` : ''};`);\n    });\n  }\n  const inputPrefixSnippet = prefixSnippets.join('\\n');\n\n  const inputSamplingSnippet = inputsInfo\n                                   .map(\n                                       x => getInputSamplingSnippet(\n                                           x, outputShape, program.packedInputs,\n                                           program.enableShapeUniforms))\n                                   .join('\\n');\n  const outTexShape = outputShape.texShape;\n  const glsl = getGlslDifferences();\n  const floatTextureSampleSnippet = getFloatTextureSampleSnippet(glsl);\n  let outputSamplingSnippet: string;\n  let floatTextureSetOutputSnippet: string;\n  let shaderPrefix = getShaderPrefix(glsl);\n\n  if (outputShape.isPacked) {\n    outputSamplingSnippet = getPackedOutputSamplingSnippet(\n        outputShape.logicalShape, outTexShape, program.enableShapeUniforms);\n    floatTextureSetOutputSnippet = getFloatTextureSetRGBASnippet(glsl);\n  } else {\n    outputSamplingSnippet = getOutputSamplingSnippet(\n        outputShape.logicalShape, outTexShape, program.enableShapeUniforms);\n    floatTextureSetOutputSnippet = getFloatTextureSetRSnippet(glsl);\n  }\n\n  if (program.packedInputs) {\n    shaderPrefix += SHADER_PACKED_PREFIX;\n  }\n\n  const source = [\n    shaderPrefix, floatTextureSampleSnippet, floatTextureSetOutputSnippet,\n    inputPrefixSnippet, outputSamplingSnippet, inputSamplingSnippet,\n    program.userCode\n  ].join('\\n');\n  return source;\n}\n\nfunction getSamplerFromInInfo(\n    inInfo: InputInfo, enableShapeUniforms = false): string {\n  const shape = inInfo.shapeInfo.logicalShape;\n  switch (shape.length) {\n    case 0:\n      return getSamplerScalar(inInfo, enableShapeUniforms);\n    case 1:\n      return getSampler1D(inInfo, enableShapeUniforms);\n    case 2:\n      return getSampler2D(inInfo, enableShapeUniforms);\n    case 3:\n      return getSampler3D(inInfo, enableShapeUniforms);\n    case 4:\n      return getSampler4D(inInfo, enableShapeUniforms);\n    case 5:\n      return getSampler5D(inInfo);\n    case 6:\n      return getSampler6D(inInfo);\n    default:\n      throw new Error(\n          `${shape.length}-D input sampling` +\n          ` is not yet supported`);\n  }\n}\n\nfunction getPackedSamplerFromInInfo(\n    inInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inInfo.shapeInfo.logicalShape;\n  switch (shape.length) {\n    case 0:\n      return getPackedSamplerScalar(inInfo);\n    case 1:\n      return getPackedSampler1D(inInfo, enableShapeUniforms);\n    case 2:\n      return getPackedSampler2D(inInfo, enableShapeUniforms);\n    case 3:\n      return getPackedSampler3D(inInfo, enableShapeUniforms);\n    default:\n      return getPackedSamplerND(inInfo, enableShapeUniforms);\n  }\n}\n\nfunction getInputSamplingSnippet(\n    inInfo: InputInfo, outShapeInfo: ShapeInfo, usesPackedTextures = false,\n    enableShapeUniforms: boolean): string {\n  let res = '';\n  if (usesPackedTextures) {\n    res += getPackedSamplerFromInInfo(inInfo, enableShapeUniforms);\n  } else {\n    res += getSamplerFromInInfo(inInfo, enableShapeUniforms);\n  }\n\n  const inShape = inInfo.shapeInfo.logicalShape;\n  const outShape = outShapeInfo.logicalShape;\n  if (inShape.length <= outShape.length) {\n    if (usesPackedTextures) {\n      res += getPackedSamplerAtOutputCoords(inInfo, outShapeInfo);\n    } else {\n      res += getSamplerAtOutputCoords(inInfo, outShapeInfo);\n    }\n  }\n  return res;\n}\n\nfunction getPackedOutputSamplingSnippet(\n    outShape: number[], outTexShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  switch (outShape.length) {\n    case 0:\n      return getOutputScalarCoords();\n    case 1:\n      return getOutputPacked1DCoords(\n          outShape as [number], outTexShape, enableShapeUniforms);\n    case 2:\n      return getOutputPacked2DCoords(\n          outShape as [number, number], outTexShape, enableShapeUniforms);\n    case 3:\n      return getOutputPacked3DCoords(\n          outShape as [number, number, number], outTexShape,\n          enableShapeUniforms);\n    default:\n      return getOutputPackedNDCoords(\n          outShape, outTexShape, enableShapeUniforms);\n  }\n}\n\nfunction getOutputSamplingSnippet(\n    outShape: number[], outTexShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  switch (outShape.length) {\n    case 0:\n      return getOutputScalarCoords();\n    case 1:\n      return getOutput1DCoords(\n          outShape as [number], outTexShape, enableShapeUniforms);\n    case 2:\n      return getOutput2DCoords(\n          outShape as [number, number], outTexShape, enableShapeUniforms);\n    case 3:\n      return getOutput3DCoords(\n          outShape as [number, number, number], outTexShape,\n          enableShapeUniforms);\n    case 4:\n      return getOutput4DCoords(\n          outShape as [number, number, number, number], outTexShape,\n          enableShapeUniforms);\n    case 5:\n      return getOutput5DCoords(\n          outShape as [number, number, number, number, number], outTexShape);\n    case 6:\n      return getOutput6DCoords(\n          outShape as [number, number, number, number, number, number],\n          outTexShape);\n    default:\n      throw new Error(\n          `${outShape.length}-D output sampling is not yet supported`);\n  }\n}\n\nfunction getFloatTextureSampleSnippet(glsl: GLSL): string {\n  return `\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${glsl.texture2D}(textureSampler, uv).r;\n    }\n  `;\n}\n\nfunction getFloatTextureSetRSnippet(glsl: GLSL): string {\n  return `\n    void setOutput(float val) {\n      ${glsl.output} = vec4(val, 0, 0, 0);\n    }\n  `;\n}\n\nfunction getFloatTextureSetRGBASnippet(glsl: GLSL): string {\n  return `\n    void setOutput(vec4 val) {\n      ${glsl.output} = val;\n    }\n  `;\n}\n\nfunction getShaderPrefix(glsl: GLSL): string {\n  const SHADER_PREFIX = `${glsl.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${glsl.varyingFs} vec2 resultUV;\n    ${glsl.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${glsl.defineSpecialNaN}\n    ${glsl.defineSpecialInf}\n    ${glsl.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${SAMPLE_1D_SNIPPET}\n    ${SAMPLE_2D_SNIPPET}\n    ${SAMPLE_3D_SNIPPET}\n  `;\n\n  return SHADER_PREFIX;\n}\n\nconst SAMPLE_1D_SNIPPET = `\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\n\nconst SAMPLE_2D_SNIPPET = `\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\n\nconst SAMPLE_3D_SNIPPET = `\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\n\nconst SHADER_PACKED_PREFIX = `\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n`;\n\nfunction getOutputScalarCoords() {\n  return `\n    int getOutputCoords() {\n      return 0;\n    }\n  `;\n}\n\nfunction getOutputPacked1DCoords(\n    shape: [number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  if (packedTexShape[0] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));\n      }\n    `;\n    }\n\n    return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${packedTexShape[1]}.0);\n      }\n    `;\n  }\n\n  if (packedTexShape[1] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));\n      }\n    `;\n    }\n\n    return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${packedTexShape[0]}.0);\n      }\n    `;\n  }\n\n  if (enableShapeUniforms) {\n    return `\n    int getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);\n    }\n  `;\n  }\n\n  return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      return 2 * (resTexRC.x * ${packedTexShape[1]} + resTexRC.y);\n    }\n  `;\n}\n\nfunction getOutput1DCoords(\n    shape: [number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (texShape[0] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return int(resultUV.x * float(outTexShape[1]));\n      }\n    `;\n    }\n    return `\n      int getOutputCoords() {\n        return int(resultUV.x * ${texShape[1]}.0);\n      }\n    `;\n  }\n  if (texShape[1] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return int(resultUV.y * float(outTexShape[0]));\n      }\n    `;\n    }\n    return `\n      int getOutputCoords() {\n        return int(resultUV.y * ${texShape[0]}.0);\n      }\n    `;\n  }\n  if (enableShapeUniforms) {\n    return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      return resTexRC.x * outTexShape[1] + resTexRC.y;\n    }\n  `;\n  }\n  return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      return resTexRC.x * ${texShape[1]} + resTexRC.y;\n    }\n  `;\n}\n\nfunction getOutputPacked3DCoords(\n    shape: [number, number, number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (enableShapeUniforms) {\n    return `\n    ivec3 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `;\n  }\n\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const texelsInLogicalRow = Math.ceil(shape[2] / 2);\n  const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\n\n  return `\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n\n      int b = index / ${texelsInBatch};\n      index -= b * ${texelsInBatch};\n\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `;\n}\n\nfunction getOutput3DCoords(\n    shape: [number, number, number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (enableShapeUniforms) {\n    const coordsFromIndexSnippet =\n        shader_util.getOutputLogicalCoordinatesFromFlatIndexByUniform(\n            ['r', 'c', 'd'], shape);\n\n    return `\n  ivec3 getOutputCoords() {\n    ivec2 resTexRC = ivec2(resultUV.yx *\n                           vec2(outTexShape[0], outTexShape[1]));\n    int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n    ${coordsFromIndexSnippet}\n    return ivec3(r, c, d);\n  }\n`;\n  }\n  const coordsFromIndexSnippet =\n      shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);\n\n  return `\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec3(r, c, d);\n    }\n  `;\n}\n\nfunction getOutputPackedNDCoords(\n    shape: number[], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (enableShapeUniforms) {\n    // TODO: support 5d and 6d\n    return `\n    ivec4 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatchN = texelsInBatch * outShape[1];\n\n      int b2 = index / texelsInBatchN;\n      index -= b2 * texelsInBatchN;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec4(b2, b, r, c);\n    }\n  `;\n  }\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n\n  const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\n  const texelsInBatch =\n      texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\n  let texelsInBatchN = texelsInBatch;\n  let batches = ``;\n  let coords = 'b, r, c';\n\n  for (let b = 2; b < shape.length - 1; b++) {\n    texelsInBatchN *= shape[shape.length - b - 1];\n    batches = `\n      int b${b} = index / ${texelsInBatchN};\n      index -= b${b} * ${texelsInBatchN};\n    ` + batches;\n    coords = `b${b}, ` + coords;\n  }\n\n  return `\n    ivec${shape.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n\n      ${batches}\n\n      int b = index / ${texelsInBatch};\n      index -= b * ${texelsInBatch};\n\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec${shape.length}(${coords});\n    }\n  `;\n}\n\nfunction getOutput4DCoords(\n    shape: [number, number, number, number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (enableShapeUniforms) {\n    const coordsFromIndexSnippet =\n        shader_util.getOutputLogicalCoordinatesFromFlatIndexByUniform(\n            ['r', 'c', 'd', 'd2'], shape);\n\n    return `\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec4(r, c, d, d2);\n    }\n  `;\n  }\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(\n      ['r', 'c', 'd', 'd2'], shape);\n\n  return `\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec4(r, c, d, d2);\n    }\n  `;\n}\n\nfunction getOutput5DCoords(\n    shape: [number, number, number, number, number],\n    texShape: [number, number]): string {\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(\n      ['r', 'c', 'd', 'd2', 'd3'], shape);\n\n  return `\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${texShape[0]},\n                             ${texShape[1]}));\n\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n\n      ${coordsFromIndexSnippet}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `;\n}\n\nfunction getOutput6DCoords(\n    shape: [number, number, number, number, number, number],\n    texShape: [number, number]): string {\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(\n      ['r', 'c', 'd', 'd2', 'd3', 'd4'], shape);\n\n  return `\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n\n      ${coordsFromIndexSnippet}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `;\n}\n\nfunction getOutputPacked2DCoords(\n    shape: [number, number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  if (util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));\n      }\n    `;\n    }\n\n    return `\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${packedTexShape[0]}, ${\n        packedTexShape[1]}));\n      }\n    `;\n  }\n\n  // texels needed to accommodate a logical row\n  const texelsInLogicalRow = Math.ceil(shape[1] / 2);\n\n  /**\n   * getOutputCoords\n   *\n   * resTexRC: The rows and columns of the texels. If you move over one\n   * texel to the right in the packed texture, you are moving over one column\n   * (not two).\n   *\n   * index: The texel index\n   */\n  if (enableShapeUniforms) {\n    return `\n    ivec2 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec2(r, c);\n    }\n  `;\n  }\n\n  return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec2(r, c);\n    }\n  `;\n}\n\nfunction getOutput2DCoords(\n    shape: [number, number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));\n      }\n    `;\n    }\n    return `\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${texShape[0]}, ${texShape[1]}));\n      }\n    `;\n  }\n  if (shape[1] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;\n    }\n    return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;\n  }\n  if (shape[0] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;\n    }\n    return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;\n  }\n  if (enableShapeUniforms) {\n    return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      int r = index / outShape[1];\n      int c = index - r * outShape[1];\n      return ivec2(r, c);\n    }\n  `;\n  }\n  return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      int r = index / ${shape[1]};\n      int c = index - r * ${shape[1]};\n      return ivec2(r, c);\n    }\n  `;\n}\n\nfunction getFlatOffsetUniformName(texName: string): string {\n  return `offset${texName}`;\n}\n\nfunction getPackedSamplerScalar(inputInfo: InputInfo): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const glsl = getGlslDifferences();\n  return `\n    vec4 ${funcName}() {\n      return ${glsl.texture2D}(${texName}, halfCR);\n    }\n  `;\n}\n\nfunction getSamplerScalar(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  if (inputInfo.shapeInfo.isUniform) {\n    return `float ${funcName}() {return ${texName};}`;\n  }\n  const [texNumR, texNumC] = inputInfo.shapeInfo.texShape;\n  if (texNumR === 1 && texNumC === 1) {\n    return `\n      float ${funcName}() {\n        return sampleTexture(${texName}, halfCR);\n      }\n    `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}() {\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], ${\n        offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  const [tNumR, tNumC] = inputInfo.shapeInfo.texShape;\n  return `\n    float ${funcName}() {\n      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getPackedSampler1D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const glsl = getGlslDifferences();\n  if (enableShapeUniforms) {\n    return `\n    vec4 ${funcName}(int index) {\n      ivec2 packedTexShape = ivec2(ceil(float(${\n        texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      vec2 uv = packedUVfrom1D(\n        packedTexShape[0], packedTexShape[1], index);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  return `\n    vec4 ${funcName}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${packedTexShape[0]}, ${packedTexShape[1]}, index);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler1D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int index) {\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texShape = inputInfo.shapeInfo.texShape;\n  const tNumR = texShape[0];\n  const tNumC = texShape[1];\n\n  if (tNumC === 1 && tNumR === 1) {\n    return `\n      float ${funcName}(int index) {\n        return sampleTexture(${texName}, halfCR);\n      }\n    `;\n  }\n  const offset = getFlatOffsetUniformName(texName);\n  if (tNumC === 1) {\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${offset}) + 0.5) / float(${\n          texName}TexShape[0]));\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n\n    return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${offset}) + 0.5) / ${tNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (tNumR === 1) {\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2((float(index + ${offset}) + 0.5) / float(${\n          texName}TexShape[1]), 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n\n    return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2((float(index + ${offset}) + 0.5) / ${tNumC}.0, 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}(int index) {\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${\n        texName}TexShape[1], index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  return `\n    float ${funcName}(int index) {\n      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getPackedSampler2D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const glsl = getGlslDifferences();\n  if (texShape != null && util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texName}TexShape[1], ${\n          texName}TexShape[0]);\n\n        return ${glsl.texture2D}(${texName}, uv);\n      }\n    `;\n    }\n    return `\n      vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n\n        return ${glsl.texture2D}(${texName}, uv);\n      }\n    `;\n  }\n\n  if (enableShapeUniforms) {\n    return `\n    vec4 ${funcName}(int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${\n        texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${texName}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const valuesPerRow = Math.ceil(shape[1] / 2);\n\n  return `\n    vec4 ${funcName}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${valuesPerRow}, ${packedTexShape[0]}, ${\n      packedTexShape[1]}, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler2D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n\n  if (texShape != null && util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texName}TexShape[1], ${\n          texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n    return `\n    float ${funcName}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  const squeezedShape = newShape;\n  if (squeezedShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['row', 'col'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n      float ${funcName}(int row, int col) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${shape[1]}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const offset = getFlatOffsetUniformName(texName);\n  if (texNumC === 1) {\n    // index is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col) {\n        float index = dot(vec3(row, col, ${offset}), vec3(${\n          texName}Shape[1], 1, 1));\n        vec2 uv = vec2(0.5, (index + 0.5) / float(${texName}TexShape[0]));\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n    float ${funcName}(int row, int col) {\n      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n  if (texNumR === 1) {\n    // index is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col) {\n        float index = dot(vec3(row, col, ${offset}), vec3(${\n          texName}Shape[1], 1, 1));\n        vec2 uv = vec2((index + 0.5) / float(${texName}TexShape[1]), 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n    float ${funcName}(int row, int col) {\n      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  if (enableShapeUniforms) {\n    return `\n      float ${funcName}(int row, int col) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${texName}Shape[1] + col + ${offset};\n        vec2 uv = uvFromFlat(${texName}TexShape[0], ${\n        texName}TexShape[1], index);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  return `\n  float ${funcName}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${shape[1]} + col + ${offset};\n    vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n    return sampleTexture(${texName}, uv);\n  }\n`;\n}\n\nfunction getPackedSampler3D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n\n  if (shape[0] === 1) {\n    const squeezedShape = shape.slice(1);\n    const keptDims = [1, 2];\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['b', 'row', 'col'];\n    return `\n        ${getPackedSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n        vec4 ${funcName}(int b, int row, int col) {\n          return ${funcName}(${getSqueezedParams(params, keptDims)});\n        }\n      `;\n  }\n\n  const glsl = getGlslDifferences();\n  if (enableShapeUniforms) {\n    return `\n    vec4 ${funcName}(int b, int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${\n        texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${texName}Shape[2]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${\n        texName}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom3D(\n        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n\n  const texNumR = packedTexShape[0];\n  const texNumC = packedTexShape[1];\n\n  const valuesPerRow = Math.ceil(shape[2] / 2);\n  const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\n\n  return `\n    vec4 ${funcName}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${texNumR}, ${texNumC}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler3D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride0 = shape[1] * shape[2];\n  const stride1 = shape[2];\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  const squeezedShape = newShape;\n  if (squeezedShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['row', 'col', 'depth'];\n    return `\n        ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n        float ${funcName}(int row, int col, int depth) {\n          return ${funcName}(${getSqueezedParams(params, keptDims)});\n        }\n      `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${stride0}, ${stride1}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth) {\n        int stride1 = ${texName}Shape[2];\n        float texR = float(row);\n        float texC = dot(vec2(col, depth), vec2(stride1, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n        float ${funcName}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${stride1}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${texNumC}.0, ${texNumR}.0);\n          return sampleTexture(${texName}, uv);\n        }\n      `;\n  }\n\n  if (texNumC === stride1 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth) {\n        float texR = dot(vec2(row, col), vec2(${texName}Shape[1], 1));\n        float texC = float(depth);\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texName}TexShape[1], ${\n          texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n    float ${funcName}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${shape[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}(int row, int col, int depth) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int stride0 = ${texName}Shape[1] * ${texName}Shape[2];\n      int stride1 = ${texName}Shape[2];\n      int index = row * stride0 + col * stride1 + depth + ${offset};\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], index);\n      return sampleTexture(${texName}, uv);\n    }\n    `;\n  }\n  return `\n      float ${funcName}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${stride0} + col * ${stride1} + depth + ${offset};\n        vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n        return sampleTexture(${texName}, uv);\n      }\n  `;\n}\n\nfunction getPackedSamplerND(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const glsl = getGlslDifferences();\n  if (enableShapeUniforms) {\n    // TODO: support 5d and 6d\n    return `\n    vec4 ${funcName}(int b2, int b, int row, int col) {\n      int valuesPerRow = int(ceil(float(${texName}Shape[3]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${\n        texName}Shape[2]) / 2.0));\n      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);\n      texelsInBatch *= ${texName}Shape[1];\n      index = b2 * texelsInBatch + index;\n      ivec2 packedTexShape = ivec2(ceil(float(${\n        texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      int texR = index / packedTexShape[1];\n      int texC = index - texR * packedTexShape[1];\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${\n        glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const rank = shape.length;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const texNumR = packedTexShape[0];\n  const texNumC = packedTexShape[1];\n\n  const valuesPerRow = Math.ceil(shape[rank - 1] / 2);\n  let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\n  let params = `int b, int row, int col`;\n  let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;\n  for (let b = 2; b < rank - 1; b++) {\n    params = `int b${b}, ` + params;\n    texelsInBatch *= shape[rank - b - 1];\n    index = `b${b} * ${texelsInBatch} + ` + index;\n  }\n  return `\n    vec4 ${funcName}(${params}) {\n      int index = ${index};\n      int texR = index / ${texNumC};\n      int texC = index - texR * ${texNumC};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler4D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride2 = shape[3];\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${stride0}, ${stride1}, ${stride2}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n\n  const stride2Str = `int stride2 = ${texName}Shape[3];`;\n  const stride1Str = `int stride1 = ${texName}Shape[2] * stride2;`;\n  const stride0Str = `int stride0 = ${texName}Shape[1] * stride1;`;\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        ${stride2Str}\n        ${stride1Str}\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(stride1, stride2, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${stride1}, ${stride2}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (texNumC === stride2 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${texName}Shape[1] * ${texName}Shape[2], ${\n          texName}Shape[2], 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${shape[1] * shape[2]}, ${shape[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      ${stride2Str}\n      ${stride1Str}\n      ${stride0Str}\n      int index = row * stride0 + col * stride1 +\n          depth * stride2 + depth2;\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${\n        texName}TexShape[1], index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n  return `\n    float ${funcName}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} +\n          depth * ${stride2} + depth2;\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler5D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride3 = shape[4];\n  const stride2 = shape[3] * stride3;\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2', 'depth3'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +\n          depth3;\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${stride1}, ${stride2}, ${stride3}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  if (texNumC === stride3 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${shape[1] * shape[2] * shape[3]},\n               ${shape[2] * shape[3]}, ${shape[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n    float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth2 * ${stride3} + depth3 + ${offset};\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler6D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  const stride4 = shape[5];\n  const stride3 = shape[4] * stride4;\n  const stride2 = shape[3] * stride3;\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${stride4}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${stride1}, ${stride2}, ${stride3}, ${stride4})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (texNumC === stride4 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${shape[1] * shape[2] * shape[3] * shape[4]},\n               ${shape[2] * shape[3] * shape[4]},\n               ${shape[3] * shape[4]},\n               ${shape[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n    float ${funcName}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth2 * ${stride3} + depth3 * ${stride4} + depth4 + ${offset};\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getUniformSampler(inputInfo: InputInfo): string {\n  const texName = inputInfo.name;\n  const inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n\n  if (inSize < 2) {\n    return `return ${texName};`;\n  }\n\n  return `\n    for (int i = 0; i < ${inSize}; i++) {\n      if (i == index) {\n        return ${texName}[i];\n      }\n    }\n  `;\n}\n\nfunction getPackedSamplerAtOutputCoords(\n    inputInfo: InputInfo, outShapeInfo: ShapeInfo) {\n  const texName = inputInfo.name;\n  const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n  const funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n  const inRank = inputInfo.shapeInfo.logicalShape.length;\n  const outRank = outShapeInfo.logicalShape.length;\n\n  const broadcastDims = getBroadcastDims(\n      inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n\n  const type = getCoordsDataType(outRank);\n  const rankDiff = outRank - inRank;\n  let coordsSnippet: string;\n  const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n\n  if (inRank === 0) {\n    coordsSnippet = '';\n  } else if (outRank < 2 && broadcastDims.length >= 1) {\n    coordsSnippet = 'coords = 0;';\n  } else {\n    coordsSnippet =\n        broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`)\n            .join('\\n');\n  }\n  let unpackedCoordsSnippet = '';\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape\n                                .map((s, i) => `coords.${fields[i + rankDiff]}`)\n                                .join(', ');\n  }\n\n  let output = `return outputValue;`;\n  const inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n  const isInputScalar = inSize === 1;\n  const outSize = util.sizeFromShape(outShapeInfo.logicalShape);\n  const isOutputScalar = outSize === 1;\n\n  if (inRank === 1 && !isInputScalar && !isOutputScalar) {\n    output = `\n      return vec4(outputValue.xy, outputValue.xy);\n    `;\n  } else if (isInputScalar && !isOutputScalar) {\n    if (outRank === 1) {\n      output = `\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      `;\n    } else {\n      output = `\n        return vec4(outputValue.x);\n      `;\n    }\n  } else if (broadcastDims.length) {\n    const rows = inRank - 2;\n    const cols = inRank - 1;\n\n    if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\n      output = `return vec4(outputValue.x);`;\n    } else if (broadcastDims.indexOf(rows) > -1) {\n      output = `return vec4(outputValue.x, outputValue.y, ` +\n          `outputValue.x, outputValue.y);`;\n    } else if (broadcastDims.indexOf(cols) > -1) {\n      output = `return vec4(outputValue.xx, outputValue.zz);`;\n    }\n  }\n\n  return `\n    vec4 ${funcName}() {\n      ${type} coords = getOutputCoords();\n      ${coordsSnippet}\n      vec4 outputValue = get${texFuncSnippet}(${unpackedCoordsSnippet});\n      ${output}\n    }\n  `;\n}\n\nfunction getSamplerAtOutputCoords(\n    inputInfo: InputInfo, outShapeInfo: ShapeInfo) {\n  const texName = inputInfo.name;\n  const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n  const funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n  const outTexShape = outShapeInfo.texShape;\n  const inTexShape = inputInfo.shapeInfo.texShape;\n  const inRank = inputInfo.shapeInfo.logicalShape.length;\n  const outRank = outShapeInfo.logicalShape.length;\n\n  if (!inputInfo.shapeInfo.isUniform && inRank === outRank &&\n      inputInfo.shapeInfo.flatOffset == null &&\n      util.arraysEqual(inTexShape, outTexShape)) {\n    return `\n      float ${funcName}() {\n        return sampleTexture(${texName}, resultUV);\n      }\n    `;\n  }\n\n  const type = getCoordsDataType(outRank);\n  const broadcastDims = getBroadcastDims(\n      inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n  const rankDiff = outRank - inRank;\n  let coordsSnippet: string;\n  const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n\n  if (inRank === 0) {\n    coordsSnippet = '';\n  } else if (outRank < 2 && broadcastDims.length >= 1) {\n    coordsSnippet = 'coords = 0;';\n  } else {\n    coordsSnippet =\n        broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`)\n            .join('\\n');\n  }\n  let unpackedCoordsSnippet = '';\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape\n                                .map((s, i) => `coords.${fields[i + rankDiff]}`)\n                                .join(', ');\n  }\n\n  return `\n    float ${funcName}() {\n      ${type} coords = getOutputCoords();\n      ${coordsSnippet}\n      return get${texFuncSnippet}(${unpackedCoordsSnippet});\n    }\n  `;\n}\n\nexport function getCoordsDataType(rank: number): string {\n  if (rank <= 1) {\n    return 'int';\n  } else if (rank === 2) {\n    return 'ivec2';\n  } else if (rank === 3) {\n    return 'ivec3';\n  } else if (rank === 4) {\n    return 'ivec4';\n  } else if (rank === 5) {\n    return 'ivec5';\n  } else if (rank === 6) {\n    return 'ivec6';\n  } else {\n    throw Error(`GPU for rank ${rank} is not yet supported`);\n  }\n}\n\nexport function getUniformInfoFromShape(\n    isPacked: boolean, shape: number[], texShape: number[]) {\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  const rank = shape.length;\n  const useSqueezePackedShape = isPacked && rank === 3 && shape[0] === 1;\n  const squeezeShape = useSqueezePackedShape ? shape.slice(1) : newShape;\n  const useSqueezeShape =\n      (!isPacked && rank > 1 && !util.arraysEqual(shape, texShape) &&\n       newShape.length < rank) ||\n      useSqueezePackedShape;\n  const uniformShape = useSqueezeShape ? squeezeShape : shape;\n  return {useSqueezeShape, uniformShape, keptDims};\n}\n\n/** Returns a new input info (a copy) that has a squeezed logical shape. */\nexport function squeezeInputInfo(\n    inInfo: InputInfo, squeezedShape: number[]): InputInfo {\n  // Deep copy.\n  const newInputInfo: InputInfo = JSON.parse(JSON.stringify(inInfo));\n  newInputInfo.shapeInfo.logicalShape = squeezedShape;\n  return newInputInfo;\n}\n\nfunction getSqueezedParams(params: string[], keptDims: number[]): string {\n  return keptDims.map(d => params[d]).join(', ');\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, env, Tensor, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUContext, GPGPUContextProgram} from './gpgpu_context';\nimport * as shader_compiler from './shader_compiler';\nimport {InputInfo, ShapeInfo, UniformType} from './shader_compiler';\nimport {PackingScheme, TextureData, TextureUsage} from './tex_util';\nimport {createFragmentShader} from './webgl_util';\n\nexport interface GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms?: boolean;\n  /** If true, this program expects packed input textures. Defaults to false. */\n  packedInputs?: boolean;\n  /** If true, this program produces a packed texture. Defaults to false. */\n  packedOutput?: boolean;\n  /**\n   * Affects what type of texture we allocate for the output. Defaults to\n   * `TextureUsage.RENDER`.\n   */\n  outTexUsage?: TextureUsage;\n  /**\n   * The type of scheme to use when packing texels for the output values.\n   * See `PackingScheme` for details. Defaults to `PackingScheme.SHARED_BATCH`.\n   */\n  outPackingScheme?: PackingScheme;\n  customUniforms?:\n      Array<{name: string; arrayIndex?: number; type: UniformType;}>;\n}\n\nexport interface GPGPUBinary {\n  webGLProgram: GPGPUContextProgram;\n  program: GPGPUProgram;\n  uniformLocations: {[name: string]: WebGLUniformLocation};\n  customUniformLocations?: WebGLUniformLocation[];\n  source: string;\n  fragmentShader: WebGLShader;\n  inShapeInfos: ShapeInfo[];\n  outShapeInfo: ShapeInfo;\n  infLoc: WebGLUniformLocation;\n  nanLoc: WebGLUniformLocation;\n  inShapesLocations?: {[name: string]: WebGLUniformLocation};\n  inTexShapesLocations?: {[name: string]: WebGLUniformLocation};\n  outShapeLocation?: WebGLUniformLocation;\n  outShapeStridesLocation?: WebGLUniformLocation;\n  outTexShapeLocation?: WebGLUniformLocation;\n}\n\nexport interface GPGPUBinaryLocations {\n  uniformLocations: {[name: string]: WebGLUniformLocation};\n  customUniformLocations?: WebGLUniformLocation[];\n  infLoc: WebGLUniformLocation;\n  nanLoc: WebGLUniformLocation;\n  inShapesLocations?: {[name: string]: WebGLUniformLocation};\n  inTexShapesLocations?: {[name: string]: WebGLUniformLocation};\n  outShapeLocation?: WebGLUniformLocation;\n  outShapeStridesLocation?: WebGLUniformLocation;\n  outTexShapeLocation?: WebGLUniformLocation;\n}\n\nexport interface TensorData {\n  shape: number[];\n  texData: TextureData;\n  isUniform: boolean;\n  // Available when we decide to upload as uniform instead of texture.\n  uniformValues?: TypedArray;\n}\n\nexport function compileProgram<T extends Tensor, K extends Tensor>(\n    gpgpu: GPGPUContext, program: GPGPUProgram, inputs: TensorData[],\n    output: TensorData): GPGPUBinary {\n  const inputInfos: InputInfo[] = inputs.map((input, i) => {\n    const shapeInfo: ShapeInfo = {\n      logicalShape: input.shape,\n      texShape: input.isUniform ? null : input.texData.texShape,\n      isUniform: input.isUniform,\n      isPacked: input.isUniform ? false : input.texData.isPacked,\n      flatOffset: null\n    };\n    if (input.texData != null && input.texData.slice != null &&\n        input.texData.slice.flatOffset > 0) {\n      shapeInfo.flatOffset = input.texData.slice.flatOffset;\n    }\n    return {name: program.variableNames[i], shapeInfo};\n  });\n  const inShapeInfos = inputInfos.map(x => x.shapeInfo);\n  const outShapeInfo: ShapeInfo = {\n    logicalShape: output.shape,\n    texShape: output.texData.texShape,\n    isUniform: false,\n    isPacked: output.texData.isPacked,\n    flatOffset: null\n  };\n  const source = shader_compiler.makeShader(inputInfos, outShapeInfo, program);\n  const fragmentShader = createFragmentShader(gpgpu.gl, source);\n  const webGLProgram = gpgpu.createProgram(fragmentShader);\n\n  if (!env().get('ENGINE_COMPILE_ONLY')) {\n    return {\n      program,\n      fragmentShader,\n      source,\n      webGLProgram,\n      inShapeInfos,\n      outShapeInfo,\n      ...getUniformLocations(gpgpu, program, webGLProgram)\n    };\n  } else {\n    return {\n      program,\n      fragmentShader,\n      source,\n      webGLProgram,\n      inShapeInfos,\n      outShapeInfo,\n      uniformLocations: null,\n      customUniformLocations: null,\n      infLoc: null,\n      nanLoc: null,\n      inShapesLocations: null,\n      inTexShapesLocations: null,\n      outShapeLocation: null,\n      outShapeStridesLocation: null,\n      outTexShapeLocation: null\n    };\n  }\n}\n\nexport function getUniformLocations(\n    gpgpu: GPGPUContext, program: GPGPUProgram,\n    webGLProgram: WebGLProgram): GPGPUBinaryLocations {\n  const uniformLocations: {[name: string]: WebGLUniformLocation} = {};\n  const inShapesLocations: {[name: string]: WebGLUniformLocation} = {};\n  const inTexShapesLocations: {[name: string]: WebGLUniformLocation} = {};\n  const customUniformLocations: WebGLUniformLocation[] = [];\n  let outShapeLocation: WebGLUniformLocation;\n  let outTexShapeLocation: WebGLUniformLocation;\n  let outShapeStridesLocation: WebGLUniformLocation;\n  let infLoc: WebGLUniformLocation = null;\n  let nanLoc: WebGLUniformLocation = null;\n\n  // Add special uniforms (NAN, INFINITY)\n  nanLoc = gpgpu.getUniformLocation(webGLProgram, 'NAN', false);\n  if (env().getNumber('WEBGL_VERSION') === 1) {\n    infLoc = gpgpu.getUniformLocation(webGLProgram, 'INFINITY', false);\n  }\n\n  // Add user-defined uniforms\n  const shouldThrow = false;\n  for (let i = 0; i < program.variableNames.length; i++) {\n    const varName = program.variableNames[i];\n    uniformLocations[varName] =\n        gpgpu.getUniformLocation(webGLProgram, varName, shouldThrow);\n    uniformLocations[`offset${varName}`] =\n        gpgpu.getUniformLocation(webGLProgram, `offset${varName}`, shouldThrow);\n    if (program.enableShapeUniforms) {\n      inShapesLocations[`${varName}Shape`] = gpgpu.getUniformLocation(\n          webGLProgram, `${varName}Shape`, shouldThrow);\n      inTexShapesLocations[`${varName}TexShape`] = gpgpu.getUniformLocation(\n          webGLProgram, `${varName}TexShape`, shouldThrow);\n    }\n  }\n\n  if (program.enableShapeUniforms) {\n    outShapeLocation =\n        gpgpu.getUniformLocation(webGLProgram, 'outShape', shouldThrow);\n    outShapeStridesLocation =\n        gpgpu.getUniformLocation(webGLProgram, 'outShapeStrides', shouldThrow);\n    outTexShapeLocation =\n        gpgpu.getUniformLocation(webGLProgram, 'outTexShape', shouldThrow);\n  }\n\n  if (program.customUniforms) {\n    program.customUniforms.forEach((d, i) => {\n      customUniformLocations[i] =\n          gpgpu.getUniformLocation(webGLProgram, d.name, shouldThrow);\n    });\n  }\n\n  return {\n    uniformLocations,\n    customUniformLocations,\n    infLoc,\n    nanLoc,\n    inShapesLocations,\n    inTexShapesLocations,\n    outShapeLocation,\n    outShapeStridesLocation,\n    outTexShapeLocation\n  };\n}\n\nfunction validateBinaryAndProgram(\n    shapeInfos: ShapeInfo[], inputs: TensorData[]) {\n  if (shapeInfos.length !== inputs.length) {\n    throw Error(\n        `Binary was compiled with ${shapeInfos.length} inputs, but ` +\n        `was executed with ${inputs.length} inputs`);\n  }\n\n  shapeInfos.forEach((s, i) => {\n    const shapeA = s.logicalShape;\n    const input = inputs[i];\n    const shapeB = input.shape;\n\n    if (!util.arraysEqual(shapeA, shapeB)) {\n      throw Error(\n          `Binary was compiled with different shapes than ` +\n          `the current args. Shapes ${shapeA} and ${shapeB} must match`);\n    }\n    // The input is uploaded as uniform.\n    if (s.isUniform && input.isUniform) {\n      return;\n    }\n\n    const texShapeA = s.texShape;\n    const texShapeB = input.isUniform ? null : input.texData.texShape;\n    if (!util.arraysEqual(texShapeA, texShapeB)) {\n      throw Error(\n          `Binary was compiled with different texture shapes than the` +\n          ` current args. Shape ${texShapeA} and ${texShapeB} must match`);\n    }\n  });\n}\n\nexport function runProgram<T extends Tensor, K extends Tensor>(\n    gpgpu: GPGPUContext, binary: GPGPUBinary, inputs: TensorData[],\n    output: TensorData, customUniformValues?: number[][]): void {\n  if (!binary.program.enableShapeUniforms) {\n    validateBinaryAndProgram(binary.inShapeInfos, inputs);\n    validateBinaryAndProgram([binary.outShapeInfo], [output]);\n  }\n\n  const outTex = output.texData.texture;\n  const outTexShape = output.texData.texShape;\n  if (output.texData.isPacked) {\n    gpgpu.setOutputPackedMatrixTexture(\n        outTex.texture, outTexShape[0], outTexShape[1]);\n  } else {\n    gpgpu.setOutputMatrixTexture(\n        outTex.texture, outTexShape[0], outTexShape[1]);\n  }\n  gpgpu.setProgram(binary.webGLProgram);\n\n  // Set special uniforms (NAN, INFINITY)\n  if (env().getNumber('WEBGL_VERSION') === 1) {\n    if (binary.infLoc !== null) {\n      gpgpu.gl.uniform1f(binary.infLoc, Infinity);\n    }\n  }\n  if (binary.nanLoc !== null) {\n    gpgpu.gl.uniform1f(binary.nanLoc, NaN);\n  }\n\n  // Set user-defined inputs\n  inputs.forEach((input, i) => {\n    const varName = binary.program.variableNames[i];\n    const varLoc = binary.uniformLocations[varName];\n    const varOffsetLoc = binary.uniformLocations[`offset${varName}`];\n    const varShapeLoc = binary.inShapesLocations[`${varName}Shape`];\n    const varTexShapeLoc = binary.inTexShapesLocations[`${varName}TexShape`];\n\n    if (varShapeLoc) {\n      const {uniformShape} = shader_compiler.getUniformInfoFromShape(\n          binary.program.packedInputs, input.shape, input.texData.texShape);\n      switch (uniformShape.length) {\n        case 1:\n          gpgpu.gl.uniform1iv(varShapeLoc, new Int32Array(uniformShape));\n          break;\n        case 2:\n          gpgpu.gl.uniform2iv(varShapeLoc, new Int32Array(uniformShape));\n          break;\n        case 3:\n          gpgpu.gl.uniform3iv(varShapeLoc, new Int32Array(uniformShape));\n          break;\n        case 4:\n          gpgpu.gl.uniform4iv(varShapeLoc, new Int32Array(uniformShape));\n          break;\n        default:\n          break;\n      }\n    }\n    if (varTexShapeLoc) {\n      gpgpu.gl.uniform2i(\n          varTexShapeLoc, input.texData.texShape[0], input.texData.texShape[1]);\n    }\n\n    if (varLoc == null) {\n      // The compiler inferred that this variable is not used in this shader.\n      return;\n    }\n\n    if (input.isUniform) {\n      // Upload the values of the tensor as uniform.\n      if (util.sizeFromShape(input.shape) < 2) {\n        gpgpu.gl.uniform1f(varLoc, input.uniformValues[0]);\n      } else {\n        let vals = input.uniformValues;\n        if (!(vals instanceof Float32Array)) {\n          vals = new Float32Array(vals);\n        }\n        gpgpu.gl.uniform1fv(varLoc, vals);\n      }\n      return;\n    }\n\n    // If the input was sliced, upload the flat offset index.\n    if (input.texData.slice != null && varOffsetLoc != null) {\n      gpgpu.gl.uniform1i(varOffsetLoc, input.texData.slice.flatOffset);\n    }\n\n    gpgpu.setInputMatrixTexture(input.texData.texture.texture, varLoc, i);\n  });\n\n  const outShapeLoc = binary.outShapeLocation;\n  if (outShapeLoc) {\n    switch (output.shape.length) {\n      case 1:\n        gpgpu.gl.uniform1iv(outShapeLoc, new Int32Array(output.shape));\n        break;\n      case 2:\n        gpgpu.gl.uniform2iv(outShapeLoc, new Int32Array(output.shape));\n        break;\n      case 3:\n        gpgpu.gl.uniform3iv(outShapeLoc, new Int32Array(output.shape));\n        break;\n      case 4:\n        gpgpu.gl.uniform4iv(outShapeLoc, new Int32Array(output.shape));\n        break;\n      default:\n        break;\n    }\n  }\n  if (binary.outShapeStridesLocation) {\n    const strides = util.computeStrides(output.shape);\n    switch (output.shape.length) {\n      case 2:\n        gpgpu.gl.uniform1iv(\n            binary.outShapeStridesLocation, new Int32Array(strides));\n        break;\n      case 3:\n        gpgpu.gl.uniform2iv(\n            binary.outShapeStridesLocation, new Int32Array(strides));\n        break;\n      case 4:\n        gpgpu.gl.uniform3iv(\n            binary.outShapeStridesLocation, new Int32Array(strides));\n        break;\n      default:\n        break;\n    }\n  }\n  if (binary.outTexShapeLocation) {\n    gpgpu.gl.uniform2i(\n        binary.outTexShapeLocation, output.texData.texShape[0],\n        output.texData.texShape[1]);\n  }\n\n  if (binary.program.customUniforms && customUniformValues) {\n    binary.program.customUniforms.forEach((d, i) => {\n      const customLoc = binary.customUniformLocations[i];\n      const customValue = customUniformValues[i];\n      if (d.type === 'float') {\n        gpgpu.gl.uniform1fv(customLoc, customValue);\n      } else if (d.type === 'vec2') {\n        gpgpu.gl.uniform2fv(customLoc, customValue);\n      } else if (d.type === 'vec3') {\n        gpgpu.gl.uniform3fv(customLoc, customValue);\n      } else if (d.type === 'vec4') {\n        gpgpu.gl.uniform4fv(customLoc, customValue);\n      } else if (d.type === 'int') {\n        gpgpu.gl.uniform1iv(customLoc, customValue);\n      } else if (d.type === 'ivec2') {\n        gpgpu.gl.uniform2iv(customLoc, customValue);\n      } else if (d.type === 'ivec3') {\n        gpgpu.gl.uniform3iv(customLoc, customValue);\n      } else if (d.type === 'ivec4') {\n        gpgpu.gl.uniform4iv(customLoc, customValue);\n      } else {\n        throw Error(`uniform type ${d.type} is not supported yet.`);\n      }\n    });\n  }\n  gpgpu.executeProgram();\n}\n\nexport function makeShaderKey(\n    program: GPGPUProgram, inputs: TensorData[], output: TensorData): string {\n  let keyInputs = '';\n  inputs.concat(output).forEach(x => {\n    const hasOffset = x.texData != null && x.texData.slice != null &&\n        x.texData.slice.flatOffset > 0;\n    // TODO: Remove the condition of !x.isUniform.\n    if (program.enableShapeUniforms && !x.isUniform) {\n      const xTexShape = x.texData.texShape;\n      const {useSqueezeShape, uniformShape, keptDims} =\n          shader_compiler.getUniformInfoFromShape(\n              program.packedInputs, x.shape, xTexShape);\n      let rank1 = '', rank2 = '', rank34 = '';\n      if (uniformShape.length === 1 && program.packedInputs) {\n        const packedTexShape =\n            [Math.ceil(xTexShape[0] / 2), Math.ceil(xTexShape[1] / 2)];\n        rank1 = `${packedTexShape[0] > 1}_${packedTexShape[1] > 1}`;\n      } else if (uniformShape.length === 2 && !program.packedInputs) {\n        rank2 = `${uniformShape[0] > 1}_${uniformShape[1] > 1}`;\n      } else if (uniformShape.length > 2 && !program.packedInputs) {\n        const strides = util.computeStrides(uniformShape);\n        rank34 = `${strides[0] === xTexShape[1]}_${\n            strides[strides.length - 1] === xTexShape[1]}`;\n      }\n      const xRank = x.shape.length;\n      const isLogicalShapTexShapeEqual =\n          uniformShape.length === 2 && util.arraysEqual(x.shape, xTexShape);\n      const isScalar = util.sizeFromShape(x.shape) === 1;\n      const broadcastDims =\n          backend_util.getBroadcastDims(x.shape, output.shape);\n      const isInOutTexShapeEqual = !program.packedInputs &&\n          xRank === output.shape.length &&\n          util.arraysEqual(xTexShape, output.texData.texShape);\n      const isTexShapeGreaterThanOne =\n          program.packedInputs || uniformShape.length > 2 ?\n          '' :\n          `${xTexShape[0] > 1}_${xTexShape[1] > 1}`;\n      // These key components are needed due to shader_compiler is embedding\n      // them in the shader.\n      // |xRank| is used to determine the coords length. See\n      // get[Packed]SamplerAtOutputCoords.\n      // |isInOutTexShapeEqual| is used to determine whether going to an\n      // optimization path in getSamplerAtOutputCoords.\n      // |useSqueezeShape| is extracted from squeezeInputInfo of\n      // getSampler[2|3|4]D/getPackedSampler3D.\n      // |isScalar| is extracted from isInputScalar/isOutputScalar in\n      // getPackedSamplerAtOutputCoords.\n      // |broadcastDims| is extracted from get[Packed]SamplerAtOutputCoords.\n      // |isLogicalShapTexShapeEqual| is used in\n      // getOutput[Packed]2DCoords/get[Packed]Sampler2D.\n      // |rank1| is used in getOutputPacked1DCoords.\n      // |rank2| is used in getOutput2DCoords.\n      // |rank34| is used in getSampler3D/getSampler4D.\n      // |isTexShapeGreaterThanOne| are used in\n      // getSampler[Scalar|1D|2D]/getOutput1DCoords.\n      keyInputs += `${xRank}_${isInOutTexShapeEqual}_${\n          useSqueezeShape ? keptDims : ''}_${uniformShape.length}_${isScalar}_${\n          broadcastDims}_${isLogicalShapTexShapeEqual}_${rank1}_${rank2}_${\n          rank34}_${isTexShapeGreaterThanOne}_${hasOffset}`;\n    } else {\n      const texShape = x.isUniform ? 'uniform' : x.texData.texShape;\n      keyInputs += `${x.shape}_${texShape}_${hasOffset}`;\n    }\n  });\n  const keyUserCode = program.userCode;\n  let key = program.constructor.name;\n  // Fast string concat. See https://jsperf.com/string-concatenation/14.\n  key += '_' + keyInputs + '_' + keyUserCode +\n      `${env().getNumber('WEBGL_VERSION')}`;\n  return key;\n}\n\nexport function useShapeUniforms(rank: number) {\n  // TODO: Remove the limitaion of rank <= 4.\n  return env().getBool('WEBGL_USE_SHAPES_UNIFORMS') && rank <= 4;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\nimport {PackingScheme} from './tex_util';\n\nexport class DecodeMatrixProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: [number, number, number];\n  packedInputs = false;\n  packedOutput = true;\n  outPackingScheme = PackingScheme.DENSE;\n  enableShapeUniforms: boolean;\n  customUniforms = [{name: 'texShape', type: 'ivec2' as const }];\n\n  constructor(outputShape: [number, number, number]) {\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n\n    this.userCode = `\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${\n        this.enableShapeUniforms ?\n            shader_util.getOutputLogicalCoordinatesFromFlatIndexByUniform(\n                ['r', 'c', 'd'], outputShape) :\n            shader_util.getLogicalCoordinatesFromFlatIndex(\n                ['r', 'c', 'd'], outputShape)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${glsl.output} = result;\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\nimport {PackingScheme} from './tex_util';\n\nexport class DecodeMatrixPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: [number, number, number];\n  outPackingScheme = PackingScheme.DENSE;\n  enableShapeUniforms: boolean;\n  customUniforms = [{name: 'texShape', type: 'ivec2' as const }];\n\n  constructor(outputShape: [number, number, number]) {\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n\n    this.userCode = `\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${\n        this.enableShapeUniforms ?\n            shader_util.getOutputLogicalCoordinatesFromFlatIndexByUniform(\n                ['r', 'c', 'd'], outputShape) :\n            shader_util.getLogicalCoordinatesFromFlatIndex(\n                ['r', 'c', 'd'], outputShape)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${glsl.output} = result;\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\nimport {ENCODE_FLOAT_SNIPPET} from './shader_compiler_util';\nimport {TextureUsage} from './tex_util';\n\nexport class EncodeFloatProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  outTexUsage = TextureUsage.DOWNLOAD;\n\n  constructor(outputShape: number[]) {\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.userCode = `\n      ${ENCODE_FLOAT_SNIPPET}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${glsl.output} = encode_float(x);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\nimport {ENCODE_FLOAT_SNIPPET} from './shader_compiler_util';\nimport {TextureUsage} from './tex_util';\n\nexport class EncodeFloatPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  packedInputs = true;\n  packedOutput = false;\n  outTexUsage = TextureUsage.DOWNLOAD;\n\n  constructor(outputShape: [number, number, number]) {\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.userCode = `\n      ${ENCODE_FLOAT_SNIPPET}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${glsl.output} = encode_float(x);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\n\nconst CHANNEL_CHAR_TO_INDEX_MAP: Record<string, number> = {\n  'R': 0,\n  'G': 1,\n  'B': 2,\n  'A': 3\n};\n\nexport class EncodeMatrixProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  enableShapeUniforms: boolean;\n  customUniforms = [{name: 'texShape', type: 'ivec2' as const }];\n\n  constructor(\n      outputShape: [number, number, number], inputIsUnsignedByte = false,\n      usedChannels = 'RGBA') {\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n\n    let output = `result`;\n    if (inputIsUnsignedByte) {\n      output = `floor(result * 255. + 0.5)`;\n    }\n\n    let mainLoop = '';\n    for (let usedChannelIndex = 0; usedChannelIndex < usedChannels.length;\n         usedChannelIndex++) {\n      const curChannel = usedChannels[usedChannelIndex];\n      mainLoop += `\n          if(offset == ${usedChannelIndex}) {\n            result = values[${CHANNEL_CHAR_TO_INDEX_MAP[curChannel]}];\n          }`;\n    }\n\n    this.userCode = `\n      ${\n        this.enableShapeUniforms ? shader_util.getFlatIndexFrom3DOutput() :\n                                   shader_util.getFlatIndexFrom3D(outputShape)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int flatIndex = getFlatIndex(coords);\n        float result = 0.;\n        int offset = imod(flatIndex, ${usedChannels.length});\n\n        flatIndex = idiv(flatIndex, ${usedChannels.length}, 1.);\n\n        int r = flatIndex / texShape[1];\n        if (r < texShape[0]) {\n          int c = imod(flatIndex, texShape[1]);\n          vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n          vec4 values = ${glsl.texture2D}(A, uv);\n          ${mainLoop}\n        }\n        ${glsl.output} = vec4(${output}, 0., 0., 0.);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\n\n/*\nThis is how the shader encodes a tensor with shape = [2, 3, 5]\n(indices are [batch, row, col]).\n\n000|001   002|003   004|xxx   020|021   022|023   024|xxx\n-------   -------   -------   -------   -------   -------\n010|011   012|013   014|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n\n100|101   102|103   104|xxx   120|121   122|123   124|xxx\n-------   -------   -------   -------   -------   -------\n110|111   112|113   114|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n\nSingle texels contain only values from the same batch, and from adjacent rows\nand columns.\n */\n\nexport class EncodeMatrixPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  packedInputs = false;\n  packedOutput = true;\n  enableShapeUniforms: boolean;\n  customUniforms = [{name: 'texShape', type: 'ivec2' as const }];\n\n  constructor(\n      outputShape: [number, number, number], inputIsUnsignedByte = false) {\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n\n    let mainLoop = '';\n    let output = 'result';\n    if (inputIsUnsignedByte) {\n      output = 'floor(result * 255. + 0.5)';\n    }\n\n    for (let row = 0; row <= 1; row++) {\n      for (let col = 0; col <= 1; col++) {\n        const channel = row * 2 + col;\n\n        mainLoop += `\n          localCoords = coords;\n          if(localCoords[2] + ${col} < ${\n            this.enableShapeUniforms ? 'outShape[2]' : `${outputShape[2]}`}) {\n          localCoords[2] += ${col};\n          if (localCoords[1] + ${row} < ${\n            this.enableShapeUniforms ? 'outShape[1]' : `${outputShape[1]}`}) {\n            localCoords[1] += ${row};\n\n            flatIndex = getFlatIndex(localCoords);\n            offset = imod(flatIndex, 4);\n\n            flatIndex = idiv(flatIndex, 4, 1.);\n\n            int r = flatIndex / texShape[1];\n            int c = imod(flatIndex, texShape[1]);\n            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n            values = ${glsl.texture2D}(A, uv);\n\n            if (offset == 0) {\n              result[${channel}] = values[0];\n            } else if (offset == 1) {\n              result[${channel}] = values[1];\n            } else if (offset == 2) {\n              result[${channel}] = values[2];\n            } else {\n              result[${channel}] = values[3];\n            }\n          }\n        }\n        `;\n      }\n    }\n\n    this.userCode = `\n        ${\n        this.enableShapeUniforms ? shader_util.getFlatIndexFrom3DOutput() :\n                                   shader_util.getFlatIndexFrom3D(outputShape)}\n\n        void main() {\n          ivec3 coords = getOutputCoords();\n\n          vec4 result = vec4(0.);\n          int flatIndex, r, c, offset;\n          ivec3 localCoords;\n          vec2 uv;\n          vec4 values;\n\n          ${mainLoop}\n\n          ${glsl.output} = ${output};\n        }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, PixelData, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {getGlslDifferences} from './glsl_version';\nimport * as tex_util from './tex_util';\nimport {Texture, TextureConfig} from './tex_util';\nimport * as webgl_util from './webgl_util';\n\nexport function createVertexShader(gl: WebGLRenderingContext): WebGLShader {\n  const glsl = getGlslDifferences();\n  const vertexShaderSource = `${glsl.version}\n    precision highp float;\n    ${glsl.attribute} vec3 clipSpacePos;\n    ${glsl.attribute} vec2 uv;\n    ${glsl.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`;\n  return webgl_util.createVertexShader(gl, vertexShaderSource);\n}\n\nexport function createVertexBuffer(gl: WebGLRenderingContext): WebGLBuffer {\n  // [x y z u v] * [upper-left, lower-left, upper-right, lower-right]\n  const vertexArray = new Float32Array(\n      [-1, 1, 0, 0, 1, -1, -1, 0, 0, 0, 1, 1, 0, 1, 1, 1, -1, 0, 1, 0]);\n  return webgl_util.createStaticVertexBuffer(gl, vertexArray);\n}\n\nexport function createIndexBuffer(gl: WebGLRenderingContext): WebGLBuffer {\n  // OpenGL (and WebGL) have \"CCW == front\" winding\n  const triangleVertexIndices = new Uint16Array([0, 1, 2, 2, 1, 3]);\n  return webgl_util.createStaticIndexBuffer(gl, triangleVertexIndices);\n}\n\nfunction createAndConfigureTexture(\n    gl: WebGLRenderingContext, width: number, height: number,\n    internalFormat: number, textureFormat: number,\n    textureType: number): Texture {\n  webgl_util.validateTextureSize(width, height);\n  const texture = webgl_util.createTexture(gl);\n\n  const tex2d = gl.TEXTURE_2D;\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(tex2d, texture));\n  webgl_util.callAndCheck(\n      gl, () => gl.texParameteri(tex2d, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE));\n  webgl_util.callAndCheck(\n      gl, () => gl.texParameteri(tex2d, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE));\n  webgl_util.callAndCheck(\n      gl, () => gl.texParameteri(tex2d, gl.TEXTURE_MIN_FILTER, gl.NEAREST));\n  webgl_util.callAndCheck(\n      gl, () => gl.texParameteri(tex2d, gl.TEXTURE_MAG_FILTER, gl.NEAREST));\n  if (env().getNumber('WEBGL_VERSION') === 1) {\n    webgl_util.callAndCheck(\n        gl,\n        () => gl.texImage2D(\n            tex2d, 0, internalFormat, width, height, 0, textureFormat,\n            textureType, null));\n  } else {\n    webgl_util.callAndCheck(\n        gl,\n        () => (gl as WebGL2RenderingContext)\n                  .texStorage2D(tex2d, 1, internalFormat, width, height));\n  }\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n\n  return {texture, texShape: [height, width]};\n}\n\nexport function getInternalFormatForFloat32MatrixTexture(\n    textureConfig: TextureConfig) {\n  return textureConfig.internalFormatFloat;\n}\n\nexport function createFloat32MatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): Texture {\n  const [width, height] =\n      tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height,\n      getInternalFormatForFloat32MatrixTexture(textureConfig),\n      textureConfig.textureFormatFloat, gl.FLOAT);\n}\n\nexport function getInternalFormatForFloat16MatrixTexture(\n    textureConfig: TextureConfig) {\n  return textureConfig.internalFormatHalfFloat;\n}\n\nexport function createFloat16MatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): Texture {\n  const [width, height] =\n      tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height,\n      getInternalFormatForFloat16MatrixTexture(textureConfig),\n      textureConfig.textureFormatFloat, textureConfig.textureTypeHalfFloat);\n}\n\nexport function getInternalFormatForUnsignedBytesMatrixTexture(\n    textureConfig: TextureConfig) {\n  return textureConfig.downloadTextureFormat;\n}\n\nexport function createUnsignedBytesMatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): Texture {\n  const [width, height] =\n      tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height,\n      getInternalFormatForUnsignedBytesMatrixTexture(textureConfig), gl.RGBA,\n      gl.UNSIGNED_BYTE);\n}\n\nexport function getInternalFormatForPackedMatrixTexture(\n    textureConfig: TextureConfig) {\n  return textureConfig.internalFormatPackedFloat;\n}\n\nexport function createPackedMatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): Texture {\n  const [width, height] =\n      tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height, getInternalFormatForPackedMatrixTexture(textureConfig),\n      gl.RGBA, gl.FLOAT);\n}\n\nexport function getInternalFormatForFloat16PackedMatrixTexture(\n    textureConfig: TextureConfig) {\n  return textureConfig.internalFormatPackedHalfFloat;\n}\n\nexport function createFloat16PackedMatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): Texture {\n  const [width, height] =\n      tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height,\n      getInternalFormatForFloat16PackedMatrixTexture(textureConfig), gl.RGBA,\n      textureConfig.textureTypeHalfFloat);\n}\n\nexport function bindVertexProgramAttributeStreams(\n    gl: WebGLRenderingContext, program: WebGLProgram,\n    vertexBuffer: WebGLBuffer): boolean {\n  const posOffset = 0;               // x is the first buffer element\n  const uvOffset = 3 * 4;            // uv comes after [x y z]\n  const stride = (3 * 4) + (2 * 4);  // xyz + uv, each entry is 4-byte float.\n  webgl_util.callAndCheck(\n      gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer));\n  const success = webgl_util.bindVertexBufferToProgramAttribute(\n      gl, program, 'clipSpacePos', vertexBuffer, 3, stride, posOffset);\n  return success &&\n      webgl_util.bindVertexBufferToProgramAttribute(\n          gl, program, 'uv', vertexBuffer, 2, stride, uvOffset);\n}\n\nexport function uploadDenseMatrixToTexture(\n    gl: WebGLRenderingContext, texture: WebGLTexture, width: number,\n    height: number, data: TypedArray, textureConfig: TextureConfig) {\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n\n  let dataForUpload: TypedArray, texelDataType: number, internalFormat: number;\n  if (data instanceof Uint8Array) {\n    dataForUpload = new Uint8Array(width * height * 4);\n    texelDataType = gl.UNSIGNED_BYTE;\n    internalFormat = gl.RGBA;\n  } else {\n    dataForUpload = new Float32Array(width * height * 4);\n    texelDataType = gl.FLOAT;\n    internalFormat = textureConfig.internalFormatPackedFloat;\n  }\n\n  dataForUpload.set(data);\n  if (env().getNumber('WEBGL_VERSION') === 2) {\n    webgl_util.callAndCheck(\n        gl,\n        () => gl.texSubImage2D(\n            gl.TEXTURE_2D, 0, 0, 0, width, height, gl.RGBA, texelDataType,\n            dataForUpload));\n  } else {\n    webgl_util.callAndCheck(\n        gl,\n        () => gl.texImage2D(\n            gl.TEXTURE_2D, 0, internalFormat, width, height, 0, gl.RGBA,\n            texelDataType, dataForUpload));\n  }\n\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\n\nexport function uploadPixelDataToTexture(\n    gl: WebGLRenderingContext, texture: WebGLTexture,\n    pixels: PixelData|ImageData|HTMLImageElement|HTMLCanvasElement|\n    HTMLVideoElement|ImageBitmap) {\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n  if ((pixels as PixelData).data instanceof Uint8Array) {\n    if (env().getNumber('WEBGL_VERSION') === 2) {\n      webgl_util.callAndCheck(\n          gl,\n          () => gl.texSubImage2D(\n              gl.TEXTURE_2D, 0, 0, 0, pixels.width, pixels.height, gl.RGBA,\n              gl.UNSIGNED_BYTE, (pixels as PixelData).data));\n    } else {\n      webgl_util.callAndCheck(\n          gl,\n          () => gl.texImage2D(\n              gl.TEXTURE_2D, 0, gl.RGBA, pixels.width, pixels.height, 0,\n              gl.RGBA, gl.UNSIGNED_BYTE, (pixels as PixelData).data));\n    }\n  } else {\n    if (env().getNumber('WEBGL_VERSION') === 2) {\n      webgl_util.callAndCheck(\n          gl,\n          () => gl.texSubImage2D(\n              gl.TEXTURE_2D, 0, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE,\n              (pixels as ImageData | HTMLImageElement | HTMLCanvasElement |\n               HTMLVideoElement | ImageBitmap)));\n    } else {\n      webgl_util.callAndCheck(\n          gl,\n          () => gl.texImage2D(\n              gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE,\n              pixels as ImageData | HTMLImageElement | HTMLCanvasElement |\n                  HTMLVideoElement | ImageBitmap));\n    }\n  }\n\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\n\nexport function createBufferFromOutputTexture(\n    gl2: WebGL2RenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): WebGLBuffer {\n  // Create and bind the buffer.\n  const buffer = gl2.createBuffer();\n  webgl_util.callAndCheck(\n      gl2, () => gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer));\n\n  // Initialize the buffer to the size of the texture in bytes.\n  const bytesPerFloat = 4;\n  const valuesPerTexel = 4;\n  const bufferSizeBytes = bytesPerFloat * valuesPerTexel * rows * columns;\n\n  webgl_util.callAndCheck(\n      gl2,\n      () => gl2.bufferData(\n          gl2.PIXEL_PACK_BUFFER, bufferSizeBytes, gl2.STREAM_READ));\n\n  // Enqueue a command on the GPU command queue to copy of texture into the\n  // buffer.\n  webgl_util.callAndCheck(\n      gl2, () => gl2.readPixels(0, 0, columns, rows, gl2.RGBA, gl2.FLOAT, 0));\n\n  webgl_util.callAndCheck(\n      gl2, () => gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null));\n\n  return buffer;\n}\n\nexport function downloadFloat32MatrixFromBuffer(\n    gl: WebGLRenderingContext, buffer: WebGLBuffer,\n    size: number): Float32Array {\n  const gl2 = gl as WebGL2RenderingContext;\n\n  const downloadTarget = new Float32Array(size);\n\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer);\n  gl2.getBufferSubData(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget);\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null);\n\n  return downloadTarget;\n}\n\nexport function downloadByteEncodedFloatMatrixFromOutputTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig) {\n  const [w, h] =\n      tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n\n  const numChannels = 4;\n  const downloadTarget = new Uint8Array(\n      tex_util.getUnpackedArraySizeFromMatrixSize(rows * columns, numChannels));\n\n  webgl_util.callAndCheck(\n      gl,\n      () => gl.readPixels(\n          0, 0, w, h, textureConfig.downloadTextureFormat, gl.UNSIGNED_BYTE,\n          downloadTarget));\n\n  // By wrapping the buffer in a Float32Array, we use native browser IEEE 754\n  // decoding of the 4 bytes that back each 32 bit float.\n  return new Float32Array(downloadTarget.buffer);\n}\n\nexport function downloadPackedMatrixFromBuffer(\n    gl: WebGLRenderingContext, buffer: WebGLBuffer, batch: number, rows: number,\n    cols: number, physicalRows: number, physicalCols: number,\n    textureConfig: TextureConfig): Float32Array {\n  const gl2 = gl as WebGL2RenderingContext;\n\n  const downloadTarget =\n      new Float32Array(tex_util.getPackedRGBAArraySizeFromMatrixShape(\n          physicalRows, physicalCols));\n\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer);\n  gl2.getBufferSubData(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget);\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null);\n\n  return downloadTarget;\n}\n\nexport function downloadMatrixFromPackedOutputTexture(\n    gl: WebGLRenderingContext, physicalRows: number,\n    physicalCols: number): Float32Array {\n  const packedRGBA = new Float32Array(physicalRows * physicalCols * 4);\n  webgl_util.callAndCheck(\n      gl,\n      () => gl.readPixels(\n          0, 0, physicalCols, physicalRows, gl.RGBA, gl.FLOAT, packedRGBA));\n\n  return packedRGBA;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, PixelData, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {getWebGLContext, setWebGLContext} from './canvas_util';\nimport * as gpgpu_util from './gpgpu_util';\nimport * as tex_util from './tex_util';\nimport {Texture, TextureConfig} from './tex_util';\nimport {WebGL1DisjointQueryTimerExtension, WebGL2DisjointQueryTimerExtension, WebGLParallelCompilationExtension} from './webgl_types';\nimport * as webgl_util from './webgl_util';\n\nexport interface FenceContext {\n  query: WebGLQuery|WebGLSync;\n  isFencePassed(): boolean;\n}\n\ntype WebGLVao = WebGLVertexArrayObject | WebGLVertexArrayObjectOES;\n\nexport interface GPGPUContextProgram extends WebGLProgram {\n  vao: WebGLVao;\n}\n\nexport class GPGPUContext {\n  gl: WebGLRenderingContext;\n  textureFloatExtension: {};\n  textureHalfFloatExtension: {};\n  colorBufferFloatExtension: {};\n  colorBufferHalfFloatExtension: {};\n  disjointQueryTimerExtension: WebGL2DisjointQueryTimerExtension|\n      WebGL1DisjointQueryTimerExtension;\n  parallelCompilationExtension: WebGLParallelCompilationExtension;\n  vertexBuffer: WebGLBuffer;\n  indexBuffer: WebGLBuffer;\n  framebuffer: WebGLFramebuffer;\n  outputTexture: WebGLTexture|null = null;\n  program: GPGPUContextProgram|null = null;\n  private disposed = false;\n  private disjoint: boolean;\n  private vertexShader: WebGLShader;\n  textureConfig: TextureConfig;\n\n  createVertexArray: () => WebGLVao | null;\n  bindVertexArray: (vao: WebGLVao | null) => void;\n  deleteVertexArray: (vao: WebGLVao | null) => void;\n  getVertexArray: () => WebGLVao | null;\n\n  constructor(gl?: WebGLRenderingContext) {\n    const glVersion = env().getNumber('WEBGL_VERSION');\n    if (gl != null) {\n      this.gl = gl;\n      setWebGLContext(glVersion, gl);\n    } else {\n      this.gl = getWebGLContext(glVersion);\n    }\n    gl = this.gl;\n\n    if (env().getNumber('WEBGL_VERSION') === 2) {\n      const gl2 = gl as WebGL2RenderingContext;\n      this.createVertexArray = () => {\n        return webgl_util.callAndCheck(gl2,\n          () => gl2.createVertexArray());\n      };\n      this.bindVertexArray = (vao: WebGLVao|null) => {\n        return webgl_util.callAndCheck(gl2,\n          () => gl2.bindVertexArray(vao as WebGLVertexArrayObject));\n      };\n      this.deleteVertexArray = (vao: WebGLVao|null) => {\n        return webgl_util.callAndCheck(gl2,\n          () => gl2.deleteVertexArray(vao as WebGLVertexArrayObject));\n      };\n      this.getVertexArray = () => {\n        return webgl_util.callAndCheck(gl2,\n          () => gl2.getParameter(gl2.VERTEX_ARRAY_BINDING));\n      };\n    } else if (gl != null) {\n      const ext = gl.getExtension('OES_vertex_array_object');\n      if (ext == null) {\n        throw new Error(\n            'All WebGL1 implementations are expected to offer' +\n            ' OES_vertex_array_object.');\n      }\n      this.createVertexArray = () => {\n        return webgl_util.callAndCheck(gl,\n          () => ext.createVertexArrayOES());\n      };\n      this.bindVertexArray = (vao: WebGLVao|null) => {\n        return webgl_util.callAndCheck(gl,\n          () => ext.bindVertexArrayOES(vao as WebGLVertexArrayObjectOES));\n      };\n      this.deleteVertexArray = (vao: WebGLVao|null) => {\n        return webgl_util.callAndCheck(gl,\n          () => ext.deleteVertexArrayOES(vao as WebGLVertexArrayObjectOES));\n      };\n      this.getVertexArray = () => {\n        return webgl_util.callAndCheck(gl,\n          () => gl.getParameter(ext.VERTEX_ARRAY_BINDING_OES));\n      };\n    }\n\n    // WebGL 2.0 enables texture floats without an extension.\n    let COLOR_BUFFER_FLOAT = 'WEBGL_color_buffer_float';\n    const COLOR_BUFFER_HALF_FLOAT = 'EXT_color_buffer_half_float';\n    this.parallelCompilationExtension =\n        this.gl.getExtension('KHR_parallel_shader_compile');\n    if (env().getNumber('WEBGL_VERSION') === 1) {\n      const TEXTURE_FLOAT = 'OES_texture_float';\n      const TEXTURE_HALF_FLOAT = 'OES_texture_half_float';\n\n      this.textureFloatExtension =\n          webgl_util.getExtensionOrThrow(this.gl, TEXTURE_FLOAT);\n      if (webgl_util.hasExtension(this.gl, TEXTURE_HALF_FLOAT)) {\n        this.textureHalfFloatExtension =\n            webgl_util.getExtensionOrThrow(this.gl, TEXTURE_HALF_FLOAT);\n      } else if (env().get('WEBGL_FORCE_F16_TEXTURES')) {\n        throw new Error(\n            'GL context does not support half float textures, yet the ' +\n            'environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');\n      }\n\n      this.colorBufferFloatExtension = this.gl.getExtension(COLOR_BUFFER_FLOAT);\n      if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {\n        this.colorBufferHalfFloatExtension =\n            webgl_util.getExtensionOrThrow(this.gl, COLOR_BUFFER_HALF_FLOAT);\n      } else if (env().get('WEBGL_FORCE_F16_TEXTURES')) {\n        throw new Error(\n            'GL context does not support color renderable half floats, yet ' +\n            'the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');\n      }\n    } else {\n      COLOR_BUFFER_FLOAT = 'EXT_color_buffer_float';\n      if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_FLOAT)) {\n        this.colorBufferFloatExtension =\n            this.gl.getExtension(COLOR_BUFFER_FLOAT);\n      } else if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {\n        this.colorBufferHalfFloatExtension =\n            this.gl.getExtension(COLOR_BUFFER_HALF_FLOAT);\n      } else {\n        throw new Error('GL context does not support color renderable floats');\n      }\n    }\n\n    this.vertexBuffer = gpgpu_util.createVertexBuffer(this.gl);\n    this.indexBuffer = gpgpu_util.createIndexBuffer(this.gl);\n    this.framebuffer = webgl_util.createFramebuffer(this.gl);\n\n    this.textureConfig =\n        tex_util.getTextureConfig(this.gl, this.textureHalfFloatExtension);\n  }\n\n  private get debug(): boolean {\n    return env().getBool('DEBUG');\n  }\n\n  public dispose() {\n    if (this.disposed) {\n      return;\n    }\n    if (this.program != null) {\n      console.warn(\n          'Disposing a GPGPUContext that still has a bound WebGLProgram.' +\n          ' This is probably a resource leak, delete the program with ' +\n          'GPGPUContext.deleteProgram before disposing.');\n    }\n    if (this.outputTexture != null) {\n      console.warn(\n          'Disposing a GPGPUContext that still has a bound output matrix ' +\n          'texture.  This is probably a resource leak, delete the output ' +\n          'matrix texture with GPGPUContext.deleteMatrixTexture before ' +\n          'disposing.');\n    }\n    const gl = this.gl;\n    webgl_util.callAndCheck(gl, () => gl.finish());\n    webgl_util.callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, null));\n    webgl_util.callAndCheck(gl, () => gl.deleteFramebuffer(this.framebuffer));\n    webgl_util.callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, null));\n    webgl_util.callAndCheck(\n        gl, () => gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null));\n    webgl_util.callAndCheck(gl, () => gl.deleteBuffer(this.indexBuffer));\n    this.disposed = true;\n  }\n\n  public createFloat32MatrixTexture(rows: number, columns: number): Texture {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat32MatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public createFloat16MatrixTexture(rows: number, columns: number): Texture {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat16MatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public createUnsignedBytesMatrixTexture(rows: number, columns: number):\n      Texture {\n    this.throwIfDisposed();\n    return gpgpu_util.createUnsignedBytesMatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public uploadPixelDataToTexture(\n      texture: WebGLTexture,\n      pixels: PixelData|ImageData|HTMLImageElement|HTMLCanvasElement|\n      ImageBitmap) {\n    this.throwIfDisposed();\n    gpgpu_util.uploadPixelDataToTexture(this.gl, texture, pixels);\n  }\n\n  public uploadDenseMatrixToTexture(\n      texture: WebGLTexture, width: number, height: number, data: TypedArray) {\n    this.throwIfDisposed();\n    gpgpu_util.uploadDenseMatrixToTexture(\n        this.gl, texture, width, height, data, this.textureConfig);\n  }\n\n  public createFloat16PackedMatrixTexture(rows: number, columns: number):\n      Texture {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat16PackedMatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public createPackedMatrixTexture(rows: number, columns: number): Texture {\n    this.throwIfDisposed();\n    return gpgpu_util.createPackedMatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public deleteMatrixTexture(texture: WebGLTexture) {\n    this.throwIfDisposed();\n    if (this.outputTexture === texture) {\n      webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);\n      this.outputTexture = null;\n    }\n    webgl_util.callAndCheck(this.gl, () => this.gl.deleteTexture(texture));\n  }\n\n  public downloadByteEncodedFloatMatrixFromOutputTexture(\n      texture: WebGLTexture, rows: number, columns: number): Float32Array {\n    return this.downloadMatrixDriver(\n        texture,\n        () => gpgpu_util.downloadByteEncodedFloatMatrixFromOutputTexture(\n            this.gl, rows, columns, this.textureConfig));\n  }\n\n  public downloadPackedMatrixFromBuffer(\n      buffer: WebGLBuffer, batch: number, rows: number, columns: number,\n      physicalRows: number, physicalCols: number): Float32Array {\n    return gpgpu_util.downloadPackedMatrixFromBuffer(\n        this.gl, buffer, batch, rows, columns, physicalRows, physicalCols,\n        this.textureConfig);\n  }\n\n  public downloadFloat32MatrixFromBuffer(buffer: WebGLBuffer, size: number):\n      Float32Array {\n    return gpgpu_util.downloadFloat32MatrixFromBuffer(this.gl, buffer, size);\n  }\n\n  public createBufferFromTexture(\n      texture: WebGLTexture, rows: number, columns: number): WebGLBuffer {\n    this.bindTextureToFrameBuffer(texture);\n    const result = gpgpu_util.createBufferFromOutputTexture(\n        this.gl as WebGL2RenderingContext, rows, columns, this.textureConfig);\n    this.unbindTextureToFrameBuffer();\n    return result;\n  }\n\n  public createAndWaitForFence(): Promise<void> {\n    const fenceContext = this.createFence(this.gl);\n    return this.pollFence(fenceContext);\n  }\n\n  private createFence(gl: WebGLRenderingContext): FenceContext {\n    let query: WebGLQuery|WebGLSync;\n    let isFencePassed: () => boolean;\n\n    if (env().getBool('WEBGL_FENCE_API_ENABLED')) {\n      const gl2 = gl as WebGL2RenderingContext;\n\n      const sync = gl2.fenceSync(gl2.SYNC_GPU_COMMANDS_COMPLETE, 0);\n      gl.flush();\n\n      isFencePassed = () => {\n        const status = gl2.clientWaitSync(sync, 0, 0);\n        return status === gl2.ALREADY_SIGNALED ||\n            status === gl2.CONDITION_SATISFIED;\n      };\n\n      query = sync;\n    } else if (\n        env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0) {\n      query = this.beginQuery();\n      this.endQuery();\n      isFencePassed = () => this.isQueryAvailable(\n          query,\n          env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));\n    } else {\n      // If we have no way to fence, return true immediately. This will fire in\n      // WebGL 1.0 when there is no disjoint query timer. In this case, because\n      // the fence passes immediately, we'll immediately ask for a download of\n      // the texture, which will cause the UI thread to hang.\n      isFencePassed = () => true;\n    }\n\n    return {query, isFencePassed};\n  }\n\n  public downloadMatrixFromPackedTexture(\n      texture: WebGLTexture, physicalRows: number,\n      physicalCols: number): Float32Array {\n    return this.downloadMatrixDriver(\n        texture,\n        () => gpgpu_util.downloadMatrixFromPackedOutputTexture(\n            this.gl, physicalRows, physicalCols));\n  }\n\n  public createProgram(fragmentShader: WebGLShader): GPGPUContextProgram {\n    this.throwIfDisposed();\n    const gl = this.gl;\n    if (this.vertexShader == null) {\n      this.vertexShader = gpgpu_util.createVertexShader(gl);\n    }\n    const program: WebGLProgram = webgl_util.createProgram(gl);\n    webgl_util.callAndCheck(\n        gl, () => gl.attachShader(program, this.vertexShader));\n    webgl_util.callAndCheck(gl, () => gl.attachShader(program, fragmentShader));\n    webgl_util.linkProgram(gl, program);\n\n    let program2: GPGPUContextProgram;\n    {\n      program2 = Object.assign(program, {\n        vao: this.createVertexArray(),\n      });\n      this.bindVertexArray(program2.vao);\n      // Bind index buffer, and vertex buffers based on program attrib\n      // locations.\n      webgl_util.callAndCheck(\n          gl, () => gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer));\n      console.assert(\n        gpgpu_util.bindVertexProgramAttributeStreams(gl, program2,\n                                                     this.vertexBuffer),\n        'gpgpu_util.bindVertexProgramAttributeStreams not fully successful.');\n\n      if (this.debug) {\n        webgl_util.validateProgram(gl, program2);\n      }\n    }\n    this.setProgram(program2);\n\n    return program2;\n  }\n\n  public deleteProgram(program: GPGPUContextProgram) {\n    this.throwIfDisposed();\n    if (program === this.program) {\n      this.program = null;\n    }\n    if (program != null) {\n      webgl_util.callAndCheck(this.gl, () => this.gl.deleteProgram(program));\n      this.deleteVertexArray(program.vao);\n    }\n  }\n\n  public setProgram(program: GPGPUContextProgram|null) {\n    this.throwIfDisposed();\n    this.program = program;\n\n    if (this.program != null) {\n      this.bindVertexArray(this.program.vao);\n\n      if (this.debug) {\n        webgl_util.validateProgram(this.gl, this.program);\n      }\n    }\n    webgl_util.callAndCheck(this.gl, () => this.gl.useProgram(program));\n  }\n\n  public getUniformLocation(\n      program: WebGLProgram, uniformName: string,\n      shouldThrow = true): WebGLUniformLocation {\n    this.throwIfDisposed();\n    if (shouldThrow) {\n      return webgl_util.getProgramUniformLocationOrThrow(\n          this.gl, program, uniformName);\n    } else {\n      return webgl_util.getProgramUniformLocation(\n          this.gl, program, uniformName);\n    }\n  }\n\n  public getAttributeLocation(program: WebGLProgram, attribute: string):\n      number {\n    this.throwIfDisposed();\n    return webgl_util.callAndCheck(\n        this.gl, () => this.gl.getAttribLocation(program, attribute));\n  }\n\n  public getUniformLocationNoThrow(program: WebGLProgram, uniformName: string):\n      WebGLUniformLocation {\n    this.throwIfDisposed();\n    return this.gl.getUniformLocation(program, uniformName);\n  }\n\n  public setInputMatrixTexture(\n      inputMatrixTexture: WebGLTexture, uniformLocation: WebGLUniformLocation,\n      textureUnit: number) {\n    this.throwIfDisposed();\n    this.throwIfNoProgram();\n    webgl_util.bindTextureToProgramUniformSampler(\n        this.gl, inputMatrixTexture, uniformLocation, textureUnit);\n  }\n\n  public setOutputMatrixTexture(\n      outputMatrixTexture: WebGLTexture, rows: number, columns: number) {\n    this.setOutputMatrixTextureDriver(outputMatrixTexture, columns, rows);\n  }\n\n  public setOutputPackedMatrixTexture(\n      outputPackedMatrixTexture: WebGLTexture, rows: number, columns: number) {\n    this.throwIfDisposed();\n    const [width, height] =\n        tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n    this.setOutputMatrixTextureDriver(outputPackedMatrixTexture, width, height);\n  }\n\n  public setOutputMatrixWriteRegion(\n      startRow: number, numRows: number, startColumn: number,\n      numColumns: number) {\n    this.setOutputMatrixWriteRegionDriver(\n        startColumn, startRow, numColumns, numRows);\n  }\n\n  public setOutputPackedMatrixWriteRegion(\n      startRow: number, numRows: number, startColumn: number,\n      numColumns: number) {\n    throw new Error('setOutputPackedMatrixWriteRegion not implemented.');\n  }\n\n  public debugValidate() {\n    if (this.program != null) {\n      webgl_util.validateProgram(this.gl, this.program);\n    }\n    webgl_util.validateFramebuffer(this.gl);\n  }\n\n  public executeProgram() {\n    this.throwIfDisposed();\n    this.throwIfNoProgram();\n    const gl = this.gl;\n    if (this.debug) {\n      const boundVao = this.getVertexArray();\n      console.assert(boundVao === this.program.vao,\n                     'VAO changed between setProgram and executeProgram!');\n\n      this.debugValidate();\n    }\n    webgl_util.callAndCheck(\n        gl, () => gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0));\n  }\n\n  public blockUntilAllProgramsCompleted() {\n    this.throwIfDisposed();\n    webgl_util.callAndCheck(this.gl, () => this.gl.finish());\n  }\n\n  private getQueryTimerExtension(): WebGL1DisjointQueryTimerExtension\n      |WebGL2DisjointQueryTimerExtension {\n    if (this.disjointQueryTimerExtension == null) {\n      this.disjointQueryTimerExtension =\n          webgl_util.getExtensionOrThrow(\n              this.gl,\n              env().getNumber(\n                  'WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2 ?\n                  'EXT_disjoint_timer_query_webgl2' :\n                  'EXT_disjoint_timer_query') as\n              WebGL1DisjointQueryTimerExtension |\n          WebGL2DisjointQueryTimerExtension;\n    }\n    return this.disjointQueryTimerExtension;\n  }\n\n  private getQueryTimerExtensionWebGL2(): WebGL2DisjointQueryTimerExtension {\n    return this.getQueryTimerExtension();\n  }\n\n  private getQueryTimerExtensionWebGL1(): WebGL1DisjointQueryTimerExtension {\n    return this.getQueryTimerExtension() as WebGL1DisjointQueryTimerExtension;\n  }\n\n  beginQuery(): WebGLQuery {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.getQueryTimerExtensionWebGL2();\n\n      const query = gl2.createQuery();\n      gl2.beginQuery(ext.TIME_ELAPSED_EXT, query);\n      return query;\n    }\n    const ext = this.getQueryTimerExtensionWebGL1();\n    const query = ext.createQueryEXT() as WebGLQuery;\n    ext.beginQueryEXT(ext.TIME_ELAPSED_EXT, query);\n    return query;\n  }\n\n  endQuery() {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.getQueryTimerExtensionWebGL2();\n      gl2.endQuery(ext.TIME_ELAPSED_EXT);\n      return;\n    }\n    const ext = this.getQueryTimerExtensionWebGL1();\n    ext.endQueryEXT(ext.TIME_ELAPSED_EXT);\n  }\n\n  public async waitForQueryAndGetTime(query: WebGLQuery): Promise<number> {\n    await util.repeatedTry(\n        () => this.disposed ||  // while testing contexts are created / disposed\n                                // in rapid succession, so without this check we\n                                // may poll for the query timer indefinitely\n            this.isQueryAvailable(\n                query,\n                env().getNumber(\n                    'WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION')));\n    return this.getQueryTime(\n        query, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));\n  }\n\n  private getQueryTime(query: WebGLQuery, queryTimerVersion: number): number {\n    if (queryTimerVersion === 0) {\n      return null;\n    }\n\n    if (queryTimerVersion === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n\n      const timeElapsedNanos = gl2.getQueryParameter(query, gl2.QUERY_RESULT);\n      // Return milliseconds.\n      return timeElapsedNanos / 1000000;\n    } else {\n      const ext = this.getQueryTimerExtensionWebGL1();\n\n      const timeElapsedNanos =\n          ext.getQueryObjectEXT(query, ext.QUERY_RESULT_EXT);\n      // Return milliseconds.\n      return timeElapsedNanos / 1000000;\n    }\n  }\n\n  private isQueryAvailable(query: WebGLQuery, queryTimerVersion: number):\n      boolean {\n    if (queryTimerVersion === 0) {\n      return true;\n    }\n\n    if (queryTimerVersion === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.getQueryTimerExtensionWebGL2();\n\n      const available =\n          gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);\n      if (this.disjoint == null) {\n        this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);\n      }\n\n      return available && !this.disjoint;\n    } else {\n      const ext = this.getQueryTimerExtensionWebGL1();\n\n      const available =\n          ext.getQueryObjectEXT(query, ext.QUERY_RESULT_AVAILABLE_EXT);\n      if (this.disjoint == null) {\n        this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);\n      }\n\n      return available && !this.disjoint;\n    }\n  }\n\n  pollFence(fenceContext: FenceContext) {\n    return new Promise<void>(resolve => {\n      this.addItemToPoll(() => fenceContext.isFencePassed(), () => resolve());\n    });\n  }\n\n  private itemsToPoll: PollItem[] = [];\n\n  pollItems(): void {\n    // Find the last query that has finished.\n    const index = linearSearchLastTrue(this.itemsToPoll.map(x => x.isDoneFn));\n    for (let i = 0; i <= index; ++i) {\n      const {resolveFn} = this.itemsToPoll[i];\n      resolveFn();\n    }\n    this.itemsToPoll = this.itemsToPoll.slice(index + 1);\n  }\n\n  private addItemToPoll(isDoneFn: () => boolean, resolveFn: () => void) {\n    this.itemsToPoll.push({isDoneFn, resolveFn});\n    if (this.itemsToPoll.length > 1) {\n      // We already have a running loop that polls.\n      return;\n    }\n    // Start a new loop that polls.\n    let scheduleFn = undefined;\n    if ('setTimeoutCustom' in env().platform) {\n      scheduleFn = env().platform.setTimeoutCustom.bind(env().platform);\n    }\n    util.repeatedTry(() => {\n      this.pollItems();\n      // End the loop if no more items to poll.\n      return this.itemsToPoll.length === 0;\n    }, () => 0, null, scheduleFn);\n  }\n\n  private bindTextureToFrameBuffer(texture: WebGLTexture) {\n    this.throwIfDisposed();\n    webgl_util.bindColorTextureToFramebuffer(\n        this.gl, texture, this.framebuffer);\n    if (this.debug) {\n      webgl_util.validateFramebuffer(this.gl);\n    }\n  }\n\n  private unbindTextureToFrameBuffer() {\n    if (this.outputTexture != null) {\n      webgl_util.bindColorTextureToFramebuffer(\n          this.gl, this.outputTexture, this.framebuffer);\n      if (this.debug) {\n        webgl_util.validateFramebuffer(this.gl);\n      }\n    } else {\n      webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);\n    }\n  }\n\n  private downloadMatrixDriver(\n      texture: WebGLTexture,\n      downloadAndDecode: () => Float32Array): Float32Array {\n    this.bindTextureToFrameBuffer(texture);\n    const result = downloadAndDecode();\n    this.unbindTextureToFrameBuffer();\n\n    return result;\n  }\n\n  private setOutputMatrixTextureDriver(\n      outputMatrixTextureMaybePacked: WebGLTexture, width: number,\n      height: number) {\n    this.throwIfDisposed();\n    const gl = this.gl;\n    webgl_util.bindColorTextureToFramebuffer(\n        gl, outputMatrixTextureMaybePacked, this.framebuffer);\n    if (this.debug) {\n      webgl_util.validateFramebuffer(gl);\n    }\n    this.outputTexture = outputMatrixTextureMaybePacked;\n    webgl_util.callAndCheck(gl, () => gl.viewport(0, 0, width, height));\n    webgl_util.callAndCheck(gl, () => gl.scissor(0, 0, width, height));\n  }\n\n  private setOutputMatrixWriteRegionDriver(\n      x: number, y: number, width: number, height: number) {\n    this.throwIfDisposed();\n    webgl_util.callAndCheck(\n        this.gl, () => this.gl.scissor(x, y, width, height));\n  }\n\n  private throwIfDisposed() {\n    if (this.disposed) {\n      throw new Error('Attempted to use disposed GPGPUContext.');\n    }\n  }\n\n  private throwIfNoProgram() {\n    if (this.program == null) {\n      throw new Error('No GPU program is currently set.');\n    }\n  }\n}\n\ntype PollItem = {\n  isDoneFn: () => boolean,\n  resolveFn: () => void\n};\n\n/**\n * Finds the index of the last true element using linear search.\n * Note: We can't do binary search because Chrome expects us to explicitly\n * test all fences before download:\n * https://github.com/tensorflow/tfjs/issues/1145\n */\nexport function linearSearchLastTrue(arr: Array<() => boolean>): number {\n  let i = 0;\n  for (; i < arr.length; ++i) {\n    const isDone = arr[i]();\n    if (!isDone) {\n      break;\n    }\n  }\n  return i - 1;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, DataValues, NumericDataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {SimpleBinaryKernelImpl, SimpleBinaryOperation} from './binary_types';\n\n/**\n * Template that creates implementation for binary ops. Supports broadcast.\n */\nexport function createSimpleBinaryKernelImpl(op: SimpleBinaryOperation):\n    SimpleBinaryKernelImpl {\n  return (aShape: number[], bShape: number[], aVals: DataValues,\n          bVals: DataValues, dtype: DataType): [TypedArray, number[]] => {\n    const newShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n\n    const resultRank = newShape.length;\n    const resultStrides = util.computeStrides(newShape);\n    const resultSize = util.sizeFromShape(newShape);\n\n    const result =\n        util.getTypedArrayFromDType(dtype as NumericDataType, resultSize);\n\n    const aRank = aShape.length;\n    const bRank = bShape.length;\n\n    const aStrides = util.computeStrides(aShape);\n    const bStrides = util.computeStrides(bShape);\n\n    const aBroadcastDims = backend_util.getBroadcastDims(aShape, newShape);\n    const bBroadcastDims = backend_util.getBroadcastDims(bShape, newShape);\n\n    if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n      for (let i = 0; i < result.length; ++i) {\n        result[i] = op(aVals[i % aVals.length], bVals[i % bVals.length]);\n      }\n    } else {\n      for (let i = 0; i < result.length; ++i) {\n        const loc = util.indexToLoc(i, resultRank, resultStrides);\n\n        const aLoc = loc.slice(-aRank);\n        aBroadcastDims.forEach(d => aLoc[d] = 0);\n        const aIndex = util.locToIndex(aLoc, aRank, aStrides);\n\n        const bLoc = loc.slice(-bRank);\n        bBroadcastDims.forEach(d => bLoc[d] = 0);\n        const bIndex = util.locToIndex(bLoc, bRank, bStrides);\n\n        result[i] = op(aVals[aIndex], bVals[bIndex]);\n      }\n    }\n\n    return [result, newShape];\n  };\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo, util} from '@tensorflow/tfjs-core';\n\nexport function assertNotComplex(\n    tensor: TensorInfo|TensorInfo[], opName: string): void {\n  if (!Array.isArray(tensor)) {\n    tensor = [tensor];\n  }\n  tensor.forEach(t => {\n    if (t != null) {\n      util.assert(\n          t.dtype !== 'complex64',\n          () => `${\n              opName} does not support complex64 tensors in the CPU backend.`);\n    }\n  });\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Complex, ComplexInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function complex(args: {inputs: ComplexInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {real, imag} = inputs;\n\n  const realVals = backend.data.get(real.dataId).values as TypedArray;\n  const imagVals = backend.data.get(imag.dataId).values as TypedArray;\n\n  const complexInfo = backend.makeTensorInfo(real.shape, 'complex64');\n\n  const complex = backend.data.get(complexInfo.dataId);\n\n  // The complex tensor owns the underlying real and imag tensorInfos, only the\n  // complex tensor tracks refCount, when complexData is disposed the\n  // underlying tensorData will be disposed.\n  complex.complexTensorInfos = {\n    real: backend.makeTensorInfo(real.shape, 'float32', realVals),\n    imag: backend.makeTensorInfo(imag.shape, 'float32', imagVals)\n  };\n\n  return complexInfo;\n}\n\nexport const complexConfig: KernelConfig = {\n  kernelName: Complex,\n  backendName: 'cpu',\n  kernelFunc: complex as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, TensorInfo, util} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from '../backend_cpu';\nimport {complex} from '../kernels/Complex';\n\n/**\n * Generates a tensorInfo with all zeros value.\n * @param backend cpu backend.\n * @param shape Shape for the zeros tensor.\n * @param dtype Optional. If set, the result has this dtype.\n */\nexport function zeros(\n    backend: MathBackendCPU, shape: number[],\n    dtype: DataType = 'float32'): TensorInfo {\n  if (dtype === 'complex64') {\n    const real = zeros(backend, shape, 'float32');\n    const imag = zeros(backend, shape, 'float32');\n\n    return complex({inputs: {real, imag}, backend});\n  }\n\n  const values = util.makeZerosTypedArray(util.sizeFromShape(shape), dtype);\n\n  return backend.makeTensorInfo(shape, dtype, values);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Identity, IdentityInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function identity(\n    args: {inputs: IdentityInputs, backend: MathBackendCPU}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  backend.incRef(x.dataId);\n\n  return {dataId: x.dataId, shape: x.shape, dtype: x.dtype};\n}\n\nexport const identityConfig: KernelConfig = {\n  kernelName: Identity,\n  backendName: 'cpu',\n  kernelFunc: identity as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Real, RealInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function real(args: {inputs: RealInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  const real = backend.data.get(input.dataId).complexTensorInfos.real;\n  const realVal = backend.data.get(real.dataId).values;\n\n  // When complex tensor is disposed, its underlying parts will be disposed too.\n  // Make new tensor out of the real value of the complex. This makes sure the\n  // value is still accessible even if complex tensor is disposed.\n  return backend.makeTensorInfo(real.shape, real.dtype, realVal);\n}\n\nexport const realConfig: KernelConfig = {\n  kernelName: Real,\n  backendName: 'cpu',\n  kernelFunc: real as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Cast, CastAttrs, CastInputs, DataType, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {zeros} from '../utils/zeros_impl';\n\nimport {complex} from './Complex';\nimport {identity} from './Identity';\nimport {real} from './Real';\n\nexport function castImpl(\n    values: TypedArray, shape: number[], inputType: DataType,\n    dtype: DataType): [number[], DataType, TypedArray] {\n  if (dtype === 'int32') {\n    const resultValues = Int32Array.from(values);\n    return [shape, 'int32', resultValues];\n  }\n\n  if (dtype === 'bool') {\n    // This is essentially the result of notEqual(x, 0). We avoid using\n    // kernel notEqual to avoid circular dependency, i.e. binary_utils ->\n    // cast -> notEqual -> binary_utils.\n    const zero = util.toTypedArray([0], inputType);\n\n    const [resultData, resultShape] = createSimpleBinaryKernelImpl(\n        (a, b) => (a !== b) ? 1 : 0)(shape, [], values, zero, 'bool');\n\n    return [resultShape, 'bool', resultData];\n  }\n  throw new Error(`Error in Cast: failed to cast ${inputType} to ${dtype}`);\n}\n\nexport function cast(\n    args: {inputs: CastInputs, backend: MathBackendCPU, attrs: CastAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {dtype} = attrs;\n\n  // Casting to complex64.\n  if (dtype === 'complex64') {\n    if (x.dtype === 'complex64') {\n      return identity({inputs: {x}, backend});\n    }\n\n    const zerosTensorInfo = zeros(backend, x.shape, x.dtype);\n    const floatX = cast({inputs: {x}, backend, attrs: {dtype: 'float32'}});\n\n    const result =\n        complex({inputs: {real: floatX, imag: zerosTensorInfo}, backend});\n\n    backend.disposeIntermediateTensorInfo(zerosTensorInfo);\n    backend.disposeIntermediateTensorInfo(floatX);\n\n    return result;\n  }\n\n  // Casting from complex64\n  if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const result = cast({inputs: {x: realPart}, backend, attrs: {dtype}});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n\n    return result;\n  }\n\n  if (!util.hasEncodingLoss(x.dtype, dtype)) {\n    // We don't change the underlying data, since we cast to higher\n    // precision.\n    const result = identity({inputs: {x}, backend});\n    return {dataId: result.dataId, shape: result.shape, dtype};\n  }\n\n  const values = backend.data.get(x.dataId).values as TypedArray;\n  const [resultShape, resultType, resultData] =\n      castImpl(values, x.shape, x.dtype, dtype);\n  return backend.makeTensorInfo(resultShape, resultType, resultData);\n}\n\nexport const castConfig: KernelConfig = {\n  kernelName: Cast,\n  backendName: 'cpu',\n  kernelFunc: cast as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BinaryInputs, DataType, KernelFunc, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {cast} from '../kernels/Cast';\nimport {complex} from '../kernels/Complex';\n\nimport {ComplexBinaryKernelImpl, ComplexBinaryOperation, SimpleBinaryKernelImpl} from './binary_types';\n\n/**\n * Template that creates a `KernelFunc` for binary ops.\n * @param name Kernel name.\n * @param binaryKernelImpl A `SimpleBinaryKernelImpl` for the kernel.\n * @param binaryKernelComplexImpl Optional. If exists, represents a\n *     `ComplexBinaryKernelImpl` for the kernel, will be used when input dtype\n *     is `complex64`.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function binaryKernelFunc(\n    name: string, simpleImpl: SimpleBinaryKernelImpl,\n    complexImpl?: ComplexBinaryKernelImpl, dtype?: DataType): KernelFunc {\n  if (complexImpl == null) {\n    return ({inputs, backend}) => {\n      const {a, b} = inputs as BinaryInputs;\n      const cpuBackend = backend as MathBackendCPU;\n\n      assertNotComplex([a, b], name);\n\n      const aVals = cpuBackend.data.get(a.dataId).values as TypedArray;\n      const bVals = cpuBackend.data.get(b.dataId).values as TypedArray;\n\n      const decodedAVals = a.dtype === 'string' ?\n          // tslint:disable-next-line: no-any\n          backend_util.fromUint8ToStringArray(aVals as any as Uint8Array[]) :\n          aVals;\n      const decodedBVals = a.dtype === 'string' ?\n          // tslint:disable-next-line: no-any\n          backend_util.fromUint8ToStringArray(bVals as any as Uint8Array[]) :\n          bVals;\n      const $dtype = dtype || a.dtype;\n\n      const [resultData, resultShape] =\n          simpleImpl(a.shape, b.shape, decodedAVals, decodedBVals, $dtype);\n\n      return cpuBackend.makeTensorInfo(resultShape, $dtype, resultData);\n    };\n  }\n\n  return ({inputs, backend}) => {\n    const {a, b} = inputs as BinaryInputs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    if (a.dtype === 'complex64' || b.dtype === 'complex64') {\n      const $aComplex = cast(\n          {inputs: {x: a}, backend: cpuBackend, attrs: {dtype: 'complex64'}});\n\n      const $aComplexVals = cpuBackend.data.get($aComplex.dataId);\n\n      const aReal = $aComplexVals.complexTensorInfos.real;\n      const aImag = $aComplexVals.complexTensorInfos.imag;\n\n      const aRealVals =\n          cpuBackend.data.get(aReal.dataId).values as Float32Array;\n      const aImagVals =\n          cpuBackend.data.get(aImag.dataId).values as Float32Array;\n\n      const $bComplex = cast(\n          {inputs: {x: b}, backend: cpuBackend, attrs: {dtype: 'complex64'}});\n\n      const $bComplexVals = cpuBackend.data.get($bComplex.dataId);\n\n      const bReal = $bComplexVals.complexTensorInfos.real;\n      const bImag = $bComplexVals.complexTensorInfos.imag;\n\n      const bRealVals =\n          cpuBackend.data.get(bReal.dataId).values as Float32Array;\n      const bImagVals =\n          cpuBackend.data.get(bImag.dataId).values as Float32Array;\n\n      const [resultRealData, resultImagData, resultShape] = complexImpl(\n          a.shape, b.shape, aRealVals, aImagVals, bRealVals, bImagVals);\n\n      const resultReal =\n          cpuBackend.makeTensorInfo(resultShape, 'float32', resultRealData);\n\n      const resultImag =\n          cpuBackend.makeTensorInfo(resultShape, 'float32', resultImagData);\n\n      const result = complex(\n          {inputs: {real: resultReal, imag: resultImag}, backend: cpuBackend});\n\n      cpuBackend.disposeIntermediateTensorInfo($aComplex);\n      cpuBackend.disposeIntermediateTensorInfo($bComplex);\n      cpuBackend.disposeIntermediateTensorInfo(resultReal);\n      cpuBackend.disposeIntermediateTensorInfo(resultImag);\n\n      return result;\n    } else {\n      const aVals = cpuBackend.data.get(a.dataId).values as TypedArray;\n      const bVals = cpuBackend.data.get(b.dataId).values as TypedArray;\n\n      const $dtype = dtype || a.dtype;\n\n      const [resultData, resultShape] =\n          simpleImpl(a.shape, b.shape, aVals, bVals, $dtype);\n\n      return cpuBackend.makeTensorInfo(resultShape, $dtype, resultData);\n    }\n  };\n}\n\n/**\n * Template that creates the complex type implementation for binary ops.\n * Supports broadcast.\n */\nexport function createComplexBinaryKernelImpl(op: ComplexBinaryOperation):\n    ComplexBinaryKernelImpl {\n  return (aShape: number[], bShape: number[], aRealVals: Float32Array,\n          aImagVals: Float32Array, bRealVals: Float32Array,\n          bImagVals: Float32Array): [TypedArray, TypedArray, number[]] => {\n    const resultShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n    const resultSize = util.sizeFromShape(resultShape);\n    const resultRank = resultShape.length;\n    const resultStrides = util.computeStrides(resultShape);\n\n    const resultRealVals = util.getTypedArrayFromDType('float32', resultSize);\n    const resultImagVals = util.getTypedArrayFromDType('float32', resultSize);\n\n    const aBroadcastDims = backend_util.getBroadcastDims(aShape, resultShape);\n    const bBroadcastDims = backend_util.getBroadcastDims(bShape, resultShape);\n\n    const aVals = backend_util.mergeRealAndImagArrays(aRealVals, aImagVals);\n    const bVals = backend_util.mergeRealAndImagArrays(bRealVals, bImagVals);\n\n    const aRank = aShape.length;\n    const aStrides = util.computeStrides(aShape);\n\n    const bRank = bShape.length;\n    const bStrides = util.computeStrides(bShape);\n\n    if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n      for (let i = 0; i < resultRealVals.length; i++) {\n        const aIdx = i % aVals.length;\n        const bIdx = i % bVals.length;\n\n        const result =\n            op(aVals[aIdx * 2], aVals[aIdx * 2 + 1], bVals[bIdx * 2],\n               bVals[bIdx * 2 + 1]);\n\n        resultRealVals[i] = result.real;\n        resultImagVals[i] = result.imag;\n      }\n    } else {\n      for (let i = 0; i < resultRealVals.length; i++) {\n        const loc = util.indexToLoc(i, resultRank, resultStrides);\n\n        const aLoc = loc.slice(-aRank);\n        aBroadcastDims.forEach(d => aLoc[d] = 0);\n        const aIndex = util.locToIndex(aLoc, aRank, aStrides);\n\n        const bLoc = loc.slice(-bRank);\n        bBroadcastDims.forEach(d => bLoc[d] = 0);\n        const bIndex = util.locToIndex(bLoc, bRank, bStrides);\n\n        const opResult =\n            op(aVals[aIndex * 2], aVals[aIndex * 2 + 1], bVals[bIndex * 2],\n               bVals[bIndex * 2 + 1]);\n\n        resultRealVals[i] = opResult.real;\n        resultImagVals[i] = opResult.imag;\n      }\n    }\n    return [resultRealVals, resultImagVals, resultShape];\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Add, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc, createComplexBinaryKernelImpl} from '../utils/binary_utils';\n\nexport const addImpl =\n    createSimpleBinaryKernelImpl(((a: number, b: number) => a + b));\nexport const addComplexImpl =\n    createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n      return {real: aReal + bReal, imag: aImag + bImag};\n    }));\n\nexport const add = binaryKernelFunc(Add, addImpl, addComplexImpl);\n\nexport const addConfig: KernelConfig = {\n  kernelName: Add,\n  backendName: 'cpu',\n  kernelFunc: add\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {NumericDataType, util} from '@tensorflow/tfjs-core';\n\nimport {SimpleUnaryImpl, SimpleUnaryOperation} from './unary_types';\n\n/**\n * Template that creates implementation for unary op.\n */\nexport function createSimpleUnaryImpl(op: SimpleUnaryOperation):\n    SimpleUnaryImpl {\n  return (values, dtype, attrs) => {\n    const newValues =\n        util.getTypedArrayFromDType(dtype as NumericDataType, values.length);\n    for (let i = 0; i < values.length; ++i) {\n      newValues[i] = op(values[i], attrs);\n    }\n    return newValues;\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, KernelFunc, TypedArray, UnaryInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {SimpleUnaryImpl, SimpleUnaryOperation} from './unary_types';\n\n/**\n * Template that creates a `KernelFunc` for unary ops.\n * @param name Kernel name.\n * @param op A `SimpleUnaryOperation` for the kernel.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the input. This is mainly used in certain\n *     kernels that return bool type, such as isFinite, isInf, etc.\n */\nexport function unaryKernelFunc(\n    name: string, op: SimpleUnaryOperation, dtype?: DataType): KernelFunc {\n  return ({inputs, attrs, backend}) => {\n    const {x} = inputs as UnaryInputs;\n    assertNotComplex(x, name);\n    if (x.dtype === 'string' || dtype === 'string') {\n      throw new Error('unaryKernelFunc does not support string input/output');\n    }\n\n    const cpuBackend = backend as MathBackendCPU;\n    const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n    const xSize = util.sizeFromShape(x.shape);\n    const $dtype = dtype || x.dtype;\n    const newValues = util.getArrayFromDType($dtype, xSize);\n    for (let i = 0; i < xSize; ++i) {\n      newValues[i] = op(values[i], attrs);\n    }\n    return cpuBackend.makeTensorInfo(x.shape, $dtype, newValues);\n  };\n}\n\n/**\n * Template that creates a `KernelFunc` for unary ops from the given\n * `SimpleUnaryImpl`..\n * @param name Kernel name.\n * @param unaryImpl A `SimpleUnaryImpl` that implements the op.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the input. This is mainly used in certain\n *     kernels that return bool type, such as isFinite, isInf, etc.\n */\nexport function unaryKernelFuncFromImpl(\n    name: string, unaryImpl: SimpleUnaryImpl, dtype?: DataType): KernelFunc {\n  return ({inputs, attrs, backend}) => {\n    const {x} = inputs as UnaryInputs;\n    assertNotComplex(x, name);\n    if (x.dtype === 'string' || dtype === 'string') {\n      throw new Error('unaryKernelFunc does not support string input/output');\n    }\n\n    const cpuBackend = backend as MathBackendCPU;\n    const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n    const $dtype = dtype || x.dtype;\n    const newValues = unaryImpl(values, $dtype, attrs);\n    return cpuBackend.makeTensorInfo(x.shape, $dtype, newValues);\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Ceil, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const ceilImpl = createSimpleUnaryImpl((xi) => Math.ceil(xi));\nexport const ceil = unaryKernelFuncFromImpl(Ceil, ceilImpl);\n\nexport const ceilConfig: KernelConfig = {\n  kernelName: Ceil,\n  backendName: 'cpu',\n  kernelFunc: ceil,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Equal, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const equalImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a === b) ? 1 : 0);\nexport const equal =\n    binaryKernelFunc(Equal, equalImpl, null /* complexImpl */, 'bool');\n\nexport const equalConfig: KernelConfig = {\n  kernelName: Equal,\n  backendName: 'cpu',\n  kernelFunc: equal\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Exp, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const expImpl = createSimpleUnaryImpl((xi) => Math.exp(xi));\nexport const exp = unaryKernelFuncFromImpl(Exp, expImpl, 'float32');\n\nexport const expConfig: KernelConfig = {\n  kernelName: Exp,\n  backendName: 'cpu',\n  kernelFunc: exp,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Expm1, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const expm1Impl = createSimpleUnaryImpl((xi) => Math.expm1(xi));\nexport const expm1 = unaryKernelFuncFromImpl(Expm1, expm1Impl);\n\nexport const expm1Config: KernelConfig = {\n  kernelName: Expm1,\n  backendName: 'cpu',\n  kernelFunc: expm1,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Floor, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const floorImpl = createSimpleUnaryImpl((xi) => Math.floor(xi));\nexport const floor = unaryKernelFuncFromImpl(Floor, floorImpl);\n\nexport const floorConfig: KernelConfig = {\n  kernelName: Floor,\n  backendName: 'cpu',\n  kernelFunc: floor,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Greater, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const greaterImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a > b) ? 1 : 0);\nexport const greater =\n    binaryKernelFunc(Greater, greaterImpl, null /* complexImpl */, 'bool');\n\nexport const greaterConfig: KernelConfig = {\n  kernelName: Greater,\n  backendName: 'cpu',\n  kernelFunc: greater\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GreaterEqual, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const greaterEqualImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a >= b) ? 1 : 0);\nexport const greaterEqual = binaryKernelFunc(\n    GreaterEqual, greaterEqualImpl, null /* complexImpl */, 'bool');\n\nexport const greaterEqualConfig: KernelConfig = {\n  kernelName: GreaterEqual,\n  backendName: 'cpu',\n  kernelFunc: greaterEqual\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Less} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const lessImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a < b) ? 1 : 0);\nexport const less =\n    binaryKernelFunc(Less, lessImpl, null /* complexImpl */, 'bool');\n\nexport const lessConfig: KernelConfig = {\n  kernelName: Less,\n  backendName: 'cpu',\n  kernelFunc: less\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LessEqual} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const lessEqualImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a <= b) ? 1 : 0);\nexport const lessEqual =\n    binaryKernelFunc(LessEqual, lessEqualImpl, null /* complexImpl */, 'bool');\n\nexport const lessEqualConfig: KernelConfig = {\n  kernelName: LessEqual,\n  backendName: 'cpu',\n  kernelFunc: lessEqual\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Log} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const logImpl = createSimpleUnaryImpl((xi) => Math.log(xi));\nexport const log = unaryKernelFuncFromImpl(Log, logImpl);\n\nexport const logConfig: KernelConfig = {\n  kernelName: Log,\n  backendName: 'cpu',\n  kernelFunc: log,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Maximum} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const maximumImpl = createSimpleBinaryKernelImpl(\n    ((aValue, bValue) => Math.max(aValue as number, bValue as number)));\nexport const maximum = binaryKernelFunc(Maximum, maximumImpl);\n\nexport const maximumConfig: KernelConfig = {\n  kernelName: Maximum,\n  backendName: 'cpu',\n  kernelFunc: maximum\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Minimum} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const minimumImpl = createSimpleBinaryKernelImpl(\n    ((aValue, bValue) => Math.min(aValue as number, bValue as number)));\nexport const minimum = binaryKernelFunc(Minimum, minimumImpl);\n\nexport const minimumConfig: KernelConfig = {\n  kernelName: Minimum,\n  backendName: 'cpu',\n  kernelFunc: minimum\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Multiply} from '@tensorflow/tfjs-core';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc, createComplexBinaryKernelImpl} from '../utils/binary_utils';\n\nexport const multiplyImpl = createSimpleBinaryKernelImpl(\n    ((aValue: number, bValue: number) => aValue * bValue));\nexport const multiplyComplexImpl =\n    createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n      return {\n        real: aReal * bReal - aImag * bImag,\n        imag: aReal * bImag + aImag * bReal\n      };\n    }));\n\nexport const multiply =\n    binaryKernelFunc(Multiply, multiplyImpl, multiplyComplexImpl);\n\nexport const multiplyConfig: KernelConfig = {\n  kernelName: Multiply,\n  backendName: 'cpu',\n  kernelFunc: multiply\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, KernelConfig, KernelFunc, Neg, TensorInfo, TypedArray, UnaryInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {multiplyImpl} from './Multiply';\n\nexport function negImpl(xVals: TypedArray, xShape: number[], xDtype: DataType):\n    [TypedArray, number[]] {\n  const minusOne =\n      util.createScalarValue(-1 as unknown as 'float32', xDtype) as TypedArray;\n  return multiplyImpl([], xShape, minusOne, xVals, xDtype);\n}\n\nexport function neg(args: {inputs: UnaryInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  assertNotComplex(x, 'neg');\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const [res, newShape] = negImpl(xVals, x.shape, x.dtype);\n\n  return backend.makeTensorInfo(newShape, x.dtype, res);\n}\n\nexport const negConfig: KernelConfig = {\n  kernelName: Neg,\n  backendName: 'cpu',\n  kernelFunc: neg as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, NotEqual} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const notEqualImpl =\n    createSimpleBinaryKernelImpl(((a, b) => (a !== b) ? 1 : 0));\nexport const notEqual =\n    binaryKernelFunc(NotEqual, notEqualImpl, null /* complexOp */, 'bool');\n\nexport const notEqualConfig: KernelConfig = {\n  kernelName: NotEqual,\n  backendName: 'cpu',\n  kernelFunc: notEqual\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, NumericDataType, TypedArray} from '@tensorflow/tfjs-core';\nimport {util} from '@tensorflow/tfjs-core';\n\nexport function transposeImpl(\n    xVals: TypedArray, xShape: number[], dtype: DataType, perm: number[],\n    newShape: number[]): TypedArray {\n  const xRank = xShape.length;\n  const xSize = util.sizeFromShape(xShape);\n  const xStrides = util.computeStrides(xShape);\n  const newStrides = util.computeStrides(newShape);\n\n  const result = util.getTypedArrayFromDType(\n      dtype as NumericDataType, util.sizeFromShape(newShape));\n\n  for (let i = 0; i < xSize; ++i) {\n    const loc = util.indexToLoc(i, xRank, xStrides);\n\n    // Permute location.\n    const newLoc: number[] = new Array(loc.length);\n    for (let i = 0; i < newLoc.length; i++) {\n      newLoc[i] = loc[perm[i]];\n    }\n\n    const newIndex = util.locToIndex(newLoc, xRank, newStrides);\n    result[newIndex] = xVals[i];\n  }\n  return result;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, KernelConfig, KernelFunc, Prod, ProdAttrs, ProdInputs, TensorInfo, TypedArray, upcastType, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {transpose} from './Transpose';\n\nexport function prodImpl(\n    xShape: number[], xDtype: DataType, xVals: TypedArray,\n    reductionAxes: number[]):\n    {outVals: TypedArray, outShape: number[], outDtype: DataType} {\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(xShape, reductionAxes);\n  const outDtype = upcastType(xDtype, 'int32');\n  const outVals = util.makeZerosTypedArray(\n                      util.sizeFromShape(outShape), outDtype) as TypedArray;\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  for (let i = 0; i < outVals.length; ++i) {\n    const offset = i * reduceSize;\n    let prod = 1;\n    for (let j = 0; j < reduceSize; ++j) {\n      prod *= xVals[offset + j];\n    }\n    outVals[i] = prod;\n  }\n\n  return {outVals, outShape, outDtype};\n}\n\nexport function prod(\n    args: {inputs: ProdInputs, backend: MathBackendCPU, attrs: ProdAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'prod');\n\n  const xRank = x.shape.length;\n  const axes = util.parseAxisParam(axis, x.shape);\n\n  const permutation = backend_util.getAxesPermutation(axes, xRank);\n  let reductionAxes = axes;\n  let permutedX = x;\n  const intermediateTensorInfos = [];\n  if (permutation != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutation}});\n    intermediateTensorInfos.push(permutedX);\n    reductionAxes = backend_util.getInnerMostAxes(reductionAxes.length, xRank);\n  }\n\n  const xVals = backend.data.get(permutedX.dataId).values as TypedArray;\n  const {outVals, outShape, outDtype} =\n      prodImpl(permutedX.shape, permutedX.dtype, xVals, reductionAxes);\n\n  let resultShape = outShape;\n  if (keepDims) {\n    resultShape = backend_util.expandShapeToKeepDim(outShape, axes);\n  }\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return backend.makeTensorInfo(resultShape, outDtype, outVals);\n}\n\nexport const prodConfig: KernelConfig = {\n  kernelName: Prod,\n  backendName: 'cpu',\n  kernelFunc: prod as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nfunction validateIndices(\n    indices: TypedArray, indicesShape: number[], numParams: number) {\n  indices.forEach((index: number, i: number) => {\n    if (index < 0 || index >= numParams) {\n      const locString =\n          util.indexToLoc(\n                  i, indicesShape.length, util.computeStrides(indicesShape))\n              .join(',');\n      throw new Error(\n          `indices[${locString}] = ${index} is not in [0, ${numParams})`);\n    }\n  });\n}\n\nfunction validateSplits(\n    paramsNestedSplits: TypedArray[], numParamsDenseValues: number) {\n  // Validate\n  for (let dim = 0; dim < paramsNestedSplits.length; ++dim) {\n    const splits = paramsNestedSplits[dim];\n    const lastSplit = (dim === paramsNestedSplits.length - 1) ?\n        numParamsDenseValues :\n        paramsNestedSplits[dim + 1].length;\n    if (splits.length === 0) {\n      throw new Error('Ragged splits may not be empty');\n    }\n    if (splits[0] < 0) {\n      throw new Error('Ragged splits must be non-negative');\n    }\n    if (splits[splits.length - 1] > lastSplit) {\n      throw new Error('Ragged splits must not point past values');\n    }\n    for (let i = 1; i < splits.length; ++i) {\n      if (splits[i - 1] > splits[i]) {\n        throw new Error('Ragged splits must be sorted in ascending order');\n      }\n    }\n  }\n}\n\n// Construct the `splits` output tensors, encoded using a nested vector.\n// Also find the slices of values that need to be copied, and store them\n// in `valueSlices`.  The total number of values that will be copied (which\n// we need for allocating the output values tensor) is stored in `numValues`.\nfunction makeSplits(\n    indices: TypedArray, indicesShape: number[],\n    paramsNestedSplits: TypedArray[], numParamsDenseValues: number) {\n  const valueSlices: Array<[number, number]> = [];\n  let numValues = 0;\n\n  const numSplits = indicesShape.length - 1 + paramsNestedSplits.length;\n  const outSplits = new Array(numSplits).fill(null).map(() => [0]);\n\n  validateSplits(paramsNestedSplits, numParamsDenseValues);\n\n  // Add `splits` that come from all but the last dimension of the dense\n  // Tensor `indices`.  In particular, for each dimension D, we add a\n  // splits tensor whose values are:\n  //   range(reduceProd(splits.shape[:D]) + 1) * splits.shape[D+1]\n  // E.g., if indices.shape=[2, 3, 4] then we will add splits tensors:\n  //   [0, 3, 6]                    # length=2+1, stride=3\n  //   [0, 4, 8, 12, 16, 20, 24]    # length=2*3+1, stride=4\n  let nrows = 1;\n  for (let dim = 0; dim < indicesShape.length - 1; ++dim) {\n    nrows *= indicesShape[dim];\n    const rowLength = indicesShape[dim + 1];\n    for (let i = 1; i < nrows + 1; ++i) {\n      outSplits[dim].push(i * rowLength);\n    }\n  }\n\n  // Add `splits` that come from `paramsNestedSplits`.  Starting with the\n  // outermost ragged dimension (i.e., the first `splits` tensor), we work\n  // our way in, finding the range of values that should be copied.  As we\n  // go, we update the output `splits` for each dimension with the appropriate\n  // values.  In particular, the *lengths* of the slices from `param_splits`\n  // should be copied to generate corresponding slice lengths in the output\n  // splits.  E.g., if we are copying a ragged row with length 4, then we\n  // should add a new split point to outSplits that is 4 greater than the\n  // previous split point in outSplits.\n  for (let i = 0; i < indices.length; ++i) {\n    let start = indices[i];\n    let limit = indices[i] + 1;\n\n    // Copy splits.\n    for (let dim = 0; dim < paramsNestedSplits.length; ++dim) {\n      const splits = paramsNestedSplits[dim];\n      const outDim = dim + indicesShape.length - 1;\n      if (outDim >= 0) {\n        const outSplitsOutDim = outSplits[outDim];\n        const delta =\n            outSplitsOutDim[outSplitsOutDim.length - 1] - splits[start];\n        for (let j = start; j < limit; ++j) {\n          outSplits[outDim].push(splits[j + 1] + delta);\n        }\n      }\n      start = splits[start];\n      limit = splits[limit];\n    }\n    if (limit !== start) {\n      valueSlices.push([start, limit]);\n      numValues += limit - start;\n    }\n  }\n\n  return {outSplits, valueSlices, numValues};\n}\n\nfunction getSplits(outSplits: number[][]) {\n  const splitsOut: TypedArray[] = [];\n  for (let i = 0; i < outSplits.length; ++i) {\n    const numSplits = outSplits[i].length;\n    const splits = util.getArrayFromDType('int32', numSplits) as TypedArray;\n    splitsOut.push(splits);\n\n    outSplits[i].forEach((value, j: number) => splits[j] = value);\n  }\n\n  return splitsOut;\n}\n\nfunction computeFlatOuterDims(orig: number[], numOutDims: number) {\n  const outDims = orig.slice(0, numOutDims);\n  while (outDims.length < numOutDims) {\n    outDims.push(1);\n  }\n\n  for (let inDim = numOutDims; inDim < orig.length; inDim++) {\n    outDims[numOutDims - 1] *= orig[inDim];\n  }\n\n  return outDims;\n}\n// For each slice in `(start, limit)` in `valueSlices`, append\n// `paramsDenseValues[start,...,limit] to `values`.  `valueSize` indicates\n// the number of scalars contained in each value paramsDenseValues[i].\nfunction writeValueSlices(\n    paramsDenseValues: TypedArray, paramsDenseValuesShape: number[],\n    valueSlices: Array<[number, number]>, valueSize: number, values: TypedArray,\n    valuesShape: number[]) {\n  const denseM = computeFlatOuterDims(paramsDenseValuesShape, 2)[1];\n  const valuesM = computeFlatOuterDims(valuesShape, 2)[1];\n\n  let outPos = 0;\n  for (const slice of valueSlices) {\n    for (let i = slice[0]; i < slice[1]; ++i) {\n      for (let j = 0; j < valueSize; ++j) {\n        values[outPos * valuesM + j] = paramsDenseValues[i * denseM + j];\n      }\n      ++outPos;\n    }\n  }\n}\n\nfunction getValues(\n    paramsDenseValues: TypedArray, paramsDenseValuesShape: number[],\n    paramsDenseValuesDType: DataType, valueSlices: Array<[number, number]>,\n    numValues: number): [TypedArray, number[]] {\n  const valuesShape = paramsDenseValuesShape.slice();\n  valuesShape[0] = numValues;\n\n  const valuesOut = util.getArrayFromDType(\n                        paramsDenseValuesDType,\n                        util.sizeFromShape(valuesShape)) as TypedArray;\n\n  const numElements = paramsDenseValues.length;\n  const valueSize =\n      numElements === 0 ? 0 : (numElements / paramsDenseValuesShape[0]);\n  writeValueSlices(\n      paramsDenseValues, paramsDenseValuesShape, valueSlices, valueSize,\n      valuesOut, valuesShape);\n\n  return [valuesOut, valuesShape];\n}\nexport function raggedGatherImpl(\n    paramsNestedSplits: TypedArray[], paramsNestedSplitsShapes: number[][],\n    paramsDenseValues: TypedArray, paramsDenseValuesShape: number[],\n    paramsDenseValuesDType: DataType, indices: TypedArray,\n    indicesShape: number[],\n    outputRaggedRank: number): [TypedArray[], TypedArray, number[]] {\n  if (paramsNestedSplits.length === 0) {\n    throw new Error('paramsNestedSplits must be non empty');\n  }\n\n  if (paramsNestedSplitsShapes[0].length === 0) {\n    throw new Error('Split tensors must not be scalars');\n  }\n  const numParams = paramsNestedSplitsShapes[0][0] - 1;\n  validateIndices(indices, indicesShape, numParams);\n\n  if (paramsDenseValuesShape.length === 0) {\n    throw new Error('params.rank must be nonzero');\n  }\n  const numParamsDenseValues = paramsDenseValuesShape[0];\n\n  // Calculate the `splits`, and store the value slices that we need to\n  // copy in `valueSlices`.\n  const {outSplits, valueSlices, numValues} = makeSplits(\n      indices, indicesShape, paramsNestedSplits, numParamsDenseValues);\n\n  // Write the output tensors.\n  const outputNestedSplits = getSplits(outSplits);\n  const outputDenseValues = getValues(\n      paramsDenseValues, paramsDenseValuesShape, paramsDenseValuesDType,\n      valueSlices, numValues);\n\n  return [outputNestedSplits, outputDenseValues[0], outputDenseValues[1]];\n}\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nconst INT32_MAX = 2147483647;\n\nexport function raggedRangeImpl(\n    starts: TypedArray, startsShape: number[], startsDType: DataType,\n    limits: TypedArray, limitsShape: number[], deltas: TypedArray,\n    deltasShape: number[]): [TypedArray, TypedArray] {\n  // Check input tensor shapes.\n  if (startsShape.length > 1) {\n    throw new Error('starts must be a scalar or vector');\n  }\n  if (limitsShape.length > 1) {\n    throw new Error('limits must be a scalar or vector');\n  }\n  if (deltasShape.length > 1) {\n    throw new Error('deltas must be a scalar or vector');\n  }\n\n  // Determine which tensors we need to broadcast.\n  const broadcastStarts = startsShape.length === 0;\n  const broadcastLimits = limitsShape.length === 0;\n  const broadcastDeltas = deltasShape.length === 0;\n\n  // nRows (number of output rows) is the size of the non-broadcast inputs,\n  // or 1 if all inputs are scalars.\n  const inSizes: number[] = [];\n  if (!broadcastStarts) {\n    inSizes.push(startsShape[0]);\n  }\n  if (!broadcastLimits) {\n    inSizes.push(limitsShape[0]);\n  }\n  if (!broadcastDeltas) {\n    inSizes.push(deltasShape[0]);\n  }\n\n  for (let i = 1; i < inSizes.length; ++i) {\n    if (inSizes[i] !== inSizes[i - 1]) {\n      throw new Error('starts, limits, and deltas must have the same shape');\n    }\n  }\n  const nRows = inSizes.length === 0 ? 1 : inSizes[0];\n\n  // Construct the rtNestedSplits tensor.\n  const rtNestedSplits =\n      util.getArrayFromDType('int32', nRows + 1) as TypedArray;\n  rtNestedSplits[0] = 0;\n  for (let row = 0; row < nRows; ++row) {\n    const start = broadcastStarts ? starts[0] : starts[row];\n    const limit = broadcastLimits ? limits[0] : limits[row];\n    const delta = broadcastDeltas ? deltas[0] : deltas[row];\n    if (delta === 0) {\n      throw new Error('Requires delta != 0');\n    }\n    let size: number;  // The number of elements in the specified range.\n    if (((delta > 0) && (limit < start)) || ((delta < 0) && (limit > start))) {\n      size = 0;\n    } else {\n      size = Math.ceil(Math.abs((limit - start) / delta));\n\n      if (size > INT32_MAX) {\n        throw new Error(`Requires ((limit - start) / delta) <= ${INT32_MAX}`);\n      }\n    }\n    rtNestedSplits[row + 1] = rtNestedSplits[row] + size;\n  }\n\n  const nVals = rtNestedSplits[nRows];\n\n  // Construct the rtDenseValues tensor.\n  const rtDenseValues =\n      util.getArrayFromDType(startsDType, nVals) as TypedArray;\n\n  let valueIndex = 0;\n  for (let row = 0; row < nRows; ++row) {\n    const rowSize = rtNestedSplits[row + 1] - rtNestedSplits[row];\n    let value = broadcastStarts ? starts[0] : starts[row];\n    const delta = broadcastDeltas ? deltas[0] : deltas[row];\n    for (let i = 0; i < rowSize; ++i) {\n      rtDenseValues[valueIndex++] = value;\n      value += delta;\n    }\n  }\n\n  return [rtNestedSplits, rtDenseValues];\n}\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, broadcastTo, DataType, reshape, tidy, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport RowPartitionType = backend_util.RowPartitionType;\n// Based on\n// https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/ragged_tensor_to_tensor_op.cc\nclass RaggedTensorToTensorOp {\n  private readonly rowPartitionTypes: RowPartitionType[];\n  private readonly raggedRank: number;\n  constructor(\n      private shape: TypedArray, private shapeShape: number[],\n      private values: TypedArray, private valuesShape: number[],\n      private valuesDType: DataType, private defaultValue: TypedArray,\n      private defaultValueShape: number[],\n      private readonly rowPartitionValues: TypedArray[],\n      private readonly rowPartitionValuesShapes: number[][],\n      rowPartitionTypeStrings: string[]) {\n    this.rowPartitionTypes =\n        backend_util.getRowPartitionTypesHelper(rowPartitionTypeStrings);\n    this.raggedRank = backend_util.getRaggedRank(this.rowPartitionTypes);\n  }\n\n  private getRowPartitionTypeByDimension(dimension: number) {\n    if (this.rowPartitionTypes[0] === RowPartitionType.FIRST_DIM_SIZE) {\n      return this.rowPartitionTypes[dimension + 1];\n    } else {\n      return this.rowPartitionTypes[dimension];\n    }\n  }\n\n  // Returns the relationship between dimension and dimension + 1.\n  private getRowPartitionTensor(dimension: number) {\n    if (this.rowPartitionTypes[0] === RowPartitionType.FIRST_DIM_SIZE) {\n      return this.rowPartitionValues[dimension + 1];\n    } else {\n      return this.rowPartitionValues[dimension];\n    }\n  }\n\n  private getMaxWidth(dimension: number) {\n    const rowPartitionTensor = this.getRowPartitionTensor(dimension - 1);\n    switch (this.getRowPartitionTypeByDimension(dimension - 1)) {\n      case RowPartitionType.VALUE_ROWIDS:\n        return RaggedTensorToTensorOp.getMaxWidthValueRowID(rowPartitionTensor);\n      case RowPartitionType.ROW_SPLITS:\n        return RaggedTensorToTensorOp.getMaxWidthRowSplit(rowPartitionTensor);\n      default:\n        throw new Error(`Cannot handle partition type ${\n            RowPartitionType[this.getRowPartitionTypeByDimension(\n                dimension - 1)]}`);\n    }\n  }\n\n  static getMaxWidthRowSplit(rowSplit: TypedArray) {\n    const tensorLength = rowSplit.length;\n    if (tensorLength === 0 || tensorLength === 1) {\n      return 0;\n    }\n    let maxWidth = 0;\n    for (let i = 0; i < tensorLength - 1; ++i) {\n      const currentWidth = rowSplit[i + 1] - rowSplit[i];\n      if (currentWidth > maxWidth) {\n        maxWidth = currentWidth;\n      }\n    }\n    return maxWidth;\n  }\n\n  static getMaxWidthValueRowID(valueRowIds: TypedArray) {\n    const indexLength = valueRowIds.length;\n    if (indexLength === 0) {\n      return 0;\n    }\n    let firstEqualIndex = 0;\n    let firstEqualIndexValue = valueRowIds[0];\n    let maxWidth = 0;\n    for (let i = 1; i < indexLength; ++i) {\n      const value = valueRowIds[i];\n      if (value !== firstEqualIndexValue) {\n        firstEqualIndexValue = value;\n        maxWidth = Math.max(i - firstEqualIndex, maxWidth);\n        firstEqualIndex = i;\n      }\n    }\n    return Math.max(indexLength - firstEqualIndex, maxWidth);\n  }\n\n  private tensorShapeFromTensor(\n      t: TypedArray, tShape: number[], isPartial = true) {\n    if (tShape.length === 0) {\n      if (t[0] === -1) {\n        return [];\n      }\n      throw new Error(\n          `The only valid scalar shape tensor is the fully unknown shape specified as -1.`);\n    }\n    // MakePartialShape/MakeShapeHelper.\n    return makeShape(t, isPartial);\n  }\n\n  private calculateOutputSize(firstDim: number) {\n    const valueShape = this.valuesShape;\n    const defaultValueShape = this.defaultValueShape;\n\n    backend_util.validateDefaultValueShape(defaultValueShape, valueShape);\n\n    const shape = this.tensorShapeFromTensor(this.shape, this.shapeShape);\n    const outputShape = backend_util.combineRaggedTensorToTensorShapes(\n        this.raggedRank, shape, valueShape);\n\n    const result = outputShape;\n\n    if (result[0] < 0) {\n      result[0] = firstDim;\n    }\n    for (let i = 1; i <= this.raggedRank; ++i) {\n      if (result[i] < 0) {\n        result[i] = this.getMaxWidth(i);\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * The outputIndex represents the index in the output tensor\n   * where the first element of a particular dimension would be written.\n   * If it is -1, it indicates that the index is out of scope.\n   * Example, given firstDimension = 10, firstDimensionOutput = 6,\n   * and outputIndexMultiplier = 100:\n   * result = [0 100 200 300 400 500 -1 -1 -1 -1]\n   * If firstDimensionOutput = 11 instead, then:\n   * result = [0 100 200 300 400 500 600 700 800 900]\n   */\n  private calculateFirstParentOutputIndex(\n      firstDimension: number, outputIndexMultiplier: number,\n      firstDimensionOutput: number) {\n    const minDimension = Math.min(firstDimension, firstDimensionOutput);\n    const result: number[] = [];\n    let currentOutputIndex = 0;\n    for (let i = 0; i < minDimension;\n         ++i, currentOutputIndex += outputIndexMultiplier) {\n      result.push(currentOutputIndex);\n    }\n    for (let i = minDimension; i < firstDimension; ++i) {\n      result.push(-1);\n    }\n    util.assert(\n        result.length === firstDimension,\n        () => 'Final length of result must be equal to firstDimension.');\n\n    return result;\n  }\n\n  private calculateOutputIndexRowSplit(\n      rowSplit: TypedArray, parentOutputIndex: number[],\n      outputIndexMultiplier: number, outputSize: number) {\n    const rowSplitSize = rowSplit.length;\n    const result: number[] = [];\n    for (let i = 0; i < rowSplitSize - 1; ++i) {\n      const rowLength = rowSplit[i + 1] - rowSplit[i];\n      let realLength = Math.min(outputSize, rowLength);\n      let parentOutputIndexCurrent = parentOutputIndex[i];\n\n      if (parentOutputIndexCurrent === -1) {\n        realLength = 0;\n      }\n      for (let j = 0; j < realLength; ++j) {\n        result.push(parentOutputIndexCurrent);\n        parentOutputIndexCurrent += outputIndexMultiplier;\n      }\n      for (let j = 0; j < rowLength - realLength; ++j) {\n        result.push(-1);\n      }\n    }\n    if (rowSplitSize > 0 && result.length !== rowSplit[rowSplitSize - 1]) {\n      throw new Error('Invalid row split size.');\n    }\n\n    return result;\n  }\n\n  // Calculate the output index of the first element of a list.\n  // The parentOutputIndex is the same computation for the previous list.\n  // -1 indicates an element or list that is out of range.\n  // The outputIndexMultiplier is the number of output indices one moves\n  // forward for each column.\n  // E.g., given:\n  // valueRowIds:[0 1 2 2 2 3 5 5 6]\n  // parentOutputIndex:[1000 1100 2000 2100 -1 3000 4000]\n  // outputIndexMultiplier: 10\n  // outputSize: 2\n  // You get:\n  // result = [1000 1100 2000 2010 -1 2100 -1 -1 3000]\n  // result[0] = parentOutputIndex[valueRowIds[0]]\n  // result[1] = parentOutputIndex[valueRowIds[1]]\n  // result[2] = parentOutputIndex[valueRowIds[2]]\n  // result[3] = parentOutputIndex[valueRowIds[2] + 10]\n  // result[4] = -1 because it is the third element the size is 2.\n  // result[5] = parentOutputIndex[valueRowIds[3]]\n  // result[6] = -1 because parentOutputIndex[valueRowIds[6]] == -1\n  // result[7] = -1 because parentOutputIndex[valueRowIds[6]] == -1\n  // result[8] = parentOutputIndex[valueRowIds[7]]\n  private calculateOutputIndexValueRowID(\n      valueRowIds: TypedArray, parentOutputIndex: number[],\n      outputIndexMultiplier: number, outputSize: number) {\n    const indexSize = valueRowIds.length;\n    const result: number[] = [];\n    if (indexSize === 0) {\n      return [];\n    }\n\n    let currentOutputColumn = 0;\n    let currentValueRowId = valueRowIds[0];\n\n    if (currentValueRowId >= parentOutputIndex.length) {\n      throw new Error(\n          `Got currentValueRowId=${currentValueRowId}, which is not less than ${\n              parentOutputIndex.length}`);\n    }\n\n    let currentOutputIndex = parentOutputIndex[currentValueRowId];\n    result.push(currentOutputIndex);\n    for (let i = 1; i < indexSize; ++i) {\n      const nextValueRowId = valueRowIds[i];\n      if (nextValueRowId === currentValueRowId) {\n        if (currentOutputIndex >= 0) {\n          ++currentOutputColumn;\n          if (currentOutputColumn < outputSize) {\n            currentOutputIndex += outputIndexMultiplier;\n          } else {\n            currentOutputIndex = -1;\n          }\n        }\n      } else {\n        currentOutputColumn = 0;\n        currentValueRowId = nextValueRowId;\n\n        if (nextValueRowId >= parentOutputIndex.length) {\n          throw new Error(\n              `Got nextValueRowId=${nextValueRowId} which is not less than ${\n                  parentOutputIndex.length}`);\n        }\n\n        currentOutputIndex = parentOutputIndex[nextValueRowId];\n      }\n      result.push(currentOutputIndex);\n    }\n\n    if (result.length !== valueRowIds.length) {\n      throw new Error('Invalid row ids.');\n    }\n\n    return result;\n  }\n\n  private calculateOutputIndex(\n      dimension: number, parentOutputIndex: number[],\n      outputIndexMultiplier: number, outputSize: number) {\n    const rowPartitionTensor = this.getRowPartitionTensor(dimension);\n    const partitionType = this.getRowPartitionTypeByDimension(dimension);\n    switch (partitionType) {\n      case RowPartitionType.VALUE_ROWIDS:\n        return this.calculateOutputIndexValueRowID(\n            rowPartitionTensor, parentOutputIndex, outputIndexMultiplier,\n            outputSize);\n      case RowPartitionType.ROW_SPLITS:\n        if (rowPartitionTensor.length - 1 > parentOutputIndex.length) {\n          throw new Error(`Row partition size is greater than output size: ${\n              rowPartitionTensor.length - 1} > ${parentOutputIndex.length}`);\n        }\n        return this.calculateOutputIndexRowSplit(\n            rowPartitionTensor, parentOutputIndex, outputIndexMultiplier,\n            outputSize);\n      default:\n        throw new Error(\n            `Unsupported partition type: ${RowPartitionType[partitionType]}`);\n    }\n  }\n\n  private getFirstDimensionSize() {\n    const firstPartitionTensor = this.rowPartitionValues[0];\n    if (this.rowPartitionTypes.length === 0) {\n      throw new Error('No row_partition_types given.');\n    }\n    const firstPartitionType = this.rowPartitionTypes[0];\n    switch (firstPartitionType) {\n      case RowPartitionType.FIRST_DIM_SIZE:\n        return firstPartitionTensor[0];\n      case RowPartitionType.VALUE_ROWIDS:\n        throw new Error('Cannot handle VALUE_ROWIDS in first dimension.');\n      case RowPartitionType.ROW_SPLITS:\n        return this.rowPartitionValuesShapes[0][0] - 1;\n      default:\n        throw new Error(\n            `Cannot handle type ${RowPartitionType[firstPartitionType]}`);\n    }\n  }\n\n  compute(): [number[], TypedArray] {\n    const firstPartitionTensor = this.rowPartitionValues[0];\n    if (firstPartitionTensor.length <= 0) {\n      throw new Error(\n          'Invalid first partition input. ' +\n          'Tensor requires at least one element.');\n    }\n    const firstDimension = this.getFirstDimensionSize();\n    const outputSize = this.calculateOutputSize(firstDimension);\n    const multiplier: number[] = new Array(this.raggedRank + 1);\n\n    multiplier[multiplier.length - 1] = 1;\n    for (let i = multiplier.length - 2; i >= 0; --i) {\n      multiplier[i] = multiplier[i + 1] * outputSize[i + 1];\n    }\n    // Full size of the tensor.\n    const outputShape: number[] = makeShape(outputSize, false);\n    const outputTensor =\n        util.getArrayFromDType(\n            this.valuesDType, util.sizeFromShape(outputShape)) as TypedArray;\n\n    const fullSize = multiplier[0] * outputSize[0];\n    if (fullSize > 0) {\n      let outputIndex = this.calculateFirstParentOutputIndex(\n          firstDimension, multiplier[0], outputSize[0]);\n      for (let i = 1; i <= this.raggedRank; ++i) {\n        const newOutputIndex = this.calculateOutputIndex(\n            i - 1, outputIndex, multiplier[i], outputSize[i]);\n        outputIndex = newOutputIndex;\n      }\n\n      this.setOutput(this.raggedRank, outputIndex, outputTensor, outputShape);\n    }\n\n    return [outputShape, outputTensor];\n  }\n  setOutput(\n      raggedRank: number, outputIndex: number[], outputTensor: TypedArray,\n      outputShape: number[]) {\n    if (outputTensor.length === 0) {\n      return;\n    }\n\n    const valuesBase = this.values;\n    const outputBase = outputTensor;\n\n    let elementShape = outputShape.slice();\n    elementShape = elementShape.slice(raggedRank + 1);\n    const valueElementSize = util.sizeFromShape(elementShape);\n    const outputIndexSize = outputIndex.length;\n\n    // Broadcast the default value to value_element_size.  (We can skip this\n    // if defaultValueTensor.size == 1, since we use fill when that's true.)\n    let defaultValue = this.defaultValue;\n    if (defaultValue.length !== valueElementSize && defaultValue.length !== 1) {\n      const srcShape = this.defaultValueShape;\n      tidy(() => {\n        const defaultValueTensor = reshape(defaultValue, srcShape);\n        const bCastDefault = broadcastTo(defaultValueTensor, elementShape);\n        defaultValue = bCastDefault.dataSync();\n      });\n    }\n\n    // Loop through the outputIndex array, finding contiguous regions that\n    // should be copied.  Once we find the end of a contiguous region, copy it\n    // and add any necessary padding (with defaultValue).\n    let srcStart = 0;  // Start of contiguous region (in values)\n    let dstStart = 0;  // Destination for contiguous region (in output)\n    let dstEnd = 0;    // Destination for contiguous region (in output)\n    for (let srcI = 0; srcI <= outputIndexSize; ++srcI) {\n      // dstI is the destination where the value at srcI should be copied.\n      let dstI = srcI < outputIndexSize ? outputIndex[srcI] : -1;\n\n      // If we're still in a contiguous region, then update dstEnd go to the\n      // next srcI.\n      if (dstI === dstEnd) {\n        ++dstEnd;\n        continue;\n      }\n\n      // We found the end of contiguous region.  This can be because we found\n      // a gap (dstI > dstEnd), or a source value that shouldn't be copied\n      // because it's out-of-bounds (dstI == -1), or the end of the tensor\n      // (dstI === -1).\n      if (dstStart < dstEnd) {\n        // Copy the contiguous region.\n        const src = valuesBase.subarray(srcStart * valueElementSize);\n        const dst = outputBase.subarray(dstStart * valueElementSize);\n        const nVals = (dstEnd - dstStart) * valueElementSize;\n        copyArray(dst, src, nVals);\n      }\n\n      // Add any necessary padding (w/ defaultValue).\n      if (srcI >= outputIndexSize) {\n        // We reached the end of values: pad to the end of output.\n        const outputSize = outputTensor.length;\n        dstI = Math.floor(outputSize / valueElementSize);\n      }\n      if (dstI > dstEnd) {\n        if (this.defaultValue.length === 1) {\n          outputBase\n              .subarray(dstEnd * valueElementSize, dstI * valueElementSize)\n              .fill(this.defaultValue[0]);\n          dstEnd = dstI;\n        } else {\n          while (dstI > dstEnd) {\n            const dst = outputBase.slice(dstEnd * valueElementSize);\n            copyArray(dst, defaultValue, valueElementSize);\n            ++dstEnd;\n          }\n        }\n      }\n\n      // Update indices.\n      if (dstI < 0) {\n        // srcI should be skipped -- leave it out of the contiguous region.\n        srcStart = srcI + 1;\n        dstStart = dstEnd;\n      } else {\n        // srcI should be copied -- include it in the contiguous region.\n        srcStart = srcI;\n        dstStart = dstEnd;\n        dstEnd = dstStart + 1;\n      }\n    }\n  }\n}\n\nfunction copyArray(dst: TypedArray, src: TypedArray, size: number) {\n  for (let i = 0; i < size; i++) {\n    dst[i] = src[i];\n  }\n}\n\nfunction makeShape(shape: number[]|TypedArray, isPartial: boolean) {\n  const out: number[] = [];\n  for (let dim of shape) {\n    if (dim < 0) {\n      if (!isPartial) {\n        throw new Error(`Dimension ${dim} must be >= 0`);\n      }\n      if (dim < -1) {\n        throw new Error(`Dimension ${dim} must be >= -1`);\n      }\n      dim = -1;\n    }\n    out.push(dim);\n  }\n\n  return out;\n}\n\nexport function raggedTensorToTensorImpl(\n    shape: TypedArray, shapesShape: number[], values: TypedArray,\n    valuesShape: number[], valuesDType: DataType, defaultValue: TypedArray,\n    defaultValueShape: number[], rowPartitionValues: TypedArray[],\n    rowPartitionValuesShapes: number[][],\n    rowPartitionTypes: string[]): [number[], TypedArray] {\n  return new RaggedTensorToTensorOp(\n             shape, shapesShape, values, valuesShape, valuesDType, defaultValue,\n             defaultValueShape, rowPartitionValues, rowPartitionValuesShapes,\n             rowPartitionTypes)\n      .compute();\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Rsqrt} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const rsqrtImpl = createSimpleUnaryImpl((xi) => 1 / Math.sqrt(xi));\nexport const rsqrt = unaryKernelFuncFromImpl(Rsqrt, rsqrtImpl);\n\nexport const rsqrtConfig: KernelConfig = {\n  kernelName: Rsqrt,\n  backendName: 'cpu',\n  kernelFunc: rsqrt,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sigmoid} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sigmoidImpl =\n    createSimpleUnaryImpl((xi) => 1 / (1 + Math.exp(-xi)));\nexport const sigmoid =\n    unaryKernelFunc(Sigmoid, (xi) => 1 / (1 + Math.exp(-xi)));\n\nexport const sigmoidConfig: KernelConfig = {\n  kernelName: Sigmoid,\n  backendName: 'cpu',\n  kernelFunc: sigmoid,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Abs, AbsInputs, KernelConfig, KernelFunc, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function simpleAbsImpl(vals: TypedArray): Float32Array {\n  const resultValues = new Float32Array(vals.length);\n  for (let i = 0; i < vals.length; ++i) {\n    resultValues[i] = Math.abs(vals[i]);\n  }\n  return resultValues;\n}\n\nexport const abs = (args: {inputs: AbsInputs, backend: MathBackendCPU}) => {\n  const {x} = args.inputs;\n  const cpuBackend = args.backend;\n\n  assertNotComplex(x, 'abs');\n\n  let resultValues = new Float32Array(util.sizeFromShape(x.shape));\n  const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n  resultValues = simpleAbsImpl(values);\n\n  return cpuBackend.makeOutput(resultValues, x.shape, x.dtype);\n};\n\nexport const absConfig: KernelConfig = {\n  kernelName: Abs,\n  backendName: 'cpu',\n  kernelFunc: abs as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BackendValues, buffer, DataType, KernelConfig, KernelFunc, Slice, slice_util, SliceAttrs, SliceInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function sliceImpl(\n    vals: BackendValues, begin: number[], size: number[], shape: number[],\n    dtype: DataType): BackendValues {\n  const isContinous = slice_util.isSliceContinous(shape, begin, size);\n  const length = util.sizeFromShape(size);\n  const xStrides = util.computeStrides(shape);\n\n  if (isContinous) {\n    const flatOffset = slice_util.computeFlatOffset(begin, xStrides);\n\n    if (dtype === 'string') {\n      return (vals as Uint8Array[]).slice(flatOffset, flatOffset + length);\n    }\n\n    return (vals as TypedArray).subarray(flatOffset, flatOffset + length);\n  }\n\n  const decodedData = dtype === 'string' ?\n      backend_util.fromUint8ToStringArray(vals as Uint8Array[]) :\n      vals as TypedArray;\n\n  const inBuf = buffer(shape, dtype, decodedData);\n  const outBuf = buffer(size, dtype);\n  for (let i = 0; i < outBuf.size; ++i) {\n    const outLoc = outBuf.indexToLoc(i);\n    const inLoc = outLoc.map((idx: number, j) => idx + begin[j]);\n    outBuf.set(inBuf.get(...inLoc), ...outLoc);\n  }\n\n  if (dtype === 'string') {\n    return backend_util.fromStringArrayToUint8(outBuf.values as string[]);\n  }\n  return outBuf.values as TypedArray;\n}\n\nexport function slice(\n    args: {inputs: SliceInputs, backend: MathBackendCPU, attrs: SliceAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {begin, size} = attrs;\n\n  assertNotComplex(x, 'slice');\n\n  const [$begin, $size] = slice_util.parseSliceParams(x, begin, size);\n  slice_util.assertParamsValid(x, $begin, $size);\n\n  const vals = backend.data.get(x.dataId).values;\n  const outVals = sliceImpl(vals, $begin, $size, x.shape, x.dtype);\n  return backend.makeTensorInfo($size, x.dtype, outVals);\n}\n\nexport const sliceConfig: KernelConfig = {\n  kernelName: Slice,\n  backendName: 'cpu',\n  kernelFunc: slice as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sqrt} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sqrtImpl = createSimpleUnaryImpl((xi) => Math.sqrt(xi));\nexport const sqrt = unaryKernelFunc(Sqrt, (xi) => Math.sqrt(xi));\n\nexport const sqrtConfig: KernelConfig = {\n  kernelName: Sqrt,\n  backendName: 'cpu',\n  kernelFunc: sqrt,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {util} from '@tensorflow/tfjs-core';\n\n/**\n * The StringNGramsOp class creates ngrams from ragged string data.\n * The constructor contains all attributes related to the operation such as\n * padding widths and strings, and the compute function can be used to\n * compute the ngrams for different ragged tensor inputs.\n */\nclass StringNGramsOp {\n  private separator: Uint8Array;\n  private nGramWidths: number[];\n  private padWidth: number;\n  private leftPad: Uint8Array;\n  private rightPad: Uint8Array;\n  private preserveShort: boolean;\n\n  constructor(\n      separator: string, nGramWidths: number[], leftPad: string,\n      rightPad: string, padWidth: number, preserveShortSequences: boolean) {\n    this.separator = util.encodeString(separator);\n    this.nGramWidths = nGramWidths;\n    this.leftPad = util.encodeString(leftPad);\n    this.rightPad = util.encodeString(rightPad);\n    this.padWidth = padWidth;\n    this.preserveShort = preserveShortSequences;\n  }\n\n  private getPadWidth(nGramWidth: number) {\n    // Ngrams can be padded with either a fixed pad width or a dynamic pad\n    // width depending on the 'padWidth' arg, but in no case should the padding\n    // ever be wider than 'nGramWidth' - 1.\n    return Math.min(\n        this.padWidth < 0 ? nGramWidth - 1 : this.padWidth, nGramWidth - 1);\n  }\n\n  private getNumNGrams(length: number, nGramWidth: number) {\n    const padWidth = this.getPadWidth(nGramWidth);\n    return Math.max(0, ((length + 2 * padWidth) - nGramWidth) + 1);\n  }\n\n  private createNGrams(\n      data: Uint8Array[], splitIndex: number, output: Uint8Array[],\n      outputStartIndex: number, numNGrams: number, nGramWidth: number) {\n    for (let nGramIndex = 0; nGramIndex < numNGrams; ++nGramIndex) {\n      const padWidth = this.getPadWidth(nGramWidth);\n      const leftPadding = Math.max(0, padWidth - nGramIndex);\n      const rightPadding =\n          Math.max(0, padWidth - (numNGrams - (nGramIndex + 1)));\n      const numTokens = nGramWidth - (leftPadding + rightPadding);\n      const dataStartIndex =\n          splitIndex + (leftPadding > 0 ? 0 : nGramIndex - padWidth);\n\n      // Calculate the total expected size of the nGram so we can reserve the\n      // correct amount of space in the string.\n      let nGramSize = 0;\n      // Size of the left padding.\n      nGramSize += leftPadding * this.leftPad.length;\n      // Size of the tokens.\n      for (let n = 0; n < numTokens; ++n) {\n        nGramSize += data[dataStartIndex + n].length;\n      }\n      // Size of the right padding.\n      nGramSize += rightPadding * this.rightPad.length;\n      // Size of the separators.\n      const numSeparators = leftPadding + rightPadding + numTokens - 1;\n      nGramSize += numSeparators * this.separator.length;\n\n      // Build the nGram.\n      output[outputStartIndex + nGramIndex] = new Uint8Array(nGramSize);\n      const nGram = output[outputStartIndex + nGramIndex];\n\n      let nextNGramIndex = 0;\n      const appendToNGram = (str: Uint8Array) =>\n          str.forEach((value) => nGram[nextNGramIndex++] = value);\n\n      for (let n = 0; n < leftPadding; ++n) {\n        appendToNGram(this.leftPad);\n        appendToNGram(this.separator);\n      }\n      // Only output first numTokens - 1 pairs of data and separator\n      for (let n = 0; n < numTokens - 1; ++n) {\n        appendToNGram(data[dataStartIndex + n]);\n        appendToNGram(this.separator);\n      }\n      // Handle case when there are no tokens or no right padding as these\n      // can result in consecutive separators.\n      if (numTokens > 0) {\n        // If we have tokens, then output last and then pair each separator\n        // with the right padding that follows, to ensure nGram ends either with\n        // the token or with the right pad.\n        appendToNGram(data[dataStartIndex + numTokens - 1]);\n        for (let n = 0; n < rightPadding; ++n) {\n          appendToNGram(this.separator);\n          appendToNGram(this.rightPad);\n        }\n      } else {\n        // If we don't have tokens, then the last item inserted into the nGram\n        // has been the separator from the left padding loop above. Hence,\n        // output right pad and separator and make sure to finish with a\n        // padding, not a separator.\n        for (let n = 0; n < rightPadding - 1; ++n) {\n          appendToNGram(this.rightPad);\n          appendToNGram(this.separator);\n        }\n        appendToNGram(this.rightPad);\n      }\n    }\n  }\n\n  // Data and splits together form the definition of the ragged tensor,\n  // where data is 1 dimensional and contains the values of the tensor\n  // and splits denotes the indices at which each row starts.\n  public compute(data: Uint8Array[], splits: Int32Array):\n      [Uint8Array[], Int32Array] {\n    // Validate that the splits are valid indices into data, only if there are\n    // splits specified.\n    const inputDataSize = data.length;\n    const splitsSize = splits.length;\n    if (splitsSize > 0) {\n      let prevSplit = splits[0];\n      if (prevSplit !== 0) {\n        throw new Error(`First split value must be 0, got ${prevSplit}`);\n      }\n      for (let i = 1; i < splitsSize; ++i) {\n        let validSplits = splits[i] >= prevSplit;\n        validSplits = validSplits && (splits[i] <= inputDataSize);\n        if (!validSplits) {\n          throw new Error(`Invalid split value ${splits[i]}, must be in [${\n              prevSplit}, ${inputDataSize}]`);\n        }\n        prevSplit = splits[i];\n      }\n      if (prevSplit !== inputDataSize) {\n        throw new Error(`Last split value must be data size. Expected ${\n            inputDataSize}, got ${prevSplit}`);\n      }\n    }\n\n    const numBatchItems = splitsSize - 1;\n    const nGramsSplits = util.getArrayFromDType('int32', splitsSize);\n    // If there is no data or size, return an empty ragged tensor.\n    if (inputDataSize === 0 || splitsSize === 0) {\n      const empty: Uint8Array[] = new Array(inputDataSize);\n      for (let i = 0; i <= numBatchItems; ++i) {\n        nGramsSplits[i] = 0;\n      }\n      return [empty, nGramsSplits];\n    }\n\n    nGramsSplits[0] = 0;\n    for (let i = 1; i <= numBatchItems; ++i) {\n      const length = splits[i] - splits[i - 1];\n      let numNGrams = 0;\n      this.nGramWidths.forEach((nGramWidth) => {\n        numNGrams += this.getNumNGrams(length, nGramWidth);\n      });\n      if (this.preserveShort && length > 0 && numNGrams === 0) {\n        numNGrams = 1;\n      }\n      nGramsSplits[i] = nGramsSplits[i - 1] + numNGrams;\n    }\n\n    const nGrams: Uint8Array[] = new Array(nGramsSplits[numBatchItems]);\n\n    for (let i = 0; i < numBatchItems; ++i) {\n      const splitIndex = splits[i];\n      let outputStartIdx = nGramsSplits[i];\n      this.nGramWidths.forEach((nGramWidth) => {\n        const length = splits[i + 1] - splits[i];\n        const numNGrams = this.getNumNGrams(length, nGramWidth);\n        this.createNGrams(\n            data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);\n        outputStartIdx += numNGrams;\n      });\n      // If we're preserving short sequences, check to see if no sequence was\n      // generated by comparing the current output start idx to the original\n      // one (nGramSplitsdata). If no ngrams were generated, then they will\n      // be equal (since we increment outputStartIdx by numNGrams every\n      // time we create a set of ngrams.)\n      if (this.preserveShort && outputStartIdx === nGramsSplits[i]) {\n        const dataLength = splits[i + 1] - splits[i];\n        // One legitimate reason to not have any ngrams when this.preserveShort\n        // is true is if the sequence itself is empty. In that case, move on.\n        if (dataLength === 0) {\n          continue;\n        }\n        // We don't have to worry about dynamic padding sizes here: if padding\n        // was dynamic, every sequence would have had sufficient padding to\n        // generate at least one nGram.\n        const nGramWidth = dataLength + 2 * this.padWidth;\n        const numNGrams = 1;\n        this.createNGrams(\n            data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);\n      }\n    }\n    return [nGrams, nGramsSplits];\n  }\n}\n\nexport function stringNGramsImpl(\n    data: Uint8Array[], dataSplits: Int32Array, separator: string,\n    nGramWidths: number[], leftPad: string, rightPad: string, padWidth: number,\n    preserveShortSequences: boolean): [Uint8Array[], Int32Array] {\n  return new StringNGramsOp(\n             separator, nGramWidths, leftPad, rightPad, padWidth,\n             preserveShortSequences)\n      .compute(data, dataSplits);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nfunction split(\n    str: Uint8Array, delimiters: Uint8Array, skipEmpty: boolean,\n    result: Uint8Array[]): void {\n  if (!str.length) {\n    return;\n  }\n  // When the delimiter is empty, the input is split into individual characters.\n  if (delimiters.length === 0) {\n    for (let i = 0; i < str.length; ++i) {\n      result.push(str.subarray(i, i + 1));\n    }\n    return;\n  }\n  // When there is one delimiter, the input is split only at that delimiter.\n  if (delimiters.length === 1) {\n    const delimiter = delimiters[0];\n    let f = str.indexOf(delimiter);\n    while (f !== -1) {\n      const token = str.subarray(0, f);\n      if (!skipEmpty || token.length !== 0) {\n        result.push(token);\n      }\n      str = str.subarray(f + 1);\n      f = str.indexOf(delimiter);\n    }\n    if (!skipEmpty || str.length !== 0) {\n      result.push(str);\n    }\n    return;\n  }\n  // When there are multiple delimiters, the input is split at every instance\n  // one of the delimiters appears.\n  let tokenStart = 0;\n  for (let i = 0; i < str.length + 1; i++) {\n    if ((i === str.length) || (delimiters.indexOf(str[i]) !== -1)) {\n      const token = str.subarray(tokenStart, i);\n      if (!skipEmpty || token.length !== 0) {\n        result.push(token);\n      }\n      tokenStart = i + 1;\n    }\n  }\n}\n\nexport function stringSplitImpl(\n    input: Uint8Array[], delimiter: Uint8Array,\n    skipEmpty: boolean): [TypedArray, Uint8Array[], [number, number]] {\n  const batchSize = input.length;\n\n  // Empty delimiter means split the input character by character.\n  const tokens: Uint8Array[] = [];\n\n  let outputSize = 0;\n  let maxNumEntries = 0;\n  const numIndices: number[] = new Array(batchSize);\n  for (let i = 0; i < batchSize; ++i) {\n    const prevTokensLength = tokens.length;\n    split(input[i], delimiter, skipEmpty, tokens);\n    const nEntries = tokens.length - prevTokensLength;\n    numIndices[i] = nEntries;\n    outputSize += nEntries;\n    maxNumEntries = Math.max(maxNumEntries, nEntries);\n  }\n\n  const indices = util.getArrayFromDType('int32', outputSize * 2) as TypedArray;\n  const values: Uint8Array[] = new Array(outputSize);\n  const shape: [number, number] = [batchSize, maxNumEntries];\n\n  let c = 0;\n  for (let i = 0; i < batchSize; ++i) {\n    for (let j = 0; j < numIndices[i]; ++j) {\n      // indices is a 2d tensor with shape of [outputSize, 2]\n      indices[c * 2] = i;\n      indices[c * 2 + 1] = j;\n      values[c] = tokens[c];\n      ++c;\n    }\n  }\n\n  return [indices, values, shape];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sub} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc, createComplexBinaryKernelImpl} from '../utils/binary_utils';\n\nexport const subImpl = createSimpleBinaryKernelImpl(\n    ((aValue: number, bValue: number) => aValue - bValue));\nexport const subComplexImpl =\n    createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n      return {real: aReal - bReal, imag: aImag - bImag};\n    }));\nexport const sub = binaryKernelFunc(Sub, subImpl, subComplexImpl);\n\nexport const subConfig: KernelConfig = {\n  kernelName: Sub,\n  backendName: 'cpu',\n  kernelFunc: sub\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/** An implementation of the TopK kernel shared between webgl and cpu. */\n\nimport {buffer, NumericDataType, Rank, ShapeMap, Tensor, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\ntype Pair = {\n  value: number,\n  index: number\n};\n\nconst comparePair = (a: Pair, b: Pair) => {\n  const valueDiff = b.value - a.value;\n  return valueDiff === 0 ? a.index - b.index : valueDiff;\n};\n\n/**\n * Partitions array where all elements smaller than the (k+1) smallest element\n * are found to the left of it, and all larger to the right of it.\n * Based on the Floyd-Rivest Algorithm, ref:\n * https://en.wikipedia.org/wiki/Floyd%E2%80%93Rivest_algorithm\n * @param array: Array to partition\n * @param left: Left index for the interval\n * @param right: Right index for the interval\n * @param k: Desired index value, where array[k] is the (k+1)th smallest element\n *           when left = 0\n */\nfunction select(array: Pair[], k: number, left = 0, right = array.length - 1) {\n  while (right > left) {\n    // Use select recursively to sample a smaller set of size s\n    // the arbitrary constants 600 and 0.5 are used in the original\n    // version to minimize execution time.\n    if (right - left > 600) {\n      const n = right - left + 1;\n      const i = k - left + 1;\n      const z = Math.log(n);\n      const s = 0.5 * Math.exp(2 * z / 3);\n      const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * Math.sign(i - n / 2);\n      const newLeft = Math.max(left, Math.floor(k - i * s / n + sd));\n      const newRight = Math.min(right, Math.floor(k + (n - i) * s / n + sd));\n      select(array, k, newLeft, newRight);\n    }\n    // partition the elements between left and right around t\n    const t = array[k];\n    let i = left;\n    let j = right;\n\n    util.swap(array, left, k);\n\n    if (comparePair(array[right], t) > 0) {\n      util.swap(array, left, right);\n    }\n    while (i < j) {\n      util.swap(array, i, j);\n      i++;\n      j--;\n      while (comparePair(array[i], t) < 0) {\n        i = i + 1;\n      }\n      while (comparePair(array[j], t) > 0) {\n        j = j - 1;\n      }\n    }\n    if (comparePair(array[left], t) === 0) {\n      util.swap(array, left, j);\n    } else {\n      j = j + 1;\n      util.swap(array, j, right);\n    }\n    // Adjust left and right towards the boundaries of the subset\n    // containing the (k - left + 1)th smallest element.\n    if (j <= k) {\n      left = j + 1;\n    }\n    if (k <= j) {\n      right = j - 1;\n    }\n  }\n}\n\nexport function topKImpl<T extends Tensor, R extends Rank>(\n    x: TypedArray, xShape: number[], xDtype: NumericDataType, k: number,\n    sorted: boolean):\n    [TensorBuffer<R, NumericDataType>, TensorBuffer<R, 'int32'>] {\n  // Reshape into a 2d tensor [batch, lastDim] and compute topk along lastDim.\n  const lastDim = xShape[xShape.length - 1];\n  const [batch, size] = [x.length / lastDim, lastDim];\n  const allTopKVals = util.getTypedArrayFromDType(xDtype, batch * k);\n  const allTopKIndices = util.getTypedArrayFromDType('int32', batch * k);\n\n  for (let b = 0; b < batch; b++) {\n    const offset = b * size;\n    const vals = x.subarray(offset, offset + size);\n\n    let valAndInd: Pair[] = new Array(vals.length);\n    vals.forEach(\n        (value: number, index: number) => valAndInd[index] = {value, index});\n\n    if (k < valAndInd.length) {\n      select(valAndInd, k);\n      valAndInd = valAndInd.slice(0, k);\n    }\n\n    if (sorted) {\n      valAndInd.sort(comparePair);\n    }\n    \n    const outOffset = b * k;\n    const topKVals = allTopKVals.subarray(outOffset, outOffset + k);\n    const topKIndices = allTopKIndices.subarray(outOffset, outOffset + k);\n    for (let i = 0; i < k; i++) {\n      topKVals[i] = valAndInd[i].value;\n      topKIndices[i] = valAndInd[i].index;\n    }\n  }\n  // Reshape back to the original input shape, except that the last\n  // dimension is k.\n  const outputShape = xShape.slice();\n  outputShape[outputShape.length - 1] = k;\n\n  return [\n    buffer(outputShape as ShapeMap[R], xDtype, allTopKVals),\n    buffer(outputShape as ShapeMap[R], 'int32', allTopKIndices)\n  ];\n}\n","\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Import shared functionality from tfjs-backend-cpu without triggering\n// side effects.\n// tslint:disable-next-line: no-imports-from-dist\nimport * as shared from '@tensorflow/tfjs-backend-cpu/dist/shared';\n// tslint:disable-next-line: no-imports-from-dist\nimport {SimpleBinaryKernelImpl} from '@tensorflow/tfjs-backend-cpu/dist/shared';\n// tslint:disable-next-line: no-imports-from-dist\nimport {SimpleUnaryImpl} from '@tensorflow/tfjs-backend-cpu/dist/utils/unary_types';\n\nexport type SimpleBinaryKernelImplCPU = SimpleBinaryKernelImpl;\nexport type SimpleUnaryKernelImplCPU = SimpleUnaryImpl;\nconst {\n  addImpl: addImplCPU,\n  bincountImpl: bincountImplCPU,\n  bincountReduceImpl: bincountReduceImplCPU,\n  castImpl: castImplCPU,\n  ceilImpl: ceilImplCPU,\n  concatImpl: concatImplCPU,\n  equalImpl: equalImplCPU,\n  expImpl: expImplCPU,\n  expm1Impl: expm1ImplCPU,\n  floorImpl: floorImplCPU,\n  gatherNdImpl: gatherNdImplCPU,\n  gatherV2Impl: gatherV2ImplCPU,\n  greaterImpl: greaterImplCPU,\n  greaterEqualImpl: greaterEqualImplCPU,\n  lessImpl: lessImplCPU,\n  lessEqualImpl: lessEqualImplCPU,\n  linSpaceImpl: linSpaceImplCPU,\n  logImpl: logImplCPU,\n  maxImpl: maxImplCPU,\n  maximumImpl: maximumImplCPU,\n  minimumImpl: minimumImplCPU,\n  multiplyImpl: multiplyImplCPU,\n  negImpl: negImplCPU,\n  notEqualImpl: notEqualImplCPU,\n  prodImpl: prodImplCPU,\n  raggedGatherImpl: raggedGatherImplCPU,\n  raggedRangeImpl: raggedRangeImplCPU,\n  raggedTensorToTensorImpl: raggedTensorToTensorImplCPU,\n  rangeImpl: rangeImplCPU,\n  rsqrtImpl: rsqrtImplCPU,\n  scatterImpl: scatterImplCPU,\n  sigmoidImpl: sigmoidImplCPU,\n  simpleAbsImpl: simpleAbsImplCPU,\n  sliceImpl: sliceImplCPU,\n  sparseFillEmptyRowsImpl: sparseFillEmptyRowsImplCPU,\n  sparseReshapeImpl: sparseReshapeImplCPU,\n  sparseSegmentReductionImpl: sparseSegmentReductionImplCPU,\n  sqrtImpl: sqrtImplCPU,\n  stridedSliceImpl: stridedSliceImplCPU,\n  stringNGramsImpl: stringNGramsImplCPU,\n  stringSplitImpl: stringSplitImplCPU,\n  stringToHashBucketFastImpl: stringToHashBucketFastImplCPU,\n  subImpl: subImplCPU,\n  tileImpl: tileImplCPU,\n  topKImpl: topKImplCPU,\n  transposeImpl: transposeImplCPU,\n  uniqueImpl: uniqueImplCPU,\n} = shared;\n\nexport {\n  addImplCPU,\n  bincountImplCPU,\n  bincountReduceImplCPU,\n  castImplCPU,\n  ceilImplCPU,\n  concatImplCPU,\n  equalImplCPU,\n  expImplCPU,\n  expm1ImplCPU,\n  floorImplCPU,\n  gatherNdImplCPU,\n  gatherV2ImplCPU,\n  greaterEqualImplCPU,\n  greaterImplCPU,\n  lessEqualImplCPU,\n  lessImplCPU,\n  linSpaceImplCPU,\n  logImplCPU,\n  maxImplCPU,\n  maximumImplCPU,\n  minimumImplCPU,\n  multiplyImplCPU,\n  negImplCPU,\n  notEqualImplCPU,\n  prodImplCPU,\n  raggedGatherImplCPU,\n  raggedRangeImplCPU,\n  raggedTensorToTensorImplCPU,\n  scatterImplCPU,\n  sigmoidImplCPU,\n  simpleAbsImplCPU,\n  sliceImplCPU,\n  sparseFillEmptyRowsImplCPU,\n  sparseReshapeImplCPU,\n  sparseSegmentReductionImplCPU,\n  sqrtImplCPU,\n  stridedSliceImplCPU,\n  stringNGramsImplCPU,\n  stringSplitImplCPU,\n  stringToHashBucketFastImplCPU,\n  subImplCPU,\n  rangeImplCPU,\n  rsqrtImplCPU,\n  tileImplCPU,\n  topKImplCPU,\n  transposeImplCPU,\n  uniqueImplCPU,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function bincountImpl(\n    xVals: TypedArray, weightsVals: TypedArray, weightsDtype: DataType,\n    weightsShape: number[], size: number): TypedArray {\n  const weightsSize = util.sizeFromShape(weightsShape);\n  const outVals = util.makeZerosTypedArray(size, weightsDtype) as TypedArray;\n\n  for (let i = 0; i < xVals.length; i++) {\n    const value = xVals[i];\n    if (value < 0) {\n      throw new Error('Input x must be non-negative!');\n    }\n\n    if (value >= size) {\n      continue;\n    }\n\n    if (weightsSize > 0) {\n      outVals[value] += weightsVals[i];\n    } else {\n      outVals[value] += 1;\n    }\n  }\n\n  return outVals;\n}\n\nexport function bincountReduceImpl<R extends Rank>(\n    xBuf: TensorBuffer<R>, weightsBuf: TensorBuffer<R>, size: number,\n    binaryOutput = false): TensorBuffer<R> {\n  const numRows = xBuf.shape[0];\n  const numCols = xBuf.shape[1];\n\n  const outBuf = buffer([numRows, size], weightsBuf.dtype);\n\n  for (let i = 0; i < numRows; i++) {\n    for (let j = 0; j < numCols; j++) {\n      const value = xBuf.get(i, j);\n      if (value < 0) {\n        throw new Error('Input x must be non-negative!');\n      }\n\n      if (value >= size) {\n        continue;\n      }\n\n      if (binaryOutput) {\n        outBuf.set(1, i, value);\n      } else {\n        if (weightsBuf.size > 0) {\n          outBuf.set(outBuf.get(i, value) + weightsBuf.get(i, j), i, value);\n        } else {\n          outBuf.set(outBuf.get(i, value) + 1, i, value);\n        }\n      }\n    }\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BackendValues, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function concatImpl(\n    inputs: Array<{vals: BackendValues, shape: number[]}>, outShape: number[],\n    dtype: DataType, simplyConcat: boolean): TypedArray|string[] {\n  const outVals = util.getArrayFromDType(dtype, util.sizeFromShape(outShape));\n\n  if (simplyConcat && dtype !== 'string') {\n    // Use built-in TypedArray.set() method for speed.\n    let offset = 0;\n    inputs.forEach(input => {\n      const size = util.sizeFromShape(input.shape);\n\n      (outVals as TypedArray).set(input.vals as TypedArray, offset);\n      offset += size;\n    });\n  } else {\n    let colOffset = 0;\n\n    inputs.forEach(input => {\n      const decodedData = dtype === 'string' ?\n          backend_util.fromUint8ToStringArray(input.vals as Uint8Array[]) :\n          input.vals as TypedArray;\n\n      let tIdx = 0;\n\n      for (let row = 0; row < input.shape[0]; ++row) {\n        const resIdx = row * outShape[1] + colOffset;\n        for (let col = 0; col < input.shape[1]; ++col) {\n          outVals[resIdx + col] = decodedData[tIdx++];\n        }\n      }\n\n      colOffset += input.shape[1];\n    });\n  }\n\n  return outVals;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer, TypedArray} from '@tensorflow/tfjs-core';\n\nexport function gatherNdImpl<R extends Rank>(\n    indicesData: TypedArray, paramsBuf: TensorBuffer<R>, dtype: DataType,\n    numSlices: number, sliceRank: number, sliceSize: number, strides: number[],\n    paramsShape: number[], paramsSize: number): TensorBuffer<R> {\n  const outBuf = buffer([numSlices, sliceSize], dtype);\n\n  for (let i = 0; i < numSlices; i++) {\n    const index = [];\n    let flattenIndex = 0;\n    for (let j = 0; j < sliceRank; j++) {\n      const dim = indicesData[i * sliceRank + j];\n      flattenIndex += dim * strides[j];\n      index.push(dim);\n    }\n    if (flattenIndex < 0 || flattenIndex >= paramsSize / sliceSize) {\n      throw new Error(\n          `Invalid indices: ${index} does not index into ${paramsShape}`);\n    }\n\n    for (let k = 0; k < sliceSize; k++) {\n      outBuf.values[i * sliceSize + k] =\n          paramsBuf.get(...paramsBuf.indexToLoc(flattenIndex * sliceSize + k));\n    }\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer} from '@tensorflow/tfjs-core';\n\nexport function gatherV2Impl<R extends Rank, D extends DataType>(\n    xBuf: TensorBuffer<R, D>, indicesBuf: TensorBuffer<R, D>,\n    flattenOutputShape: number[]): TensorBuffer<R, D> {\n  const outBuf = buffer(flattenOutputShape, xBuf.dtype);\n  for (let i = 0; i < outBuf.size; ++i) {\n    const newLoc = outBuf.indexToLoc(i);\n\n    const originalLoc: number[] = newLoc.slice();\n    const batchIdx = originalLoc[0];\n    const indicesIdx = originalLoc[2];\n    const indicesIndex = indicesBuf.locToIndex([batchIdx, indicesIdx]);\n    originalLoc[2] = indicesBuf.values[indicesIndex] as number;\n\n    const originalIndex = xBuf.locToIndex(originalLoc);\n\n    if (0 <= originalIndex && originalIndex < xBuf.values.length) {\n      outBuf.values[i] = xBuf.values[originalIndex];\n    } // Else, index is out of bounds, so leave the default zero val in outBuf.\n  }\n\n  return outBuf as TensorBuffer<R, D>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function linSpaceImpl(\n    start: number, stop: number, num: number): TypedArray {\n  const step = (stop - start) / (num - 1);\n\n  const values = util.makeZerosTypedArray(num, 'float32');\n  values[0] = start;\n  for (let i = 1; i < values.length; i++) {\n    values[i] = values[i - 1] + step;\n  }\n\n  return values;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, NumericDataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function maxImpl(\n    aVals: TypedArray, reduceSize: number, outShape: number[],\n    dtype: DataType): TypedArray {\n  const vals = util.getTypedArrayFromDType(\n      dtype as NumericDataType, util.sizeFromShape(outShape));\n\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let max = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (Number.isNaN(value) ||\n          value > max) {  // comparison with NaN always return false\n        max = value;\n      }\n    }\n    vals[i] = max;\n  }\n  return vals;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataTypeMap, util} from '@tensorflow/tfjs-core';\n\nexport function rangeImpl(\n    start: number, stop: number, step: number,\n    dtype: 'float32'|'int32'): DataTypeMap['float32' | 'int32'] {\n  const sameStartStop = start === stop;\n  const increasingRangeNegativeStep = start < stop && step < 0;\n  const decreasingRangePositiveStep = stop < start && step > 1;\n\n  if (sameStartStop || increasingRangeNegativeStep ||\n      decreasingRangePositiveStep) {\n    return util.makeZerosTypedArray(0, dtype);\n  }\n\n  const numElements = Math.abs(Math.ceil((stop - start) / step));\n  const values = util.makeZerosTypedArray(numElements, dtype);\n\n  if (stop < start && step === 1) {\n    // Auto adjust the step's sign if it hasn't been set\n    // (or was set to 1)\n    step = -1;\n  }\n\n  values[0] = start;\n  for (let i = 1; i < values.length; i++) {\n    values[i] = values[i - 1] + step;\n  }\n  return values;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {buffer, Rank, ShapeMap, TensorBuffer, TypedArray} from '@tensorflow/tfjs-core';\n\ninterface DefaultValueTypeMap {\n  bool: boolean;\n  int32: number;\n  float32: number;\n  string: string;\n}\n\nexport function\nscatterImpl<R extends Rank, D extends 'float32'|'int32'|'bool'|'string'>(\n    indices: TensorBuffer<R, 'int32'>, updates: TensorBuffer<R, D>,\n    shape: number[], outputSize: number, sliceSize: number, numUpdates: number,\n    sliceRank: number, strides: number[], defaultValue: DefaultValueTypeMap[D],\n    sumDupeIndices: boolean): TensorBuffer<R, D> {\n  const flattenShape = [outputSize / sliceSize, sliceSize];\n\n  const indicesData = indices.values as TypedArray;\n  const updatesData = updates.values;\n\n  if (outputSize === 0) {\n    return buffer(shape as ShapeMap[R], updates.dtype);\n  }\n\n  const outBuf = buffer(flattenShape, updates.dtype);\n  if (typeof defaultValue === 'string') {\n    (outBuf.values as string[]).fill(defaultValue);\n  } else if (typeof defaultValue === 'number') {\n    (outBuf.values as TypedArray).fill(defaultValue);\n  } else if (typeof defaultValue === 'boolean') {\n    (outBuf.values as TypedArray).fill(+defaultValue);\n  }\n\n  for (let i = 0; i < numUpdates; i++) {\n    const index = [];\n    let flattenIndex = 0;\n    for (let j = 0; j < sliceRank; j++) {\n      const dim = indicesData[i * sliceRank + j];\n      index.push(dim);\n      flattenIndex += dim * strides[j];\n    }\n\n    if (flattenIndex < 0 || flattenIndex >= outputSize / sliceSize) {\n      throw new Error(`Invalid indices: ${index} does not index into ${shape}`);\n    }\n\n    for (let k = 0; k < sliceSize; k++) {\n      if (sumDupeIndices) {\n        (outBuf.values as TypedArray)[flattenIndex * sliceSize + k] +=\n            (updatesData as TypedArray)[i * sliceSize + k];\n      } else {\n        outBuf.values[flattenIndex * sliceSize + k] = updates.rank === 0 ?\n            updatesData[0] :\n            updatesData[i * sliceSize + k];\n      }\n    }\n  }\n\n  return outBuf as TensorBuffer<R, D>;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function sparseFillEmptyRowsImpl(\n    indices: TypedArray, indicesShape: number[], indicesDType: DataType,\n    values: TypedArray, valuesDType: DataType, denseShape: TypedArray,\n    defaultValue: number):\n    [TypedArray, number[], TypedArray, boolean[], number[]] {\n  const indicesCount = indicesShape[0];\n  const denseRows = denseShape[0];\n\n  const emptyRowIndicator: boolean[] = new Array(denseRows);\n  const reverseIndexMap: number[] = new Array(indicesCount);\n\n  const rank = indicesShape[1];\n\n  if (denseRows === 0) {\n    if (indicesCount !== 0) {\n      throw new Error(\n          backend_util.getSparseFillEmptyRowsIndicesDenseShapeMismatch(\n              indicesCount));\n    }\n    const outputIndices = util.getArrayFromDType(indicesDType, 0) as TypedArray;\n    const outputValues = util.getArrayFromDType(valuesDType, 0) as TypedArray;\n    return [\n      outputIndices, [0, rank], outputValues, emptyRowIndicator, reverseIndexMap\n    ];\n  }\n\n  let rowsAreOrdered = true;\n  let lastIndicesRow = 0;\n  const csrOffset: number[] = new Array(denseRows).fill(0);\n\n  for (let i = 0; i < indicesCount; ++i) {\n    // indices is a 2d tensor with shape of [N, rank]\n    const row = indices[i * rank];\n    if (row < 0) {\n      throw new Error(\n          backend_util.getSparseFillEmptyRowsNegativeIndexErrorMessage(i, row));\n    }\n    if (row >= denseRows) {\n      throw new Error(\n          backend_util.getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(\n              i, row, denseRows));\n    }\n    ++csrOffset[row];\n    rowsAreOrdered = rowsAreOrdered && (row >= lastIndicesRow);\n    lastIndicesRow = row;\n  }\n\n  let allRowsFull = true;\n  for (let row = 0; row < denseRows; ++row) {\n    // csrOffset here describes the number of elements in this dense row\n    const rowEmpty = (csrOffset[row] === 0);\n    emptyRowIndicator[row] = rowEmpty;\n    allRowsFull = allRowsFull && !rowEmpty;\n    // In filled version, each row has at least one element.\n    csrOffset[row] = Math.max(csrOffset[row], 1);\n    // Update csrOffset to represent the number of elements up to and\n    // including denseRows + 1:\n    //  csrOffset[0] == #{elements of row 0}\n    //  csrOffset[1] == #{elements of row 1} + #{elements of row 0}\n    //  ..\n    //  csrOffset[i] == starting index for elements in row i + 1.\n    if (row > 0) {\n      csrOffset[row] += csrOffset[row - 1];\n    }\n  }\n\n  if (allRowsFull && rowsAreOrdered) {\n    const outputIndices: TypedArray = indices;\n    const outputValues: TypedArray = values;\n    for (let i = 0; i < indicesCount; ++i) {\n      reverseIndexMap[i] = i;\n    }\n    return [\n      outputIndices, [indicesCount, rank], outputValues, emptyRowIndicator,\n      reverseIndexMap\n    ];\n  } else {\n    const fullIndicesCount = csrOffset[denseRows - 1];\n    const outputIndices =\n        util.getArrayFromDType(indicesDType, fullIndicesCount * rank) as\n        TypedArray;\n    const outputValues =\n        util.getArrayFromDType(valuesDType, fullIndicesCount) as TypedArray;\n    const filledCount: number[] = new Array(denseRows).fill(0);\n\n    // Fill in values for rows that are not missing\n    for (let i = 0; i < indicesCount; ++i) {\n      // indices is a 2d tensor with shape of [N, rank]\n      const row = indices[i * rank];\n      const offset = filledCount[row];\n      const outputI = ((row === 0) ? 0 : csrOffset[row - 1]) + offset;\n      filledCount[row]++;  // Increment the filled count for this row.\n      for (let j = 0; j < rank; ++j) {\n        // indices and outputIndices are 2d tensors with shape of [N, rank]\n        outputIndices[outputI * rank + j] = indices[i * rank + j];\n      }\n      outputValues[outputI] = values[i];\n      // We'll need this reverse index map to backprop correctly.\n      reverseIndexMap[i] = outputI;\n    }\n\n    // Fill in values for rows that are missing\n    for (let row = 0; row < denseRows; ++row) {\n      const rowCount = filledCount[row];\n      if (rowCount === 0) {  // We haven't filled this row\n        const startingIndex = (row === 0) ? 0 : csrOffset[row - 1];\n        // Remaining index values were set to zero already.\n        // Just need to set the row index in the right location.\n        // outputIndices is a 2d tensor with shape of [N, rank]\n        outputIndices[startingIndex * rank + 0] = row;\n        for (let col = 1; col < rank; ++col) {\n          outputIndices[startingIndex * rank + col] = 0;\n        }\n        outputValues[startingIndex] = defaultValue;\n      }\n    }\n    return [\n      outputIndices, [fullIndicesCount, rank], outputValues, emptyRowIndicator,\n      reverseIndexMap\n    ];\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function sparseReshapeImpl(\n    inputIndices: TypedArray, inputIndicesShape: number[], inputDType: DataType,\n    inputShape: number[],\n    targetShape: number[]): [TypedArray, number[], number[]] {\n  const denseSize = util.sizeFromShape(inputShape);\n  const nnz = inputIndicesShape[0];\n  const outputRank = targetShape.length;\n\n  // Compute the output shape. Determine product of specified dimensions, and\n  // find the index of the unspecified one.\n  const outputShape: number[] = [];\n  let product = 1;\n  let unknownIndex = -1;\n  for (let d = 0; d < outputRank; ++d) {\n    const size = targetShape[d];\n    if (size === -1) {\n      if (unknownIndex !== -1) {\n        throw new Error(\n            backend_util\n                .getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(\n                    unknownIndex, d));\n      }\n      unknownIndex = d;\n      outputShape.push(1);\n    } else {\n      if (size < 0) {\n        throw new Error(\n            backend_util.getSparseReshapeNegativeOutputDimErrorMessage(\n                d, size));\n      }\n      product *= size;\n      outputShape.push(size);\n    }\n  }\n  if (unknownIndex !== -1) {\n    if (product <= 0) {\n      throw new Error(\n          backend_util.getSparseReshapeEmptyTensorZeroOutputDimErrorMessage());\n    }\n    const missing = Math.trunc(denseSize / product);\n    if (product * missing !== denseSize) {\n      throw new Error(\n          backend_util.getSparseReshapeInputOutputMultipleErrorMessage(\n              inputShape, outputShape));\n    }\n\n    outputShape[unknownIndex] = missing;\n  }\n  const outputSize = util.sizeFromShape(outputShape);\n  if (outputSize !== denseSize) {\n    throw new Error(\n        backend_util.getSparseReshapeInputOutputMismatchErrorMessage(\n            inputShape, outputShape));\n  }\n\n  const inputRank = inputShape.length;\n  const inputStrides: number[] = [];\n  if (inputRank > 0) {\n    inputStrides[inputRank - 1] = 1;\n    for (let d = inputRank - 2; d >= 0; --d) {\n      inputStrides[d] = inputStrides[d + 1] * inputShape[d + 1];\n    }\n  }\n\n  const outputStrides: number[] = [];\n  if (outputRank > 0) {\n    outputStrides[outputRank - 1] = 1;\n    for (let d = outputRank - 2; d >= 0; --d) {\n      outputStrides[d] = outputStrides[d + 1] * outputShape[d + 1];\n    }\n  }\n\n  const newIndices =\n      util.getArrayFromDType(inputDType, nnz * outputRank) as TypedArray;\n  for (let i = 0; i < nnz; ++i) {\n    let id = 0;\n    for (let j = 0; j < inputRank; ++j) {\n      // inputIndices is a 2d tensor with shape of [nnz, inputRank]\n      id += inputIndices[i * inputRank + j] * inputStrides[j];\n    }\n    for (let j = 0; j < outputRank; ++j) {\n      // newIndices is a 2d tensor with shape of [nnz, outputRank]\n      newIndices[i * outputRank + j] = Math.trunc(id / outputStrides[j]);\n      id %= outputStrides[j];\n    }\n  }\n  return [newIndices, [nnz, outputRank], outputShape];\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {sizeFromShape} from '../../util';\n\n/**\n * Generates sparse reshape multiple negative 1 output dimension error message.\n *\n * @param dim1 The first dimension with a negative 1 value.\n * @param dim2 The second dimension with a negative 1 value.\n */\nexport function getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(\n    dim1: number, dim2: number) {\n  return `only one output dimension may be -1, not both ${dim1} and ${dim2}`;\n}\n\n/**\n * Generates sparse reshape negative output dimension error message.\n *\n * @param dim The dimension with a negative value.\n * @param value The negative value.\n */\nexport function getSparseReshapeNegativeOutputDimErrorMessage(\n    dim: number, value: number) {\n  return `size ${dim} must be non-negative, not ${value}`;\n}\n\n/**\n * Generates sparse reshape empty tensor zero output dimension error message.\n *\n */\nexport function getSparseReshapeEmptyTensorZeroOutputDimErrorMessage() {\n  return 'reshape cannot infer the missing input size for an empty tensor ' +\n      'unless all specified input sizes are non-zero';\n}\n\n/**\n * Generates sparse reshape input output multiple mismatch error message.\n *\n * @param inputShape the input shape.\n * @param outputShape the requested output shape.\n */\nexport function getSparseReshapeInputOutputMultipleErrorMessage(\n    inputShape: number[], outputShape: number[]) {\n  const inputSize = sizeFromShape(inputShape);\n  const outputSize = sizeFromShape(outputShape);\n  return `Input to reshape is a SparseTensor with ${inputSize}\n  dense values, but the requested shape requires a multiple of ${\n      outputSize}. inputShape=${inputShape} outputShape= ${outputShape}`;\n}\n\n/**\n * Generates sparse reshape input output inequality error message.\n *\n * @param inputShape the input shape.\n * @param outputShape the requested output shape.\n */\nexport function getSparseReshapeInputOutputMismatchErrorMessage(\n    inputShape: number[], outputShape: number[]) {\n  const inputSize = sizeFromShape(inputShape);\n  const outputSize = sizeFromShape(outputShape);\n  return `Input to reshape is a tensor with ${\n      inputSize} dense values, but the requested shape has ${\n      outputSize}. inputShape=${inputShape} outputShape=${outputShape}`;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function sparseSegmentReductionImpl(\n    input: TypedArray, inputShape: number[], inputDType: DataType,\n    indices: TypedArray, segmentIds: TypedArray, isMean = false,\n    defaultValue = 0): [TypedArray, number[]] {\n  const numIndices = indices.length;\n\n  // Flatten the array to two dimensions\n  const inputFlat: number[] = [inputShape[0], input.length / inputShape[0]];\n  const numCol = inputFlat[1];\n  // Note that the current implementation assumes that segmentIds values are\n  // sorted.\n  const lastSegmentIdPlusOne =\n      numIndices > 0 ? segmentIds[numIndices - 1] + 1 : 0;\n  const outputRows = lastSegmentIdPlusOne;\n\n  if (outputRows < 0) {\n    throw new Error(\n        backend_util.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());\n  }\n\n  const outputShape = inputShape.slice();\n  outputShape[0] = outputRows;\n\n  const outputLength =\n      outputShape.reduce((product, value) => product * value, 1);\n  // Output array is initialized with the value 0 by default.\n  const output = util.getArrayFromDType(inputDType, outputLength) as TypedArray;\n\n  // Note that we do not initialize the output buffer with a default value, so\n  // we need to explicitly set missing indices to the default value.\n  if (numIndices === 0) {\n    if (outputRows > 0) {\n      output.fill(defaultValue);\n    }\n    return [output, outputShape];\n  }\n\n  if (outputRows <= 0) {\n    throw new Error(\n        backend_util.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());\n  }\n\n  let start = 0, end = 1;\n  // Index from which the output is not initialized.\n  let uninitializedIndex = 0;\n  let outIndex = segmentIds[start];\n\n  while (true) {\n    // We initialize nextIndex to 0 to avoid may be uninitialized warning\n    let nextIndex = 0;\n    if (end < numIndices) {\n      nextIndex = segmentIds[end];\n      if (outIndex === nextIndex) {\n        ++end;\n        continue;\n      }\n      // We have a new segment here.  Verify that the segment ids are growing.\n      if (outIndex >= nextIndex) {\n        throw new Error(backend_util\n            .getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage());\n      }\n    }\n\n    if (outIndex < 0 || outIndex >= outputRows) {\n      throw new Error(\n          backend_util.getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(\n              outIndex, outputRows));\n    }\n\n    // If there is a gap between two indices, we need to set that gap to the\n    // default value.\n    if (outIndex > uninitializedIndex) {\n      output.fill(defaultValue, uninitializedIndex * numCol, outIndex * numCol);\n    }\n\n    for (let i = start; i < end; ++i) {\n      const index = indices[i];\n      if (index < 0 || index >= inputFlat[0]) {\n        throw new Error(\n            backend_util.getSparseSegmentReductionIndicesOutOfRangeErrorMessage(\n                i, indices[i], inputFlat[0]));\n      }\n      for (let j = 0; j < numCol; j++) {\n        output[outIndex * numCol + j] += input[index * numCol + j];\n      }\n    }\n\n    if (isMean) {\n      for (let j = 0; j < numCol; j++) {\n        output[outIndex * numCol + j] /= end - start;\n      }\n    }\n\n    start = end;\n    ++end;\n    uninitializedIndex = outIndex + 1;\n    outIndex = nextIndex;\n    if (end > numIndices) {\n      break;\n    }\n  }\n\n  // Fill the gap at the end with the default value.\n  if (uninitializedIndex < outputRows) {\n    output.fill(defaultValue, uninitializedIndex * numCol, outputRows * numCol);\n  }\n\n  return [output, outputShape];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, Rank, TensorBuffer} from '@tensorflow/tfjs-core';\n\nexport function stridedSliceImpl<R extends Rank>(\n    outShape: number[], xBuf: TensorBuffer<R>, strides: number[],\n    begin: number[]): TensorBuffer<R> {\n  const outBuf = buffer(outShape, xBuf.dtype);\n\n  for (let i = 0; i < outBuf.size; i++) {\n    const loc = outBuf.indexToLoc(i);\n\n    const newLoc: number[] = new Array(loc.length);\n    for (let j = 0; j < newLoc.length; j++) {\n      newLoc[j] = loc[j] * strides[j] + begin[j];\n    }\n    outBuf.set(xBuf.get(...newLoc), ...loc);\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function stringToHashBucketFastImpl(\n    input: Uint8Array[], numBuckets: number): TypedArray {\n  const output = util.getArrayFromDType('int32', input.length) as TypedArray;\n\n  for (let i = 0; i < input.length; ++i) {\n    output[i] =\n        util.fingerPrint64(input[i]).modulo(numBuckets).getLowBitsUnsigned();\n  }\n\n  return output;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer} from '@tensorflow/tfjs-core';\n\n/**\n * An implementation of the tile kernel shared between webgl and cpu for string\n * tensors only.\n */\n\nexport function tileImpl<R extends Rank>(\n    xBuf: TensorBuffer<R, DataType>,\n    reps: number[]): TensorBuffer<R, DataType> {\n  const newShape: number[] = new Array(xBuf.rank);\n  for (let i = 0; i < newShape.length; i++) {\n    newShape[i] = xBuf.shape[i] * reps[i];\n  }\n  const result = buffer(newShape, xBuf.dtype);\n  for (let i = 0; i < result.values.length; ++i) {\n    const newLoc = result.indexToLoc(i);\n\n    const originalLoc: number[] = new Array(xBuf.rank);\n    for (let j = 0; j < originalLoc.length; j++) {\n      originalLoc[j] = newLoc[j] % xBuf.shape[j];\n    }\n\n    const originalIndex = xBuf.locToIndex(originalLoc);\n\n    result.values[i] = xBuf.values[originalIndex];\n  }\n  return result as TensorBuffer<R, DataType>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BackendValues, DataType, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function uniqueImpl(\n    values: BackendValues, axis: number, shape: number[], dtype: DataType): {\n  outputValues: BackendValues,\n  outputShape: number[],\n  indices: BackendValues\n} {\n  // Normalize and validate axis.\n  const $axis = util.parseAxisParam(axis, shape)[0];\n\n  // Calculate the new shape that is suitable for extracting data along the\n  // given axis.\n  //\n  // The rank is 3.\n  // The size of the 1st dimension is the size of all the axes < the given axis.\n  // The size of the 2nd dimension is the same as the size of the given axis.\n  // The size of the 3rd dimension is the size of all the axes > the given axis.\n  //\n  // For example, for a 4D tensor with shape=[2, 3, 5, 4] and axis=2, the\n  // newShape would be: [2*3, 5, 4].\n  //\n  // Note that this is not the final output shape. This will be the shape for an\n  // intermediate TensorBuffer (see inputBuffer below) to allow us to extract\n  // values along the given axis. To demonstrate how it works, consider the\n  // following example:\n  //\n  // Input: a 3D tensor, with shape [1, 2, 3]\n  // [\n  //   [\n  //      [1,2,3],\n  //      [4,5,6]\n  //   ]\n  // ]\n  // Axis: 2 (the last axis).\n  // Along axis 2, we expect to extract 3 tensors: [1,4], [2,5], [3,6].\n  //\n  // For this example, newShape would be: [2, 3, 1], where 2 is calculated from\n  // 1*2. The re-shaped data would look like:\n  //\n  // [\n  //   [\n  //     [1], [2], [3]\n  //   ],\n  //   [\n  //     [4], [5], [6]\n  //   ]\n  // ]\n  //\n  // Then, we can construct a 3-level nested loop by the following dimension\n  // order to extract the values along the axis (dimension1):\n  // i: dimension1       // 0,1,2 (newShape[1])\n  //   m: dimension0     // 0,1   (newShape[0])\n  //     n: dimension2   // 0     (newShape[2])\n  //\n  //                       m, i, n\n  //                      ---------\n  // Iteration 0: data at [0, 0, 0] => \"1\"\n  // Iteration 1: data at [1, 0, 0] => \"4\"\n  // We got [1,4].\n  // Iteration 2: data at [0, 1, 0] => \"2\"\n  // Iteration 3: data at [1, 1, 0] => \"5\"\n  // We got [2,5].\n  // Iteration 4: data at [0, 2, 0] => \"3\"\n  // Iteration 5: data at [1, 2, 0] => \"6\"\n  // We got [3,6].\n  const newShape = [1, shape[0], 1];\n  for (let i = 0; i < $axis; i++) {\n    newShape[0] *= shape[i];\n  }\n  newShape[1] = shape[$axis];\n  for (let i = $axis + 1; i < shape.length; i++) {\n    newShape[2] *= shape[i];\n  }\n\n  // A map from unique elements (their string representations) to their values\n  // in \"indices\" (below).\n  const uniqueElements: {[key: string]: number} = {};\n  // The indices of each unique element in the original tensor along the given\n  // axis. It is 1D and has the same size as the given axis.\n  const indices = new Int32Array(shape[$axis]);\n  // Create a buffer so we can easily extract value at a given location.\n  const inputBuffer = new TensorBuffer(newShape, dtype, values as TypedArray);\n  // The indices along the given axis that have unique elements. This is a\n  // de-duped version of \"indices\" above.\n  const uniqueIndices: number[] = [];\n  const is1DTensor = newShape[0] === 1 && newShape[2] === 1;\n  for (let i = 0; i < shape[$axis]; i++) {\n    // Extract values along the axis.\n    let element: string;\n    if (is1DTensor) {\n      // Fast path for 1D tensor input.\n      element = values[i].toString();\n    } else {\n      const axisValues = [];\n      for (let m = 0; m < newShape[0]; m++) {\n        for (let n = 0; n < newShape[2]; n++) {\n          axisValues.push(inputBuffer.get(m, i, n));\n        }\n      }\n      element = axisValues.join(',');\n    }\n\n    // Dedup and update various indices.\n    if (uniqueElements[element] !== undefined) {\n      indices[i] = uniqueElements[element];\n    } else {\n      const uniqueIndex = Object.keys(uniqueElements).length;\n      uniqueElements[element] = uniqueIndex;\n      indices[i] = uniqueIndex;\n      uniqueIndices.push(i);\n    }\n  }\n\n  // Now we know where each of the unique elements are located along the axis\n  // (uniqueIndices). Extract them from input buffer and store them in the\n  // output buffer.\n  const outputTmpShape = newShape.slice();\n  outputTmpShape[1] = Object.keys(uniqueElements).length;\n  const outputBuffer = new TensorBuffer(outputTmpShape, dtype);\n  uniqueIndices.forEach((uniqueElementIndex, i) => {\n    for (let m = 0; m < newShape[0]; m++) {\n      for (let n = 0; n < newShape[2]; n++) {\n        outputBuffer.set(inputBuffer.get(m, uniqueElementIndex, n), m, i, n);\n      }\n    }\n  });\n\n  // The output shape can be calculated from the input shape with the size of\n  // the given axis replaced by the number of unique elements along that axis.\n  const outputShape = shape.slice();\n  outputShape[$axis] = outputTmpShape[1];\n\n  return {\n    outputValues: outputBuffer.values as BackendValues,\n    outputShape,\n    indices,\n  };\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport function getVecChannels(name: string, rank: number): string[] {\n  return ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank).map(d => `${name}.${d}`);\n}\n\nexport function getChannels(name: string, rank: number): string[] {\n  if (rank === 1) {\n    return [name];\n  }\n  return getVecChannels(name, rank);\n}\n\nexport function getSourceCoords(rank: number, dims: string[]): string {\n  if (rank === 1) {\n    return 'rc';\n  }\n\n  let coords = '';\n  for (let i = 0; i < rank; i++) {\n    coords += dims[i];\n    if (i < rank - 1) {\n      coords += ',';\n    }\n  }\n  return coords;\n}","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class PackProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  packedInputs = false;\n  packedOutput = true;\n  enableShapeUniforms: boolean;\n  rank: number;\n\n  constructor(\n      outputShape:\n          number[]) {  // TODO(https://github.com/tensorflow/tfjs/issues/893):\n                       // Only input / output 3D tensors.\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n\n    if (this.rank === 0) {\n      this.userCode = `\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      `;\n    } else {\n      const channels = getChannels('rc', this.rank);\n      const dtype = getCoordsDataType(this.rank);\n      const outOfBoundsCondition = this.getOutOfBoundsCondition(channels);\n      const setup = this.getSetup(channels);\n      const output = this.getOutput(channels);\n\n      this.userCode = `\n        void main() {\n          ${dtype} rc = getOutputCoords();\n\n          if(${outOfBoundsCondition}) {\n            setOutput(vec4(0));\n          } else {\n            ${setup}\n\n            setOutput(vec4(${output}));\n          }\n        }\n      `;\n    }\n  }\n\n  private getSourceCoordsArr(dims: string[]): string[] {\n    const coords = [];\n\n    for (let row = 0; row <= 1; row++) {\n      for (let col = 0; col <= 1; col++) {\n        let coord = `${row === 0 ? 'r' : 'rp1'}, ${col === 0 ? 'c' : 'cp1'}`;\n\n        for (let d = 2; d < this.rank; d++) {\n          coord = `${dims[dims.length - 1 - d]},` + coord;\n        }\n\n        coords.push(coord);\n      }\n    }\n    return coords;\n  }\n\n  private getOutOfBoundsCondition(dims: string[]): string {\n    if (this.rank === 1) {\n      return `rc > ${\n          this.enableShapeUniforms ? 'outShape' : this.outputShape[0]}`;\n    }\n\n    let cond = '';\n    for (let i = this.rank - 2; i < this.rank; i++) {\n      cond += `${dims[i]} >= ${\n          this.enableShapeUniforms ? `outShape[${i}]` : this.outputShape[i]}`;\n      if (i < this.rank - 1) {\n        cond += '||';\n      }\n    }\n\n    return cond;\n  }\n\n  private getSetup(dims: string[]): string {\n    if (this.rank === 1) {\n      return '';\n    }\n\n    const innerDims = dims.slice(-2);\n    const col = this.enableShapeUniforms ? `outShape[${this.rank} - 1]` :\n                                           this.outputShape[this.rank - 1];\n    const row = this.enableShapeUniforms ? `outShape[${this.rank} - 2]` :\n                                           this.outputShape[this.rank - 2];\n\n    return `\n      int r = ${innerDims[0]};\n      int c = ${innerDims[1]};\n      int rp1 = r + 1;\n      int cp1 = c + 1;\n\n      bool cEdge = cp1 >= ${col};\n      bool rEdge = rp1 >= ${row};\n    `;\n  }\n\n  private getOutput(dims: string[]): string {\n    const sourceCoords = this.getSourceCoordsArr(dims);\n    if (this.rank === 1) {\n      const outShape =\n          this.enableShapeUniforms ? 'outShape' : this.outputShape[0];\n      return `getA(rc), (rc + 1 >= ${outShape} ? 0. : getA(rc + 1)), 0, 0`;\n    }\n\n    return `getA(${sourceCoords[0]}),\n            cEdge ? 0. : getA(${sourceCoords[1]}),\n            rEdge ? 0. : getA(${sourceCoords[2]}),\n            rEdge || cEdge ? 0. : getA(${sourceCoords[3]})`;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\n\nexport class ReshapePackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms: boolean;\n  customUniforms = [{name: 'inputShape', type: 'ivec3' as const }];\n\n  constructor(outputShape: [number, number, number], inputShape: [\n    number, number, number\n  ]) {\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n\n    let mainLoop = ``;\n    for (let i = 0; i < 4; i++) {\n      let thisRC = `thisRC = rc;`;\n      if (i % 2 === 1) {\n        thisRC += `thisRC.z += 1;`;\n      }\n      if (i > 1) {\n        thisRC += `thisRC.y += 1;`;\n      }\n\n      mainLoop += `\n        ${thisRC}\n        ${i > 0 ? `if(thisRC.y < rows && thisRC.z < cols){` : ''}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${i}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${i > 0 ? '}' : ''}\n      `;\n    }\n\n    this.userCode = `\n      ${getReshapedInputCoords(inputShape, this.enableShapeUniforms)}\n      ${\n        this.enableShapeUniforms ? shader_util.getFlatIndexFrom3DOutput() :\n                                   shader_util.getFlatIndexFrom3D(outputShape)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${this.enableShapeUniforms ? 'outShape[1]' : outputShape[1]};\n        int cols = ${this.enableShapeUniforms ? 'outShape[2]' : outputShape[2]};\n\n        ${mainLoop}\n\n        setOutput(result);\n      }\n    `;\n  }\n}\n\nfunction getReshapedInputCoords(\n    shape: [number, number, number], enableShapeUniforms: boolean): string {\n  const coordsFromIndexSnippet = enableShapeUniforms ?\n      shader_util.getLogicalCoordinatesFromFlatIndexByUniform(\n          ['r', 'c', 'd'], 'inputShape') :\n      shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);\n\n  return `\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${coordsFromIndexSnippet}\n      return ivec3(r, c, d);\n    }\n  `;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env} from '@tensorflow/tfjs-core';\n\nimport {GPGPUContext} from './gpgpu_context';\nimport {getInternalFormatForFloat16MatrixTexture, getInternalFormatForFloat16PackedMatrixTexture, getInternalFormatForFloat32MatrixTexture, getInternalFormatForPackedMatrixTexture, getInternalFormatForUnsignedBytesMatrixTexture} from './gpgpu_util';\nimport {getPackedMatrixTextureShapeWidthHeight, getUnpackedMatrixTextureShapeWidthHeight, PhysicalTextureType, Texture, TextureConfig, TextureUsage} from './tex_util';\n\nexport class TextureManager {\n  private numUsedTextures = 0;\n  private numFreeTextures = 0;\n  private _numBytesAllocated = 0;\n  private _numBytesFree = 0;  // How many bytes that have been allocated\n                              // are available for reuse.\n  private freeTextures: {[shape: string]: Texture[]} = {};\n  private logEnabled = false;\n  private usedTextures: {[shape: string]: Texture[]} = {};\n\n  constructor(private gpgpu: GPGPUContext) {}\n\n  acquireTexture(\n      shapeRC: [number, number], usage: TextureUsage,\n      isPacked: boolean): Texture {\n    const physicalTexType = getPhysicalFromLogicalTextureType(usage, isPacked);\n\n    const shapeKey = getKeyFromTextureShape(shapeRC, physicalTexType, isPacked);\n    if (!(shapeKey in this.freeTextures)) {\n      this.freeTextures[shapeKey] = [];\n    }\n    if (!(shapeKey in this.usedTextures)) {\n      this.usedTextures[shapeKey] = [];\n    }\n\n    const texBytes = computeBytes(\n        shapeRC, physicalTexType, this.gpgpu.gl, this.gpgpu.textureConfig,\n        isPacked);\n\n    if (this.freeTextures[shapeKey].length > 0) {\n      this.numFreeTextures--;\n      this.numUsedTextures++;\n      this._numBytesFree -= texBytes;\n      this.log();\n      const newTexture = this.freeTextures[shapeKey].shift();\n      this.usedTextures[shapeKey].push(newTexture);\n      return newTexture;\n    }\n\n    let newTexture: Texture;\n    if (physicalTexType === PhysicalTextureType.PACKED_2X2_FLOAT32) {\n      newTexture = this.gpgpu.createPackedMatrixTexture(shapeRC[0], shapeRC[1]);\n    } else if (physicalTexType === PhysicalTextureType.PACKED_2X2_FLOAT16) {\n      newTexture =\n          this.gpgpu.createFloat16PackedMatrixTexture(shapeRC[0], shapeRC[1]);\n    } else if (physicalTexType === PhysicalTextureType.UNPACKED_FLOAT32) {\n      newTexture =\n          this.gpgpu.createFloat32MatrixTexture(shapeRC[0], shapeRC[1]);\n    } else if (physicalTexType === PhysicalTextureType.UNPACKED_FLOAT16) {\n      newTexture =\n          this.gpgpu.createFloat16MatrixTexture(shapeRC[0], shapeRC[1]);\n    } else if (\n        physicalTexType === PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE) {\n      newTexture =\n          this.gpgpu.createUnsignedBytesMatrixTexture(shapeRC[0], shapeRC[1]);\n    }\n    this.usedTextures[shapeKey].push(newTexture);\n\n    this.numUsedTextures++;\n    this._numBytesAllocated += texBytes;\n    this.log();\n\n    return newTexture;\n  }\n\n  releaseTexture(\n      texture: Texture, shape: [number, number], logicalTexType: TextureUsage,\n      isPacked: boolean): void {\n    if (this.freeTextures == null) {\n      // Already disposed.\n      return;\n    }\n    const physicalTexType =\n        getPhysicalFromLogicalTextureType(logicalTexType, isPacked);\n    const shapeKey = getKeyFromTextureShape(shape, physicalTexType, isPacked);\n    if (!(shapeKey in this.freeTextures)) {\n      this.freeTextures[shapeKey] = [];\n    }\n\n    const texBytes = computeBytes(\n        shape, physicalTexType, this.gpgpu.gl, this.gpgpu.textureConfig,\n        isPacked);\n    const deleteTexThreshold = env().get('WEBGL_DELETE_TEXTURE_THRESHOLD');\n    if (deleteTexThreshold !== -1 &&\n        this._numBytesAllocated > deleteTexThreshold) {\n      this.gpgpu.deleteMatrixTexture(texture.texture);\n      this._numBytesAllocated -= texBytes;\n    } else {\n      this.freeTextures[shapeKey].push(texture);\n      this.numFreeTextures++;\n      this._numBytesFree += texBytes;\n    }\n\n    this.numUsedTextures--;\n\n    const texList = this.usedTextures[shapeKey];\n    const texIndex = texList.indexOf(texture);\n    if (texIndex < 0) {\n      throw new Error(\n          'Cannot release a texture that was never provided by this ' +\n          'texture manager');\n    }\n    texList.splice(texIndex, 1);\n    this.log();\n  }\n\n  private log() {\n    if (!this.logEnabled) {\n      return;\n    }\n    const total = this.numFreeTextures + this.numUsedTextures;\n    console.log(\n        'Free/Used', `${this.numFreeTextures} / ${this.numUsedTextures}`,\n        `(${total})`);\n    const freeRatio = this._numBytesFree / this._numBytesAllocated;\n    console.log(`Bytes allocated: ${this._numBytesAllocated}`);\n    console.log(`Bytes unused: ${this._numBytesFree} (${\n        Math.round(100 * freeRatio)}%)`);\n  }\n\n  get numBytesAllocated(): number {\n    return this._numBytesAllocated;\n  }\n\n  get numBytesFree(): number {\n    return this._numBytesFree;\n  }\n\n  getNumUsedTextures(): number {\n    return this.numUsedTextures;\n  }\n\n  getNumFreeTextures(): number {\n    return this.numFreeTextures;\n  }\n\n  dispose() {\n    if (this.freeTextures == null) {\n      // Already disposed.\n      return;\n    }\n    for (const texShape in this.freeTextures) {\n      this.freeTextures[texShape].forEach(tex => {\n        this.gpgpu.deleteMatrixTexture(tex.texture);\n      });\n    }\n    for (const texShape in this.usedTextures) {\n      this.usedTextures[texShape].forEach(tex => {\n        this.gpgpu.deleteMatrixTexture(tex.texture);\n      });\n    }\n    this.freeTextures = null;\n    this.usedTextures = null;\n    this.numUsedTextures = 0;\n    this.numFreeTextures = 0;\n    this._numBytesAllocated = 0;\n    this._numBytesFree = 0;\n  }\n}\n\nfunction numBytesForInternalFormat(\n    gl: WebGLRenderingContext, internalFormat: number): number {\n  // tslint:disable-next-line:no-any\n  const glany = gl as any;\n  if (internalFormat === glany.R32F) {\n    return 4;\n  } else if (internalFormat === glany.R16F) {\n    return 2;\n  } else if (internalFormat === glany.RGBA32F) {\n    return 16;\n  } else if (internalFormat === gl.RGBA) {\n    return 16;\n  } else if (internalFormat === glany.RGBA16F) {\n    return 8;\n  } else if (internalFormat === glany.RGBA8) {\n    return 4;\n  }\n  throw new Error(`Unknown internal format ${internalFormat}`);\n}\n\nexport function computeBytes(\n    shape: [number, number], physicalTexType: PhysicalTextureType,\n    gl: WebGLRenderingContext, textureConfig: TextureConfig,\n    isPacked: boolean): number {\n  // It is not possible to infer packed status from the texture type because\n  // depending on the textureConfig, different  texture types may resolve to the\n  // same internal format (e.g. in WebGL1, the internal format for\n  // UNPACKED_FLOAT16 textures is gl.RGBA). Therefore we pass in `isPacked`\n  // explicitly.\n  const internalFormat =\n      internalFormatForPhysicalTexType(physicalTexType, textureConfig);\n\n  let numElements: number;\n  if (isPacked) {\n    const [packedWidth, packedHeight] =\n        getPackedMatrixTextureShapeWidthHeight(shape[0], shape[1]);\n    numElements = packedWidth * packedHeight;\n\n  } else {\n    const [width, height] =\n        getUnpackedMatrixTextureShapeWidthHeight(shape[0], shape[1]);\n    numElements = width * height;\n  }\n\n  const bytesPerElement = numBytesForInternalFormat(gl, internalFormat);\n  return numElements * bytesPerElement;\n}\n\nfunction internalFormatForPhysicalTexType(\n    physicalTexType: PhysicalTextureType,\n    textureConfig: TextureConfig): number {\n  switch (physicalTexType) {\n    case PhysicalTextureType.PACKED_2X2_FLOAT32:\n      return getInternalFormatForPackedMatrixTexture(textureConfig);\n    case PhysicalTextureType.PACKED_2X2_FLOAT16:\n      return getInternalFormatForFloat16PackedMatrixTexture(textureConfig);\n    case PhysicalTextureType.UNPACKED_FLOAT32:\n      return getInternalFormatForFloat32MatrixTexture(textureConfig);\n    case PhysicalTextureType.UNPACKED_FLOAT16:\n      return getInternalFormatForFloat16MatrixTexture(textureConfig);\n    case PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE:\n      return getInternalFormatForUnsignedBytesMatrixTexture(textureConfig);\n    default:\n      throw new Error(`Unknown physical texture type ${physicalTexType}`);\n  }\n}\n\nfunction getPhysicalTextureForRendering(isPacked: boolean):\n    PhysicalTextureType {\n  if (env().getBool('WEBGL_RENDER_FLOAT32_ENABLED')) {\n    if (isPacked) {\n      return PhysicalTextureType.PACKED_2X2_FLOAT32;\n    }\n    return PhysicalTextureType.UNPACKED_FLOAT32;\n  }\n\n  if (isPacked) {\n    return PhysicalTextureType.PACKED_2X2_FLOAT16;\n  }\n  return PhysicalTextureType.UNPACKED_FLOAT16;\n}\n\nfunction getPhysicalFromLogicalTextureType(\n    logicalTexType: TextureUsage, isPacked: boolean): PhysicalTextureType {\n  if (logicalTexType === TextureUsage.UPLOAD) {\n    return PhysicalTextureType.PACKED_2X2_FLOAT32;\n  } else if (logicalTexType === TextureUsage.RENDER || logicalTexType == null) {\n    return getPhysicalTextureForRendering(isPacked);\n  } else if (\n      logicalTexType === TextureUsage.DOWNLOAD ||\n      logicalTexType === TextureUsage.PIXELS) {\n    return PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE;\n  }\n  throw new Error(`Unknown logical texture type ${logicalTexType}`);\n}\n\nfunction getKeyFromTextureShape(\n    shapeRowsCol: [number, number], physicalTexType: PhysicalTextureType,\n    isPacked: boolean): string {\n  return `${shapeRowsCol[0]}_${shapeRowsCol[1]}_${physicalTexType}_${isPacked}`;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\n\nexport class UnaryOpProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  enableShapeUniforms: boolean;\n\n  constructor(aShape: number[], opSnippet: string) {\n    this.outputShape = aShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    this.userCode = `\n      float unaryOperation(float x) {\n        ${opSnippet}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `;\n  }\n}\n\nexport const CHECK_NAN_SNIPPET = `if (isnan(x)) return x;`;\n\nexport const LINEAR = `return x;`;\n\nexport const ABS = `return abs(x);`;\n\nexport function STEP(alpha = 0.0) {\n  return CHECK_NAN_SNIPPET + `\n    return x > 0.0 ? 1.0 : float(${alpha});\n  `;\n}\n\nexport const ELU = `return (x >= 0.0) ? x : (exp(x) - 1.0);`;\nexport const RELU = CHECK_NAN_SNIPPET + `\n  return (x < 0.0) ? 0.0 : x;\n`;\n\nexport const RELU6 = CHECK_NAN_SNIPPET + `\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n`;\n\nexport const CLONE = 'return x;';\n\nexport const SIGMOID = `return 1.0 / (1.0 + exp(-1.0 * x));`;\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\n\nexport const LINEAR = `return x;`;\n\nexport const ELU = `\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n`;\n\nexport const RELU = `\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\n\nexport const RELU6 = `\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\n\nexport const SIGMOID = `return 1.0 / (1.0 + exp(-1.0 * x));`;\n\nexport class UnaryOpPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  enableShapeUniforms: boolean;\n  outputShape: number[];\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(aShape: number[], opSnippet: string) {\n    this.outputShape = aShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    this.userCode = `\n      vec4 unaryOperation(vec4 x) {\n        ${opSnippet}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\nimport {getChannels, getSourceCoords} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class UnpackProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = false;\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms: boolean;\n\n  constructor(outputShape: number[]) {\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    const rank = outputShape.length;\n\n    const channels = getChannels('rc', rank);\n    const dtype = getCoordsDataType(rank);\n    const sourceCoords = getSourceCoords(rank, channels);\n    const innerDims = channels.slice(-2);\n    const coords = rank <= 1 ? 'rc' : `vec2(${innerDims.join(',')})`;\n\n    this.userCode = `\n      void main() {\n        ${dtype} rc = getOutputCoords();\n        vec4 packedInput = getA(${sourceCoords});\n\n        setOutput(getChannel(packedInput, ${coords}));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Import webgl flags.\nimport './flags_webgl';\n\nimport * as tf from '@tensorflow/tfjs-core';\nimport {backend_util, BackendValues, buffer, DataId, DataStorage, DataToGPUWebGLOption, DataType, engine, env, GPUData, kernel_impls, KernelBackend, MemoryInfo, nextFrame, NumericDataType, Rank, RecursiveArray, scalar, ShapeMap, Tensor, Tensor2D, TensorBuffer, TensorInfo, tidy, TimingInfo, TypedArray, util, WebGLData} from '@tensorflow/tfjs-core';\nimport {getWebGLContext} from './canvas_util';\nimport {DecodeMatrixProgram} from './decode_matrix_gpu';\nimport {DecodeMatrixPackedProgram} from './decode_matrix_packed_gpu';\nimport {EncodeFloatProgram} from './encode_float_gpu';\nimport {EncodeFloatPackedProgram} from './encode_float_packed_gpu';\nimport {EncodeMatrixProgram} from './encode_matrix_gpu';\nimport {EncodeMatrixPackedProgram} from './encode_matrix_packed_gpu';\nimport {GPGPUContext} from './gpgpu_context';\nimport * as gpgpu_math from './gpgpu_math';\nimport {getUniformLocations, GPGPUBinary, GPGPUProgram, TensorData} from './gpgpu_math';\nimport {simpleAbsImplCPU} from './kernel_utils/shared';\nimport {PackProgram} from './pack_gpu';\nimport {ReshapePackedProgram} from './reshape_packed_gpu';\nimport * as tex_util from './tex_util';\nimport {Texture, TextureData, TextureUsage} from './tex_util';\nimport {TextureManager} from './texture_manager';\nimport * as unary_op from './unaryop_gpu';\nimport {UnaryOpProgram} from './unaryop_gpu';\nimport {UnaryOpPackedProgram} from './unaryop_packed_gpu';\nimport {UnpackProgram} from './unpack_gpu';\nimport * as webgl_util from './webgl_util';\n\nconst whereImpl = kernel_impls.whereImpl;\n\nexport const EPSILON_FLOAT32 = 1e-7;\nexport const EPSILON_FLOAT16 = 1e-4;\n\ntype KernelInfo = {\n  name: string; query: Promise<number>;\n};\n\nexport type TimerNode = RecursiveArray<KernelInfo>|KernelInfo;\nexport interface CPUTimerQuery {\n  startMs: number;\n  endMs?: number;\n}\n\nexport interface WebGLMemoryInfo extends MemoryInfo {\n  numBytesInGPU: number;\n  // Tracks the total number of bytes allocated on the GPU, accounting for the\n  // physical texture type.\n  numBytesInGPUAllocated: number;\n  // Tracks byte size of textures that were created and then made available for\n  // reuse (disposed).\n  numBytesInGPUFree: number;\n  unreliable: boolean;\n}\n\nexport interface WebGLTimingInfo extends TimingInfo {\n  uploadWaitMs: number;\n  downloadWaitMs: number;\n}\n\nconst binaryCaches: {[webGLVersion: string]: {[key: string]: GPGPUBinary}} = {};\n\nexport function getBinaryCache(webGLVersion: number) {\n  if (webGLVersion in binaryCaches) {\n    return binaryCaches[webGLVersion];\n  }\n  binaryCaches[webGLVersion] = {};\n  return binaryCaches[webGLVersion];\n}\n\n// Empirically determined constant used to determine size threshold for handing\n// off execution to the CPU.\nconst CPU_HANDOFF_SIZE_THRESHOLD =\n    env().getNumber('CPU_HANDOFF_SIZE_THRESHOLD');\n\n// Empirically determined constant used to decide the number of MB on GPU\n// before we warn about high memory use. The MB are this constant * screen area\n// * dpi / 1024 / 1024.\nconst BEFORE_PAGING_CONSTANT = 600;\nfunction numMBBeforeWarning(): number {\n  if (env().global.screen == null) {\n    return 1024;  // 1 GB.\n  }\n  return (env().global.screen.height * env().global.screen.width *\n          window.devicePixelRatio) *\n      BEFORE_PAGING_CONSTANT / 1024 / 1024;\n}\n\nexport class MathBackendWebGL extends KernelBackend {\n  texData: DataStorage<TextureData>;\n  gpgpu: GPGPUContext;\n\n  private static nextDataId = 0;\n  private nextDataId(): number {\n    return MathBackendWebGL.nextDataId++;\n  }\n  // Maps data ids that have a pending read operation, to list of subscribers.\n  private pendingRead = new WeakMap<DataId, Array<(arr: TypedArray) => void>>();\n  // List of data ids that are scheduled for disposal, but are waiting on a\n  // pending read operation.\n  private pendingDisposal = new WeakSet<DataId>();\n\n  // Used to count the number of 'shallow' sliced tensors that point to the\n  // same data id.\n  dataRefCount = new WeakMap<DataId, number>();\n  private numBytesInGPU = 0;\n\n  private canvas: HTMLCanvasElement|OffscreenCanvas;\n\n  private programTimersStack: TimerNode[];\n  private activeTimers: TimerNode[];\n  // Accumulated time spent (including blocking) in uploading data to webgl.\n  private uploadWaitMs = 0;\n  // Accumulated time spent (including blocking in downloading data from webgl.\n  private downloadWaitMs = 0;\n\n  // record the last manual GL Flush time.\n  private lastGlFlushTime = 0;\n\n  // Number of bits of precision of this backend.\n  private floatPrecisionValue: 32|16;\n\n  private textureManager: TextureManager;\n  private binaryCache: {[key: string]: GPGPUBinary};\n  private gpgpuCreatedLocally: boolean;\n  private numMBBeforeWarning: number;\n  private warnedAboutMemory = false;\n\n  constructor(gpuResource?: GPGPUContext|HTMLCanvasElement|OffscreenCanvas) {\n    super();\n    if (!env().getBool('HAS_WEBGL')) {\n      throw new Error('WebGL is not supported on this device');\n    }\n\n    let newGPGPU;\n    if (gpuResource != null) {\n      if (gpuResource instanceof GPGPUContext) {\n        newGPGPU = gpuResource;\n      } else {\n        const gl =\n            getWebGLContext(env().getNumber('WEBGL_VERSION'), gpuResource);\n        newGPGPU = new GPGPUContext(gl);\n      }\n      this.binaryCache = {};\n      this.gpgpuCreatedLocally = false;\n    } else {\n      const gl = getWebGLContext(env().getNumber('WEBGL_VERSION'));\n      newGPGPU = new GPGPUContext(gl);\n      this.binaryCache = getBinaryCache(env().getNumber('WEBGL_VERSION'));\n      this.gpgpuCreatedLocally = true;\n    }\n\n    this.gpgpu = newGPGPU;\n    this.canvas = this.gpgpu.gl.canvas;\n    this.textureManager = new TextureManager(this.gpgpu);\n    this.numMBBeforeWarning = numMBBeforeWarning();\n    this.texData = new DataStorage(this, engine());\n  }\n\n  override numDataIds() {\n    return this.texData.numDataIds() - this.pendingDeletes;\n  }\n\n  // Writes a new entry to the data store with a WebGL texture, and registers it\n  // to the texture manager.\n  writeTexture(\n      texture: WebGLTexture, shape: number[], dtype: DataType,\n      texHeight: number, texWidth: number, channels: string): DataId {\n    // Temporarily create an tensor info to make the texture compatible with\n    // the runWebGLProgram's input.\n    const input = this.makeTensorInfo(shape, dtype);\n    const inData = this.texData.get(input.dataId);\n    // Even though the input texture could be unpacked or dense packed, it is\n    // always considered as unpacked for EncodeMatrixProgram.\n    inData.isPacked = false;\n\n    // Bind texture to the input tensor.\n    inData.texture = {texture, texShape: [texHeight, texWidth]};\n    inData.texShape = [texHeight, texWidth];\n\n    const shapeAs3D = webgl_util.getShapeAs3D(shape);\n    const program =\n        new EncodeMatrixProgram(shapeAs3D, false /* isByteArray */, channels);\n    const output =\n        this.runWebGLProgram(program, [input], dtype, [[texHeight, texWidth]]);\n    output.shape = shape;\n\n    // Unbind the texture from the input tensor to avoid the texture being\n    // released.\n    inData.texture = null;\n    this.disposeIntermediateTensorInfo(input);\n\n    return output.dataId;\n  }\n\n  override write(values: BackendValues, shape: number[], dtype: DataType):\n      DataId {\n    if (env().getBool('WEBGL_CHECK_NUMERICAL_PROBLEMS') ||\n        env().getBool('DEBUG')) {\n      this.checkNumericalProblems(values);\n    }\n    if (dtype === 'complex64' && values != null) {\n      throw new Error(\n          `Cannot write to a complex64 dtype. ` +\n          `Please use tf.complex(real, imag).`);\n    }\n    const dataId = {id: this.nextDataId()};\n    this.texData.set(\n        dataId,\n        {shape, dtype, values, usage: TextureUsage.UPLOAD, refCount: 1});\n    return dataId;\n  }\n\n  /** Return refCount of a `TensorData`. */\n  override refCount(dataId: DataId): number {\n    if (this.texData.has(dataId)) {\n      const tensorData = this.texData.get(dataId);\n      return tensorData.refCount;\n    }\n    return 0;\n  }\n\n  /** Increase refCount of a `TextureData`. */\n  override incRef(dataId: DataId): void {\n    const texData = this.texData.get(dataId);\n    texData.refCount++;\n  }\n\n  /** Decrease refCount of a `TextureData`. */\n  decRef(dataId: DataId): void {\n    if (this.texData.has(dataId)) {\n      const texData = this.texData.get(dataId);\n      texData.refCount--;\n    }\n  }\n\n  override move(\n      dataId: DataId, values: BackendValues, shape: number[], dtype: DataType,\n      refCount: number): void {\n    if (env().getBool('DEBUG')) {\n      this.checkNumericalProblems(values);\n    }\n    if (dtype === 'complex64') {\n      throw new Error(\n          `Cannot write to a complex64 dtype. ` +\n          `Please use tf.complex(real, imag).`);\n    }\n    this.texData.set(\n        dataId, {shape, dtype, values, usage: TextureUsage.UPLOAD, refCount});\n  }\n\n  disposeIntermediateTensorInfo(tensorInfo: TensorInfo): void {\n    this.disposeData(tensorInfo.dataId);\n  }\n\n  override readSync(dataId: DataId): BackendValues {\n    const texData = this.texData.get(dataId);\n    const {values, dtype, complexTensorInfos, slice, shape, isPacked} = texData;\n\n    // The presence of `slice` indicates this tensor is a shallow slice of a\n    // different tensor, and is using that original tensor's texture. Run\n    // `clone` in order to copy that texture and read from it.\n    if (slice != null) {\n      let program;\n      if (isPacked) {\n        program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n      } else {\n        program = new UnaryOpProgram(shape, unary_op.CLONE);\n      }\n      const res =\n          this.runWebGLProgram(program, [{dataId, shape, dtype}], dtype);\n      const data = this.readSync(res.dataId);\n      this.disposeIntermediateTensorInfo(res);\n      return data;\n    }\n    if (values != null) {\n      return this.convertAndCacheOnCPU(dataId);\n    }\n    if (dtype === 'string') {\n      return values;\n    }\n    const shouldTimeProgram = this.activeTimers != null;\n    let start: number;\n    if (shouldTimeProgram) {\n      start = util.now();\n    }\n\n    let result: Float32Array;\n    if (dtype === 'complex64') {\n      const realValues =\n          this.readSync(complexTensorInfos.real.dataId) as Float32Array;\n      const imagValues =\n          this.readSync(complexTensorInfos.imag.dataId) as Float32Array;\n      result = backend_util.mergeRealAndImagArrays(realValues, imagValues);\n    } else {\n      result = this.getValuesFromTexture(dataId);\n    }\n\n    if (shouldTimeProgram) {\n      this.downloadWaitMs += util.now() - start;\n    }\n    return this.convertAndCacheOnCPU(dataId, result);\n  }\n\n  override async read(dataId: DataId): Promise<BackendValues> {\n    if (this.pendingRead.has(dataId)) {\n      const subscribers = this.pendingRead.get(dataId);\n      return new Promise<TypedArray>(resolve => subscribers.push(resolve));\n    }\n    const texData = this.texData.get(dataId);\n    const {values, shape, slice, dtype, complexTensorInfos, isPacked} = texData;\n\n    // The presence of `slice` indicates this tensor is a shallow slice of a\n    // different tensor, and is using that original tensor's texture. Run\n    // `clone` in order to copy that texture and read from it.\n    if (slice != null) {\n      let program;\n      if (isPacked) {\n        program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n      } else {\n        program = new UnaryOpProgram(shape, unary_op.CLONE);\n      }\n      const res =\n          this.runWebGLProgram(program, [{dataId, shape, dtype}], dtype);\n      const data = this.read(res.dataId);\n      this.disposeIntermediateTensorInfo(res);\n      return data;\n    }\n\n    if (values != null) {\n      return this.convertAndCacheOnCPU(dataId);\n    }\n\n    if (env().getBool('DEBUG')) {\n      // getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED') caused a blocking GPU call.\n      // For performance reason, only check it for debugging. In production,\n      // it doesn't handle this use case anyway, so behavior is not changed.\n      if (!env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED') &&\n          env().getNumber('WEBGL_VERSION') === 2) {\n        throw new Error(\n            `tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and ` +\n            `WEBGL_VERSION=2 not yet supported.`);\n      }\n    }\n\n    let buffer: WebGLBuffer = null;\n    let tmpDownloadTarget: TensorInfo;\n\n    if (dtype !== 'complex64' && env().get('WEBGL_BUFFER_SUPPORTED')) {\n      // Possibly copy the texture into a buffer before inserting a fence.\n      tmpDownloadTarget = this.decode(dataId);\n      const tmpData = this.texData.get(tmpDownloadTarget.dataId);\n\n      buffer = this.gpgpu.createBufferFromTexture(\n          tmpData.texture.texture, ...tex_util.getDenseTexShape(shape));\n    }\n\n    this.pendingRead.set(dataId, []);\n\n    if (dtype !== 'complex64') {\n      // Create a fence and wait for it to resolve.\n      await this.gpgpu.createAndWaitForFence();\n    }\n\n    // Download the values from the GPU.\n    let vals: Float32Array;\n    if (dtype === 'complex64') {\n      const ps = await Promise.all([\n        this.read(complexTensorInfos.real.dataId),\n        this.read(complexTensorInfos.imag.dataId)\n      ]);\n\n      const realValues = ps[0];\n      const imagValues = ps[1];\n      vals = backend_util.mergeRealAndImagArrays(\n          realValues as Float32Array, imagValues as Float32Array);\n    } else if (buffer == null) {\n      vals = this.getValuesFromTexture(dataId);\n    } else {\n      const size = util.sizeFromShape(shape);\n      vals = this.gpgpu.downloadFloat32MatrixFromBuffer(buffer, size);\n    }\n    if (tmpDownloadTarget != null) {\n      this.disposeIntermediateTensorInfo(tmpDownloadTarget);\n    }\n    if (buffer != null) {\n      const gl = this.gpgpu.gl;\n      webgl_util.callAndCheck(gl, () => gl.deleteBuffer(buffer));\n    }\n    const dTypeVals = this.convertAndCacheOnCPU(dataId, vals);\n\n    const subscribers = this.pendingRead.get(dataId);\n    this.pendingRead.delete(dataId);\n\n    // Notify all pending reads.\n    subscribers.forEach(resolve => resolve(dTypeVals));\n    if (this.pendingDisposal.has(dataId)) {\n      this.pendingDisposal.delete(dataId);\n      if (this.disposeData(dataId)) {\n        engine().removeDataId(dataId, this);\n      }\n      this.pendingDeletes--;\n    }\n    return dTypeVals;\n  }\n\n  /**\n   * Read tensor to a new texture that is densely packed for ease of use.\n   * @param dataId The source tensor.\n   * @param options\n   *     customTexShape: Optional. If set, will use the user defined texture\n   *     shape to create the texture.\n   */\n  override readToGPU(dataId: DataId, options: DataToGPUWebGLOption = {}):\n      GPUData {\n    const texData = this.texData.get(dataId);\n    const {values, shape, slice, dtype, isPacked, texture} = texData;\n\n    if (dtype === 'complex64') {\n      throw new Error('Does not support reading texture for complex64 dtype.');\n    }\n\n    // The presence of `slice` indicates this tensor is a shallow slice of a\n    // different tensor, and is using that original tensor's texture. Run\n    // `clone` in order to copy that texture and read from it.\n    if (slice != null) {\n      let program;\n      if (isPacked) {\n        program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n      } else {\n        program = new UnaryOpProgram(shape, unary_op.CLONE);\n      }\n      const res =\n          this.runWebGLProgram(program, [{dataId, shape, dtype}], dtype);\n      const gpuResouorce = this.readToGPU(res, options);\n      this.disposeIntermediateTensorInfo(res);\n      return gpuResouorce;\n    }\n\n    if (texture == null) {\n      if (values != null) {\n        throw new Error('Data is not on GPU but on CPU.');\n      } else {\n        throw new Error('There is no data on GPU or CPU.');\n      }\n    }\n\n    // Decode the texture so that it is stored densely (using four channels).\n    const tmpTarget = this.decode(dataId, options.customTexShape);\n\n    // Make engine track this tensor, so that we can dispose it later.\n    const tensorRef = engine().makeTensorFromTensorInfo(tmpTarget);\n\n    const tmpData = this.texData.get(tmpTarget.dataId);\n    return {tensorRef, ...tmpData.texture};\n  }\n\n  bufferSync<R extends Rank, D extends DataType>(t: TensorInfo):\n      TensorBuffer<R, D> {\n    const data = this.readSync(t.dataId);\n    if (t.dtype === 'string') {\n      try {\n        // Decode the bytes into string.\n        const strings = (data as Uint8Array[]).map(d => util.decodeString(d));\n        return buffer(t.shape as ShapeMap[R], t.dtype, strings) as\n            TensorBuffer<R, D>;\n      } catch {\n        throw new Error('Failed to decode encoded string bytes into utf-8');\n      }\n    }\n    return buffer(t.shape as ShapeMap[R], t.dtype, data as TypedArray) as\n        TensorBuffer<R, D>;\n  }\n\n  private checkNumericalProblems(values: BackendValues): void {\n    if (values == null) {\n      return;\n    }\n    for (let i = 0; i < values.length; i++) {\n      const num = values[i] as number;\n      if (!webgl_util.canBeRepresented(num)) {\n        if (env().getBool('WEBGL_RENDER_FLOAT32_CAPABLE')) {\n          throw Error(\n              `The value ${num} cannot be represented with your ` +\n              `current settings. Consider enabling float32 rendering: ` +\n              `'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);\n        }\n        throw Error(`The value ${num} cannot be represented on this device.`);\n      }\n    }\n  }\n\n  private getValuesFromTexture(dataId: DataId): Float32Array {\n    const {shape, dtype, isPacked} = this.texData.get(dataId);\n    const size = util.sizeFromShape(shape);\n    if (env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED')) {\n      const tmpTarget = this.decode(dataId);\n      const tmpData = this.texData.get(tmpTarget.dataId);\n      const vals =\n          this.gpgpu\n              .downloadMatrixFromPackedTexture(\n                  tmpData.texture.texture, ...tex_util.getDenseTexShape(shape))\n              .subarray(0, size);\n\n      this.disposeIntermediateTensorInfo(tmpTarget);\n\n      return vals;\n    }\n\n    const shouldUsePackedProgram =\n        env().getBool('WEBGL_PACK') && isPacked === true;\n    const outputShape =\n        shouldUsePackedProgram ? webgl_util.getShapeAs3D(shape) : shape;\n    const program = shouldUsePackedProgram ?\n        new EncodeFloatPackedProgram(outputShape as [number, number, number]) :\n        new EncodeFloatProgram(outputShape);\n    const output = this.runWebGLProgram(\n        program, [{shape: outputShape, dtype, dataId}], 'float32');\n    const tmpData = this.texData.get(output.dataId);\n    const vals = this.gpgpu\n                     .downloadByteEncodedFloatMatrixFromOutputTexture(\n                         tmpData.texture.texture, tmpData.texShape[0],\n                         tmpData.texShape[1])\n                     .subarray(0, size);\n    this.disposeIntermediateTensorInfo(output);\n\n    return vals;\n  }\n\n  override timerAvailable(): boolean {\n    return env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0;\n  }\n\n  override time(f: () => void): Promise<WebGLTimingInfo> {\n    const oldActiveTimers = this.activeTimers;\n    const newActiveTimers: TimerNode[] = [];\n\n    let outerMostTime = false;\n    if (this.programTimersStack == null) {\n      this.programTimersStack = newActiveTimers;\n      outerMostTime = true;\n    } else {\n      this.activeTimers.push(newActiveTimers);\n    }\n    this.activeTimers = newActiveTimers;\n\n    f();\n\n    // needing to split these up because util.flatten only accepts certain types\n    const flattenedActiveTimerQueries =\n        util.flatten(this.activeTimers.map((d: KernelInfo) => d.query))\n            .filter(d => d != null);\n    const flattenedActiveTimerNames =\n        util.flatten(this.activeTimers.map((d: KernelInfo) => d.name))\n            .filter(d => d != null);\n\n    this.activeTimers = oldActiveTimers;\n\n    if (outerMostTime) {\n      this.programTimersStack = null;\n    }\n\n    const res: WebGLTimingInfo = {\n      uploadWaitMs: this.uploadWaitMs,\n      downloadWaitMs: this.downloadWaitMs,\n      kernelMs: null,\n      wallMs: null  // will be filled by the engine\n    };\n\n    return (async () => {\n      if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') >\n          0) {\n        const kernelMs = await Promise.all(flattenedActiveTimerQueries);\n\n        res['kernelMs'] = util.sum(kernelMs);\n        res['getExtraProfileInfo'] = () =>\n            kernelMs\n                .map((d, i) => ({name: flattenedActiveTimerNames[i], ms: d}))\n                .map(d => `${d.name}: ${d.ms}`)\n                .join(', ');\n      } else {\n        res['kernelMs'] = {\n          error: 'WebGL query timers are not supported in this environment.'\n        };\n      }\n\n      this.uploadWaitMs = 0;\n      this.downloadWaitMs = 0;\n      return res;\n    })();\n  }\n  override memory(): WebGLMemoryInfo {\n    return {\n      unreliable: false,\n      numBytesInGPU: this.numBytesInGPU,\n      numBytesInGPUAllocated: this.textureManager.numBytesAllocated,\n      numBytesInGPUFree: this.textureManager.numBytesFree\n    } as WebGLMemoryInfo;\n  }\n\n  private startTimer(): WebGLQuery|CPUTimerQuery {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      return this.gpgpu.beginQuery();\n    }\n    return {startMs: util.now(), endMs: null};\n  }\n\n  private endTimer(query: WebGLQuery|CPUTimerQuery): WebGLQuery|CPUTimerQuery {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      this.gpgpu.endQuery();\n      return query;\n    }\n    (query as CPUTimerQuery).endMs = util.now();\n    return query;\n  }\n\n  private async getQueryTime(query: WebGLQuery|CPUTimerQuery): Promise<number> {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      return this.gpgpu.waitForQueryAndGetTime(query as WebGLQuery);\n    }\n    const timerQuery = query as CPUTimerQuery;\n    return timerQuery.endMs - timerQuery.startMs;\n  }\n\n  private pendingDeletes = 0;\n\n  /**\n   * Decrease the RefCount on the dataId and dispose the memory if the dataId\n   * has 0 refCount. If there are pending read on the data, the disposal would\n   * added to the pending delete queue. Return true if the dataId is removed\n   * from backend or the backend does not contain the dataId, false if the\n   * dataId is not removed. Memory may or may not be released even when dataId\n   * is removed, which also depends on dataRefCount, see `releaseGPU`.\n   * @param dataId\n   * @oaram force Optional, remove the data regardless of refCount\n   */\n  override disposeData(dataId: DataId, force = false): boolean {\n    if (this.pendingDisposal.has(dataId)) {\n      return false;\n    }\n\n    // No-op if already disposed.\n    if (!this.texData.has(dataId)) {\n      return true;\n    }\n\n    // if force flag is set, change refCount to 0, this would ensure disposal\n    // when added to the pendingDisposal queue. Memory may or may not be\n    // released, which also depends on dataRefCount, see `releaseGPU`.\n    if (force) {\n      this.texData.get(dataId).refCount = 0;\n    } else {\n      this.texData.get(dataId).refCount--;\n    }\n\n    if (!force && this.texData.get(dataId).refCount > 0) {\n      return false;\n    }\n\n    if (this.pendingRead.has(dataId)) {\n      this.pendingDisposal.add(dataId);\n      this.pendingDeletes++;\n      return false;\n    }\n\n    this.releaseGPUData(dataId);\n    const {complexTensorInfos} = this.texData.get(dataId);\n    if (complexTensorInfos != null) {\n      this.disposeData(complexTensorInfos.real.dataId, force);\n      this.disposeData(complexTensorInfos.imag.dataId, force);\n    }\n\n    this.texData.delete(dataId);\n\n    return true;\n  }\n\n  private releaseGPUData(dataId: DataId): void {\n    const {texture, dtype, texShape, usage, isPacked, slice} =\n        this.texData.get(dataId);\n    const key = slice && slice.origDataId || dataId;\n    const refCount = this.dataRefCount.get(key);\n\n    if (refCount > 1) {\n      this.dataRefCount.set(key, refCount - 1);\n    } else {\n      this.dataRefCount.delete(key);\n      if (texture != null) {\n        this.numBytesInGPU -= this.computeBytes(texShape, dtype);\n        this.textureManager.releaseTexture(texture, texShape, usage, isPacked);\n      }\n    }\n\n    const texData = this.texData.get(dataId);\n    texData.texture = null;\n    texData.texShape = null;\n    texData.isPacked = false;\n    texData.slice = null;\n  }\n\n  getTexture(dataId: DataId): WebGLTexture {\n    this.uploadToGPU(dataId);\n    return this.texData.get(dataId).texture.texture;\n  }\n\n  /**\n   * Returns internal information for the specific data bucket. Used in unit\n   * tests.\n   */\n  getDataInfo(dataId: DataId): TextureData {\n    return this.texData.get(dataId);\n  }\n\n  /*\n  Tests whether all the inputs to an op are small and on the CPU. This heuristic\n  determines when it would be faster to execute a kernel on the CPU. WebGL\n  kernels opt into running this check and forwarding when appropriate.\n  TODO(https://github.com/tensorflow/tfjs/issues/872): Develop a more\n  sustainable strategy for optimizing backend execution of ops.\n   */\n  shouldExecuteOnCPU(\n      inputs: TensorInfo[],\n      sizeThreshold = CPU_HANDOFF_SIZE_THRESHOLD): boolean {\n    return env().getBool('WEBGL_CPU_FORWARD') &&\n        inputs.every(\n            input => this.texData.get(input.dataId).texture == null &&\n                util.sizeFromShape(input.shape) < sizeThreshold);\n  }\n\n  getGPGPUContext(): GPGPUContext {\n    return this.gpgpu;\n  }\n\n  where(condition: Tensor): Tensor2D {\n    backend_util.warn(\n        'tf.where() in webgl locks the UI thread. ' +\n        'Call tf.whereAsync() instead');\n    const condVals = condition.dataSync();\n    return whereImpl(condition.shape, condVals);\n  }\n\n  private packedUnaryOp(x: TensorInfo, op: string, dtype: DataType) {\n    const program = new UnaryOpPackedProgram(x.shape, op);\n    const outInfo = this.compileAndRun(program, [x], dtype);\n    return engine().makeTensorFromTensorInfo(outInfo);\n  }\n\n  // TODO(msoulanille) remove this once the backend has been modularized\n  // a copy is needed here to break a circular dependency.\n  // Also remove the op from unary_op.\n  abs<T extends Tensor>(x: T): T {\n    // TODO: handle cases when x is complex.\n    if (this.shouldExecuteOnCPU([x]) && x.dtype !== 'complex64') {\n      const outValues =\n          simpleAbsImplCPU(this.texData.get(x.dataId).values as TypedArray);\n      return this.makeOutput(x.shape, x.dtype, outValues);\n    }\n\n    if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n      return this.packedUnaryOp(x, unary_op.ABS, x.dtype) as T;\n    }\n\n    const program = new UnaryOpProgram(x.shape, unary_op.ABS);\n    const outInfo = this.compileAndRun(program, [x]);\n    return engine().makeTensorFromTensorInfo(outInfo) as T;\n  }\n\n  makeTensorInfo(\n      shape: number[], dtype: DataType,\n      values?: BackendValues|string[]): TensorInfo {\n    let dataId;\n    if (dtype === 'string' && values != null && values.length > 0 &&\n        util.isString(values[0])) {\n      const encodedValues =\n          (values as unknown as string[]).map(d => util.encodeString(d));\n\n      dataId = this.write(encodedValues, shape, dtype);\n    } else {\n      dataId = this.write(values as TypedArray, shape, dtype);\n    }\n\n    this.texData.get(dataId).usage = null;\n    return {dataId, shape, dtype};\n  }\n\n  private makeOutput<T extends Tensor>(\n      shape: number[], dtype: DataType, values?: BackendValues): T {\n    return engine().makeTensorFromTensorInfo(\n               this.makeTensorInfo(shape, dtype, values), this) as T;\n  }\n\n  unpackTensor(input: TensorInfo): TensorInfo {\n    const program = new UnpackProgram(input.shape);\n    return this.runWebGLProgram(program, [input], input.dtype);\n  }\n\n  packTensor(input: TensorInfo): TensorInfo {\n    const program = new PackProgram(input.shape);\n    const preventEagerUnpackingOutput = true;\n    return this.runWebGLProgram(\n        program, [input], input.dtype, null /* customUniformValues */,\n        preventEagerUnpackingOutput);\n  }\n\n  private packedReshape(input: TensorInfo, afterShape: number[]): TensorInfo {\n    const input3DShape = [\n      webgl_util.getBatchDim(input.shape),\n      ...webgl_util.getRowsCols(input.shape)\n    ] as [number, number, number];\n    const input3D: TensorInfo = {\n      dtype: input.dtype,\n      shape: input3DShape,\n      dataId: input.dataId\n    };\n    const afterShapeAs3D = [\n      webgl_util.getBatchDim(afterShape), ...webgl_util.getRowsCols(afterShape)\n    ] as [number, number, number];\n\n    const program = new ReshapePackedProgram(afterShapeAs3D, input3DShape);\n    const preventEagerUnpackingOfOutput = true;\n    const customValues = [input3DShape];\n    const output = this.runWebGLProgram(\n        program, [input3D], input.dtype, customValues,\n        preventEagerUnpackingOfOutput);\n    return {dataId: output.dataId, shape: afterShape, dtype: output.dtype};\n  }\n\n  private decode(dataId: DataId, customTexShape?: [number, number]):\n      TensorInfo {\n    const texData = this.texData.get(dataId);\n    const {isPacked, shape, dtype} = texData;\n    if (customTexShape != null) {\n      const size = util.sizeFromShape(shape);\n      const texSize = customTexShape[0] * customTexShape[1] * 4;\n      util.assert(\n          size <= texSize,\n          () => 'customTexShape is too small. ' +\n              'Row * Column * 4 should be equal or larger than the ' +\n              'size of the tensor data.');\n    }\n    const shapeAs3D =\n        webgl_util.getShapeAs3D(shape) as [number, number, number];\n    let program;\n    if (isPacked) {\n      program = new DecodeMatrixPackedProgram(shapeAs3D);\n    } else {\n      program = new DecodeMatrixProgram(shapeAs3D);\n    }\n    const preventEagerUnpackingOfOutput = true;\n    const customValues =\n        [customTexShape != null ? customTexShape :\n                                  tex_util.getDenseTexShape(shapeAs3D)];\n    const out = this.runWebGLProgram(\n        program, [{shape: shapeAs3D, dtype, dataId}], dtype, customValues,\n        preventEagerUnpackingOfOutput, customTexShape);\n    return {dtype, shape, dataId: out.dataId};\n  }\n\n  runWebGLProgram(\n      program: GPGPUProgram, inputs: TensorInfo[], outputDtype: DataType,\n      customUniformValues?: number[][], preventEagerUnpackingOfOutput = false,\n      customTexShape?: [number, number]): TensorInfo {\n    const output = this.makeTensorInfo(program.outputShape, outputDtype);\n    const outData = this.texData.get(output.dataId);\n    if (program.packedOutput) {\n      outData.isPacked = true;\n    }\n    if (program.outPackingScheme === tex_util.PackingScheme.DENSE) {\n      const texelShape = customTexShape != null ?\n          customTexShape :\n          tex_util.getDenseTexShape(program.outputShape);\n      // For a densely packed output, we explicitly set texShape\n      // so it doesn't get assigned later according to our typical packing\n      // scheme wherein a single texel can only contain values from adjacent\n      // rows/cols.\n      outData.texShape = texelShape.map(d => d * 2) as [number, number];\n    }\n    if (program.outTexUsage != null) {\n      outData.usage = program.outTexUsage;\n    }\n\n    if (util.sizeFromShape(output.shape) === 0) {\n      // Short-circuit the computation since the result is empty (has 0 in its\n      // shape).\n      outData.values =\n          util.getTypedArrayFromDType(output.dtype as 'float32', 0);\n      return output;\n    }\n\n    const dataToDispose: TensorInfo[] = [];\n    const inputsData: TensorData[] = inputs.map(input => {\n      if (input.dtype === 'complex64') {\n        throw new Error(\n            `GPGPUProgram does not support complex64 input. For complex64 ` +\n            `dtypes, please separate the program into real and imaginary ` +\n            `parts.`);\n      }\n\n      let texData = this.texData.get(input.dataId);\n\n      if (texData.texture == null) {\n        if (!program.packedInputs &&\n            util.sizeFromShape(input.shape) <=\n                env().getNumber('WEBGL_SIZE_UPLOAD_UNIFORM')) {\n          // Upload small tensors that live on the CPU as uniforms, not as\n          // textures. Do this only when the environment supports 32bit floats\n          // due to problems when comparing 16bit floats with 32bit floats.\n          // TODO(https://github.com/tensorflow/tfjs/issues/821): Make it\n          // possible for packed shaders to sample from uniforms.\n          return {\n            shape: input.shape,\n            texData: null,\n            isUniform: true,\n            uniformValues: texData.values as TypedArray\n          };\n        }\n\n        // This ensures that if a packed program's inputs have not yet been\n        // uploaded to the GPU, they get uploaded as packed right off the bat.\n        if (program.packedInputs) {\n          texData.isPacked = true;\n          texData.shape = input.shape;\n        }\n      }\n\n      this.uploadToGPU(input.dataId);\n      if (!!texData.isPacked !== !!program.packedInputs) {\n        input = texData.isPacked ? this.unpackTensor(input) :\n                                   this.packTensor(input);\n        dataToDispose.push(input);\n        texData = this.texData.get(input.dataId);\n      } else if (\n          texData.isPacked &&\n          !webgl_util.isReshapeFree(texData.shape, input.shape)) {\n        // This is a special case where a texture exists for a tensor\n        // but the shapes are incompatible (due to packing constraints) because\n        // the tensor did not have a chance to go through the packed reshape\n        // shader. This only happens when we reshape the *same* tensor to form\n        // *distinct* inputs to an op, e.g. dotting a vector with itself. This\n        // case will disappear once packed uploading is the default.\n\n        const savedInput = input;\n        const targetShape = input.shape;\n\n        input.shape = texData.shape;\n        input = this.packedReshape(input as Tensor, targetShape);\n        dataToDispose.push(input);\n        texData = this.texData.get(input.dataId);\n\n        savedInput.shape = targetShape;\n      }\n\n      return {shape: input.shape, texData, isUniform: false};\n    });\n\n    this.uploadToGPU(output.dataId);\n    const outputData:\n        TensorData = {shape: output.shape, texData: outData, isUniform: false};\n    const key = gpgpu_math.makeShaderKey(program, inputsData, outputData);\n    const binary = this.getAndSaveBinary(key, () => {\n      return gpgpu_math.compileProgram(\n          this.gpgpu, program, inputsData, outputData);\n    });\n    const shouldTimeProgram = this.activeTimers != null;\n    let query: WebGLQuery|CPUTimerQuery;\n    if (shouldTimeProgram) {\n      query = this.startTimer();\n    }\n\n    if (!env().get('ENGINE_COMPILE_ONLY')) {\n      gpgpu_math.runProgram(\n          this.gpgpu, binary, inputsData, outputData, customUniformValues);\n    }\n\n    dataToDispose.forEach(info => this.disposeIntermediateTensorInfo(info));\n\n    if (shouldTimeProgram) {\n      query = this.endTimer(query);\n      this.activeTimers.push(\n          {name: program.constructor.name, query: this.getQueryTime(query)});\n    }\n\n    const glFlushThreshold = env().get('WEBGL_FLUSH_THRESHOLD');\n    // Manually GL flush requested\n    if (glFlushThreshold > 0) {\n      const time = util.now();\n      if ((time - this.lastGlFlushTime) > glFlushThreshold) {\n        this.gpgpu.gl.flush();\n        this.lastGlFlushTime = time;\n      }\n    }\n\n    if (!env().getBool('WEBGL_LAZILY_UNPACK') && outData.isPacked &&\n        preventEagerUnpackingOfOutput === false) {\n      const unpacked = this.unpackTensor(output);\n      this.disposeIntermediateTensorInfo(output);\n      return unpacked;\n    }\n    return output;\n  }\n\n  compileAndRun(\n      program: GPGPUProgram, inputs: TensorInfo[], outputDtype?: DataType,\n      customUniformValues?: number[][],\n      preventEagerUnpackingOfOutput = false): TensorInfo {\n    outputDtype = outputDtype || inputs[0].dtype;\n    const outInfo = this.runWebGLProgram(\n        program, inputs, outputDtype, customUniformValues,\n        preventEagerUnpackingOfOutput);\n    return outInfo;\n  }\n\n  private getAndSaveBinary(key: string, getBinary: () => GPGPUBinary):\n      GPGPUBinary {\n    if (!(key in this.binaryCache)) {\n      this.binaryCache[key] = getBinary();\n    }\n    return this.binaryCache[key];\n  }\n\n  getTextureManager(): TextureManager {\n    return this.textureManager;\n  }\n\n  private disposed = false;\n\n  override dispose() {\n    if (this.disposed) {\n      return;\n    }\n    // Avoid disposing the compiled webgl programs during unit testing because\n    // it slows down test execution.\n    if (!env().getBool('IS_TEST')) {\n      const allKeys = Object.keys(this.binaryCache);\n      allKeys.forEach(key => {\n        this.gpgpu.deleteProgram(this.binaryCache[key].webGLProgram);\n        delete this.binaryCache[key];\n      });\n    }\n    this.textureManager.dispose();\n    if (this.canvas != null &&\n        (typeof (HTMLCanvasElement) !== 'undefined' &&\n         this.canvas instanceof HTMLCanvasElement)) {\n      this.canvas.remove();\n    } else {\n      this.canvas = null;\n    }\n    if (this.gpgpuCreatedLocally) {\n      this.gpgpu.program = null;\n      this.gpgpu.dispose();\n    }\n    this.disposed = true;\n  }\n\n  override floatPrecision(): 16|32 {\n    if (this.floatPrecisionValue == null) {\n      this.floatPrecisionValue = tidy(() => {\n        if (!env().get('WEBGL_RENDER_FLOAT32_ENABLED')) {\n          // Momentarily switching DEBUG flag to false so we don't throw an\n          // error trying to upload a small value.\n          const debugFlag = env().getBool('DEBUG');\n          env().set('DEBUG', false);\n          const underflowCheckValue = this.abs(scalar(1e-8)).dataSync()[0];\n          env().set('DEBUG', debugFlag);\n\n          if (underflowCheckValue > 0) {\n            return 32;\n          }\n        }\n        return 16;\n      });\n    }\n    return this.floatPrecisionValue;\n  }\n\n  /** Returns the smallest representable number.  */\n  override epsilon(): number {\n    return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;\n  }\n\n  uploadToGPU(dataId: DataId): void {\n    const texData = this.texData.get(dataId);\n    const {shape, dtype, values, texture, usage, isPacked} = texData;\n\n    if (texture != null) {\n      // Array is already on GPU. No-op.\n      return;\n    }\n    const shouldTimeProgram = this.activeTimers != null;\n    let start: number;\n    if (shouldTimeProgram) {\n      start = util.now();\n    }\n\n    let texShape = texData.texShape;\n    if (texShape == null) {\n      // This texShape may not be the final texture shape. For packed or dense\n      // textures, the texShape will be changed when textures are created.\n      texShape = webgl_util.getTextureShapeFromLogicalShape(shape, isPacked);\n      texData.texShape = texShape;\n    }\n\n    if (values != null) {\n      const shapeAs3D = webgl_util.getShapeAs3D(shape);\n\n      let program;\n      let width = texShape[1], height = texShape[0];\n      const isByteArray =\n          values instanceof Uint8Array || values instanceof Uint8ClampedArray;\n\n      // texture for float array is PhysicalTextureType.PACKED_2X2_FLOAT32, we\n      // need to make sure the upload uses the same packed size\n      if (isPacked || !isByteArray) {\n        [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(\n            texShape[0], texShape[1]);\n      }\n\n      if (isPacked) {\n        program = new EncodeMatrixPackedProgram(shapeAs3D, isByteArray);\n      } else {\n        program = new EncodeMatrixProgram(shapeAs3D, isByteArray);\n      }\n\n      // TexShape for float array needs to be the original shape, which byte\n      // array needs to be packed size. This allow the data upload shape to be\n      // matched with texture creation logic.\n      const tempDenseInputTexShape: [number, number] =\n          isByteArray ? [height, width] : texShape;\n      const tempDenseInputHandle =\n          this.makeTensorInfo(tempDenseInputTexShape, dtype);\n      const tempDenseInputTexData =\n          this.texData.get(tempDenseInputHandle.dataId);\n      if (isByteArray) {\n        tempDenseInputTexData.usage = TextureUsage.PIXELS;\n      } else {\n        tempDenseInputTexData.usage = TextureUsage.UPLOAD;\n      }\n      tempDenseInputTexData.texShape = tempDenseInputTexShape;\n      this.gpgpu.uploadDenseMatrixToTexture(\n          this.getTexture(tempDenseInputHandle.dataId), width, height,\n          values as TypedArray);\n\n      const customValues = [[height, width]];\n      // We want the output to remain packed regardless of the value of\n      // WEBGL_PACK.\n      const preventEagerUnpacking = true;\n      const encodedOutputTarget = this.runWebGLProgram(\n          program, [tempDenseInputHandle], dtype, customValues,\n          preventEagerUnpacking);\n\n      // Have the original texture assume the identity of the encoded output.\n      const outputTexData = this.texData.get(encodedOutputTarget.dataId);\n      texData.texShape = outputTexData.texShape;\n      texData.isPacked = outputTexData.isPacked;\n      texData.usage = outputTexData.usage;\n\n      if (!env().get('ENGINE_COMPILE_ONLY')) {\n        texData.texture = outputTexData.texture;\n        // Once uploaded, don't store the values on cpu.\n        texData.values = null;\n        this.texData.delete(encodedOutputTarget.dataId);\n      } else {\n        this.disposeData(encodedOutputTarget.dataId);\n      }\n\n      this.disposeIntermediateTensorInfo(tempDenseInputHandle);\n\n      if (shouldTimeProgram) {\n        this.uploadWaitMs += util.now() - start;\n      }\n    } else {\n      const newTexture = this.acquireTexture(texShape, usage, dtype, isPacked);\n      texData.texture = newTexture;\n    }\n  }\n\n  private convertAndCacheOnCPU(dataId: DataId, float32Values?: Float32Array):\n      TypedArray {\n    const texData = this.texData.get(dataId);\n    const {dtype} = texData;\n\n    if (float32Values != null) {\n      texData.values = float32ToTypedArray(float32Values, dtype as 'float32');\n    }\n    return texData.values as TypedArray;\n  }\n\n  private acquireTexture(\n      texShape: [number, number], texType: TextureUsage, dtype: DataType,\n      isPacked: boolean): Texture {\n    this.numBytesInGPU += this.computeBytes(texShape, dtype);\n    if (!this.warnedAboutMemory &&\n        this.numBytesInGPU > this.numMBBeforeWarning * 1024 * 1024) {\n      const mb = (this.numBytesInGPU / 1024 / 1024).toFixed(2);\n      this.warnedAboutMemory = true;\n      console.warn(\n          `High memory usage in GPU: ${mb} MB, ` +\n          `most likely due to a memory leak`);\n    }\n    return this.textureManager.acquireTexture(texShape, texType, isPacked);\n  }\n\n  private computeBytes(shape: [number, number], dtype: DataType) {\n    return shape[0] * shape[1] * util.bytesPerElement(dtype);\n  }\n\n  checkCompileCompletion() {\n    for (const [, binary] of Object.entries(this.binaryCache)) {\n      this.checkCompletion_(binary);\n    }\n  }\n\n  async checkCompileCompletionAsync(): Promise<boolean[]> {\n    const ps = [];\n    if (this.gpgpu.parallelCompilationExtension) {\n      for (const [, binary] of Object.entries(this.binaryCache)) {\n        ps.push(this.checkCompletionAsync_(binary));\n      }\n      return Promise.all(ps);\n    } else {\n      for (const [, binary] of Object.entries(this.binaryCache)) {\n        const p: Promise<boolean> = new Promise((resolve) => {\n          try {\n            this.checkCompletion_(binary);\n            resolve(true);\n          } catch (error) {\n            throw error;\n          }\n        });\n        ps.push(p);\n      }\n      return Promise.all(ps);\n    }\n  }\n\n  private async checkCompletionAsync_(binary: GPGPUBinary): Promise<boolean> {\n    if (this.gpgpu.gl.getProgramParameter(\n            binary.webGLProgram,\n            this.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR)) {\n      return this.checkCompletion_(binary);\n    } else {\n      await nextFrame();\n      return this.checkCompletionAsync_(binary);\n    }\n  }\n\n  private checkCompletion_(binary: GPGPUBinary): boolean {\n    if (this.gpgpu.gl.getProgramParameter(\n            binary.webGLProgram, this.gpgpu.gl.LINK_STATUS) === false) {\n      console.log(this.gpgpu.gl.getProgramInfoLog(binary.webGLProgram));\n      if (this.gpgpu.gl.getShaderParameter(\n              binary.fragmentShader, this.gpgpu.gl.COMPILE_STATUS) === false) {\n        webgl_util.logShaderSourceAndInfoLog(\n            binary.source,\n            this.gpgpu.gl.getShaderInfoLog(binary.fragmentShader));\n        throw new Error('Failed to compile fragment shader.');\n      }\n      throw new Error('Failed to link vertex and fragment shaders.');\n    }\n    return true;\n  }\n\n  getUniformLocations() {\n    for (const [, binary] of Object.entries(this.binaryCache)) {\n      const {\n        uniformLocations,\n        customUniformLocations,\n        infLoc,\n        nanLoc,\n        inShapesLocations,\n        inTexShapesLocations,\n        outShapeLocation,\n        outShapeStridesLocation,\n        outTexShapeLocation\n      } = getUniformLocations(this.gpgpu, binary.program, binary.webGLProgram);\n      binary.uniformLocations = uniformLocations;\n      binary.customUniformLocations = customUniformLocations;\n      binary.infLoc = infLoc;\n      binary.nanLoc = nanLoc;\n      binary.inShapesLocations = inShapesLocations;\n      binary.inTexShapesLocations = inTexShapesLocations;\n      binary.outShapeLocation = outShapeLocation;\n      binary.outShapeStridesLocation = outShapeStridesLocation;\n      binary.outTexShapeLocation = outTexShapeLocation;\n    }\n  }\n\n  /**\n   * Create a TF.js tensor out of an existing WebGL texture. A new texture will\n   * be created.\n   */\n  override createTensorFromGPUData(\n      values: WebGLData, shape: number[], dtype: DataType): Tensor {\n    values.channels = values.channels || 'RGBA';\n    const {texture, height, width, channels} = values;\n    const backend = engine().backend as MathBackendWebGL;\n\n    // Have to throw an error, otherwise WebGL just warns and returns wrong\n    // values.\n    if (!backend.gpgpu.gl.isTexture(texture)) {\n      throw new Error(\n          `The texture is invalid. Also, please make sure the texture and ` +\n          `the TFJS WebGL backend are using the same canvas. If you want to ` +\n          `use your own custom canvas, you have to create and use the custom ` +\n          `TFJS WebGL backend created from the canvas through ` +\n          `'new tf.MathBackendWebGL(customCanvas)'.`);\n    }\n\n    const dataId =\n        backend.writeTexture(texture, shape, dtype, height, width, channels);\n    return engine().makeTensorFromDataId(dataId, shape, dtype, backend);\n  }\n}\n\nfunction float32ToTypedArray<D extends NumericDataType>(\n    a: Float32Array, dtype: D): tf.DataTypeMap[D] {\n  if (dtype === 'float32' || dtype === 'complex64') {\n    return a as tf.DataTypeMap[D];\n  } else if (dtype === 'int32' || dtype === 'bool') {\n    const result = (dtype === 'int32') ? new Int32Array(a.length) :\n                                         new Uint8Array(a.length);\n    for (let i = 0; i < result.length; ++i) {\n      result[i] = Math.round(a[i]);\n    }\n    return result as tf.DataTypeMap[D];\n  } else {\n    throw new Error(`Unknown dtype ${dtype}`);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// base.ts is the webgl backend without auto kernel registration.\n\nimport {device_util, registerBackend} from '@tensorflow/tfjs-core';\nimport {MathBackendWebGL} from './backend_webgl';\nexport {version as version_webgl} from './version';\n\nif (device_util.isBrowser()) {\n  registerBackend('webgl', () => new MathBackendWebGL(), 2 /* priority */);\n}\n\n// Export webgl utilities\nexport * from './webgl';\n\n// Export forceHalfFlost under webgl namespace for the union bundle.\nimport {forceHalfFloat} from './webgl';\nexport const webgl = {forceHalfFloat};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\n\nexport const CHECK_NAN_SNIPPET = `\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n`;\n\nexport const SQUARED_DIFFERENCE = 'return (a - b) * (a - b);';\nexport class BinaryOpProgram implements GPGPUProgram {\n  variableNames = ['A', 'B'];\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms: boolean;\n\n  constructor(op: string, aShape: number[], bShape: number[]) {\n    this.outputShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    this.userCode = `\n      float binaryOperation(float a, float b) {\n        ${op}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport const CHECK_NAN_SNIPPET_PACKED = `\n  result.r = isNaN.r ? NAN : result.r;\n  result.g = isNaN.g ? NAN : result.g;\n  result.b = isNaN.b ? NAN : result.b;\n  result.a = isNaN.a ? NAN : result.a;\n`;\n\nexport const ELU_DER = `\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n`;\n\nexport const NOT_EQUAL = `\n  return vec4(notEqual(a, b));\n`;\n\nexport class BinaryOpPackedProgram implements GPGPUProgram {\n  variableNames = ['A', 'B'];\n  outputShape: number[];\n  userCode: string;\n  supportsBroadcasting = true;\n  packedInputs = true;\n  packedOutput = true;\n  enableShapeUniforms: boolean;\n\n  constructor(\n      op: string, aShape: number[], bShape: number[],\n      checkOutOfBounds = false) {\n    this.outputShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n    const rank = this.outputShape.length;\n    this.enableShapeUniforms = useShapeUniforms(rank);\n    let checkOutOfBoundsString = '';\n    if (checkOutOfBounds) {\n      if (rank === 0 || util.sizeFromShape(this.outputShape) === 1) {\n        checkOutOfBoundsString = `\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        `;\n      } else {\n        const dtype = getCoordsDataType(rank);\n        checkOutOfBoundsString = `\n          ${dtype} coords = getOutputCoords();\n        `;\n        if (rank === 1) {\n          if (this.enableShapeUniforms) {\n            checkOutOfBoundsString += `\n            result.y = (coords + 1) >= outShape ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;\n          } else {\n            checkOutOfBoundsString += `\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;\n          }\n        } else {\n          const channels = getChannels('coords', rank);\n          if (this.enableShapeUniforms) {\n            checkOutOfBoundsString += `\n            bool nextRowOutOfBounds =\n              (${channels[rank - 2]} + 1) >= outShape[${rank} - 2];\n            bool nextColOutOfBounds =\n              (${channels[rank - 1]} + 1) >= outShape[${rank} - 1];\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `;\n          } else {\n            checkOutOfBoundsString += `\n            bool nextRowOutOfBounds =\n              (${channels[rank - 2]} + 1) >= ${this.outputShape[rank - 2]};\n            bool nextColOutOfBounds =\n              (${channels[rank - 1]} + 1) >= ${this.outputShape[rank - 1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `;\n          }\n        }\n      }\n    }\n\n    this.userCode = `\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${op}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${checkOutOfBoundsString}\n\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Identity, IdentityInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nexport function identity(\n    args: {inputs: IdentityInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  backend.incRef(x.dataId);\n\n  return {dataId: x.dataId, shape: x.shape, dtype: x.dtype};\n}\n\nexport const identityConfig: KernelConfig = {\n  kernelName: Identity,\n  backendName: 'webgl',\n  kernelFunc: identity as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Complex, ComplexInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {identity} from './Identity';\n\n/**\n * In WebGL data is stored in GPU textures which can't be efficiently copied, so\n * complex tensors share data with their real and imaginary components. Complex\n * tensors' reference to the components is tracked by refCount on the individual\n * component. The refCounts are increased by the identity call.\n *\n * When a complex tensor is disposed, it will reduce the refCount on the\n * components by calling disposeData on each.\n */\nexport function complex(\n    args: {inputs: ComplexInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {real, imag} = inputs;\n\n  const complexInfo = backend.makeTensorInfo(real.shape, 'complex64');\n  const complex = backend.texData.get(complexInfo.dataId);\n\n  const realTensorInfo = identity({inputs: {x: real}, backend});\n\n  const imagTensorInfo = identity({inputs: {x: imag}, backend});\n\n  complex.complexTensorInfos = {real: realTensorInfo, imag: imagTensorInfo};\n\n  return complexInfo;\n}\n\nexport const complexConfig: KernelConfig = {\n  kernelName: Complex,\n  backendName: 'webgl',\n  kernelFunc: complex as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, LeakyRelu, LeakyReluAttrs, LeakyReluInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {BinaryOpProgram} from '../binaryop_gpu';\nimport {BinaryOpPackedProgram} from '../binaryop_packed_gpu';\n\nexport const LEAKYRELU = `return (a < 0.) ? b * a : a;`;\nexport const LEAKYRELU_PACKED = `\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n`;\n\nexport function leakyRelu(args: {\n  inputs: LeakyReluInputs,\n  backend: MathBackendWebGL,\n  attrs: LeakyReluAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {alpha} = attrs;\n\n  const $alpha = backend.makeTensorInfo(\n      [], 'float32',\n      util.createScalarValue(alpha as unknown as 'float32', 'float32'));\n\n  const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n      new BinaryOpPackedProgram(LEAKYRELU_PACKED, x.shape, $alpha.shape) :\n      new BinaryOpProgram(LEAKYRELU, x.shape, $alpha.shape);\n  const result = backend.runWebGLProgram(program, [x, $alpha], 'float32');\n\n  backend.disposeIntermediateTensorInfo($alpha);\n\n  return result;\n}\n\nexport const leakyReluConfig: KernelConfig = {\n  kernelName: LeakyRelu,\n  backendName: 'webgl',\n  kernelFunc: leakyRelu as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, Prelu, PreluInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {BinaryOpProgram} from '../binaryop_gpu';\nimport {BinaryOpPackedProgram} from '../binaryop_packed_gpu';\n\nexport const PRELU = `return (a < 0.) ? b * a : a;`;\nexport const PRELU_PACKED = `\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n`;\n\nexport function prelu(args: {inputs: PreluInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x, alpha} = inputs;\n\n  const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n      new BinaryOpPackedProgram(PRELU_PACKED, x.shape, alpha.shape) :\n      new BinaryOpProgram(PRELU, x.shape, alpha.shape);\n  return backend.runWebGLProgram(program, [x, alpha], 'float32');\n}\n\nexport const preluConfig: KernelConfig = {\n  kernelName: Prelu,\n  backendName: 'webgl',\n  kernelFunc: prelu as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BinaryInputs, DataType, env, KernelFunc, TypedArray, UnaryInputs, upcastType} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {BinaryOpProgram} from '../binaryop_gpu';\nimport {BinaryOpPackedProgram} from '../binaryop_packed_gpu';\nimport {complex} from '../kernels/Complex';\nimport {LEAKYRELU, LEAKYRELU_PACKED} from '../kernels/LeakyRelu';\nimport {PRELU, PRELU_PACKED} from '../kernels/Prelu';\nimport * as unary_op from '../unaryop_gpu';\nimport {UnaryOpProgram} from '../unaryop_gpu';\nimport * as unary_packed_op from '../unaryop_packed_gpu';\nimport {UnaryOpPackedProgram} from '../unaryop_packed_gpu';\n\nimport {SimpleBinaryKernelImplCPU, SimpleUnaryKernelImplCPU} from './shared';\n\nexport const CHECK_NAN_SNIPPET_UNARY = `if (isnan(x)) return x;`;\n\ntype UnaryKernelFuncConfig = {\n  opSnippet: string,\n  packedOpSnippet?: string,\n  cpuKernelImpl?: SimpleUnaryKernelImplCPU,\n  dtype?: DataType\n};\n\n/**\n * Template that creates a `KernelFunc` for unary ops.\n * @param opSnippet Op snippet to create `UnaryOpProgram`.\n * @param packedOpSnippet Op snippet to create `UnaryOpPackedProgram`.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function unaryKernelFunc(\n    {opSnippet, packedOpSnippet, cpuKernelImpl, dtype}: UnaryKernelFuncConfig):\n    KernelFunc {\n  return ({inputs, backend}) => {\n    const {x} = inputs as UnaryInputs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    const $dtype = dtype || x.dtype;\n    if (webglBackend.shouldExecuteOnCPU([x]) && cpuKernelImpl != null) {\n      const xData = webglBackend.texData.get(x.dataId);\n      const outValues = cpuKernelImpl(xData.values as TypedArray, $dtype);\n      return webglBackend.makeTensorInfo(x.shape, $dtype, outValues);\n    }\n\n    const shouldUsePackedProgram =\n        env().getBool('WEBGL_PACK_UNARY_OPERATIONS') && packedOpSnippet != null;\n    let program: UnaryOpProgram|UnaryOpPackedProgram;\n    if (shouldUsePackedProgram) {\n      program = new UnaryOpPackedProgram(x.shape, packedOpSnippet);\n    } else {\n      program = new UnaryOpProgram(x.shape, opSnippet);\n    }\n\n    return webglBackend.runWebGLProgram(program, [x], $dtype);\n  };\n}\n\ntype BinaryKernelFuncConfig = {\n  opSnippet: string,\n  packedOpSnippet?: string,\n  checkOutOfBounds?: boolean,\n  supportsComplex?: boolean,\n  cpuKernelImpl?: SimpleBinaryKernelImplCPU,\n  dtype?: DataType\n};\n\n/**\n * Template that creates a `KernelFunc` for binary ops.\n * @param opSnippet Op snippet to create `BinaryOpProgram`.\n * @param packedOpSnippet Op snippet to create `BinaryOpPackedProgram`.\n * @param checkOutOfBoundsForPackedProgram Whether to set checkOutOfBounds=true\n *     when creating BinaryOpPackedProgram.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function binaryKernelFunc({\n  opSnippet,\n  packedOpSnippet,\n  checkOutOfBounds = false,\n  supportsComplex = false,\n  cpuKernelImpl,\n  dtype\n}: BinaryKernelFuncConfig): KernelFunc {\n  return ({inputs, backend}) => {\n    const {a, b} = inputs as BinaryInputs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    if (supportsComplex && a.dtype === 'complex64') {\n      const aData = webglBackend.texData.get(a.dataId);\n      const bData = webglBackend.texData.get(b.dataId);\n\n      const [real, imag] = [\n        [aData.complexTensorInfos.real, bData.complexTensorInfos.real],\n        [aData.complexTensorInfos.imag, bData.complexTensorInfos.imag]\n      ].map(complexParts => {\n        const [aPart, bPart] = complexParts;\n\n        const aHandle = {\n          dataId: aPart.dataId,\n          dtype: aPart.dtype,\n          shape: a.shape\n        };\n        const bHandle = {\n          dataId: bPart.dataId,\n          dtype: bPart.dtype,\n          shape: b.shape\n        };\n\n        const program = new BinaryOpProgram(opSnippet, a.shape, b.shape);\n        return webglBackend.runWebGLProgram(\n            program, [aHandle, bHandle], upcastType(aPart.dtype, bPart.dtype));\n      });\n\n      const complexOutput =\n          complex({inputs: {real, imag}, backend: webglBackend});\n\n      webglBackend.disposeIntermediateTensorInfo(real);\n      webglBackend.disposeIntermediateTensorInfo(imag);\n\n      // TODO(annxingyuan): Implement CPU forwarding for complex inputs.\n\n      return complexOutput;\n    }\n\n    const $dtype = dtype || upcastType(a.dtype, b.dtype);\n    if ((a.dtype === 'string' || b.dtype === 'string' ||\n         webglBackend.shouldExecuteOnCPU([a, b])) &&\n        cpuKernelImpl != null) {\n      const aVals = webglBackend.texData.get(a.dataId).values as TypedArray;\n      const bVals = webglBackend.texData.get(b.dataId).values as TypedArray;\n\n      const decodedAVals = a.dtype === 'string' ?\n          // tslint:disable-next-line: no-any\n          backend_util.fromUint8ToStringArray(aVals as any as Uint8Array[]) :\n          aVals;\n      const decodedBVals = a.dtype === 'string' ?\n          // tslint:disable-next-line: no-any\n          backend_util.fromUint8ToStringArray(bVals as any as Uint8Array[]) :\n          bVals;\n      const [outValues, outShape] =\n          cpuKernelImpl(a.shape, b.shape, decodedAVals, decodedBVals, $dtype);\n\n      const out = webglBackend.makeTensorInfo(outShape, $dtype);\n      const outData = webglBackend.texData.get(out.dataId);\n      outData.values = outValues;\n      return out;\n    }\n\n    const shouldUsePackedProgram =\n        env().getBool('WEBGL_PACK_BINARY_OPERATIONS') &&\n        packedOpSnippet != null;\n    let program: BinaryOpProgram|BinaryOpPackedProgram;\n    if (shouldUsePackedProgram) {\n      program = new BinaryOpPackedProgram(\n          packedOpSnippet, a.shape, b.shape, checkOutOfBounds);\n    } else {\n      program = new BinaryOpProgram(opSnippet, a.shape, b.shape);\n    }\n\n    return webglBackend.runWebGLProgram(program, [a, b], $dtype);\n  };\n}\n\nexport function mapActivationToShaderProgram(\n    activation: backend_util.Activation, packed = false): string {\n  if (activation === 'linear') {\n    if (packed) {\n      return unary_packed_op.LINEAR;\n    }\n    return unary_op.LINEAR;\n  } else if (activation === 'relu') {\n    if (packed) {\n      return unary_packed_op.RELU;\n    }\n    return unary_op.RELU;\n  } else if (activation === 'elu') {\n    if (packed) {\n      return unary_packed_op.ELU;\n    }\n    return unary_op.ELU;\n  } else if (activation === 'relu6') {\n    if (packed) {\n      return unary_packed_op.RELU6;\n    }\n    return unary_op.RELU6;\n  } else if (activation === 'prelu') {\n    if (packed) {\n      return PRELU_PACKED;\n    }\n    return PRELU;\n  } else if (activation === 'leakyrelu') {\n    if (packed) {\n      return LEAKYRELU_PACKED;\n    }\n    return LEAKYRELU;\n  } else if (activation === 'sigmoid') {\n    if (packed) {\n      return unary_packed_op.SIGMOID;\n    }\n    return unary_op.SIGMOID;\n  }\n  throw new Error(`Activation ${\n      activation} has not been implemented for the WebGL backend.`);\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\n\nexport class MatMulPackedProgram implements GPGPUProgram {\n  variableNames = ['matrixA', 'matrixB'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms: boolean;\n\n  constructor(\n      aShape: [number, number, number], bShape: [number, number, number],\n      outputShape: [number, number, number], transposeA = false,\n      transposeB = false, addBias = false, activation: string = null,\n      hasPreluActivation = false, hasLeakyreluActivation = false) {\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n\n    const sharedDim = transposeA ? aShape[1] : aShape[2];\n    const sharedDimensionPacked = Math.ceil(sharedDim / 2);\n\n    const aSample = transposeA ? 'i * 2, rc.y' : 'rc.y, i * 2';\n    const bSample = transposeB ? 'rc.z, i * 2' : 'i * 2, rc.z';\n    const aSwizzle = transposeA ? ['a.xxyy', 'a.zzww'] : ['a.xxzz', 'a.yyww'];\n    const bSwizzle = transposeB ? ['b.xzxz', 'b.ywyw'] : ['b.xyxy', 'b.zwzw'];\n\n    let activationSnippet = '', applyActivationSnippet = '';\n    if (activation) {\n      if (hasPreluActivation) {\n        activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n      } else if (hasLeakyreluActivation) {\n        activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${activation}\n        }`;\n      } else {\n        activationSnippet = `vec4 activation(vec4 x) {\n          ${activation}\n        }`;\n      }\n\n      applyActivationSnippet = `result = activation(result);`;\n    }\n\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivation) {\n      this.variableNames.push('preluActivationWeights');\n    }\n\n    if (hasLeakyreluActivation) {\n      this.variableNames.push('leakyreluAlpha');\n    }\n\n    let batchASnippet = 'rc.x';\n    let batchBSnippet = 'rc.x';\n    if (aShape[0] < bShape[0]) {\n      batchASnippet = `imod(rc.x, ${aShape[0]})`;\n    } else if (bShape[0] < aShape[0]) {\n      batchBSnippet = `imod(rc.x, ${bShape[0]})`;\n    }\n\n    this.userCode = `\n      ${activationSnippet}\n      // Don't use uniform for sharedDimensionPacked for performance.\n      const float sharedDimension = ${sharedDimensionPacked}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        int batchA = ${batchASnippet};\n        int batchB = ${batchBSnippet};\n        for (int i = 0; i < ${sharedDimensionPacked}; i++) {\n          vec4 a = getMatrixA(batchA, ${aSample});\n          vec4 b = getMatrixB(batchB, ${bSample});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${aSwizzle[0]} * ${bSwizzle[0]});\n          result += (${aSwizzle[1]} * ${bSwizzle[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${addBiasSnippet}\n\n        ${applyActivationSnippet}\n\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\n// (Ar + Ai)(Br + Bi) =\n// ArBr + ArBi + AiBr + AiBi = ArBr - AB + ArBi + AiBr\n// Yr = ArBr - AB\n// Yi = ArBi + AiBr\nexport const COMPLEX_MULTIPLY = {\n  REAL: 'return areal * breal - aimag * bimag;',\n  IMAG: 'return areal * bimag + aimag * breal;'\n};\n\nexport class BinaryOpComplexProgram implements GPGPUProgram {\n  variableNames = ['AReal', 'AImag', 'BReal', 'BImag'];\n  userCode: string;\n  outputShape: number[];\n\n  constructor(op: string, aShape: number[], bShape: number[]) {\n    this.outputShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n\n    this.userCode = `\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${op}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BinaryInputs, env, KernelConfig, Multiply, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport * as binaryop_complex_gpu from '../binaryop_complex_gpu';\nimport {BinaryOpComplexProgram} from '../binaryop_complex_gpu';\nimport {BinaryOpProgram} from '../binaryop_gpu';\nimport {BinaryOpPackedProgram} from '../binaryop_packed_gpu';\nimport {multiplyImplCPU as cpuMultiply} from '../kernel_utils/shared';\n\nimport {complex} from './Complex';\n\nconst MUL = 'return a * b;';\n\nexport function multiply(\n    args: {inputs: BinaryInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {a, b} = inputs;\n  const dtype = backend_util.upcastType(a.dtype, b.dtype);\n\n  if (a.dtype === 'complex64') {\n    const aData = backend.texData.get(a.dataId);\n    const bData = backend.texData.get(b.dataId);\n\n    const realProgram = new BinaryOpComplexProgram(\n        binaryop_complex_gpu.COMPLEX_MULTIPLY.REAL, a.shape, b.shape);\n    const imagProgram = new BinaryOpComplexProgram(\n        binaryop_complex_gpu.COMPLEX_MULTIPLY.IMAG, a.shape, b.shape);\n\n    const inputs = [\n      {\n        dataId: aData.complexTensorInfos.real.dataId,\n        dtype: aData.complexTensorInfos.real.dtype,\n        shape: a.shape\n      },\n      {\n        dataId: aData.complexTensorInfos.imag.dataId,\n        dtype: aData.complexTensorInfos.imag.dtype,\n        shape: a.shape\n      },\n      {\n        dataId: bData.complexTensorInfos.real.dataId,\n        dtype: bData.complexTensorInfos.real.dtype,\n        shape: b.shape\n      },\n      {\n        dataId: bData.complexTensorInfos.imag.dataId,\n        dtype: bData.complexTensorInfos.imag.dtype,\n        shape: b.shape\n      }\n    ];\n\n    const realPart = backend.runWebGLProgram(realProgram, inputs, 'float32');\n    const imagPart = backend.runWebGLProgram(imagProgram, inputs, 'float32');\n\n    const complexOutput =\n        complex({inputs: {real: realPart, imag: imagPart}, backend});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(imagPart);\n\n    // TODO(annxingyuan): CPU forwarding for complex inputs.\n    return complexOutput;\n  }\n\n  if (backend.shouldExecuteOnCPU([a, b])) {\n    const aData = backend.texData.get(a.dataId);\n    const bData = backend.texData.get(b.dataId);\n    const [outValues, outShape] = cpuMultiply(\n        a.shape, b.shape, aData.values as TypedArray,\n        bData.values as TypedArray, dtype);\n\n    const out = backend.makeTensorInfo(outShape, dtype);\n    const outData = backend.texData.get(out.dataId);\n    outData.values = outValues;\n    return out;\n  }\n\n  let program: BinaryOpProgram|BinaryOpPackedProgram;\n  if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n    program = new BinaryOpPackedProgram(MUL, a.shape, b.shape);\n  } else {\n    program = new BinaryOpProgram(MUL, a.shape, b.shape);\n  }\n\n  return backend.runWebGLProgram(program, [a, b], dtype);\n}\n\nexport const multiplyConfig: KernelConfig = {\n  kernelName: Multiply,\n  backendName: 'webgl',\n  kernelFunc: multiply\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Reshape, ReshapeAttrs, ReshapeInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {packedReshape} from '../kernel_utils/reshape';\nimport {isReshapeFree} from '../webgl_util';\n\nexport function reshape(args: {\n  inputs: ReshapeInputs,\n  backend: MathBackendWebGL,\n  attrs: ReshapeAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {shape} = attrs;\n  const webglBackend = backend;\n\n  const xSize = util.sizeFromShape(x.shape);\n  const $shape = util.inferFromImplicitShape(shape, xSize);\n  const $xSize = util.sizeFromShape($shape);\n\n  util.assert(\n      xSize === $xSize,\n      () => `The new shape (${$shape}) has ${$xSize} elements and the old ` +\n          `shape (${x.shape}) has ${xSize} elements. The new shape and old ` +\n          `shape must have the same number of elements.`);\n\n  const xTexData = webglBackend.texData.get(x.dataId);\n  if (xTexData.isPacked && !isReshapeFree(x.shape, $shape) &&\n      !(xTexData.texture !== null && isReshapeFree(xTexData.shape, $shape))) {\n    return packedReshape(x, $shape, webglBackend);\n  }\n\n  webglBackend.incRef(x.dataId);\n\n  return {dataId: x.dataId, shape: $shape, dtype: x.dtype};\n}\n\nexport const reshapeConfig: KernelConfig = {\n  kernelName: Reshape,\n  backendName: 'webgl',\n  kernelFunc: reshape as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ReshapePackedProgram} from '../reshape_packed_gpu';\nimport {getBatchDim, getRowsCols} from '../webgl_util';\n\nexport function packedReshape(\n    input: TensorInfo, afterShape: number[],\n    backend: MathBackendWebGL): TensorInfo {\n  const input3DShape =\n      [getBatchDim(input.shape),\n       ...getRowsCols(input.shape)] as [number, number, number];\n  const input3D: TensorInfo = {\n    dtype: input.dtype,\n    shape: input3DShape,\n    dataId: input.dataId\n  };\n  const afterShapeAs3D =\n      [getBatchDim(afterShape),\n       ...getRowsCols(afterShape)] as [number, number, number];\n\n  const program = new ReshapePackedProgram(afterShapeAs3D, input3DShape);\n  const preventEagerUnpackingOfOutput = true;\n  const customValues = [input3DShape];\n  const output = backend.runWebGLProgram(\n      program, [input3D], input.dtype, customValues,\n      preventEagerUnpackingOfOutput);\n  return {dataId: output.dataId, shape: afterShape, dtype: output.dtype};\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class MeanProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(reduceInfo: backend_util.ReduceInfo, divisor?: number) {\n    const {windowSize, batchSize, inSize, outSize} = reduceInfo;\n    this.outputShape = [batchSize, outSize];\n\n    const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;\n    const windowSizeVec4Remainder = windowSize % 4;\n\n    let updateSnippet = `sumValue += dot(values, ones);`;\n    if (divisor != null) {\n      const denominator = 1 / divisor;\n      updateSnippet = `sumValue += dot(values * ${\n          util.isInt(denominator) ? denominator.toPrecision(2) :\n                                    denominator}, ones);`;\n    }\n\n    let checkOutOfBounds = '';\n    if (inSize % windowSize > 0) {\n      checkOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return 0.0;\n        }\n      `;\n    }\n\n    this.userCode = `\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${checkOutOfBounds}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${windowSize};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${updateSnippet}\n        }\n\n        int inIdx = inOffset + ${windowSizeNearestVec4};\n        if (${windowSizeVec4Remainder === 1}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 2}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 3}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${updateSnippet}\n        }\n        setOutput(sumValue);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ReduceProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      reduceInfo: backend_util.ReduceInfo,\n      reduceType: 'all'|'any'|'max'|'min'|'sum'|'prod') {\n    const {windowSize, batchSize, inSize, outSize} = reduceInfo;\n    this.outputShape = [batchSize, outSize];\n\n    let initializationValue = '0.0';\n    let compareOp = ``;\n\n    if (reduceType === 'prod') {\n      initializationValue = '1.0';\n    } else if (reduceType === 'min') {\n      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n      initializationValue = '1.0 / 1e-20';\n      compareOp = `min`;\n    } else if (reduceType === 'max') {\n      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n      initializationValue = '-1.0 / 1e-20';\n      compareOp = `max`;\n    }\n\n    let returnValue = `${reduceType}(${reduceType}(${reduceType}(` +\n        'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\n\n    if (reduceType === 'sum') {\n      returnValue = `sumValue`;\n    } else if (reduceType === 'prod') {\n      returnValue = `prodValue`;\n    } else if (reduceType === 'all') {\n      returnValue = `allValue`;\n    } else if (reduceType === 'any') {\n      returnValue = `anyValue`;\n    }\n\n    const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;\n    const windowSizeVec4Remainder = windowSize % 4;\n\n    let updateSnippet = `\n      if (${reduceType === 'sum'}) {\n        sumValue += dot(values, ones);\n      } else if (${reduceType === 'prod'}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${compareOp}(values, minMaxValue);\n        if (${reduceType === 'min'} || ${reduceType === 'max'}) {\n          minMaxValue = ${compareOp}(values, minMaxValue);\n          bvec4 isNaN = isnan(values);\n          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {\n            minMaxValue = vec4(NAN);\n          }\n        }\n      }\n    `;\n\n    let vecType = `vec4`;\n\n    if (reduceType === 'all') {\n      initializationValue = '1.0';\n      updateSnippet = `\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      `;\n      vecType = `bvec4`;\n    } else if (reduceType === 'any') {\n      initializationValue = '0.0';\n      updateSnippet = `\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      `;\n      vecType = `bvec4`;\n    }\n\n    let checkOutOfBounds = '';\n    if (inSize % windowSize > 0) {\n      checkOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return initializationValue;\n        }\n      `;\n    }\n    this.userCode = `\n      const float initializationValue = ${initializationValue};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${checkOutOfBounds}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${windowSize};\n\n        vec4 minMaxValue = vec4(${initializationValue});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {\n          int inIdx = inOffset + i;\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${updateSnippet}\n        }\n\n        int inIdx = inOffset + ${windowSizeNearestVec4};\n        if (${windowSizeVec4Remainder === 1}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 2}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 3}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${updateSnippet}\n        }\n        setOutput(${returnValue});\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {MeanProgram} from '../mean_gpu';\nimport {ReduceProgram} from '../reduce_gpu';\n\ntype ReduceTypes = 'all'|'any'|'max'|'min'|'sum'|'prod'|'mean';\n\n// Returns an array of configuration objects that describe each stage of the\n// reduction.\nfunction getReductionStages(inShape: number[]):\n    Array<{inSize: number, windowSize: number, outSize: number}> {\n  const stages = [];\n\n  while (stages.length === 0 || stages[stages.length - 1].outSize !== 1) {\n    const outSize: number =\n        stages.length ? stages[stages.length - 1].outSize : inShape[1];\n    const windowSize = backend_util.computeOptimalWindowSize(outSize);\n    stages.push({\n      inSize: outSize,\n      windowSize,\n      outSize: Math.ceil(outSize / windowSize)\n    });\n  }\n\n  return stages;\n}\n\nexport function reduce(\n    x: TensorInfo, dtype: DataType, reductionType: ReduceTypes,\n    backend: MathBackendWebGL): TensorInfo {\n  const reductionStages = getReductionStages(x.shape);\n\n  let result = x;\n  for (let i = 0; i < reductionStages.length; i++) {\n    const {inSize, windowSize, outSize} = reductionStages[i];\n\n    let program: ReduceProgram|MeanProgram;\n    let previousResult: TensorInfo;\n    if (reductionType === 'mean') {\n      program = i === 0 ?\n          new MeanProgram(\n              {windowSize, inSize, batchSize: x.shape[0], outSize}, inSize) :\n          new MeanProgram({windowSize, inSize, batchSize: x.shape[0], outSize});\n    } else {\n      program = new ReduceProgram(\n          {windowSize, inSize, batchSize: x.shape[0], outSize}, reductionType);\n    }\n\n    previousResult = result;\n    result = backend.runWebGLProgram(program, [result], dtype);\n\n    if (previousResult.dataId !== x.dataId) {\n      backend.disposeIntermediateTensorInfo(previousResult);\n    }\n  }\n\n  return result;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class TransposeProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n\n  constructor(aShape: number[], newDim: number[]) {\n    const outputShape: number[] = new Array(aShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[newDim[i]];\n    }\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    const dtype = getCoordsDataType(this.rank);\n    const switched = getSwitchedCoords(newDim);\n\n    this.userCode = `\n    void main() {\n      ${dtype} resRC = getOutputCoords();\n      setOutput(getA(${switched}));\n    }\n    `;\n  }\n}\n\nfunction getSwitchedCoords(newDim: number[]): string {\n  const rank = newDim.length;\n  if (rank > 6) {\n    throw Error(`Transpose for rank ${rank} is not yet supported`);\n  }\n  const originalOrder =\n      ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w', 'resRC.u', 'resRC.v'];\n  const switchedCoords = new Array(rank);\n  for (let i = 0; i < newDim.length; i++) {\n    switchedCoords[newDim[i]] = originalOrder[i];\n  }\n  return switchedCoords.join();\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getVecChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class TransposePackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(aShape: number[], newDim: number[]) {\n    const outputShape: number[] = new Array(aShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[newDim[i]];\n    }\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    if (this.rank > 6) {\n      throw Error(\n          `Packed transpose for rank ${this.rank} is not yet supported.`);\n    }\n    const dtype = getCoordsDataType(this.rank);\n\n    const outputOrder = getVecChannels('rc', this.rank);\n    const switchedOrder = new Array(this.rank);\n    for (let i = 0; i < newDim.length; i++) {\n      switchedOrder[newDim[i]] = outputOrder[i];\n    }\n    const innerDims = `vec2(${switchedOrder.slice(-2).join()})`;\n    const nextColumn =\n        `++${outputOrder[this.rank - 1]} < ${outputShape[this.rank - 1]}`;\n    const getc = `getChannel(getA(${switchedOrder.join()}), ${innerDims})`;\n\n    this.userCode = `\n    void main() {\n      ${dtype} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${getc};\n      if(${nextColumn}) {\n        result[1] = ${getc};\n      }\n      --${outputOrder[this.rank - 1]};\n      if(++${outputOrder[this.rank - 2]} < ${outputShape[this.rank - 2]}) {\n        result[2] = ${getc};\n        if(${nextColumn}) {\n          result[3] = ${getc};\n        }\n      }\n      setOutput(result);\n    }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {transposeImplCPU} from '../kernel_utils/shared';\nimport {TransposeProgram} from '../transpose_gpu';\nimport {TransposePackedProgram} from '../transpose_packed_gpu';\n\nexport function transposeImpl(\n    x: TensorInfo, perm: number[], backend: MathBackendWebGL): TensorInfo {\n  const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n      new TransposePackedProgram(x.shape, perm) :\n      new TransposeProgram(x.shape, perm);\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\n\nexport {transposeImplCPU};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Sum, SumAttrs, SumInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {sumImpl} from './Sum_impl';\n\nexport function sum(\n    args: {inputs: SumInputs, attrs: SumAttrs, backend: MathBackendWebGL}) {\n  const {inputs, backend, attrs} = args;\n\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  return sumImpl(x, axis, keepDims, backend);\n}\n\nexport const sumConfig: KernelConfig = {\n  kernelName: Sum,\n  backendName: 'webgl',\n  kernelFunc: sum as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, sumOutType, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\nimport {reshape} from './Reshape';\n\nimport {transposeImpl} from './Transpose_impl';\n\nexport function sumImpl(\n    x: TensorInfo, axis: number|number[], keepDims: boolean,\n    backend: MathBackendWebGL): TensorInfo {\n  const reductionIndices = axis;\n\n  const xRank = x.shape.length;\n\n  const origAxes = util.parseAxisParam(reductionIndices, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  const sumInputIsTransposed = permutedAxes != null;\n\n  let sumInput = x;\n  if (sumInputIsTransposed) {\n    sumInput = transposeImpl(x, permutedAxes, backend);\n\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('sum', axes, xRank);\n  const [sumOutShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(sumInput.shape, axes);\n\n  let outShape = sumOutShape;\n  if (keepDims) {\n    // rather than reshape at the end, set the target shape here.\n    outShape = backend_util.expandShapeToKeepDim(sumOutShape, origAxes);\n  }\n\n  const inSize = util.sizeFromShape(reduceShape);\n  const xSize = util.sizeFromShape(x.shape);\n  const batchSize = xSize / inSize;\n  const reshapedInput = reshape(\n      {inputs: {x: sumInput}, attrs: {shape: [batchSize, inSize]}, backend});\n\n  const outType = sumOutType(x.dtype);\n\n  const reduced = reduce(reshapedInput, outType, 'sum', backend);\n  const out =\n      reshape({inputs: {x: reduced}, attrs: {shape: outShape}, backend});\n\n  backend.disposeIntermediateTensorInfo(reshapedInput);\n  backend.disposeIntermediateTensorInfo(reduced);\n  if (sumInputIsTransposed) {\n    backend.disposeIntermediateTensorInfo(sumInput);\n  }\n\n  return out;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Transpose, TransposeAttrs, TransposeInputs, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {transposeImpl} from './Transpose_impl';\nimport {transposeImplCPU as cpuTranspose} from './Transpose_impl';\n\nexport function transpose(args: {\n  inputs: TransposeInputs,\n  attrs: TransposeAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {perm} = attrs;\n  const webglBackend = backend;\n\n  const xRank = x.shape.length;\n\n  const newShape: number[] = new Array(xRank);\n  for (let i = 0; i < newShape.length; i++) {\n    newShape[i] = x.shape[perm[i]];\n  }\n\n  let out: TensorInfo;\n  if (webglBackend.shouldExecuteOnCPU([x])) {\n    const xTexData = webglBackend.texData.get(x.dataId);\n    const values = xTexData.values as TypedArray;\n    const outValues = cpuTranspose(values, x.shape, x.dtype, perm, newShape);\n\n    out = webglBackend.makeTensorInfo(newShape, x.dtype);\n    const outData = webglBackend.texData.get(out.dataId);\n    outData.values = outValues;\n  } else {\n    out = transposeImpl(x, perm, webglBackend);\n  }\n  return out;\n}\n\nexport const transposeConfig: KernelConfig = {\n  kernelName: Transpose,\n  backendName: 'webgl',\n  kernelFunc: transpose as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, broadcast_util, TensorInfo, upcastType, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {mapActivationToShaderProgram} from '../kernel_utils/kernel_funcs_utils';\nimport {MatMulPackedProgram} from '../mulmat_packed_gpu';\n\nimport {multiply} from './Multiply';\nimport {reshape} from './Reshape';\nimport {sum} from './Sum';\nimport {transpose} from './Transpose';\n\n// Empirically determined minimal shared dimension in matmul before we forward\n// to a.mul(b).sum() in order to take advantage of GPU parallelism. See\n// https://github.com/tensorflow/tfjs-core/pull/1379 for benchmarks.\nexport const MATMUL_SHARED_DIM_THRESHOLD = 1000;\n\ntype BatchMatMulConfig = {\n  a: TensorInfo,\n  b: TensorInfo,\n  transposeA: boolean,\n  transposeB: boolean,\n  backend: MathBackendWebGL,\n  bias?: TensorInfo,\n  preluActivationWeights?: TensorInfo,\n  leakyreluAlpha?: number,\n  activation?: backend_util.Activation\n};\n\nexport function batchMatMulImpl({\n  a,\n  b,\n  transposeA,\n  transposeB,\n  backend,\n  bias = null,\n  preluActivationWeights = null,\n  leakyreluAlpha = 0,\n  activation = null\n}: BatchMatMulConfig): TensorInfo {\n  const aRank = a.shape.length;\n  const bRank = b.shape.length;\n\n  const innerShapeA = transposeA ? a.shape[aRank - 2] : a.shape[aRank - 1];\n  const innerShapeB = transposeB ? b.shape[bRank - 1] : b.shape[bRank - 2];\n\n  const outerShapeA = transposeA ? a.shape[aRank - 1] : a.shape[aRank - 2];\n  const outerShapeB = transposeB ? b.shape[bRank - 2] : b.shape[bRank - 1];\n\n  const outerDimsA = a.shape.slice(0, -2);\n  const outerDimsB = b.shape.slice(0, -2);\n\n  const batchDimA = util.sizeFromShape(outerDimsA);\n  const batchDimB = util.sizeFromShape(outerDimsB);\n\n  const outShapeOuterDims = broadcast_util.assertAndGetBroadcastShape(\n      a.shape.slice(0, -2), b.shape.slice(0, -2));\n  const outShape = outShapeOuterDims.concat([outerShapeA, outerShapeB]);\n\n  util.assert(\n      innerShapeA === innerShapeB,\n      () => `Error in matMul: inner shapes (${innerShapeA}) and (` +\n          `${innerShapeB}) of Tensors with shapes ${a.shape} and ` +\n          `${b.shape} and transposeA=${transposeA}` +\n          ` and transposeB=${transposeB} must match.`);\n\n  const a3dShape: [number, number, number] = transposeA ?\n      [batchDimA, innerShapeA, outerShapeA] :\n      [batchDimA, outerShapeA, innerShapeA];\n  const b3dShape: [number, number, number] = transposeB ?\n      [batchDimB, outerShapeB, innerShapeB] :\n      [batchDimB, innerShapeB, outerShapeB];\n\n  // The rest of the implementation is designed to operate on rank-3 tensors\n  const a3d = reshape({inputs: {x: a}, backend, attrs: {shape: a3dShape}});\n  const b3d = reshape({inputs: {x: b}, backend, attrs: {shape: b3dShape}});\n\n  const intermediates: TensorInfo[] = [a3d, b3d];\n\n  const batchDim = Math.max(batchDimA, batchDimB);\n  const sharedDim = transposeA ? a3d.shape[1] : a3d.shape[2];\n\n  const hasBias = bias != null;\n  const hasPreluActivationWeights = preluActivationWeights != null;\n  const hasLeakyreluAlpha = activation === 'leakyrelu';\n  const fusedActivation = activation != null ?\n      mapActivationToShaderProgram(activation, true) :\n      null;\n  const containsFusedOps = hasBias || hasPreluActivationWeights ||\n      hasLeakyreluAlpha || fusedActivation != null;\n  let out: TensorInfo;\n\n  // Since the matrices are vectors, it is faster to call mul().sum()\n  // because sum() is O(sqrt(N)) due to divide-and-conquer.\n  if ((outerShapeA === 1 || outerShapeB === 1) &&\n      sharedDim > MATMUL_SHARED_DIM_THRESHOLD && containsFusedOps === false) {\n    let aVec = a3d;\n    let bVec = b3d;\n    if (transposeA) {\n      aVec = transpose({inputs: {x: a3d}, backend, attrs: {perm: [0, 2, 1]}});\n      intermediates.push(aVec);\n    }\n    if (transposeB) {\n      bVec = transpose({inputs: {x: b3d}, backend, attrs: {perm: [0, 2, 1]}});\n      intermediates.push(bVec);\n    }\n\n    const shouldReshapeA = outerShapeB !== 1;\n    const shouldReshapeB = outerShapeB === 1;\n\n    let aVec3d = aVec;\n    if (shouldReshapeA) {\n      aVec3d = reshape({\n        inputs: {x: aVec},\n        backend,\n        attrs: {shape: [batchDim, sharedDim, 1]}\n      });\n\n      intermediates.push(aVec3d);\n    }\n\n    const axis = outerShapeB === 1 ? 2 : 1;\n\n    let bVec3d = bVec;\n    if (shouldReshapeB) {\n      bVec3d = reshape({\n        inputs: {x: bVec},\n        backend,\n        attrs: {shape: [batchDim, 1, sharedDim]}\n      });\n\n      intermediates.push(bVec3d);\n    }\n\n    const product = multiply({inputs: {a: aVec3d, b: bVec3d}, backend});\n    out = sum({inputs: {x: product}, backend, attrs: {axis, keepDims: true}});\n    intermediates.push(product);\n  } else {\n    const dtype = upcastType(a.dtype, b.dtype);\n\n    const program = new MatMulPackedProgram(\n        a3dShape, b3dShape, [batchDim, outerShapeA, outerShapeB], transposeA,\n        transposeB, hasBias, fusedActivation, hasPreluActivationWeights,\n        hasLeakyreluAlpha);\n\n    const inputs: TensorInfo[] = [a3d, b3d];\n    if (bias != null) {\n      inputs.push(bias);\n    }\n    if (hasPreluActivationWeights) {\n      inputs.push(preluActivationWeights);\n    }\n    if (hasLeakyreluAlpha) {\n      const $leakyreluAlpha = backend.makeTensorInfo(\n          [], 'float32',\n          util.createScalarValue(leakyreluAlpha as unknown as 'float32', 'float32'));\n      inputs.push($leakyreluAlpha);\n      intermediates.push($leakyreluAlpha);\n    }\n\n    out = backend.runWebGLProgram(program, inputs, dtype);\n  }\n\n  const outReshaped =\n      reshape({inputs: {x: out}, backend, attrs: {shape: outShape}});\n  intermediates.push(out);\n  for (const i of intermediates) {\n    backend.disposeIntermediateTensorInfo(i);\n  }\n  return outReshaped;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {_FusedMatMul, _FusedMatMulAttrs, _FusedMatMulInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {batchMatMulImpl} from './BatchMatMul_impl';\n\nexport function _fusedMatMul(args: {\n  inputs: _FusedMatMulInputs,\n  attrs: _FusedMatMulAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {a, b, bias, preluActivationWeights} = inputs;\n  const {transposeA, transposeB, activation, leakyreluAlpha} = attrs;\n\n  return batchMatMulImpl({\n    a,\n    b,\n    transposeA,\n    transposeB,\n    backend,\n    bias,\n    preluActivationWeights,\n    leakyreluAlpha,\n    activation\n  });\n}\n\nexport const _fusedMatMulConfig: KernelConfig = {\n  kernelName: _FusedMatMul,\n  backendName: 'webgl',\n  kernelFunc: _fusedMatMul as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Abs, AbsInputs, env, KernelConfig, KernelFunc, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {simpleAbsImplCPU} from '../kernel_utils/shared';\nimport {UnaryOpProgram} from '../unaryop_gpu';\nimport {UnaryOpPackedProgram} from '../unaryop_packed_gpu';\n\nconst ABS = `return abs(x);`;\n\nexport function abs(args: {inputs: AbsInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  // TODO: handle cases when x is complex. Once the cpu implementation\n  // can handle complex values, refactor to use unaryKernelFunc.\n  if (backend.shouldExecuteOnCPU([x]) && x.dtype !== 'complex64') {\n    const xData = backend.texData.get(x.dataId);\n    const outValues = simpleAbsImplCPU(xData.values as TypedArray);\n    return backend.makeTensorInfo(x.shape, x.dtype, outValues);\n  }\n\n  let program: UnaryOpProgram|UnaryOpPackedProgram;\n  if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n    program = new UnaryOpPackedProgram(x.shape, ABS);\n  } else {\n    program = new UnaryOpProgram(x.shape, ABS);\n  }\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\n\nexport const absConfig: KernelConfig = {\n  kernelName: Abs,\n  backendName: 'webgl',\n  kernelFunc: abs as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Acos, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst ACOS = CHECK_NAN_SNIPPET + `\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n`;\n\nexport const acos = unaryKernelFunc({opSnippet: ACOS});\n\nexport const acosConfig: KernelConfig = {\n  kernelName: Acos,\n  backendName: 'webgl',\n  kernelFunc: acos,\n};\n","\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Acosh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst ACOSH = CHECK_NAN_SNIPPET + `\n  if (x < 1.0) return NAN;\nreturn log(x + sqrt(x * x - 1.0));`;\n\nexport const acosh = unaryKernelFunc({opSnippet: ACOSH});\n\nexport const acoshConfig: KernelConfig = {\n  kernelName: Acosh,\n  backendName: 'webgl',\n  kernelFunc: acosh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Add, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {addImplCPU as cpuAdd} from '../kernel_utils/shared';\n\nconst ADD = 'return a + b;';\n\nexport const addKernelFunc = binaryKernelFunc({\n  opSnippet: ADD,\n  packedOpSnippet: ADD,\n  supportsComplex: true,\n  cpuKernelImpl: cpuAdd\n});\n\nexport const addConfig: KernelConfig = {\n  kernelName: Add,\n  backendName: 'webgl',\n  kernelFunc: addKernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class AddNProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(outputShape: number[], shapes: number[][]) {\n    this.outputShape = outputShape;\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n\n    const snippets: string[] = [];\n    // Get target elements from every input tensor.\n    this.variableNames.forEach(variable => {\n      snippets.push(`float v${variable} = get${variable}AtOutCoords();`);\n    });\n\n    // Calculate the sum of all elements.\n    const operation = this.variableNames\n                          .map(variable => {\n                            return `v${variable}`;\n                          })\n                          .join(' + ');\n\n    this.userCode = `\n      void main() {\n        ${snippets.join('\\n        ')}\n\n        float result = ${operation};\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class AddNPackedProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(outputShape: number[], shapes: number[][]) {\n    this.outputShape = outputShape;\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n\n    const snippets: string[] = [];\n    // Get target elements from every input tensor.\n    this.variableNames.forEach(variable => {\n      snippets.push(`vec4 v${variable} = get${variable}AtOutCoords();`);\n    });\n\n    // Calculate the sum of all elements.\n    const operation = this.variableNames\n                          .map(variable => {\n                            return `v${variable}`;\n                          })\n                          .join(' + ');\n\n    this.userCode = `\n      void main() {\n        ${snippets.join('\\n        ')}\n\n        vec4 result = ${operation};\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AddN, AddNInputs, env, KernelConfig, KernelFunc, TensorInfo, upcastType} from '@tensorflow/tfjs-core';\n\nimport {AddNProgram} from '../addn_gpu';\nimport {AddNPackedProgram} from '../addn_packed_gpu';\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {identity} from './Identity';\n\nexport function addN(args: {inputs: AddNInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n\n  const tensors = inputs;\n  if (tensors.length === 1) {\n    return identity({inputs: {x: tensors[0]}, backend});\n  }\n\n  // Limit the number of uploaded textures for optimization.\n  if (tensors.length > env().get('WEBGL_MAX_TEXTURES_IN_SHADER')) {\n    const midIndex = Math.floor(tensors.length / 2);\n    const leftSide = addN({inputs: tensors.slice(0, midIndex), backend});\n    const rightSide = addN({inputs: tensors.slice(midIndex), backend});\n    return addN({inputs: [leftSide, rightSide], backend});\n  }\n\n  const dtype =\n      tensors.map(t => t.dtype).reduce((d1, d2) => upcastType(d1, d2));\n  const shapes = tensors.map(t => t.shape);\n  // We can make sure shapes are identical in op level.\n  const usePackedOp = env().getBool('WEBGL_PACK');\n  const program = usePackedOp ?\n      new AddNPackedProgram(tensors[0].shape, shapes) :\n      new AddNProgram(tensors[0].shape, shapes);\n  return backend.runWebGLProgram(program, tensors, dtype);\n}\n\nexport const addNConfig: KernelConfig = {\n  kernelName: AddN,\n  backendName: 'webgl',\n  kernelFunc: addN as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {All, AllAttrs, AllInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\n\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function all(\n    args: {inputs: AllInputs, backend: MathBackendWebGL, attrs: AllAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  const xRank = x.shape.length;\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  let permutedX = x;\n  if (permutedAxes != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('all', axes, xRank);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(permutedX.shape, axes);\n  const inSize = util.sizeFromShape(reduceShape);\n\n  const a2D =\n      reshape({inputs: {x: permutedX}, backend, attrs: {shape: [-1, inSize]}});\n  const reduced = reduce(a2D, a2D.dtype, 'all', backend);\n\n  let res;\n  if (keepDims) {\n    const newShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: newShape}});\n  } else {\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: outShape}});\n  }\n\n  backend.disposeIntermediateTensorInfo(a2D);\n  backend.disposeIntermediateTensorInfo(reduced);\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo(permutedX);\n  }\n\n  return res;\n}\n\nexport const allConfig: KernelConfig = {\n  kernelName: All,\n  backendName: 'webgl',\n  kernelFunc: all as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Any, AnyAttrs, AnyInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function any(\n    args: {inputs: AnyInputs, backend: MathBackendWebGL, attrs: AnyAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  const xRank = x.shape.length;\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  let permutedX = x;\n  if (permutedAxes != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('any', axes, xRank);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(permutedX.shape, axes);\n  const inSize = util.sizeFromShape(reduceShape);\n\n  const a2D =\n      reshape({inputs: {x: permutedX}, backend, attrs: {shape: [-1, inSize]}});\n  const reduced = reduce(a2D, a2D.dtype, 'any', backend);\n\n  let res;\n  if (keepDims) {\n    const newShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: newShape}});\n  } else {\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: outShape}});\n  }\n\n  backend.disposeIntermediateTensorInfo(a2D);\n  backend.disposeIntermediateTensorInfo(reduced);\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo(permutedX);\n  }\n\n  return res;\n}\n\nexport const anyConfig: KernelConfig = {\n  kernelName: Any,\n  backendName: 'webgl',\n  kernelFunc: any as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ArgMinMaxProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      reduceInfo: backend_util.ReduceInfo, op: 'max'|'min',\n      firstPass: boolean) {\n    const {windowSize, batchSize, outSize} = reduceInfo;\n    if (!firstPass) {\n      this.variableNames.push('bestIndicesA');\n    }\n    this.outputShape = [batchSize, outSize];\n    const compOp = (op === 'max') ? '>' : '<';\n    const indexSnippet = firstPass ?\n        'inOffset + i;' :\n        'round(getBestIndicesA(batch, inOffset + i));';\n\n    this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${windowSize};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${windowSize}; i++) {\n          int inIdx = ${indexSnippet};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${compOp} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ArgMinMaxPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(\n      shape: number[], windowSize: number, op: 'max'|'min',\n      firstPass: boolean) {\n    util.assert(\n        shape.length > 2,\n        () => `Packed arg${\n            op.charAt(0).toUpperCase() +\n            op.slice(1)} supports only inputs with rank above 2.`);\n    const inSize = shape[shape.length - 1];\n    const outSize = Math.ceil(inSize / windowSize);\n    this.outputShape = shape.slice(0, -1);\n    if (outSize > 1) {\n      this.outputShape.push(outSize);\n    }\n    if (!firstPass) {\n      this.variableNames.push('bestIndicesA');\n    }\n    const outShape = this.outputShape;\n    const rank = outShape.length;\n    const dtype = getCoordsDataType(rank);\n    const coords = getChannels('coords', rank);\n\n    let sourceLocSetup;\n    let sourceRank;\n    if (outSize === 1) {\n      sourceRank = rank + 1;\n      const sourceLocDType = getCoordsDataType(sourceRank);\n      sourceLocSetup = `\n        ${sourceLocDType} sourceLocR = ${sourceLocDType}(${coords.join()}, 0);\n        ++${coords[rank - 1]};\n        ${sourceLocDType} sourceLocG = ${sourceLocDType}(${coords.join()}, 0);\n        ++${coords[rank - 2]};\n        ${sourceLocDType} sourceLocA = ${sourceLocDType}(${coords.join()}, 0);\n        --${coords[rank - 1]};\n        ${sourceLocDType} sourceLocB = ${sourceLocDType}(${coords.join()}, 0);\n        --${coords[rank - 2]};`;\n    } else {\n      sourceRank = rank;\n      sourceLocSetup = `\n        ${dtype} sourceLocR = coords;\n        ++${coords[rank - 1]};\n        ${dtype} sourceLocG = coords;\n        ++${coords[rank - 2]};\n        ${dtype} sourceLocA = coords;\n        --${coords[rank - 1]};\n        ${dtype} sourceLocB = coords;\n        --${coords[rank - 2]};`;\n    }\n    const channels = ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, sourceRank);\n    const inChannel = '.' + channels[sourceRank - 1];  // e.g. \".b\" for rank 3.\n    const intChannels = channels.map(x => 'int ' + x);\n    const srcRCoords =\n        getChannels('sourceLocR', sourceRank - 1).concat('inIdx.r');\n    const srcGCoords =\n        getChannels('sourceLocG', sourceRank - 1).concat('inIdx.g');\n    const srcBCoords =\n        getChannels('sourceLocB', sourceRank - 1).concat('inIdx.b');\n    const srcACoords =\n        getChannels('sourceLocA', sourceRank - 1).concat('inIdx.a');\n\n    const compOp = (op === 'max') ? 'greaterThan' : 'lessThan';\n    const fetchCandidateIdx = firstPass ? '' : `\n          inIdx = round(vec4(getBestIndicesAChannel(${srcRCoords.join()}),\n                             getBestIndicesAChannel(${srcGCoords.join()}),\n                             getBestIndicesAChannel(${srcBCoords.join()}),\n                             getBestIndicesAChannel(${srcACoords.join()})));`;\n\n    const fetchValue = `vec4(\n            getAChannel(${srcRCoords.join()}),\n            hasNextCol ? getAChannel(${srcGCoords.join()}) : 0.,\n            hasNextRow ? getAChannel(${srcBCoords.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${srcACoords.join()}) : 0.)`;\n\n    const getBestIndicesAChannelSnippet = firstPass ? '' : `\n      float getBestIndicesAChannel(${intChannels.join()}) {\n        return getChannel(getBestIndicesA(${channels.join()}),\n                                          vec2(${channels.slice(-2).join()}));\n      }`;\n\n    this.userCode = `\n      float getAChannel(${intChannels.join()}) {\n        return getChannel(getA(${channels.join()}),\n                               vec2(${channels.slice(-2).join()}));\n      }\n      ${getBestIndicesAChannelSnippet}\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        bool hasNextCol = ${coords[rank - 1]} < ${outShape[rank - 1] - 1};\n        bool hasNextRow = ${coords[rank - 2]} < ${outShape[rank - 2] - 1};\n        ${sourceLocSetup}\n        ivec4 srcIdx = ivec4(sourceLocR${inChannel}, sourceLocG${inChannel},\n          sourceLocB${inChannel}, sourceLocA${inChannel}) * ${windowSize};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${fetchValue};\n\n        for (int i = 0; i < ${windowSize}; i++) {\n          inIdx = srcIdx;\n          ${fetchCandidateIdx}\n          vec4 candidate = ${fetchValue};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${compOp}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, env, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {ArgMinMaxProgram} from '../argminmax_gpu';\nimport {ArgMinMaxPackedProgram} from '../argminmax_packed_gpu';\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reshape} from '../kernels/Reshape';\n\nfunction argReduce(\n    backend: MathBackendWebGL, x: TensorInfo, reduceType: 'max'|'min',\n    bestIndicesA: TensorInfo = null): TensorInfo {\n  let batchSize = x.shape[0];\n  let inSize = x.shape[1];\n  if (bestIndicesA != null) {\n    batchSize = bestIndicesA.shape[0];\n    inSize = bestIndicesA.shape[1];\n  }\n  const windowSize = backend_util.computeOptimalWindowSize(inSize);\n  const reduceInfo =\n      {windowSize, inSize, batchSize, outSize: Math.ceil(inSize / windowSize)};\n  const program =\n      new ArgMinMaxProgram(reduceInfo, reduceType, bestIndicesA == null);\n  const inputs = [x];\n  if (bestIndicesA != null) {\n    inputs.push(bestIndicesA);\n  }\n  const output = backend.runWebGLProgram(program, inputs, 'int32');\n  // No need to run another GPGPU program.\n  if (output.shape[1] === 1) {\n    return output;\n  }\n  const result = argReduce(backend, x, reduceType, output);\n  backend.disposeIntermediateTensorInfo(output);\n  return result;\n}\n\nfunction argReducePacked(\n    backend: MathBackendWebGL, x: TensorInfo, reduceType: 'max'|'min',\n    bestIndicesA: TensorInfo = null): TensorInfo {\n  const inShape = bestIndicesA != null ? bestIndicesA.shape : x.shape;\n  const inSize = inShape[inShape.length - 1];\n  const windowSize = backend_util.computeOptimalWindowSize(inSize);\n  const program = new ArgMinMaxPackedProgram(\n      inShape, windowSize, reduceType, bestIndicesA == null);\n  const inputs = bestIndicesA == null ? [x] : [x, bestIndicesA];\n  const output = backend.runWebGLProgram(program, inputs, 'int32');\n  if (output.shape.length === x.shape.length) {\n    const result = argReducePacked(backend, x, reduceType, output);\n    backend.disposeIntermediateTensorInfo(output);\n    return result;\n  }\n  return output;\n}\n\nexport function argMinMaxReduce(\n    backend: MathBackendWebGL, x: TensorInfo, axis: number,\n    reduceType: 'min'|'max'): TensorInfo {\n  const axes = [axis];\n  backend_util.assertAxesAreInnerMostDims(\n      'arg' + reduceType.charAt(0).toUpperCase() + reduceType.slice(1), axes,\n      x.shape.length);\n  if (!env().getBool('WEBGL_PACK_REDUCE') || x.shape.length <= 2) {\n    const intermediateTensorInfos = [];\n    // Eagerly unpack x input since it is passed in to all the shaders which\n    // require unpacked inputs.\n    const xtexData = backend.texData.get(x.dataId);\n    const xIsPacked = xtexData !== null && xtexData.isPacked;\n    let xUnPacked = x;\n    if (xIsPacked) {\n      xUnPacked = backend.unpackTensor(x);\n      intermediateTensorInfos.push(xUnPacked);\n    }\n\n    const [outShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(xUnPacked.shape, axes);\n    const inSize = util.sizeFromShape(reduceShape);\n    const a2D = reshape(\n        {inputs: {x: xUnPacked}, backend, attrs: {shape: [-1, inSize]}});\n    intermediateTensorInfos.push(a2D);\n\n    const reduced = argReduce(backend, a2D, reduceType);\n    intermediateTensorInfos.push(reduced);\n    const reshaped =\n        reshape({inputs: {x: reduced}, backend, attrs: {shape: outShape}});\n\n    intermediateTensorInfos.forEach(\n        t => backend.disposeIntermediateTensorInfo(t));\n    return reshaped;\n  }\n  return argReducePacked(backend, x, reduceType);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ArgMax, ArgMaxAttrs, ArgMaxInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {argMinMaxReduce} from '../kernel_utils/arg_min_max';\n\nimport {transpose} from './Transpose';\n\nexport function argMax(\n    args:\n        {inputs: ArgMaxInputs, backend: MathBackendWebGL, attrs: ArgMaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis} = attrs;\n\n  let axes = util.parseAxisParam(axis, x.shape);\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  const intermediateTensorInfos = [];\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    intermediateTensorInfos.push($x);\n    axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('argMax', [axes[0]], $x.shape.length);\n  const out = argMinMaxReduce(backend, $x, axes[0], 'max');\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n  return out;\n}\n\nexport const argMaxConfig: KernelConfig = {\n  kernelName: ArgMax,\n  backendName: 'webgl',\n  kernelFunc: argMax as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ArgMin, ArgMinAttrs, ArgMinInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {argMinMaxReduce} from '../kernel_utils/arg_min_max';\nimport {transpose} from './Transpose';\n\nexport function argMin(\n    args:\n        {inputs: ArgMinInputs, backend: MathBackendWebGL, attrs: ArgMinAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis} = attrs;\n\n  let axes = util.parseAxisParam(axis, x.shape);\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  const intermediateTensorInfos = [];\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    intermediateTensorInfos.push($x);\n    axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('argMin', [axes[0]], $x.shape.length);\n\n  const out = argMinMaxReduce(backend, $x, axes[0], 'min');\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n  return out;\n}\n\nexport const argMinConfig: KernelConfig = {\n  kernelName: ArgMin,\n  backendName: 'webgl',\n  kernelFunc: argMin as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Asin, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst ASIN = CHECK_NAN_SNIPPET + `\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n`;\n\nexport const asin = unaryKernelFunc({opSnippet: ASIN});\n\nexport const asinConfig: KernelConfig = {\n  kernelName: Asin,\n  backendName: 'webgl',\n  kernelFunc: asin,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Asinh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst ASINH = CHECK_NAN_SNIPPET + `return log(x + sqrt(x * x + 1.0));`;\n\nexport const asinh = unaryKernelFunc({opSnippet: ASINH});\n\nexport const asinhConfig: KernelConfig = {\n  kernelName: Asinh,\n  backendName: 'webgl',\n  kernelFunc: asinh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atan, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst ATAN = CHECK_NAN_SNIPPET + `\n  return atan(x);\n`;\n\nexport const atan = unaryKernelFunc({opSnippet: ATAN});\n\nexport const atanConfig: KernelConfig = {\n  kernelName: Atan,\n  backendName: 'webgl',\n  kernelFunc: atan,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atan2} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\nimport {CHECK_NAN_SNIPPET} from '../binaryop_gpu';\nimport {CHECK_NAN_SNIPPET_PACKED} from '../binaryop_packed_gpu';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst ATAN2 = CHECK_NAN_SNIPPET + `\n  return atan(a, b);\n`;\n\nconst ATAN2_PACKED = `\n  vec4 result = atan(a, b);\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  ` +\n    CHECK_NAN_SNIPPET_PACKED + `\n  return result;\n`;\n\nexport const atan2 =\n    binaryKernelFunc({opSnippet: ATAN2, packedOpSnippet: ATAN2_PACKED});\n\nexport const atan2Config: KernelConfig = {\n  kernelName: Atan2,\n  backendName: 'webgl',\n  kernelFunc: atan2,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atanh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst ATANH = CHECK_NAN_SNIPPET + `\n  if ((x < -1.0) || (x > 1.0)) return NAN;\nreturn (log(1.0 + x) - log(1.0 - x)) / 2.0;`;\n\nexport const atanh = unaryKernelFunc({opSnippet: ATANH});\n\nexport const atanhConfig: KernelConfig = {\n  kernelName: Atanh,\n  backendName: 'webgl',\n  kernelFunc: atanh,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class Pool2DProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, poolType: 'max'|'avg',\n      computePositions: boolean, flattenPositions = false,\n      includeBatchInIndex = false) {\n    if (poolType === 'avg' && computePositions) {\n      throw new Error('Cannot compute positions for average pool.');\n    }\n\n    const filterWidth = convInfo.filterWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    this.outputShape = convInfo.outShape;\n\n    const isAvgPool = poolType === 'avg';\n    const batchFlattenPositionStr = `((batch  * ${convInfo.inHeight} + xR) * ${\n        convInfo.inWidth} + xC) * ${convInfo.inChannels} + d`;\n    const flattenPositionStr =\n        `(xR * ${convInfo.inWidth} + xC) * ${convInfo.inChannels} + d`;\n\n    let initializationValue = '0.0';\n    if (!isAvgPool) {\n      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n      initializationValue = '-1.0 / 1e-20';\n    }\n\n    if (computePositions) {\n      const compareOp = '>=';\n\n      this.userCode = `\n        const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n        const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n              wR += ${dilationHeight}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${effectiveFilterWidth};\n                wC += ${dilationWidth}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${compareOp} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${\n          flattenPositions ? (includeBatchInIndex ? batchFlattenPositionStr :\n                                                    flattenPositionStr) :\n                             `wR * ${effectiveFilterWidth} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `;\n      return;\n    }\n\n    const compareOp = 'max';\n\n    let returnValue = `${poolType}(${poolType}(${poolType}(` +\n        'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\n    if (poolType === 'avg') {\n      returnValue = `avgValue / max(count, 1.0)`;\n    }\n\n    const filterWidthNearestVec4 = Math.floor(filterWidth / 4) * 4;\n    const filterWidthVec4Remainder = filterWidth % 4;\n\n    const updateSnippet = `\n      if (${isAvgPool}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = ${compareOp}(values, minMaxValue);\n      }\n    `;\n\n    this.userCode = `\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n      const float initializationValue = ${initializationValue};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${convInfo.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${initializationValue});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${effectiveFilterHeight};\n            wR += ${dilationHeight}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${convInfo.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${filterWidthNearestVec4}; wC += 4) {\n            int xC = xCCorner + wC * ${dilationWidth};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${dilationWidth}, d),\n              getValue(batch, xR, xC + 2 * ${dilationWidth}, d),\n              getValue(batch, xR, xC + 3 * ${dilationWidth}, d)\n            );\n\n            ${updateSnippet}\n          }\n\n          int xC = xCCorner + ${filterWidthNearestVec4};\n          if (${filterWidthVec4Remainder === 1}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${updateSnippet}\n          } else if (${filterWidthVec4Remainder === 2}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${dilationWidth}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${updateSnippet}\n          } else if (${filterWidthVec4Remainder === 3}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${dilationWidth}, d),\n              getValue(batch, xR, xC + 2 * ${dilationWidth}, d),\n              initializationValue\n            );\n\n            ${updateSnippet}\n          }\n        }\n        setOutput(${returnValue});\n      }\n    `;\n  }\n}\n\nexport class Pool3DProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      convInfo: backend_util.Conv3DInfo, poolType: 'max'|'avg',\n      computePositions: boolean, flattenPositions = false,\n      includeBatchInIndex = false) {\n    if (poolType === 'avg' && computePositions) {\n      throw new Error('Cannot compute positions for average pool.');\n    }\n\n    const filterWidth = convInfo.filterWidth;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padFront = convInfo.padInfo.front;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    this.outputShape = convInfo.outShape;\n\n    const isAvgPool = poolType === 'avg';\n\n    let initializationValue = '0.0';\n    if (!isAvgPool) {\n      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n      initializationValue = '-1.0 / 1e-20';\n    }\n\n    if (computePositions) {\n      const compareOp = '>=';\n\n      this.userCode = `\n        const ivec3 strides =\n            ivec3(${strideDepth}, ${strideHeight}, ${strideWidth});\n        const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${effectiveFilterDepth};\n              wD += ${dilationDepth}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${convInfo.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${effectiveFilterHeight};\n                wR += ${dilationHeight}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${convInfo.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${effectiveFilterWidth};\n                  wC += ${dilationWidth}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${compareOp} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${\n          flattenPositions ?\n              (includeBatchInIndex ?\n                   `(((batch * ${convInfo.inDepth} + xD) * ${\n                       convInfo.inHeight} + xR) * ${convInfo.inWidth} + xC) * ${\n                       convInfo.inChannels} + ch` :\n                   `((xD * ${convInfo.inHeight} + xR) * ${\n                       convInfo.inWidth} + xC) * ${convInfo.inChannels} + ch`) :\n              `wD * ${effectiveFilterHeight} * ${effectiveFilterWidth} +\n                      wR * ${effectiveFilterWidth} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `;\n      return;\n    }\n\n    const compareOp = 'max';\n\n    let returnValue = `${poolType}(${poolType}(${poolType}(` +\n        'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\n    if (poolType === 'avg') {\n      // Use `max(count, 1.0)` instead of `count` in case count === 0.0.\n      // If count === 0.0, `avgValue` is always 0.0 and we change `count`'s\n      // value to avoid dividing zero.\n      returnValue = `avgValue / max(count, 1.0)`;\n    }\n\n    const filterWidthNearestVec4 = Math.floor(filterWidth / 4) * 4;\n    const filterWidthVec4Remainder = filterWidth % 4;\n\n    const updateSnippet = `\n      if (${isAvgPool}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = ${compareOp}(values, minMaxValue);\n      }\n    `;\n\n    this.userCode = `\n      const ivec3 strides =\n        ivec3(${strideDepth}, ${strideHeight}, ${strideWidth});\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n      const float initializationValue = ${initializationValue};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${convInfo.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${initializationValue});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${effectiveFilterDepth};\n            wD += ${dilationDepth}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${convInfo.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n            wR += ${dilationHeight}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${filterWidthNearestVec4}; wC += 4) {\n              int xC = xCCorner + wC * ${dilationWidth};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${dilationWidth}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${dilationWidth}, ch)\n              );\n\n              ${updateSnippet}\n            }\n\n            int xC = xCCorner + ${filterWidthNearestVec4};\n            if (${filterWidthVec4Remainder === 1}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${updateSnippet}\n            } else if (${filterWidthVec4Remainder === 2}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${updateSnippet}\n            } else if (${filterWidthVec4Remainder === 3}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${dilationWidth}, ch),\n                initializationValue\n              );\n\n              ${updateSnippet}\n            }\n          }\n        }\n        setOutput(${returnValue});\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPool, AvgPoolAttrs, AvgPoolInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Pool2DProgram} from '../pool_gpu';\nimport {assertNotComplex} from '../webgl_util';\nimport {identity} from './Identity';\n\nexport function avgPool(args: {\n  inputs: AvgPoolInputs,\n  backend: MathBackendWebGL,\n  attrs: AvgPoolAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  assertNotComplex(x, 'avgPool');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations = 1;\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in avgPool: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\n      util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    return identity({inputs: {x}, backend});\n  }\n  const avgPoolProgram = new Pool2DProgram(convInfo, 'avg', false);\n  return backend.runWebGLProgram(avgPoolProgram, [x], 'float32');\n}\n\nexport const avgPoolConfig: KernelConfig = {\n  kernelName: AvgPool,\n  backendName: 'webgl',\n  kernelFunc: avgPool as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPool3D, AvgPool3DAttrs, AvgPool3DInputs, backend_util, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Pool3DProgram} from '../pool_gpu';\n\nexport function avgPool3D(args: {\n  inputs: AvgPool3DInputs,\n  backend: MathBackendWebGL,\n  attrs: AvgPool3DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {filterSize, strides, pad, dimRoundingMode, dataFormat} = attrs;\n  const dilations: [number, number, number] = [1, 1, 1];\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode, dataFormat);\n  const avgPoolProgram = new Pool3DProgram(convInfo, 'avg', false);\n  return backend.runWebGLProgram(avgPoolProgram, [x], 'float32');\n}\n\nexport const avgPool3DConfig: KernelConfig = {\n  kernelName: AvgPool3D,\n  backendName: 'webgl',\n  kernelFunc: avgPool3D as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class AvgPool2DBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n\n    const avgMultiplier = 1 / (filterHeight * filterWidth);\n\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n      const float avgMultiplier = float(${avgMultiplier});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${effectiveFilterHeight};\n            wR += ${dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${effectiveFilterWidth};\n            wC+= ${dilationWidth}) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class AvgPool3DBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.inShape;\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n\n    const avgMultiplier = 1 / (filterDepth * filterHeight * filterWidth);\n\n    this.userCode = `\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n      const float avgMultiplier = float(${avgMultiplier});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${effectiveFilterDepth};\n            wD += ${dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${convInfo.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n              wR += ${dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${effectiveFilterWidth};\n                wC += ${dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPool3DGrad, AvgPool3DGradAttrs, AvgPool3DGradInputs, backend_util, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {AvgPool3DBackpropProgram} from '../avg_pool_backprop_gpu';\nimport {MathBackendWebGL} from '../backend_webgl';\n\nexport function avgPool3DGrad(args: {\n  inputs: AvgPool3DGradInputs,\n  backend: MathBackendWebGL,\n  attrs: AvgPool3DGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const x = input;\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations: [number, number, number] = [1, 1, 1];\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n  const avgPoolBackpropProgram = new AvgPool3DBackpropProgram(convInfo);\n  return backend.runWebGLProgram(avgPoolBackpropProgram, [dy], x.dtype);\n}\n\nexport const avgPool3DGradConfig: KernelConfig = {\n  kernelName: AvgPool3DGrad,\n  backendName: 'webgl',\n  kernelFunc: avgPool3DGrad as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPoolGrad, AvgPoolGradAttrs, AvgPoolGradInputs, backend_util, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {AvgPool2DBackpropProgram} from '../avg_pool_backprop_gpu';\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {assertNotComplex} from '../webgl_util';\n\nexport function avgPoolGrad(args: {\n  inputs: AvgPoolGradInputs,\n  backend: MathBackendWebGL,\n  attrs: AvgPoolGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const x = input;\n  assertNotComplex([dy, input], 'avgPoolGrad');\n  const {filterSize, strides, pad} = attrs;\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad);\n  const avgPoolBackpropProgram = new AvgPool2DBackpropProgram(convInfo);\n  return backend.runWebGLProgram(avgPoolBackpropProgram, [dy], x.dtype);\n}\n\nexport const avgPoolGradConfig: KernelConfig = {\n  kernelName: AvgPoolGrad,\n  backendName: 'webgl',\n  kernelFunc: avgPoolGrad as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BatchMatMul, BatchMatMulAttrs, BatchMatMulInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {batchMatMulImpl} from './BatchMatMul_impl';\n\nexport function batchMatMul(args: {\n  inputs: BatchMatMulInputs,\n  attrs: BatchMatMulAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {a, b} = inputs;\n  const {transposeA, transposeB} = attrs;\n\n  return batchMatMulImpl({a, b, transposeA, transposeB, backend});\n}\n\nexport const batchMatMulConfig: KernelConfig = {\n  kernelName: BatchMatMul,\n  backendName: 'webgl',\n  kernelFunc: batchMatMul as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class BatchNormProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      xShape: number[], meanShape: number[], varianceShape: number[],\n      offsetShape: number[]|null, scaleShape: number[]|null,\n      varianceEpsilon: number) {\n    this.variableNames = ['x', 'mean', 'variance'];\n    backend_util.assertAndGetBroadcastShape(xShape, meanShape);\n    backend_util.assertAndGetBroadcastShape(xShape, varianceShape);\n\n    let offsetSnippet = '0.0';\n    if (offsetShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, offsetShape);\n      this.variableNames.push('offset');\n      offsetSnippet = 'getOffsetAtOutCoords()';\n    }\n\n    let scaleSnippet = '1.0';\n    if (scaleShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, scaleShape);\n      this.variableNames.push('scale');\n      scaleSnippet = 'getScaleAtOutCoords()';\n    }\n\n    this.outputShape = xShape;\n    this.userCode = `\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${offsetSnippet};\n        float scale = ${scaleSnippet};\n        float inv = scale * inversesqrt(variance + float(${varianceEpsilon}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class BatchNormPackedProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(\n      xShape: number[], meanShape: number[], varianceShape: number[],\n      offsetShape: number[]|null, scaleShape: number[]|null,\n      varianceEpsilon: number) {\n    this.variableNames = ['x', 'mean', 'variance'];\n    backend_util.assertAndGetBroadcastShape(xShape, meanShape);\n    backend_util.assertAndGetBroadcastShape(xShape, varianceShape);\n\n    let offsetSnippet = 'vec4(0.0)';\n    if (offsetShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, offsetShape);\n      this.variableNames.push('offset');\n      offsetSnippet = 'getOffsetAtOutCoords()';\n    }\n\n    let scaleSnippet = 'vec4(1.0)';\n    if (scaleShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, scaleShape);\n      this.variableNames.push('scale');\n      scaleSnippet = 'getScaleAtOutCoords()';\n    }\n\n    this.outputShape = xShape;\n    this.userCode = `\n      void main() {\n        vec4 offset = ${offsetSnippet};\n        vec4 scale = ${scaleSnippet};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${varianceEpsilon}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `;\n  }\n}\n","\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, FusedBatchNorm, FusedBatchNormAttrs, FusedBatchNormInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {BatchNormProgram} from '../batchnorm_gpu';\nimport {BatchNormPackedProgram} from '../batchnorm_packed_gpu';\n\nexport const batchNorm: (params: {\n  inputs: FusedBatchNormInputs,\n  backend: MathBackendWebGL,\n  attrs: FusedBatchNormAttrs\n}) => TensorInfo = ({inputs, backend, attrs}) => {\n  const {x, mean, variance, offset, scale} = inputs;\n\n  util.assert(\n      mean.shape.length === variance.shape.length,\n      () => 'Batch normalization gradient requires mean and variance to have ' +\n          'equal ranks.');\n  util.assert(\n      offset == null || mean.shape.length === offset.shape.length,\n      () => 'Batch normalization gradient requires mean and offset to have ' +\n          'equal ranks.');\n  util.assert(\n      scale == null || mean.shape.length === scale.shape.length,\n      () => 'Batch normalization gradient requires mean and scale to have ' +\n          'equal ranks.');\n\n  let {varianceEpsilon} = attrs;\n  if (varianceEpsilon == null) {\n    varianceEpsilon = 0.001;\n  }\n\n  const finalInputs = [x, mean, variance];\n\n  let offsetShape = null;\n  if (offset != null) {\n    offsetShape = offset.shape;\n    finalInputs.push(offset);\n  }\n\n  let scaleShape = null;\n  if (scale != null) {\n    scaleShape = scale.shape;\n    finalInputs.push(scale);\n  }\n\n  const program = env().getBool('WEBGL_PACK_NORMALIZATION') ?\n      new BatchNormPackedProgram(\n          x.shape, mean.shape, variance.shape, offsetShape, scaleShape,\n          varianceEpsilon) :\n      new BatchNormProgram(\n          x.shape, mean.shape, variance.shape, offsetShape, scaleShape,\n          varianceEpsilon);\n  const output =\n      backend.runWebGLProgram(program, finalInputs, finalInputs[0].dtype);\n\n  return output;\n};\n\nexport const batchNormConfig: KernelConfig = {\n  kernelName: FusedBatchNorm,\n  backendName: 'webgl',\n  kernelFunc: batchNorm as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType, UniformType} from './shader_compiler';\n\nexport class SliceProgram implements GPGPUProgram {\n  variableNames = ['source'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n  customUniforms: Array<{name: string; arrayIndex: number; type: UniformType;}>;\n\n  constructor(destSize: number[]) {\n    this.outputShape = destSize;\n    this.rank = destSize.length;\n\n    const dtype = getCoordsDataType(this.rank);\n    this.customUniforms = [{name: 'start', arrayIndex: this.rank, type: 'int'}];\n    const sourceCoords = getCoords(this.rank);\n\n    let body: string;\n    const coordSum = destSize.map((_, i) => {\n      return `sourceLoc.${coords[i]} = start[${i}] + coords.${coords[i]};`;\n    });\n    body = `\n        ${dtype} sourceLoc;\n        ${dtype} coords = getOutputCoords();\n        ${coordSum.join('\\n')}\n      `;\n    this.userCode = `\n      void main() {\n        ${body}\n        setOutput(getSource(${sourceCoords}));\n      }\n    `;\n  }\n}\n\nconst coords = ['x', 'y', 'z', 'w', 'u', 'v'];\n\nfunction getCoords(rank: number): string {\n  if (rank === 1) {\n    return 'sourceLoc';\n  } else if (rank <= 6) {\n    return coords.slice(0, rank).map(x => 'sourceLoc.' + x).join(',');\n  } else {\n    throw Error(`Slicing for rank ${rank} is not yet supported`);\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType, UniformType} from './shader_compiler';\n\nexport class SlicePackedProgram implements GPGPUProgram {\n  variableNames = ['source'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n  customUniforms: Array<{name: string; arrayIndex: number; type: UniformType;}>;\n\n  constructor(destSize: number[]) {\n    this.outputShape = destSize;\n    this.rank = destSize.length;\n    this.customUniforms = [{name: 'start', arrayIndex: this.rank, type: 'int'}];\n    const dtype = getCoordsDataType(this.rank);\n    const coords = getChannels('coords', this.rank);\n    const sourceLoc = getChannels('sourceLoc', this.rank);\n\n    const innerDims =\n        this.rank === 1 ? 'sourceLoc' : `vec2(${sourceLoc.slice(-2).join()})`;\n    const getChannel =\n        `getChannel(getSource(${sourceLoc.join()}), ${innerDims})`;\n    const upperRow = `\n      result.x = ${getChannel};\n      if (++${coords[this.rank - 1]} < ${destSize[this.rank - 1]}) {\n        ++${sourceLoc[this.rank - 1]};\n        result.y = ${getChannel};\n        --${sourceLoc[this.rank - 1]};\n      }\n    `;\n    const lowerRow = this.rank === 1 ? '' : `\n      --${coords[this.rank - 1]};\n      if (++${coords[this.rank - 2]} < ${destSize[this.rank - 2]}) {\n        ++${sourceLoc[this.rank - 2]};\n        result.z = ${getChannel};\n        if (++${coords[this.rank - 1]} < ${destSize[this.rank - 1]}) {\n          ++${sourceLoc[this.rank - 1]};\n          result.w = ${getChannel};\n        }\n      }\n    `;\n\n    const sourceLocSetup = this.rank <= 4 ?\n        `sourceLoc = coords +\n            ${dtype}(${destSize.map((_, i) => `start[${i}]`).join()});` :\n        destSize.map((_, i) => `${sourceLoc[i]} = ${coords[i]} + start[${i}];`)\n            .join('\\n');\n    this.userCode = `\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        ${dtype} sourceLoc;\n        ${sourceLocSetup}\n        vec4 result = vec4(0.);\n        ${upperRow}\n        ${lowerRow}\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, Slice, slice_util, SliceAttrs, SliceInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {sliceImplCPU} from '../kernel_utils/shared';\nimport {SliceProgram} from '../slice_gpu';\nimport {SlicePackedProgram} from '../slice_packed_gpu';\n\nfunction shallowSlice(\n    x: TensorInfo, begin: number[], size: number[], backend: MathBackendWebGL) {\n  const xTexData = backend.texData.get(x.dataId);\n  const t = backend.makeTensorInfo(size, x.dtype);\n  const newTexData = backend.texData.get(t.dataId);\n  // Copy texture data from the original tensor.\n  Object.assign(newTexData, xTexData);\n  newTexData.refCount = 1;\n  newTexData.shape = size;\n  newTexData.dtype = x.dtype;\n  let flatOffset =\n      slice_util.computeFlatOffset(begin, util.computeStrides(x.shape));\n  if (xTexData.slice) {\n    // We are slicing an already sliced tensor, so we have to accumulate\n    // the offset.\n    flatOffset += xTexData.slice.flatOffset;\n  }\n  newTexData.slice = {\n    flatOffset,\n    // Point to the original dataId, which is used to do ref counting.\n    origDataId: xTexData.slice && xTexData.slice.origDataId || x.dataId\n  };\n\n  // Increase the ref count for that data bucket.\n  const refCount = backend.dataRefCount.get(newTexData.slice.origDataId) || 1;\n  backend.dataRefCount.set(newTexData.slice.origDataId, refCount + 1);\n  return t;\n}\n\nexport function slice(\n    args: {inputs: SliceInputs, backend: MathBackendWebGL, attrs: SliceAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {begin, size} = attrs;\n\n  const [$begin, $size] = slice_util.parseSliceParams(x, begin, size);\n  slice_util.assertParamsValid(x, $begin, $size);\n\n  if (util.sizeFromShape($size) === 0) {\n    return backend.makeTensorInfo($size, x.dtype, []);\n  }\n\n  // Run on cpu if dtype is string. For string, the backend represents it\n  // as Uint8Array[], where each Uint8Array is a character. Given that the\n  // computation is only on the outer array, uploading the whole data onto\n  // gpu is wasteful. Also, currently webgl doesn't have a design to\n  // upload and retrieve Uint8Array[] between cpu and gpu. Therefore, we\n  // just run the kernel on cpu if dtype is string.\n  if (backend.shouldExecuteOnCPU([x]) || x.dtype === 'string') {\n    const xTexData = backend.texData.get(x.dataId);\n    const outValues = sliceImplCPU(\n        xTexData.values as TypedArray, $begin, $size, x.shape, x.dtype);\n    return backend.makeTensorInfo($size, x.dtype, outValues);\n  }\n\n  const {isPacked} = backend.texData.get(x.dataId);\n  const isContinous = slice_util.isSliceContinous(x.shape, $begin, $size);\n  if (isPacked || !isContinous) {\n    const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n        new SlicePackedProgram($size) :\n        new SliceProgram($size);\n    const customValues = [$begin];\n    return backend.runWebGLProgram(program, [x], x.dtype, customValues);\n  }\n  backend.uploadToGPU(x.dataId);\n  return shallowSlice(x, $begin, $size, backend);\n}\n\nexport const sliceConfig: KernelConfig = {\n  kernelName: Slice,\n  backendName: 'webgl',\n  kernelFunc: slice as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BatchToSpaceND, BatchToSpaceNDAttrs, BatchToSpaceNDInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\nimport {transpose} from './Transpose';\n\nexport const batchToSpaceND = (args: {\n  inputs: BatchToSpaceNDInputs,\n  backend: MathBackendWebGL,\n  attrs: BatchToSpaceNDAttrs\n}): TensorInfo => {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockShape, crops} = attrs;\n\n  util.assert(\n      x.shape.length <= 4,\n      () => 'batchToSpaceND for rank > 4 with a WebGL backend not ' +\n          'implemented yet');\n  const prod = blockShape.reduce((a, b) => a * b);\n\n  const reshaped = backend_util.getReshaped(x.shape, blockShape, prod);\n  const permuted = backend_util.getPermuted(reshaped.length, blockShape.length);\n  const reshapedPermuted =\n      backend_util.getReshapedPermuted(x.shape, blockShape, prod);\n  const sliceBeginCoords =\n      backend_util.getSliceBeginCoords(crops, blockShape.length);\n  const sliceSize =\n      backend_util.getSliceSize(reshapedPermuted, crops, blockShape.length);\n\n  const toDispose = [];\n\n  const reshapedIntermediate =\n      reshape({inputs: {x}, backend, attrs: {shape: reshaped}});\n  const transposedIntermediate = transpose(\n      {inputs: {x: reshapedIntermediate}, backend, attrs: {perm: permuted}});\n  const reshapedIntermediate2 = reshape({\n    inputs: {x: transposedIntermediate},\n    backend,\n    attrs: {shape: reshapedPermuted}\n  });\n  const sliced = slice({\n    inputs: {x: reshapedIntermediate2},\n    backend,\n    attrs: {begin: sliceBeginCoords, size: sliceSize}\n  });\n\n  toDispose.push(reshapedIntermediate);\n  toDispose.push(transposedIntermediate);\n  toDispose.push(reshapedIntermediate2);\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return sliced;\n};\n\nexport const batchToSpaceNDConfig: KernelConfig = {\n  kernelName: BatchToSpaceND,\n  backendName: 'webgl',\n  kernelFunc: batchToSpaceND as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Bincount, BincountAttrs, BincountInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {bincountImplCPU} from '../kernel_utils/shared';\n\nexport function bincount(args: {\n  inputs: BincountInputs,\n  backend: MathBackendWebGL,\n  attrs: BincountAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, weights} = inputs;\n  const {size} = attrs;\n\n  const xVals = backend.readSync(x.dataId) as TypedArray;\n  const weightsVals = backend.readSync(weights.dataId) as TypedArray;\n\n  const outVals =\n      bincountImplCPU(xVals, weightsVals, weights.dtype, weights.shape, size);\n\n  return backend.makeTensorInfo([size], weights.dtype, outVals);\n}\n\nexport const bincountConfig: KernelConfig = {\n  kernelName: Bincount,\n  backendName: 'webgl',\n  kernelFunc: bincount as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BroadcastArgs, BroadcastArgsInputs, KernelConfig, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\nimport {MathBackendWebGL} from '../backend_webgl';\n\nexport function broadcastArgs(args: {\n  inputs: BroadcastArgsInputs,\n  backend: MathBackendWebGL,\n}): TensorInfo {\n  const {inputs, backend} = args;\n  const {s0, s1} = inputs;\n\n  const s0Vals = backend.readSync(s0.dataId) as TypedArray;\n  const s1Vals = backend.readSync(s1.dataId) as TypedArray;\n\n  const broadcastShape = backend_util.assertAndGetBroadcastShape(\n      Array.from(s0Vals), Array.from(s1Vals));\n\n  return backend.makeTensorInfo(\n      [broadcastShape.length], 'int32', Int32Array.from(broadcastShape));\n}\n\nexport const broadcastArgsConfig: KernelConfig = {\n  kernelName: BroadcastArgs,\n  backendName: 'webgl',\n  kernelFunc: broadcastArgs\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {NotEqual} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {notEqualImplCPU} from '../kernel_utils/shared';\n\nconst NOT_EQUAL = `return float(a != b);`;\n\nexport const notEqual = binaryKernelFunc(\n    {opSnippet: NOT_EQUAL, cpuKernelImpl: notEqualImplCPU, dtype: 'bool'});\n\nexport const notEqualConfig: KernelConfig = {\n  kernelName: NotEqual,\n  backendName: 'webgl',\n  kernelFunc: notEqual,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Real, RealInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {identity} from './Identity';\n\nexport function real(args: {inputs: RealInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n  const inputData = backend.texData.get(input.dataId);\n\n  return identity({inputs: {x: inputData.complexTensorInfos.real}, backend});\n}\n\nexport const realConfig: KernelConfig = {\n  kernelName: Real,\n  backendName: 'webgl',\n  kernelFunc: real as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as tf from '@tensorflow/tfjs-core';\nimport {BinaryInputs, Cast, CastAttrs, CastInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {castImplCPU} from '../kernel_utils/shared';\nimport {complex} from './Complex';\nimport {identity} from './Identity';\nimport {notEqual} from './NotEqual';\nimport {real} from './Real';\n\nimport {int} from '../kernel_utils/int';\n\nexport function cast(\n    args: {inputs: CastInputs, backend: MathBackendWebGL, attrs: CastAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {dtype} = attrs;\n\n  // Casting to complex64.\n  if (dtype === 'complex64') {\n    if (x.dtype === 'complex64') {\n      return identity({inputs: {x}, backend});\n    }\n\n    // TODO(annxingyuan): Import kernel function once zeros is modularized.\n    const zerosTensor = tf.zeros(x.shape);\n    const floatX = cast({inputs: {x}, backend, attrs: {dtype: 'float32'}});\n\n    const result =\n        complex({inputs: {real: floatX, imag: zerosTensor}, backend});\n\n    zerosTensor.dispose();\n    backend.disposeIntermediateTensorInfo(floatX);\n\n    return result;\n  }\n\n  // Casting from complex64\n  if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const result = cast({inputs: {x: realPart}, backend, attrs: {dtype}});\n    backend.disposeIntermediateTensorInfo(realPart);\n    return result;\n  }\n\n  if (!util.hasEncodingLoss(x.dtype, dtype)) {\n    // We don't change the underlying data, since we cast to higher\n    // precision.\n    const result = identity({inputs: {x}, backend});\n    return {dataId: result.dataId, shape: result.shape, dtype};\n  }\n\n  if (backend.shouldExecuteOnCPU([x])) {\n    const values = backend.texData.get(x.dataId).values as TypedArray;\n    const [resultShape, resultType, resultData] =\n        castImplCPU(values, x.shape, x.dtype, dtype);\n    return backend.makeTensorInfo(resultShape, resultType, resultData);\n  }\n\n  if (dtype === 'int32') {\n    return int(x, backend);\n  }\n\n  if (dtype === 'bool') {\n    const zerosTensorInfo = backend.makeTensorInfo(\n        [], 'bool', util.getTypedArrayFromDType('bool', 1));\n\n    const binaryInputs: BinaryInputs = {a: x, b: zerosTensorInfo};\n\n    const result = notEqual({inputs: binaryInputs, backend}) as TensorInfo;\n    backend.disposeIntermediateTensorInfo(zerosTensorInfo);\n    return result;\n  }\n\n  throw new Error(`Error in Cast: failed to cast ${x.dtype} to ${dtype}`);\n}\n\nexport const castConfig: KernelConfig = {\n  kernelName: Cast,\n  backendName: 'webgl',\n  kernelFunc: cast as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {UnaryOpProgram} from '../unaryop_gpu';\n\nconst TO_INT = `return float(int(x));`;\n\nexport function int(input: TensorInfo, backend: MathBackendWebGL): TensorInfo {\n  const program = new UnaryOpProgram(input.shape, TO_INT);\n  const output = backend.runWebGLProgram(program, [input], 'int32');\n  return {dataId: output.dataId, shape: output.shape, dtype: output.dtype};\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Ceil, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {ceilImplCPU} from '../kernel_utils/shared';\n\nconst CEIL = `return ceil(x);`;\n\nexport const ceil = unaryKernelFunc(\n    {opSnippet: CEIL, packedOpSnippet: CEIL, cpuKernelImpl: ceilImplCPU});\n\nexport const ceilConfig: KernelConfig = {\n  kernelName: Ceil,\n  backendName: 'webgl',\n  kernelFunc: ceil as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {UniformType} from './shader_compiler';\n\nexport class ClipProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  customUniforms = [\n    {name: 'minVal', type: 'float' as UniformType},\n    {name: 'maxVal', type: 'float' as UniformType}\n  ];\n\n  constructor(aShape: number[]) {\n    this.outputShape = aShape;\n    this.userCode = `\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {UniformType} from './shader_compiler';\n\nexport class ClipPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  userCode: string;\n  outputShape: number[];\n  customUniforms = [\n    {name: 'minVal', type: 'float' as UniformType},\n    {name: 'maxVal', type: 'float' as UniformType}\n  ];\n\n  constructor(aShape: number[]) {\n    this.outputShape = aShape;\n    this.userCode = `\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ClipByValue, ClipByValueAttrs, ClipByValueInputs, env, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ClipProgram} from '../clip_gpu';\nimport {ClipPackedProgram} from '../clip_packed_gpu';\n\nexport function clipByValue(args: {\n  inputs: ClipByValueInputs,\n  backend: MathBackendWebGL,\n  attrs: ClipByValueAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {clipValueMin, clipValueMax} = attrs;\n\n  let program;\n  if (env().getBool('WEBGL_PACK_CLIP')) {\n    program = new ClipPackedProgram(x.shape);\n  } else {\n    program = new ClipProgram(x.shape);\n  }\n  const customValues = [[clipValueMin], [clipValueMax]];\n  return backend.runWebGLProgram(program, [x], x.dtype, customValues);\n}\n\nexport const clipByValueConfig: KernelConfig = {\n  kernelName: ClipByValue,\n  backendName: 'webgl',\n  kernelFunc: clipByValue as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ComplexAbsProgram implements GPGPUProgram {\n  variableNames = ['real', 'imag'];\n  userCode: string;\n  outputShape: number[];\n\n  constructor(shape: number[]) {\n    this.outputShape = shape;\n    this.userCode = `\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ComplexAbs, ComplexAbsInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ComplexAbsProgram} from '../complex_abs_gpu';\n\n// Returns a TensorInfo with the complex shape and the dataId of the\n// underlying part. We need to do this because a reshaped complex tensor is\n// not reflected in its parts.\nfunction makeComplexComponentTensorInfo(\n    complexTensor: TensorInfo, complexPart: TensorInfo): TensorInfo {\n  return {\n    dataId: complexPart.dataId,\n    dtype: complexPart.dtype,\n    shape: complexTensor.shape\n  };\n}\n\nexport function complexAbs(\n    args: {inputs: ComplexAbsInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  const xData = backend.texData.get(x.dataId);\n\n  const program = new ComplexAbsProgram(x.shape);\n  const programInputs = [\n    makeComplexComponentTensorInfo(x, xData.complexTensorInfos.real),\n    makeComplexComponentTensorInfo(x, xData.complexTensorInfos.imag),\n  ];\n\n  return backend.runWebGLProgram(\n      program, programInputs, programInputs[0].dtype);\n}\n\nexport const complexAbsConfig: KernelConfig = {\n  kernelName: ComplexAbs,\n  backendName: 'webgl',\n  kernelFunc: complexAbs as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ConcatProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n\n  // Concats 2d tensors along axis=1. See comments in MathBackendWebGL.concat().\n  constructor(shapes: Array<[number, number]>) {\n    this.outputShape = backend_util.computeOutShape(shapes, 1 /* axis */);\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n\n    const offsets: number[] = new Array(shapes.length - 1);\n    offsets[0] = shapes[0][1];\n    for (let i = 1; i < offsets.length; i++) {\n      offsets[i] = offsets[i - 1] + shapes[i][1];\n    }\n\n    const snippets = [`if (yC < ${offsets[0]}) setOutput(getT0(yR, yC));`];\n    for (let i = 1; i < offsets.length; i++) {\n      const shift = offsets[i - 1];\n      snippets.push(\n          `else if (yC < ${offsets[i]}) ` +\n          `setOutput(getT${i}(yR, yC-${shift}));`);\n    }\n    const lastIndex = offsets.length;\n    const lastShift = offsets[offsets.length - 1];\n    snippets.push(`else setOutput(getT${lastIndex}(yR, yC-${lastShift}));`);\n\n    this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${snippets.join('\\n        ')}\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ConcatPackedProgram implements GPGPUProgram {\n  variableNames: string[];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(shapes: number[][], axis: number) {\n    this.outputShape = backend_util.computeOutShape(shapes, axis);\n    const shape = this.outputShape;\n    const rank = shape.length;\n    const dtype = getCoordsDataType(rank);\n    const coords = getChannels('coords', rank);\n    const channels = ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank);\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n\n    const offsets: number[] = new Array(shapes.length - 1);\n    offsets[0] = shapes[0][axis];\n    for (let i = 1; i < offsets.length; i++) {\n      offsets[i] = offsets[i - 1] + shapes[i][axis];\n    }\n\n    const channel = channels[axis];\n    const lastChannels = channels.slice(-2);\n    const allChannels = channels.join();\n\n    let getValueSnippet = `if (${channel} < ${offsets[0]}) {\n        return getChannel(\n            getT0(${allChannels}), vec2(${lastChannels.join()}));\n        }`;\n    for (let i = 1; i < offsets.length; i++) {\n      const shift = offsets[i - 1];\n      // Note: the >= comparison below may seem unnecessary given the check\n      // above but is needed to workaround branch execution issues on some\n      // devices. It makes all the conditions exclusive without relying on\n      // execution order.\n      getValueSnippet += `\n        if (${channel} < ${offsets[i]}  && ${channel} >= ${offsets[i - 1]}) {\n          return getChannel(\n            getT${i}(${shiftedChannels(channels, channel, shift)}),\n            vec2(${shiftedChannels(lastChannels, channel, shift)}));\n        }`;\n    }\n    const lastIndex = offsets.length;\n    const shift = offsets[offsets.length - 1];\n    getValueSnippet += `\n        return getChannel(\n          getT${lastIndex}(${shiftedChannels(channels, channel, shift)}),\n          vec2(${shiftedChannels(lastChannels, channel, shift)}));`;\n\n    this.userCode = `\n      float getValue(${channels.map(x => 'int ' + x)}) {\n        ${getValueSnippet}\n      }\n\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${coords}), 0., 0., 0.);\n\n        ${coords[rank - 1]} = ${coords[rank - 1]} + 1;\n        if (${coords[rank - 1]} < ${shape[rank - 1]}) {\n          result.g = getValue(${coords});\n        }\n\n        ${coords[rank - 2]} = ${coords[rank - 2]} + 1;\n        if (${coords[rank - 2]} < ${shape[rank - 2]}) {\n          result.a = getValue(${coords});\n        }\n\n        ${coords[rank - 1]} = ${coords[rank - 1]} - 1;\n        if (${coords[rank - 2]} < ${shape[rank - 2]} &&\n            ${coords[rank - 1]} < ${shape[rank - 1]}) {\n          result.b = getValue(${coords});\n        }\n        setOutput(result);\n      }\n    `;\n  }\n}\n\n/**\n * Return an expression for coordinates into a vector where a given channel\n * will be offset by [shift].\n *\n * @param channels the channels to consider\n * @param channel the channel we want shifted\n * @param shift  the amount to subtract from the channel.\n *\n * @returns a string of the form 'x, y-[shift], z' where any one channel can\n * have the shift applied.\n */\nfunction shiftedChannels(channels: string[], channel: string, shift: number) {\n  const channelIdx = channels.indexOf(channel);\n  const res = channels.map((c, idx) => {\n    if (idx === channelIdx) {\n      return `${c} - ${shift}`;\n    } else {\n      return c;\n    }\n  });\n  return res.join();\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Imag, ImagInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {identity} from './Identity';\n\nexport function imag(args: {inputs: ImagInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n  const inputData = backend.texData.get(input.dataId);\n\n  return identity({inputs: {x: inputData.complexTensorInfos.imag}, backend});\n}\n\nexport const imagConfig: KernelConfig = {\n  kernelName: Imag,\n  backendName: 'webgl',\n  kernelFunc: imag as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, ConcatInputs, env, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ConcatProgram} from '../concat_gpu';\nimport {ConcatPackedProgram} from '../concat_packed_gpu';\nimport {concatImplCPU} from '../kernel_utils/shared';\nimport {CLONE, UnaryOpProgram} from '../unaryop_gpu';\nimport {UnaryOpPackedProgram} from '../unaryop_packed_gpu';\n\nimport {complex} from './Complex';\nimport {imag} from './Imag';\nimport {real} from './Real';\nimport {reshape} from './Reshape';\n\nexport function concatImpl(\n    inputs: ConcatInputs, axis: number, backend: MathBackendWebGL): TensorInfo {\n  const dtype = inputs[0].dtype;\n  if (dtype === 'complex64') {\n    const reals = inputs.map((t) => real({inputs: {input: t}, backend}));\n    const imags = inputs.map((t) => imag({inputs: {input: t}, backend}));\n\n    const realConcated = concatImpl(reals, axis, backend);\n    const imagConcated = concatImpl(imags, axis, backend);\n\n    const result =\n        complex({inputs: {real: realConcated, imag: imagConcated}, backend});\n\n    reals.forEach(r => backend.disposeIntermediateTensorInfo(r));\n    imags.forEach(i => backend.disposeIntermediateTensorInfo(i));\n    backend.disposeIntermediateTensorInfo(realConcated);\n    backend.disposeIntermediateTensorInfo(imagConcated);\n\n    return result;\n  }\n\n  let runOnCpu = backend.shouldExecuteOnCPU(inputs);\n\n  // Run on cpu if dtype is string. For string, the backend represents it\n  // as Uint8Array[], where each Uint8Array is a character. Given that the\n  // computation is only on the outer array, uploading the whole data onto\n  // gpu is wasteful. Also, currently webgl doesn't have a design to\n  // upload and retrieve Uint8Array[] between cpu and gpu. Therefore, we\n  // just run the kernel on cpu if dtype is string.\n  if (dtype === 'string') {\n    runOnCpu = true;\n  }\n\n  if (runOnCpu) {\n    // Any concat of n-dimensional tensors across any axis can be reduced to\n    // a concatenation of two-dimensional tensors across the axis 1 by first\n    // partitioning the axes of the original tensors into those less than the\n    // axis to be concatenated and the rest. Then reshape the tensors\n    // into a two-dimensional tensor by collapsing these two sets of axes and\n    // concatenate the resulting matrices across the axis 1, finally reshaping\n    // the result to have the proper shape.\n    const tensors2D = inputs.map(t => {\n      const innerSize = util.sizeFromShape(t.shape.slice(axis));\n      const shape = [-1, innerSize];\n      return reshape({inputs: {x: t}, backend, attrs: {shape}});\n    });\n\n    const inputsValShapes = tensors2D.map(t => {\n      return {vals: backend.readSync(t.dataId), shape: t.shape};\n    });\n\n    // Concats 2d tensors along axis=1.\n    const outShape =\n        backend_util.computeOutShape(tensors2D.map(t => t.shape), 1 /* axis */);\n    const simplyConcat = tensors2D[0].shape[0] === 1;\n    const outVals =\n        concatImplCPU(inputsValShapes, outShape, dtype, simplyConcat);\n\n    const finalOutShape =\n        backend_util.computeOutShape(inputs.map(t => t.shape), axis);\n\n    const outInfo = backend.makeTensorInfo(finalOutShape, dtype, outVals);\n\n    tensors2D.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n    return outInfo;\n  }\n\n  // Keep only non-empty tensors (ignore tensors with 0 in their shape).\n  const $inputs = inputs.filter(t => util.sizeFromShape(t.shape) > 0);\n\n  const shouldPack: boolean = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') &&\n      $inputs[0].shape.length > 1;\n\n  if ($inputs.length === 1) {\n    // Clone tensor.\n    const program = shouldPack ?\n        new UnaryOpProgram(inputs[0].shape, CLONE) :\n        new UnaryOpPackedProgram(inputs[0].shape, CLONE);\n    return backend.runWebGLProgram(program, inputs, dtype);\n  }\n\n  const maxTexturesInShader = env().getNumber('WEBGL_MAX_TEXTURES_IN_SHADER');\n  if ($inputs.length > maxTexturesInShader) {\n    const reducedInputs = [];\n    for (let i = 0; i < $inputs.length; i += maxTexturesInShader) {\n      const subArray = $inputs.slice(i, i + maxTexturesInShader);\n      reducedInputs.push(concatImpl(subArray, axis, backend));\n    }\n    const result = concatImpl(reducedInputs, axis, backend);\n\n    for (const i of reducedInputs) {\n      backend.disposeIntermediateTensorInfo(i);\n    }\n\n    return result;\n  }\n\n  if (shouldPack) {\n    const program = new ConcatPackedProgram($inputs.map(t => t.shape), axis);\n    return backend.runWebGLProgram(program, $inputs, dtype);\n  }\n\n  const {tensors2D, outShape} = computeTensors2D($inputs, axis, backend);\n  const program =\n      new ConcatProgram(tensors2D.map(t => t.shape as [number, number]));\n  const result = backend.runWebGLProgram(program, tensors2D, dtype);\n\n  tensors2D.forEach(r => backend.disposeIntermediateTensorInfo(r));\n  const reshapedResult =\n      reshape({inputs: {x: result}, attrs: {shape: outShape}, backend});\n  backend.disposeIntermediateTensorInfo(result);\n\n  return reshapedResult;\n}\n\nfunction computeTensors2D(\n    inputs: ConcatInputs, axis: number, backend: MathBackendWebGL) {\n  // Any concat of n-dimensional tensors across any axis can be reduced to\n  // a concatenation of two-dimensional tensors across the axis 1 by first\n  // partitioning the axes of the original tensors into those less than the\n  // axis to be concatenated and the rest. Then reshape the tensors\n  // into a two-dimensional tensor by collapsing these two sets of axes and\n  // concatenate the resulting matrices across the axis 1, finally reshaping\n  // the result to have the proper shape.\n  const outShape = backend_util.computeOutShape(inputs.map(t => t.shape), axis);\n  const tensors2D = inputs.map(\n      x => reshape({\n        inputs: {x},\n        attrs: {shape: [-1, util.sizeFromShape(x.shape.slice(axis))]},\n        backend\n      }));\n\n  return {tensors2D, outShape};\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Concat, ConcatAttrs, ConcatInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {concatImpl} from './Concat_impl';\nimport {identity} from './Identity';\n\nexport function concat(\n    args:\n        {inputs: ConcatInputs, attrs: ConcatAttrs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {axis} = attrs;\n\n  const $axis = util.parseAxisParam(axis, inputs[0].shape)[0];\n\n  const shapes = inputs.map(t => t.shape);\n  backend_util.assertParamsConsistent(shapes, $axis);\n\n  const outShape =\n      backend_util.computeOutShape(inputs.map(t => t.shape), $axis);\n\n  if (util.sizeFromShape(outShape) === 0) {\n    return backend.makeTensorInfo(outShape, inputs[0].dtype, []);\n  }\n\n  // Keep only non-empty tensors (ignore tensors with 0 in their shape).\n  const $inputs = inputs.filter(t => util.sizeFromShape(t.shape) > 0);\n  if ($inputs.length === 1) {\n    return identity({inputs: {x: $inputs[0]}, backend});\n  }\n\n  return concatImpl($inputs, $axis, backend);\n}\n\nexport const concatConfig: KernelConfig = {\n  kernelName: Concat,\n  backendName: 'webgl',\n  kernelFunc: concat as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class Conv2DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, addBias = false,\n      activation: string = null, hasPreluActivationWeights = false,\n      hasLeakyreluAlpha = false) {\n    this.outputShape = convInfo.outShape;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n\n    const inputDepthNearestVec4 = Math.floor(convInfo.inChannels / 4) * 4;\n    const inputDepthVec4Remainder = convInfo.inChannels % 4;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n\n    const rowDim = isChannelsLast ? 1 : 2;\n    const colDim = isChannelsLast ? 2 : 3;\n    const channelDim = isChannelsLast ? 3 : 1;\n\n    let activationSnippet = '', applyActivationSnippet = '';\n    if (activation) {\n      if (hasPreluActivationWeights) {\n        activationSnippet = `float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n      } else if (hasLeakyreluAlpha) {\n        activationSnippet = `float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${activation}\n        }`;\n      } else {\n        activationSnippet = `\n          float activation(float x) {\n            ${activation}\n          }\n        `;\n      }\n\n      applyActivationSnippet = `result = activation(result);`;\n    }\n\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivationWeights) {\n      this.variableNames.push('preluActivationWeights');\n    }\n\n    if (hasLeakyreluAlpha) {\n      this.variableNames.push('leakyreluAlpha');\n    }\n\n    this.userCode = `\n      ${activationSnippet}\n\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${channelDim}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${rowDim}], coords[${colDim}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          int xR = xRCorner + wR * ${dilationHeight};\n\n          if (xR < 0 || xR >= ${convInfo.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            int xC = xCCorner + wC * ${dilationWidth};\n\n            if (xC < 0 || xC >= ${convInfo.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${inputDepthNearestVec4}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${isChannelsLast}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${inputDepthVec4Remainder === 1}) {\n\n              if (${isChannelsLast}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${inputDepthNearestVec4}) *\n                    getW(wR, wC, ${inputDepthNearestVec4}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${inputDepthNearestVec4}, xR, xC) *\n                    getW(wR, wC, ${inputDepthNearestVec4}, d2);\n              }\n\n            } else if (${inputDepthVec4Remainder === 2}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${inputDepthNearestVec4}, d2),\n                getW(wR, wC, ${inputDepthNearestVec4} + 1, d2)\n              );\n\n              if (${isChannelsLast}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${inputDepthNearestVec4}, xR, xC),\n                  getX(batch, ${inputDepthNearestVec4} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${inputDepthVec4Remainder === 3}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${inputDepthNearestVec4}, d2),\n                getW(wR, wC, ${inputDepthNearestVec4} + 1, d2),\n                getW(wR, wC, ${inputDepthNearestVec4} + 2, d2)\n              );\n\n              if (${isChannelsLast}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 1),\n                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${inputDepthNearestVec4}, xR, xC),\n                  getX(batch, ${inputDepthNearestVec4} + 1, xR, xC),\n                  getX(batch, ${inputDepthNearestVec4} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${addBiasSnippet}\n        ${applyActivationSnippet}\n        setOutput(result);\n      }\n    `;\n  }\n}\n\nexport class Conv3DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.outShape;\n    const padFront = convInfo.padInfo.front;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n\n    const inputDepthNearestVec4 = Math.floor(convInfo.inChannels / 4) * 4;\n    const inputDepthVec4Remainder = convInfo.inChannels % 4;\n\n    this.userCode = `\n      const ivec3 strides = ivec3(${strideDepth}, ${strideHeight}, ${\n        strideWidth});\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${filterDepth}; wF++) {\n          int xF = xFCorner + wF * ${dilationDepth};\n\n          if (xF < 0 || xF >= ${convInfo.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${filterHeight}; wR++) {\n            int xR = xRCorner + wR * ${dilationHeight};\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${filterWidth}; wC++) {\n              int xC = xCCorner + wC * ${dilationWidth};\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${inputDepthNearestVec4}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${inputDepthVec4Remainder === 1}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}) *\n                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2);\n              } else if (${inputDepthVec4Remainder === 2}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2),\n                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${inputDepthVec4Remainder === 3}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 1),\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2),\n                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 1, d2),\n                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n import {backend_util, util} from '@tensorflow/tfjs-core';\n\n import {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\n\n export class Conv2DPackedProgram implements GPGPUProgram {\n   variableNames = ['x', 'W'];\n   packedInputs = true;\n   packedOutput = true;\n   outputShape: number[];\n   userCode: string;\n   enableShapeUniforms: boolean;\n   customUniforms = [\n     {name: 'pads', type: 'ivec2' as const },\n     {name: 'strides', type: 'ivec2' as const },\n     {name: 'dilations', type: 'ivec2' as const },\n     {name: 'inDims', type: 'ivec2' as const },\n   ];\n\n   constructor(\n       convInfo: backend_util.Conv2DInfo, addBias = false,\n       activation: string = null, hasPreluActivation = false,\n       hasLeakyReluAlpha = false) {\n     this.outputShape = convInfo.outShape;\n     this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n     const padLeft = convInfo.padInfo.left;\n     const strideWidth = convInfo.strideWidth;\n     const dilationWidth = convInfo.dilationWidth;\n     const filterHeight = convInfo.filterHeight;\n     const filterWidth = convInfo.filterWidth;\n     const texelsAcross = filterWidth;\n\n     let mainLoop = `\n       int xR; int xC; int xCOffset;\n       vec4 wTexel; vec4 previous; vec4 final;`;\n\n     for (let c = 0; c < filterWidth; c++) {\n       mainLoop += `\n           vec4 xTexelC${c * 2};\n           int xTexelC${c * 2}Ready;\n           vec4 xTexelC${c * 2 + 1};\n           int xTexelC${c * 2 + 1}Ready;\n           vec4 xC${c};`;\n     }\n\n     /**\n      * This vectorized implementation works by gathering the values needed for\n      * each output channel's dot product into vec4's and then multiplying them\n      * all together (this happens in the final double for-loop below). Most of\n      * the main loop consists of constructing these vec4's with the minimum\n      * number of texture2D calls, which means making use of all four returned\n      * values from a texture2D call at once.\n      */\n     mainLoop += `\n     for (int r = 0; r < ${filterHeight}; r++) {\n      for (int d1 = 0; d1 < ${convInfo.inChannels}; d1 += 2) {\n       `;\n     for (let c = 0; c < filterWidth; c++) {\n       mainLoop += `\n           xTexelC${c * 2} = vec4(0.0);\n           xTexelC${c * 2}Ready = 0;\n           xTexelC${c * 2 + 1} = vec4(0.0);\n           xTexelC${c * 2 + 1}Ready = 0;\n           xC${c} = vec4(0.0);`;\n     }\n     mainLoop += `\n         xR = xRCorner + r * dilations[0];\n         if (xR >=0 && xR < inDims[0]) {\n       `;\n\n     for (let texelC = 0; texelC < (texelsAcross + 1) / 2; texelC++) {\n       const colIndex = texelC * 2;\n\n       mainLoop += `\n           xC = xCCorner + ${colIndex * dilationWidth};\n           `;\n\n       if (strideWidth === 1) {\n         if (colIndex < filterWidth) {\n           // If padding is odd, the outer texels have to be composed.\n           if (padLeft % 2 === 1) {\n             // TODO: Ensure vec4 previous does not result in redundant sample,\n             // and avoid setting xTexelRC's that exceed the boundary in the\n             // first place rather than resetting them to vec4(0)).\n\n             // To compute xCOffset:\n             // - If padding is odd, we must add 1 to ensure we ask for an\n             // even-numbered row.\n             // - We subtract 2 to access the previous texel.\n\n             mainLoop += `\n                 xCOffset = xC + 1;\n                 if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${\n                 colIndex}Ready == 0) {\n                   xTexelC${colIndex} = getX(batch, xR, xCOffset, d1);\n\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${colIndex}.zw = vec2(0.0);\n                   }\n                   xTexelC${colIndex}Ready = 1;\n                 }\n               `;\n             // This texel has been read in previous iteration if the dilation\n             // is 1.\n             if (dilationWidth === 1 && colIndex > 0) {\n               mainLoop += `\n                 xC${colIndex} = vec4(xTexelC${colIndex - 2}.zw, xTexelC${\n                   colIndex}.xy);\n                 `;\n             } else {\n               mainLoop += `\n                   xCOffset = xC + 1 - 2;\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       previous.zw = vec2(0.0);\n                     }\n\n                     xC${colIndex} = vec4(previous.zw, xTexelC${colIndex}.xy);\n                   } else {\n                     xC${colIndex} = vec4(0.0, 0.0, xTexelC${colIndex}.xy);\n                   }\n                   `;\n             }\n           } else {\n             // Padding is even, so xRC corresponds to a single texel.\n             mainLoop += `\n                 if (xC >= 0 && xC < inDims[1] && xTexelC${colIndex}Ready == 0) {\n                   xTexelC${colIndex} = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC${colIndex}.zw = vec2(0.0);\n                   }\n                   xTexelC${colIndex}Ready = 1;\n                 }\n\n                 xC${colIndex} = xTexelC${colIndex};\n                 `;\n           }\n\n           if (colIndex + 1 < filterWidth) {\n             // If dilation is even, the second entry should match the first\n             // (either both are composed or both are single samples). But if\n             // dilation is odd, then the second entry should be the opposite\n             // of the first (if the first is composed, the second is a single\n             // sample, and vice versa.)\n\n             const nextTexelOffset = padLeft % 2 === 0 ?\n                 util.nearestLargerEven(dilationWidth) :\n                 dilationWidth;\n\n             if ((dilationWidth % 2 === 0 && padLeft % 2 === 1) ||\n                 (dilationWidth % 2 !== 0 && padLeft % 2 !== 1)) {\n               mainLoop += `\n                   xCOffset = xC + imod(pads[1], 2) + ${nextTexelOffset};\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${\n                   colIndex + 1}Ready == 0) {\n                     xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       xTexelC${colIndex + 1}.zw = vec2(0.0);\n                     }\n                     xTexelC${colIndex + 1}Ready = 1;\n                   }\n                   `;\n\n               // If dilation > 1 then the xRC's will not be able to share any\n               // values, so each xRC will require two unique calls to getX.\n               if (dilationWidth > 1) {\n                 mainLoop += `\n                     xCOffset -= 2;\n                     if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                      previous = getX(batch, xR, xCOffset, d1);\n                      xC${colIndex + 1} = vec4(previous.zw, xTexelC${\n                        colIndex + 1}.xy);\n                     } else {\n                      xC${colIndex + 1} = vec4(0.0, 0.0, xTexelC${\n                        colIndex + 1}.xy);\n                     }\n                     `;\n               } else {\n                 mainLoop += `\n                     xC${colIndex + 1} = vec4(xTexelC${colIndex}.zw, xTexelC${\n                     colIndex + 1}.xy);\n                     `;\n               }\n\n             } else {\n               // If dilation is 1 and padding is odd, we have already read the\n               // texel when constructing the previous x value. Here we can\n               // simply skip the texture read.\n               if (nextTexelOffset === 1) {\n                 mainLoop += `\n                     xC${colIndex + 1} = xTexelC${colIndex};\n                     `;\n               } else {\n                 mainLoop += `\n                     xCOffset = xC + ${nextTexelOffset};\n\n                     if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${\n                     colIndex + 1}Ready == 0) {\n                       xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);\n                       if (xCOffset + 1 >= inDims[1]) {\n                         xTexelC${colIndex + 1}.zw = vec2(0.0);\n                       }\n                       xTexelC${colIndex + 1}Ready = 1;\n                     }\n\n                     xC${colIndex + 1} = xTexelC${colIndex + 1};\n                     `;\n               }\n             }\n           }\n         }\n       } else {  // stride === 2\n         if (colIndex < filterWidth) {\n           // Depending on whether padLeft is even or odd, we want either the\n           // xy or zw channels from X texels for xC${colIndex}. If padLeft is\n           // even, xC${colIndex +1} is simply the zw channels of texels we've\n           // already sampled. But if padLeft is odd, xC{$c + 1}.zw will\n           // need to come from the xy channels of a new texel, hence the `\n           // vec4\n           // final` initialized below.\n           if (padLeft % 2 === 1) {\n             mainLoop += `\n                 xCOffset = xC + 1 - strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${\n                 colIndex}Ready == 0) {\n                   xTexelC${colIndex} = getX(batch, xR, xCOffset, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${colIndex}.zw = vec2(0.0);\n                   }\n                   xTexelC${colIndex}Ready = 1;\n                 }\n\n                 if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${\n                 colIndex + 1}Ready == 0) {\n                   xTexelC${colIndex + 1} = getX(batch, xR, xC + 1, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xC + 2 >= inDims[1]) {\n                     xTexelC${colIndex + 1}.zw = vec2(0.0);\n                   }\n                   xTexelC${colIndex + 1}Ready = 1;\n                 }\n\n                 xC${colIndex} = vec4(xTexelC${colIndex}.zw, xTexelC${\n                 colIndex + 1}.zw);\n               `;\n\n             if (colIndex + 1 < filterWidth) {\n               mainLoop += `\n                   final = vec4(0.0);\n                   xCOffset = xC + 1 + strides[1];\n                   if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                     final = getX(batch, xR, xCOffset, d1);\n                   }\n                   xC${colIndex + 1} = vec4(xTexelC${colIndex + 1}.xy, final.xy);\n                 `;\n             }\n           } else {\n             mainLoop += `\n                 if(xC >= 0 && xC < inDims[1] && xTexelC${colIndex}Ready == 0) {\n                   xTexelC${colIndex} = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC${colIndex}.zw = vec2(0.0);\n                   }\n                   xTexelC${colIndex}Ready = 1;\n                 }\n\n                 xCOffset = xC + strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${\n                 colIndex + 1}Ready == 0) {\n                   xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${colIndex + 1}.zw = vec2(0.);\n                   }\n                   xTexelC${colIndex + 1}Ready = 1;\n                 }\n\n                 xC${colIndex} = vec4(\n                   xTexelC${colIndex}.xy, xTexelC${colIndex + 1}.xy);\n               `;\n\n             if (colIndex + 1 < filterWidth) {\n               mainLoop += `\n                   xC${colIndex + 1} = vec4(xTexelC${colIndex}.zw, xTexelC${\n                   colIndex + 1}.zw);\n                 `;\n             }\n           }\n         }\n       }\n\n       // localize the dotProd accumulation within the loop, the theory is for\n       // GPU with limited cache, accumulate sum across large amount of\n       // veriables will cause lots of cache misses. (i.e. 5x5 filter will have\n       // 50 variables)\n       if (colIndex < filterWidth) {\n         mainLoop += `\n             wTexel = getW(r, ${colIndex}, d1, d2);\n             dotProd += xC${colIndex}.xxzz * vec4(wTexel.xy, wTexel.xy);\n             if(d1 + 1 < ${convInfo.inChannels}) {\n               dotProd += xC${colIndex}.yyww * vec4(wTexel.zw, wTexel.zw);\n             }\n           `;\n\n         if (colIndex + 1 < filterWidth) {\n           mainLoop += `\n               wTexel = getW(r, ${colIndex + 1}, d1, d2);\n               dotProd += xC${colIndex + 1}.xxzz * vec4(wTexel.xy, wTexel.xy);\n               if(d1 + 1 < ${convInfo.inChannels}) {\n                 dotProd += xC${colIndex + 1}.yyww * vec4(wTexel.zw, wTexel.zw);\n               }\n             `;\n         }\n       }\n     }\n     mainLoop += `\n     }\n   `;\n   mainLoop += `\n     }\n   `;\n   mainLoop += `\n     }\n   `;\n\n     let activationSnippet = '', applyActivationSnippet = '';\n     if (activation) {\n       if (hasPreluActivation) {\n         activationSnippet = `vec4 activation(vec4 a) {\n           vec4 b = getPreluActivationWeightsAtOutCoords();\n           ${activation}\n         }`;\n       } else if (hasLeakyReluAlpha) {\n         activationSnippet = `vec4 activation(vec4 a) {\n           vec4 b = getLeakyreluAlphaAtOutCoords();\n           ${activation}\n         }`;\n       } else {\n         activationSnippet = `vec4 activation(vec4 x) {\n           ${activation}\n         }`;\n       }\n\n       applyActivationSnippet = `result = activation(result);`;\n     }\n\n     const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n     if (addBias) {\n       this.variableNames.push('bias');\n     }\n\n     if (hasPreluActivation) {\n       this.variableNames.push('preluActivationWeights');\n     }\n     if (hasLeakyReluAlpha) {\n       this.variableNames.push('leakyreluAlpha');\n     }\n\n     this.userCode = `\n       ${activationSnippet}\n\n       void main() {\n         ivec4 coords = getOutputCoords();\n         int batch = coords.x;\n         ivec2 xRCCorner = coords.yz * strides - pads;\n         int d2 = coords.w;\n         int xRCorner = xRCCorner.x;\n         int xCCorner = xRCCorner.y;\n\n         //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n         vec4 dotProd = vec4(0.000000000000001);\n\n         ${mainLoop}\n\n         vec4 result = dotProd - vec4(0.000000000000001);\n         ${addBiasSnippet}\n         ${applyActivationSnippet}\n         setOutput(result);\n       }\n     `;\n   }\n }\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\n\nexport class Im2ColPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms: boolean;\n  customUniforms = [\n    {name: 'inputShape', type: 'ivec4' as const },\n    {name: 'pad', type: 'ivec2' as const },\n    {name: 'stride', type: 'ivec2' as const },\n    {name: 'dilation', type: 'ivec2' as const },\n    {name: 'inChannels', type: 'int' as const },\n    {name: 'itemsPerBlockRow', type: 'int' as const },\n    {name: 'outWidth', type: 'int' as const },\n  ];\n\n  constructor(outputShape: number[], convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    const {dataFormat} = convInfo;\n    const glsl = getGlslDifferences();\n    const isChannelsLast = dataFormat === 'channelsLast';\n    const rowDim = isChannelsLast ? 1 : 2;\n    const colDim = isChannelsLast ? 2 : 3;\n\n    const boundsCheckingSnippet = this.enableShapeUniforms ?\n        'if(blockIndex < outShape[2] && pos < outShape[1]) {' :\n        `if(blockIndex < ${outputShape[2]} && pos < ${outputShape[1]}) {`;\n    let unrolled = ``;\n\n    for (let row = 0; row <= 1; row++) {\n      for (let col = 0; col <= 1; col++) {\n        unrolled += `\n          blockIndex = rc.z + ${col};\n          pos = rc.y + ${row};\n\n          ${boundsCheckingSnippet}\n            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];\n            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);\n\n            if(d0 < inputShape[${rowDim}] && d0 >= 0) {\n              // Use custom imod instead mod. On Intel GPU, mod may generate\n              // unexpected value.\n              // https://github.com/tensorflow/tfjs/issues/5447\n              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];\n              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /\n                  inChannels);\n\n              if(d1 < inputShape[${colDim}] && d1 >= 0) {\n\n                ch = imod(pos, inChannels);\n\n                if (${isChannelsLast}) {\n                  innerDims = vec2(d1, ch);\n                  result[${row * 2 + col}] = getChannel(\n                    getA(rc.x, d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${row * 2 + col}] = getChannel(\n                    getA(rc.x, ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;\n      }\n    }\n\n    this.userCode = `\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${unrolled}\n\n        ${glsl.output} = result;\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, TensorInfo, util} from '@tensorflow/tfjs-core';\n\n// import {assertAndGetBroadcastShape} from\n// '../../../tfjs-core/src/ops/broadcast_util';\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Im2ColPackedProgram} from '../im2col_packed_gpu';\nimport {mapActivationToShaderProgram} from '../kernel_utils/kernel_funcs_utils';\nimport {MatMulPackedProgram} from '../mulmat_packed_gpu';\nimport * as webgl_util from '../webgl_util';\n\nimport {batchMatMulImpl, MATMUL_SHARED_DIM_THRESHOLD} from './BatchMatMul_impl';\nimport {identity} from './Identity';\nimport {reshape} from './Reshape';\n\ntype Conv2DConfig = {\n  x: TensorInfo,\n  filter: TensorInfo,\n  convInfo: backend_util.Conv2DInfo,\n  backend: MathBackendWebGL,\n  bias?: TensorInfo,\n  preluActivationWeights?: TensorInfo,\n  leakyreluAlpha?: number,\n  activation?: backend_util.Activation\n};\n\n// Both conv2dByMatMul and conv2dWithIm2Row fuse height and width into one\n// dimension to compute batchMatMul, so bias and activation weights are also\n// supposed to fuse the two dimensions into one.\n//\n// This function computes the target shape for fusing height and width\n// dimensions. Returning null means the shape is already compatible.\n//\n// Even though the bias is not supposed to be a 3-D or a 4-D (including\n// batch) tensor and PReLU activiation weights is not supposed to be a 4-D\n// tensor, we still need to support them, because we haven't disabled\n// them for NHWC format.\n// https://github.com/tensorflow/tfjs/blob/b53bd47e880367ae57493f0ea628abaf08db2d5d/tfjs-core/src/ops/fused/conv2d.ts#L181-L196\nfunction getShapeForBatchMatMul(\n    shape: number[], isChannelsLast: boolean): number[] {\n  const length = shape.length;\n  if (length >= 3) {\n    return isChannelsLast ?\n        [\n          ...shape.slice(0, -3) /* batch */,\n          shape[length - 3] * shape[length - 2] /* height * width */,\n          shape[length - 1] /* channel */\n        ] :\n        [\n          ...shape.slice(0, -3) /* batch */, shape[length - 3] /* channel */,\n          shape[length - 2] * shape[length - 1] /* height * width */\n        ];\n  } else if (!isChannelsLast && length === 1 && shape[0] > 1) {\n    return [shape[0], 1];\n  } else {\n    return null;\n  }\n}\n\n// For 1x1 kernels that iterate through every point in the input, convolution\n// can be expressed as matrix multiplication (without need for memory\n// remapping).\nexport function conv2dByMatMul({\n  x,\n  filter,\n  convInfo,\n  backend,\n  bias = null,\n  preluActivationWeights = null,\n  leakyreluAlpha = 0,\n  activation = null\n}: Conv2DConfig) {\n  // Reshapes conv2D input to 2D tensors, uses matMul and then reshape the\n  // result from 2D to 4D.\n  const xShape = x.shape;\n  const xTexData = backend.texData.get(x.dataId);\n  const sharedMatMulDim = convInfo.inChannels;\n  const outerShapeX = xShape[0] * xShape[1] * xShape[2];\n  const outerShapeFilter = convInfo.outChannels;\n  const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n  const transposeA = false;\n  const transposeB = false;\n\n  let out: TensorInfo;\n  const intermediates: TensorInfo[] = [];\n\n  if (preluActivationWeights != null) {\n    const targetShape =\n        getShapeForBatchMatMul(preluActivationWeights.shape, isChannelsLast);\n    if (targetShape != null) {\n      preluActivationWeights = reshape({\n        inputs: {x: preluActivationWeights},\n        backend,\n        attrs: {shape: targetShape}\n      });\n      intermediates.push(preluActivationWeights);\n    }\n  }\n\n  if (bias != null) {\n    const targetShape = getShapeForBatchMatMul(bias.shape, isChannelsLast);\n    if (targetShape != null) {\n      bias = reshape({inputs: {x: bias}, backend, attrs: {shape: targetShape}});\n      intermediates.push(bias);\n    }\n  }\n\n  // TODO: Once reduction ops are packed, batchMatMul will always be packed\n  // and we can remove this condition.\n  const batchMatMulWillBeUnpacked =\n      (outerShapeX === 1 || outerShapeFilter === 1) &&\n      sharedMatMulDim > MATMUL_SHARED_DIM_THRESHOLD;\n\n  // The algorithm in the if condition assumes (1) the output will be packed,\n  // (2) x is packed, (3) x isChannelsLast, (4)  x's packed texture is already\n  // on GPU, (5) col is odd, (6) the width, height and inChannels are the same\n  // for xTexData.shape and xShape.\n  const canOptimize = !batchMatMulWillBeUnpacked && xTexData.isPacked &&\n      isChannelsLast && xTexData.texture != null && xShape[2] % 2 !== 0 &&\n      util.arraysEqual(xTexData.shape.slice(-3), xShape.slice(-3));\n\n  if (canOptimize) {\n    // We avoid expensive packed 2x2 reshape by padding col count to next,\n    // even number. When col is odd, the result of packed batchMatMul is\n    // the same (has the same texture layout and and values in the texture) as\n    // it is for next even col. We make the odd-cols tensor to look like\n    // even-cols tensor before the operation and, after the batchMatMul,\n    // fix the even-cols result to have odd number of cols.\n    const targetShape = xShape[0] * xShape[1] * (xShape[2] + 1);\n    const xReshaped: TensorInfo = {\n      dataId: x.dataId,\n      shape: [1, targetShape, convInfo.inChannels],\n      dtype: x.dtype\n    };\n    // xTexData.shape gets referenced from GPGPUBinary.inShapeInfos.\n    // Decrementing col count, after batchMatMul->...->compileProgram leads to\n    // invalid col count within the reference in GPGPUBinary.inShapeInfos.\n    // Alternative fix would be to provide a copy to GPGPUBinary.inShapeInfos\n    // in compileProgram method, but that would affect compilation of all\n    // programs - instead, provide a copy here, with even col count, before\n    // calling batchMatMul->...->compileProgram and after that, the original\n    // xTexData.shape is restored.\n    const originalXTexDataShape = xTexData.shape;\n    xTexData.shape = xTexData.shape.slice();\n    xTexData.shape[xTexData.shape.length - 2]++;\n    util.assert(\n        webgl_util.isReshapeFree(xTexData.shape, xReshaped.shape),\n        () => `packed reshape ${xTexData.shape} to ${\n            xReshaped.shape} isn't free`);\n    const filterReshaped = reshape({\n      inputs: {x: filter},\n      backend,\n      attrs: {shape: [1, convInfo.inChannels, convInfo.outChannels]}\n    });\n    intermediates.push(filterReshaped);\n    const pointwiseConv = batchMatMulImpl({\n      a: xReshaped,\n      b: filterReshaped,\n      backend,\n      transposeA,\n      transposeB,\n      bias,\n      activation,\n      preluActivationWeights,\n      leakyreluAlpha\n    });\n\n    const pointwiseConvTexData = backend.texData.get(pointwiseConv.dataId);\n    util.assert(\n        pointwiseConvTexData.isPacked,\n        () => 'batchMatMul result is expected to be packed');\n    // Restore the input shape to original.\n    xTexData.shape = originalXTexDataShape;\n    // Set the output shape - there is no need for expensive reshape as data\n    // layout is already correct.\n    pointwiseConvTexData.shape = convInfo.outShape;\n\n    out = identity({inputs: {x: pointwiseConv}, backend});\n    out.shape = convInfo.outShape;\n\n    intermediates.push(pointwiseConv);\n  } else {\n    const numCols = convInfo.outHeight * convInfo.outWidth;\n    const xReshaped = reshape({\n      inputs: {x},\n      backend,\n      attrs: {\n        shape: isChannelsLast ?\n            [convInfo.batchSize, numCols, convInfo.inChannels] :\n            [convInfo.batchSize, convInfo.inChannels, numCols]\n      }\n    });\n    const filterReshaped = reshape({\n      inputs: {x: filter},\n      backend,\n      attrs: {shape: [1, convInfo.inChannels, convInfo.outChannels]}\n    });\n    const result = batchMatMulImpl({\n      a: isChannelsLast ? xReshaped : filterReshaped,\n      b: isChannelsLast ? filterReshaped : xReshaped,\n      transposeA: !isChannelsLast,\n      transposeB,\n      backend,\n      bias,\n      activation,\n      preluActivationWeights,\n      leakyreluAlpha\n    });\n\n    out = reshape(\n        {inputs: {x: result}, backend, attrs: {shape: convInfo.outShape}});\n\n    intermediates.push(xReshaped);\n    intermediates.push(filterReshaped);\n    intermediates.push(result);\n  }\n\n  for (const i of intermediates) {\n    backend.disposeIntermediateTensorInfo(i);\n  }\n\n  return out;\n}\n\n// Implements the im2row algorithm as outlined in \"High Performance\n// Convolutional Neural Networks for Document Processing\" (Suvisoft, 2006)\nexport function conv2dWithIm2Row({\n  x,\n  filter,\n  convInfo,\n  backend,\n  bias = null,\n  preluActivationWeights = null,\n  leakyreluAlpha = 0,\n  activation = null\n}: Conv2DConfig) {\n  // Rearranges conv2d input so each block to be convolved over forms the\n  // column of a new matrix with shape [filterWidth * filterHeight *\n  // inChannels, outHeight * outWidth]. The filter is also rearranged so each\n  // output channel forms a row of a new matrix with shape [outChannels,\n  // filterWidth * filterHeight * inChannels]. The convolution is then\n  // computed by multiplying these matrices and reshaping the result.\n  const {\n    filterWidth,\n    filterHeight,\n    inChannels,\n    outWidth,\n    outHeight,\n    dataFormat\n  } = convInfo;\n\n  const isChannelsLast = dataFormat === 'channelsLast';\n\n  const sharedDim = filterWidth * filterHeight * inChannels;\n  const numCols = outHeight * outWidth;\n  const x2ColShape = [convInfo.batchSize, sharedDim, numCols];\n  const transposeA = true;\n  const transposeB = false;\n\n  const intermediates: TensorInfo[] = [];\n\n  if (preluActivationWeights != null) {\n    const targetShape =\n        getShapeForBatchMatMul(preluActivationWeights.shape, isChannelsLast);\n    if (targetShape != null) {\n      preluActivationWeights = reshape({\n        inputs: {x: preluActivationWeights},\n        backend,\n        attrs: {shape: targetShape}\n      });\n      intermediates.push(preluActivationWeights);\n    }\n  }\n\n  if (bias != null) {\n    const targetShape = getShapeForBatchMatMul(bias.shape, isChannelsLast);\n    if (targetShape != null) {\n      bias = reshape({inputs: {x: bias}, backend, attrs: {shape: targetShape}});\n      intermediates.push(bias);\n    }\n  }\n\n  const w2Row = reshape({\n    inputs: {x: filter},\n    backend,\n    attrs: {shape: [1, sharedDim, util.sizeFromShape(filter.shape) / sharedDim]}\n  });\n  intermediates.push(w2Row);\n\n  const im2ColProgram = new Im2ColPackedProgram(x2ColShape, convInfo);\n  const customValues = [\n    x.shape, [convInfo.padInfo.top, convInfo.padInfo.left],\n    [convInfo.strideHeight, convInfo.strideWidth],\n    [convInfo.dilationHeight, convInfo.dilationWidth], [convInfo.inChannels],\n    [convInfo.filterWidth * convInfo.inChannels], [convInfo.outWidth]\n  ];\n  const im2Col =\n      backend.runWebGLProgram(im2ColProgram, [x], 'float32', customValues);\n  const im2ColReshaped =\n      reshape({inputs: {x: im2Col}, backend, attrs: {shape: x2ColShape}});\n\n  intermediates.push(im2Col);\n  intermediates.push(im2ColReshaped);\n\n  const hasBias = bias != null;\n  const hasPreluActivationWeights = preluActivationWeights != null;\n  const hasLeakyreluAlpha = activation === 'leakyrelu';\n  const fusedActivation =\n      activation ? mapActivationToShaderProgram(activation, true) : null;\n  const matmulProgram = new MatMulPackedProgram(\n      isChannelsLast ? im2ColReshaped.shape as [number, number, number] :\n                       w2Row.shape as [number, number, number],\n      isChannelsLast ? w2Row.shape as [number, number, number] :\n                       im2ColReshaped.shape as [number, number, number],\n      isChannelsLast ? [convInfo.batchSize, numCols, convInfo.outChannels] :\n                       [convInfo.batchSize, convInfo.outChannels, numCols],\n      transposeA, transposeB, hasBias, fusedActivation,\n      hasPreluActivationWeights, hasLeakyreluAlpha);\n  const inputs: TensorInfo[] =\n      isChannelsLast ? [im2ColReshaped, w2Row] : [w2Row, im2ColReshaped];\n  if (bias) {\n    inputs.push(bias);\n  }\n  if (hasPreluActivationWeights) {\n    inputs.push(preluActivationWeights);\n  }\n  if (hasLeakyreluAlpha) {\n    const $leakyreluAlpha = backend.makeTensorInfo(\n        [], 'float32',\n        util.createScalarValue(leakyreluAlpha as unknown as 'float32',\n                               'float32'));\n    inputs.push($leakyreluAlpha);\n    intermediates.push($leakyreluAlpha);\n  }\n  const product = backend.runWebGLProgram(matmulProgram, inputs, 'float32');\n  const out = reshape(\n      {inputs: {x: product}, backend, attrs: {shape: convInfo.outShape}});\n\n  intermediates.push(product);\n  for (const i of intermediates) {\n    backend.disposeIntermediateTensorInfo(i);\n  }\n\n  return out;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2D, Conv2DAttrs, Conv2DInputs, env, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv2DProgram} from '../conv_gpu';\nimport {Conv2DPackedProgram} from '../conv_packed_gpu';\nimport {conv2dByMatMul, conv2dWithIm2Row} from './Conv2D_impl';\nimport {reshape} from './Reshape';\n\nexport function conv2d(\n    args:\n        {inputs: Conv2DInputs, attrs: Conv2DAttrs, backend: MathBackendWebGL}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dataFormat, dilations, dimRoundingMode} = attrs;\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, dilations, pad,\n      dimRoundingMode, false /* depthwise */, $dataFormat);\n  let out: TensorInfo;\n\n  if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 &&\n      convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 &&\n      convInfo.strideHeight === 1 && convInfo.strideWidth === 1 &&\n      (convInfo.padInfo.type === 'SAME' || convInfo.padInfo.type === 'VALID')) {\n    out = conv2dByMatMul({x, filter, convInfo, backend});\n  } else if (convInfo.strideWidth <= 2 && $dataFormat === 'channelsLast'\n    && env().getBool('WEBGL_EXP_CONV')\n    ) {\n    const program = new Conv2DPackedProgram(convInfo);\n    const customValues = [\n      [convInfo.padInfo.top, convInfo.padInfo.left],\n      [convInfo.strideHeight, convInfo.strideWidth],\n      [convInfo.dilationHeight, convInfo.dilationWidth],\n      [convInfo.inHeight, convInfo.inWidth]\n    ];\n    out =\n        backend.runWebGLProgram(program, [x, filter], 'float32', customValues);\n  } else if (env().getBool('WEBGL_CONV_IM2COL')) {\n    out = conv2dWithIm2Row({x, filter, convInfo, backend});\n  } else {\n    const program = new Conv2DProgram(convInfo);\n    out = backend.runWebGLProgram(program, [x, filter], 'float32');\n  }\n\n  const outReshaped =\n      reshape({inputs: {x: out}, backend, attrs: {shape: convInfo.outShape}});\n  backend.disposeIntermediateTensorInfo(out);\n\n  return outReshaped;\n}\n\nexport const conv2DConfig: KernelConfig = {\n  kernelName: Conv2D,\n  backendName: 'webgl',\n  kernelFunc: conv2d as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class Conv2DDerFilterProgram implements GPGPUProgram {\n  variableNames = ['x', 'dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.filterShape;\n\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${convInfo.batchSize}; b++) {\n          for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {\n            int xR = wR + yR * ${strideHeight} - ${padTop};\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {\n              int xC = wC + yC * ${strideWidth} - ${padLeft};\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              if (${isChannelsLast}) {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class Conv2DDerInputProgram implements GPGPUProgram {\n  variableNames = ['dy', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n\n    const padTop = filterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = filterWidth - 1 - convInfo.padInfo.left;\n\n    const rowDim = isChannelsLast ? 1 : 2;\n    const colDim = isChannelsLast ? 2 : 3;\n    const channelDim = isChannelsLast ? 3 : 1;\n\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${channelDim}];\n\n        ivec2 dyCorner = ivec2(coords[${rowDim}], coords[${colDim}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${filterHeight} - 1 - wR;\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${filterWidth} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${convInfo.outChannels}; d2++) {\n\n              if (${isChannelsLast}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class Conv3DDerFilterProgram implements GPGPUProgram {\n  variableNames = ['x', 'dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.filterShape;\n\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const padFront = convInfo.padInfo.front;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n\n    this.userCode = `\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${convInfo.batchSize}; b++) {\n          for (int yF = 0; yF < ${convInfo.outDepth}; yF++) {\n            int xF = wF + yF * ${strideDepth} - ${padFront};\n\n            if (xF < 0 || xF >= ${convInfo.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {\n              int xR = wR + yR * ${strideHeight} - ${padTop};\n\n              if (xR < 0 || xR >= ${convInfo.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {\n                int xC = wC + yC * ${strideWidth} - ${padLeft};\n\n                if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class Conv3DDerInputProgram implements GPGPUProgram {\n  variableNames = ['dy', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.inShape;\n\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n\n    const padFront = filterDepth - 1 - convInfo.padInfo.front;\n    const padTop = filterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = filterWidth - 1 - convInfo.padInfo.left;\n\n    this.userCode = `\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${filterDepth}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${strideDepth}.0;\n\n          if (dyF < 0.0 || dyF >= ${convInfo.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${filterDepth} - 1 - wF;\n\n          for (int wR = 0; wR < ${filterHeight}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${filterHeight} - 1 - wR;\n\n            for (int wC = 0; wC < ${filterWidth}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${filterWidth} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${convInfo.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2DBackpropFilter, Conv2DBackpropFilterAttrs, Conv2DBackpropFilterInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv2DDerFilterProgram} from '../conv_backprop_gpu';\n\nexport function conv2DBackpropFilter(args: {\n  inputs: Conv2DBackpropFilterInputs,\n  attrs: Conv2DBackpropFilterAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, pad, dataFormat, dimRoundingMode, filterShape} = attrs;\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number], filterShape, strides,\n      1 /* dilations */, pad, dimRoundingMode, false /* depthwise */,\n      $dataFormat);\n\n  const program = new Conv2DDerFilterProgram(convInfo);\n  return backend.runWebGLProgram(program, [x, dy], 'float32');\n}\n\nexport const conv2DBackpropFilterConfig: KernelConfig = {\n  kernelName: Conv2DBackpropFilter,\n  backendName: 'webgl',\n  kernelFunc: conv2DBackpropFilter as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2DBackpropInput, Conv2DBackpropInputAttrs, Conv2DBackpropInputInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv2DDerInputProgram} from '../conv_backprop_gpu';\n\nexport function conv2DBackpropInput(args: {\n  inputs: Conv2DBackpropInputInputs,\n  attrs: Conv2DBackpropInputAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {inputShape, strides, pad, dataFormat, dimRoundingMode} = attrs;\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      inputShape, filter.shape as [number, number, number, number], strides,\n      1 /* dilations */, pad, dimRoundingMode, false, $dataFormat);\n\n  const program = new Conv2DDerInputProgram(convInfo);\n  return backend.runWebGLProgram(program, [dy, filter], 'float32');\n}\n\nexport const conv2DBackpropInputConfig: KernelConfig = {\n  kernelName: Conv2DBackpropInput,\n  backendName: 'webgl',\n  kernelFunc: conv2DBackpropInput as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3D, Conv3DAttrs, Conv3DInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv3DProgram} from '../conv_gpu';\n\nexport function conv3D(\n    args:\n        {inputs: Conv3DInputs, attrs: Conv3DAttrs, backend: MathBackendWebGL}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dilations} = attrs;\n\n  const convInfo = backend_util.computeConv3DInfo(\n      x.shape as [number, number, number, number, number],\n      filter.shape as [number, number, number, number, number], strides,\n      dilations, pad);\n\n  const program = new Conv3DProgram(convInfo);\n  return backend.runWebGLProgram(program, [x, filter], 'float32');\n}\n\nexport const conv3DConfig: KernelConfig = {\n  kernelName: Conv3D,\n  backendName: 'webgl',\n  kernelFunc: conv3D as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3DBackpropFilterV2, Conv3DBackpropFilterV2Attrs, Conv3DBackpropFilterV2Inputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv3DDerFilterProgram} from '../conv_backprop_gpu';\n\nexport function conv3DBackpropFilterV2(args: {\n  inputs: Conv3DBackpropFilterV2Inputs,\n  attrs: Conv3DBackpropFilterV2Attrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, pad, filterShape} = attrs;\n\n  const convInfo = backend_util.computeConv3DInfo(\n      x.shape as [number, number, number, number, number], filterShape, strides,\n      1 /* dilations */, pad);\n\n  const program = new Conv3DDerFilterProgram(convInfo);\n  return backend.runWebGLProgram(program, [x, dy], 'float32');\n}\n\nexport const conv3DBackpropFilterV2Config: KernelConfig = {\n  kernelName: Conv3DBackpropFilterV2,\n  backendName: 'webgl',\n  kernelFunc: conv3DBackpropFilterV2 as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3DBackpropInputV2, Conv3DBackpropInputV2Attrs, Conv3DBackpropInputV2Inputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv3DDerInputProgram} from '../conv_backprop_gpu';\n\nexport function conv3DBackpropInput(args: {\n  inputs: Conv3DBackpropInputV2Inputs,\n  attrs: Conv3DBackpropInputV2Attrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {pad, strides, inputShape} = attrs;\n\n  const convInfo = backend_util.computeConv3DInfo(\n      inputShape, filter.shape as [number, number, number, number, number],\n      strides, 1 /* dilations */, pad);\n\n  const program = new Conv3DDerInputProgram(convInfo);\n  return backend.runWebGLProgram(program, [dy, filter], 'float32');\n}\n\nexport const conv3DBackpropInputConfig: KernelConfig = {\n  kernelName: Conv3DBackpropInputV2,\n  backendName: 'webgl',\n  kernelFunc: conv3DBackpropInput as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType, UniformType} from './shader_compiler';\n\nexport enum CumOpType {\n  Prod = '*',\n  Sum = '+',\n}\n\nexport class CumProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  userCode: string;\n  customUniforms = [{name: 'index', type: 'float' as UniformType}];\n\n  constructor(\n      public op: CumOpType, public outputShape: number[], exclusive: boolean,\n      reverse: boolean) {\n    const rank = this.outputShape.length;\n    const initVal = this.op === CumOpType.Prod ? '1.0' : '0.0';\n    const val =\n        exclusive ? initVal : `getX(${getCoords(rank, 'coords', this.op)})`;\n    const length = this.outputShape[this.outputShape.length - 1];\n    let condition = '';\n    let idxString = '';\n    // When exclusive is set, the cum op becomes roll op that copies the\n    // value from the previous index based on the direction specified by the\n    // reverse flag.\n    if (exclusive) {\n      condition = reverse ? `end != ${length - 1}` : 'end != 0';\n      idxString = reverse ? 'end + 1' : 'end - 1';\n    } else {\n      condition = reverse ? `end + pow2 < ${length}` : 'end >= pow2';\n      idxString = (reverse ? 'end + pow2' : 'end - pow2');\n    }\n\n    this.userCode = `\n      void main() {\n        ${getCoordsDataType(rank)} coords = getOutputCoords();\n        int end = ${getFinalCoord(rank, 'coords', this.op)};\n        float val = ${val};\n        int pow2 = int(pow(2.0, index));\n        if (${condition}) {\n          int idx = ${idxString};\n          ${getFinalCoord(rank, 'coords', this.op)} = idx;\n          val ${this.op}= getX(${getCoords(rank, 'coords', this.op)});\n        }\n        setOutput(val);\n      }\n    `;\n  }\n}\n\nfunction getCoords(rank: number, name: string, op: CumOpType): string {\n  if (rank === 1) {\n    return `${name}`;\n  } else if (rank === 2) {\n    return `${name}.x, ${name}.y`;\n  } else if (rank === 3) {\n    return `${name}.x, ${name}.y, ${name}.z`;\n  } else if (rank === 4) {\n    return `${name}.x, ${name}.y, ${name}.z, ${name}.w`;\n  } else {\n    throw new Error(`Cumulative ${op} for rank ${rank} is not yet supported`);\n  }\n}\n\nfunction getFinalCoord(rank: number, name: string, op: CumOpType): string {\n  if (rank === 1) {\n    return `${name}`;\n  } else if (rank === 2) {\n    return `${name}.y`;\n  } else if (rank === 3) {\n    return `${name}.z`;\n  } else if (rank === 4) {\n    return `${name}.w`;\n  } else {\n    throw new Error(`Cumulative ${op} for rank ${rank} is not yet supported`);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cos, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET_UNARY, unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst COS = CHECK_NAN_SNIPPET_UNARY + `\n  return cos(x);\n`;\n\nexport const cos = unaryKernelFunc({opSnippet: COS});\n\nexport const cosConfig: KernelConfig = {\n  kernelName: Cos,\n  backendName: 'webgl',\n  kernelFunc: cos,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cosh, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst COSH = `\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n`;\n\nexport const cosh = unaryKernelFunc({opSnippet: COSH});\n\nexport const coshConfig: KernelConfig = {\n  kernelName: Cosh,\n  backendName: 'webgl',\n  kernelFunc: cosh,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class CropAndResizeProgram implements GPGPUProgram {\n  variableNames = ['Image', 'Boxes', 'BoxInd'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      imageShape: [number, number, number, number], boxShape: [number, number],\n      cropSize: [number, number], method: 'bilinear'|'nearest',\n      extrapolationValue: number) {\n    const [batch, imageHeight, imageWidth, depth] = imageShape;\n    const [numBoxes, ] = boxShape;\n    const [cropHeight, cropWidth] = cropSize;\n    this.outputShape = [numBoxes, cropHeight, cropWidth, depth];\n    const methodId = method === 'bilinear' ? 1 : 0;\n\n    const [inputHeightFloat, inputWidthFloat] =\n        [`${imageHeight - 1}.0`, `${imageWidth - 1}.0`];\n\n    const [heightRatio, heightScale, inY] = cropHeight > 1 ?\n        [\n          `${(imageHeight - 1) / (cropHeight - 1)}`,\n          '(y2-y1) * height_ratio',\n          `y1*${inputHeightFloat} + float(y)*(height_scale)`,\n        ] :\n        [\n          '0.0',\n          '0.0',\n          `0.5 * (y1+y2) * ${inputHeightFloat}`,\n        ];\n    const [widthRatio, widthScale, inX] = cropWidth > 1 ?\n        [\n          `${(imageWidth - 1) / (cropWidth - 1)}`,\n          '(x2-x1) * width_ratio',\n          `x1*${inputWidthFloat} + float(x)*(width_scale)`,\n        ] :\n        [\n          '0.0',\n          '0.0',\n          `0.5 * (x1+x2) * ${inputWidthFloat}`,\n        ];\n\n    // Reference implementation\n    // tslint:disable-next-line:max-line-length\n    // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/crop_and_resize_op_gpu.cu.cc\n    this.userCode = `\n      const float height_ratio = float(${heightRatio});\n      const float width_ratio = float(${widthRatio});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${batch}) {\n          return;\n        }\n\n        float height_scale = ${heightScale};\n        float width_scale = ${widthScale};\n\n        float in_y = ${inY};\n        if( in_y < 0.0 || in_y > ${inputHeightFloat} ) {\n          setOutput(float(${extrapolationValue}));\n          return;\n        }\n        float in_x = ${inX};\n        if( in_x < 0.0 || in_x > ${inputWidthFloat} ) {\n          setOutput(float(${extrapolationValue}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${methodId} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {CropAndResize, CropAndResizeAttrs, CropAndResizeInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {CropAndResizeProgram} from '../crop_and_resize_gpu';\n\nexport const cropAndResize = (args: {\n  inputs: CropAndResizeInputs,\n  backend: MathBackendWebGL,\n  attrs: CropAndResizeAttrs\n}): TensorInfo => {\n  const {inputs, backend, attrs} = args;\n  const {image, boxes, boxInd} = inputs;\n  const {cropSize, method, extrapolationValue} = attrs;\n\n  const program = new CropAndResizeProgram(\n      image.shape as [number, number, number, number],\n      boxes.shape as [number, number], cropSize, method, extrapolationValue);\n  return backend.runWebGLProgram(program, [image, boxes, boxInd], 'float32');\n};\n\nexport const cropAndResizeConfig: KernelConfig = {\n  kernelName: CropAndResize,\n  backendName: 'webgl',\n  kernelFunc: cropAndResize as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {CumOpType, CumProgram} from '../cum_gpu';\n\nimport {identity} from './Identity';\nimport {transpose} from './Transpose';\n\nexport function cumImpl(\n    op: CumOpType, x: TensorInfo, backend: MathBackendWebGL, axis: number,\n    exclusive: boolean, reverse: boolean): TensorInfo {\n  const xRank = x.shape.length;\n  const permutation = backend_util.getAxesPermutation([axis], xRank);\n  let permutedX = x;\n  if (permutation != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutation}});\n  }\n  const permutedAxis = backend_util.getInnerMostAxes(1, xRank)[0];\n\n  if (permutedAxis !== xRank - 1) {\n    throw new Error(\n        `WebGL cumprod shader expects an inner-most axis=${\n            x.shape.length - 1} ` +\n        `but got axis=${axis}`);\n  }\n  const size = permutedX.shape[permutedAxis];\n  let result = identity({inputs: {x: permutedX}, backend});\n  // Use cum parallel algorithm, inspired by:\n  // https://developer.nvidia.com/gpugems/gpugems3/part-vi-gpu-computing/chapter-39-parallel-prefix-sum-scan-cuda\n  // Note: although the algorithm is called sum, it works for any associtative\n  // operator with an identity.\n\n  for (let i = 0; i <= Math.ceil(Math.log2(size)) - 1; i++) {\n    const program = new CumProgram(op, permutedX.shape, false, reverse);\n    const customValues = [[i]];\n    const prevResult = result;\n    result =\n        backend.runWebGLProgram(program, [result], result.dtype, customValues);\n    backend.disposeIntermediateTensorInfo(prevResult);\n  }\n  // For exclusive cum, shift the end result in the direction of product or sum\n  // and add 1 for product or 0 for sum to the front index.\n  if (exclusive) {\n    const program = new CumProgram(op, permutedX.shape, exclusive, reverse);\n    const prevResult = result;\n    result = backend.runWebGLProgram(program, [result], result.dtype);\n    backend.disposeIntermediateTensorInfo(prevResult);\n  }\n\n  if (permutation != null) {\n    const reversePermutation = backend_util.getUndoAxesPermutation(permutation);\n    const reverseTransposedResult = transpose(\n        {inputs: {x: result}, backend, attrs: {perm: reversePermutation}});\n\n    backend.disposeIntermediateTensorInfo(result);\n    backend.disposeIntermediateTensorInfo(permutedX);\n\n    return reverseTransposedResult;\n  }\n\n  return result;\n}\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cumprod, CumprodAttrs, CumprodInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {CumOpType} from '../cum_gpu';\nimport {cumImpl} from './Cum_impl';\n\nexport function cumprod(args: {\n  inputs: CumprodInputs,\n  backend: MathBackendWebGL,\n  attrs: CumprodAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, exclusive, reverse} = attrs;\n\n  return cumImpl(CumOpType.Prod, x, backend, axis, exclusive, reverse);\n}\n\nexport const cumprodConfig: KernelConfig = {\n  kernelName: Cumprod,\n  backendName: 'webgl',\n  kernelFunc: cumprod as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cumsum, CumsumAttrs, CumsumInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {CumOpType} from '../cum_gpu';\nimport {cumImpl} from './Cum_impl';\n\nexport function cumsum(\n    args:\n        {inputs: CumsumInputs, backend: MathBackendWebGL, attrs: CumsumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, exclusive, reverse} = attrs;\n  return cumImpl(CumOpType.Sum, x, backend, axis, exclusive, reverse);\n}\n\nexport const cumsumConfig: KernelConfig = {\n  kernelName: Cumsum,\n  backendName: 'webgl',\n  kernelFunc: cumsum as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DenseBincount, DenseBincountAttrs, DenseBincountInputs, KernelConfig, KernelFunc, Rank, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {bincountImplCPU, bincountReduceImplCPU} from '../kernel_utils/shared';\n\nexport function denseBincount(args: {\n  inputs: DenseBincountInputs,\n  backend: MathBackendWebGL,\n  attrs: DenseBincountAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, weights} = inputs;\n  const {size, binaryOutput} = attrs;\n\n  if (x.shape.length === 1) {\n    const xVals = backend.readSync(x.dataId) as TypedArray;\n    const weightsVals = backend.readSync(weights.dataId) as TypedArray;\n\n    const outVals =\n        bincountImplCPU(xVals, weightsVals, weights.dtype, weights.shape, size);\n\n    return backend.makeTensorInfo([size], weights.dtype, outVals);\n  } else if (x.shape.length === 2) {\n    const xBuf = backend.bufferSync<Rank, 'float32'>(x);\n    const weightsBuf = backend.bufferSync<Rank, 'float32'>(weights);\n\n    const outBuf = bincountReduceImplCPU(xBuf, weightsBuf, size, binaryOutput);\n\n    return backend.makeTensorInfo(outBuf.shape, weights.dtype, outBuf.values);\n  }\n\n  throw new Error(\n      `Error in denseBincount: input must be at most rank 2, but got rank` +\n      `${x.shape.length}.`);\n}\n\nexport const denseBincountConfig: KernelConfig = {\n  kernelName: DenseBincount,\n  backendName: 'webgl',\n  kernelFunc: denseBincount as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class DepthToSpaceProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[] = [];\n  userCode: string;\n  blockSize: number;\n  dataFormat: string;\n\n  constructor(\n      outputShape: number[], blockSize: number, dataFormat: 'NHWC'|'NCHW') {\n    this.outputShape = outputShape;\n    this.blockSize = blockSize;\n    this.dataFormat = dataFormat;\n    this.userCode = `\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${blockSize};\n      int offset_h = imod(h, ${blockSize});\n      int in_w = w / ${blockSize};\n      int offset_w = imod(w, ${blockSize});\n      int offset_d = (offset_h * ${blockSize} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `;\n  }\n\n  private getHeightCoordString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[1]`;\n    } else {\n      return `coords[2]`;\n    }\n  }\n\n  private getWidthCoordString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[2]`;\n    } else {\n      return `coords[3]`;\n    }\n  }\n\n  private getDepthCoordString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[3]`;\n    } else {\n      return `coords[1]`;\n    }\n  }\n\n  private getOutputDepthSize(): number {\n    if (this.dataFormat === 'NHWC') {\n      return this.outputShape[3];\n    } else {\n      return this.outputShape[1];\n    }\n  }\n\n  private getInputSamplingString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `getX(b, in_h, in_w, in_d)`;\n    } else {\n      return `getX(b, in_d, in_h, in_w)`;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DepthToSpace, DepthToSpaceAttrs, DepthToSpaceInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {DepthToSpaceProgram} from '../depth_to_space_gpu';\n\nexport function depthToSpace(args: {\n  inputs: DepthToSpaceInputs,\n  backend: MathBackendWebGL,\n  attrs: DepthToSpaceAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockSize, dataFormat} = attrs;\n\n  const batchSize = x.shape[0];\n  const inputHeight = (dataFormat === 'NHWC') ? x.shape[1] : x.shape[2];\n  const inputWidth = (dataFormat === 'NHWC') ? x.shape[2] : x.shape[3];\n  const inputDepth = (dataFormat === 'NHWC') ? x.shape[3] : x.shape[1];\n\n  const outputHeight = inputHeight * blockSize;\n  const outputWidth = inputWidth * blockSize;\n  const outputDepth = inputDepth / (blockSize * blockSize);\n\n  const outputShape = (dataFormat === 'NHWC') ?\n      [batchSize, outputHeight, outputWidth, outputDepth] :\n      [batchSize, outputDepth, outputHeight, outputWidth];\n\n  const program = new DepthToSpaceProgram(outputShape, blockSize, dataFormat);\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\n\nexport const depthToSpaceConfig: KernelConfig = {\n  kernelName: DepthToSpace,\n  backendName: 'webgl',\n  kernelFunc: depthToSpace as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\n\nexport class DepthwiseConv2DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms: boolean;\n  customUniforms = [\n    {name: 'pads', type: 'ivec2' as const },\n    {name: 'strides', type: 'ivec2' as const },\n    {name: 'dilations', type: 'ivec2' as const },\n    {name: 'inDims', type: 'ivec2' as const },\n  ];\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, addBias = false,\n      activation: string = null, hasPreluActivation = false,\n      hasLeakyReluAlpha = false) {\n    this.outputShape = convInfo.outShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const channelMul = convInfo.outChannels / convInfo.inChannels;\n\n    let activationSnippet = '', applyActivationSnippet = '';\n    if (activation) {\n      if (hasPreluActivation) {\n        activationSnippet = `float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n      } else if (hasLeakyReluAlpha) {\n        activationSnippet = `float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${activation}\n        }`;\n      } else {\n        activationSnippet = `\n          float activation(float x) {\n            ${activation}\n          }\n        `;\n      }\n\n      applyActivationSnippet = `result = activation(result);`;\n    }\n\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivation) {\n      this.variableNames.push('preluActivationWeights');\n    }\n    if (hasLeakyReluAlpha) {\n      this.variableNames.push('leakyreluAlpha');\n    }\n\n    this.userCode = `\n      ${activationSnippet}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${channelMul};\n        int q = d2 - d1 * ${channelMul};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          int xR = xRCorner + wR * dilations[0];\n\n          if (xR < 0 || xR >= inDims[0]) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            int xC = xCCorner + wC * dilations[1];\n\n            if (xC < 0 || xC >= inDims[1]) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${addBiasSnippet}\n        ${applyActivationSnippet}\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\n\nexport class DepthwiseConvPacked2DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms: boolean;\n  customUniforms = [\n    {name: 'pads', type: 'ivec2' as const },\n    {name: 'strides', type: 'ivec2' as const },\n    {name: 'dilations', type: 'ivec2' as const },\n    {name: 'inDims', type: 'ivec2' as const },\n  ];\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, addBias = false,\n      activation: string = null, hasPreluActivation = false,\n      hasLeakyReluAlpha = false) {\n    this.outputShape = convInfo.outShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    const channelMul = convInfo.outChannels / convInfo.inChannels;\n    const padLeft = convInfo.padInfo.left;\n    const strideWidth = convInfo.strideWidth;\n    const dilationWidth = convInfo.dilationWidth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const texelsAcross = filterWidth;\n\n    let mainLoop = `\n      int xR; int xC; int xCOffset;\n      vec4 wTexel; vec4 previous; vec4 final;`;\n\n    for (let c = 0; c < filterWidth; c++) {\n      mainLoop += `\n          vec4 xTexelC${c * 2};\n          int xTexelC${c * 2}Ready;\n          vec4 xTexelC${c * 2 + 1};\n          int xTexelC${c * 2 + 1}Ready;\n          vec4 xC${c};`;\n    }\n\n    /**\n     * This vectorized implementation works by gathering the values needed for\n     * each output channel's dot product into vec4's and then multiplying them\n     * all together (this happens in the final double for-loop below). Most of\n     * the main loop consists of constructing these vec4's with the minimum\n     * number of texture2D calls, which means making use of all four returned\n     * values from a texture2D call at once.\n     */\n    mainLoop += `\n    for (int r = 0; r < ${filterHeight}; r++) {\n      `;\n    for (let c = 0; c < filterWidth; c++) {\n      mainLoop += `\n          xTexelC${c * 2} = vec4(0.0);\n          xTexelC${c * 2}Ready = 0;\n          xTexelC${c * 2 + 1} = vec4(0.0);\n          xTexelC${c * 2 + 1}Ready = 0;\n          xC${c} = vec4(0.0);`;\n    }\n    mainLoop += `\n        xR = xRCorner + r * dilations[0];\n        if (xR >=0 && xR < inDims[0]) {\n      `;\n\n    for (let texelC = 0; texelC < (texelsAcross + 1) / 2; texelC++) {\n      const colIndex = texelC * 2;\n\n      mainLoop += `\n          xC = xCCorner + ${colIndex * dilationWidth};\n          `;\n\n      if (strideWidth === 1) {\n        if (colIndex < filterWidth) {\n          // If padding is odd, the outer texels have to be composed.\n          if (padLeft % 2 === 1) {\n            // TODO: Ensure vec4 previous does not result in redundant sample,\n            // and avoid setting xTexelRC's that exceed the boundary in the\n            // first place rather than resetting them to vec4(0)).\n\n            // To compute xCOffset:\n            // - If padding is odd, we must add 1 to ensure we ask for an\n            // even-numbered row.\n            // - We subtract 2 to access the previous texel.\n\n            mainLoop += `\n                xCOffset = xC + 1;\n                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${\n                colIndex}Ready == 0) {\n                  xTexelC${colIndex} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${colIndex}.zw = vec2(0.0);\n                  }\n                  xTexelC${colIndex}Ready = 1;\n                }\n              `;\n            // This texel has been read in previous iteration if the dilation\n            // is 1.\n            if (dilationWidth === 1 && colIndex > 0) {\n              mainLoop += `\n                xC${colIndex} = vec4(xTexelC${colIndex - 2}.zw, xTexelC${\n                  colIndex}.xy);\n                `;\n            } else {\n              mainLoop += `\n                  xCOffset = xC + 1 - 2;\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                    previous = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      previous.zw = vec2(0.0);\n                    }\n\n                    xC${colIndex} = vec4(previous.zw, xTexelC${colIndex}.xy);\n                  } else {\n                    xC${colIndex} = vec4(0.0, 0.0, xTexelC${colIndex}.xy);\n                  }\n                  `;\n            }\n          } else {\n            // Padding is even, so xRC corresponds to a single texel.\n            mainLoop += `\n                if (xC >= 0 && xC < inDims[1] && xTexelC${colIndex}Ready == 0) {\n                  xTexelC${colIndex} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${colIndex}.zw = vec2(0.0);\n                  }\n                  xTexelC${colIndex}Ready = 1;\n                }\n\n                xC${colIndex} = xTexelC${colIndex};\n                `;\n          }\n\n          if (colIndex + 1 < filterWidth) {\n            // If dilation is even, the second entry should match the first\n            // (either both are composed or both are single samples). But if\n            // dilation is odd, then the second entry should be the opposite\n            // of the first (if the first is composed, the second is a single\n            // sample, and vice versa.)\n\n            const nextTexelOffset = padLeft % 2 === 0 ?\n                util.nearestLargerEven(dilationWidth) :\n                dilationWidth;\n\n            if ((dilationWidth % 2 === 0 && padLeft % 2 === 1) ||\n                (dilationWidth % 2 !== 0 && padLeft % 2 !== 1)) {\n              mainLoop += `\n                  xCOffset = xC + imod(pads[1], 2) + ${nextTexelOffset};\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${\n                  colIndex + 1}Ready == 0) {\n                    xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      xTexelC${colIndex + 1}.zw = vec2(0.0);\n                    }\n                    xTexelC${colIndex + 1}Ready = 1;\n                  }\n                  `;\n\n              // If dilation > 1 then the xRC's will not be able to share any\n              // values, so each xRC will require two unique calls to getX.\n              if (dilationWidth > 1) {\n                mainLoop += `\n                    xCOffset -= 2;\n                    if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n                     xC${colIndex + 1} = vec4(previous.zw, xTexelC${\n                       colIndex + 1}.xy);\n                    } else {\n                     xC${colIndex + 1} = vec4(0.0, 0.0, xTexelC${\n                       colIndex + 1}.xy);\n                    }\n                    `;\n              } else {\n                mainLoop += `\n                    xC${colIndex + 1} = vec4(xTexelC${colIndex}.zw, xTexelC${\n                    colIndex + 1}.xy);\n                    `;\n              }\n            } else {\n              // If dilation is 1 and padding is odd, we have already read the\n              // texel when constructing the previous x value. Here we can\n              // simply skip the texture read.\n              if (nextTexelOffset === 1) {\n                mainLoop += `\n                    xC${colIndex + 1} = xTexelC${colIndex};\n                    `;\n              } else {\n                mainLoop += `\n                    xCOffset = xC + ${nextTexelOffset};\n\n                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${\n                    colIndex + 1}Ready == 0) {\n                      xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);\n                      if (xCOffset + 1 >= inDims[1]) {\n                        xTexelC${colIndex + 1}.zw = vec2(0.0);\n                      }\n                      xTexelC${colIndex + 1}Ready = 1;\n                    }\n\n                    xC${colIndex + 1} = xTexelC${colIndex + 1};\n                    `;\n              }\n            }\n          }\n        }\n      } else {  // stride === 2\n        if (colIndex < filterWidth) {\n          // Depending on whether padLeft is even or odd, we want either the\n          // xy or zw channels from X texels for xC${colIndex}. If padLeft is\n          // even, xC${colIndex +1} is simply the zw channels of texels we've\n          // already sampled. But if padLeft is odd, xC{$c + 1}.zw will\n          // need to come from the xy channels of a new texel, hence the `\n          // vec4\n          // final` initialized below.\n          if (padLeft % 2 === 1) {\n            mainLoop += `\n                xCOffset = xC + 1 - strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${\n                colIndex}Ready == 0) {\n                  xTexelC${colIndex} = getX(batch, xR, xCOffset, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${colIndex}.zw = vec2(0.0);\n                  }\n                  xTexelC${colIndex}Ready = 1;\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${\n                colIndex + 1}Ready == 0) {\n                  xTexelC${colIndex + 1} = getX(batch, xR, xC + 1, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xC + 2 >= inDims[1]) {\n                    xTexelC${colIndex + 1}.zw = vec2(0.0);\n                  }\n                  xTexelC${colIndex + 1}Ready = 1;\n                }\n\n                xC${colIndex} = vec4(xTexelC${colIndex}.zw, xTexelC${\n                colIndex + 1}.zw);\n              `;\n\n            if (colIndex + 1 < filterWidth) {\n              mainLoop += `\n                  final = vec4(0.0);\n                  xCOffset = xC + 1 + strides[1];\n                  if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xC${colIndex + 1} = vec4(xTexelC${colIndex + 1}.xy, final.xy);\n                `;\n            }\n          } else {\n            mainLoop += `\n                if(xC >= 0 && xC < inDims[1] && xTexelC${colIndex}Ready == 0) {\n                  xTexelC${colIndex} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${colIndex}.zw = vec2(0.0);\n                  }\n                  xTexelC${colIndex}Ready = 1;\n                }\n\n                xCOffset = xC + strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${\n                colIndex + 1}Ready == 0) {\n                  xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${colIndex + 1}.zw = vec2(0.);\n                  }\n                  xTexelC${colIndex + 1}Ready = 1;\n                }\n\n                xC${colIndex} = vec4(\n                  xTexelC${colIndex}.xy, xTexelC${colIndex + 1}.xy);\n              `;\n\n            if (colIndex + 1 < filterWidth) {\n              mainLoop += `\n                  xC${colIndex + 1} = vec4(xTexelC${colIndex}.zw, xTexelC${\n                  colIndex + 1}.zw);\n                `;\n            }\n          }\n        }\n      }\n\n      // localize the dotProd accumulation within the loop, the theory is for\n      // GPU with limited cache, accumulate sum across large amount of\n      // veriables will cause lots of cache misses. (i.e. 5x5 filter will have\n      // 50 variables)\n      if (colIndex < filterWidth) {\n        mainLoop += `\n            wTexel = getW(r, ${colIndex}, d1, q);\n            dotProd += xC${colIndex} * vec4(wTexel.xz, wTexel.xz);\n          `;\n\n        if (colIndex + 1 < filterWidth) {\n          mainLoop += `\n              wTexel = getW(r, ${colIndex + 1}, d1, q);\n              dotProd += xC${colIndex + 1} * vec4(wTexel.xz, wTexel.xz);\n            `;\n        }\n      }\n    }\n    mainLoop += `\n    }\n  `;\n    mainLoop += `\n      }\n    `;\n\n    let activationSnippet = '', applyActivationSnippet = '';\n    if (activation) {\n      if (hasPreluActivation) {\n        activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n      } else if (hasLeakyReluAlpha) {\n        activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${activation}\n        }`;\n      } else {\n        activationSnippet = `vec4 activation(vec4 x) {\n          ${activation}\n        }`;\n      }\n\n      applyActivationSnippet = `result = activation(result);`;\n    }\n\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivation) {\n      this.variableNames.push('preluActivationWeights');\n    }\n    if (hasLeakyReluAlpha) {\n      this.variableNames.push('leakyreluAlpha');\n    }\n\n    this.userCode = `\n      ${activationSnippet}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${channelMul};\n        int q = d2 - d1 * ${channelMul};\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n        vec4 dotProd = vec4(0.000000000000001);\n\n        ${mainLoop}\n\n        vec4 result = dotProd - vec4(0.000000000000001);\n        ${addBiasSnippet}\n        ${applyActivationSnippet}\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNative, DepthwiseConv2dNativeAttrs, DepthwiseConv2dNativeInputs, env, KernelConfig, KernelFunc, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {DepthwiseConv2DProgram} from '../conv_gpu_depthwise';\nimport {DepthwiseConvPacked2DProgram} from '../conv_packed_gpu_depthwise';\n\nexport function depthwiseConv2dNative(args: {\n  inputs: DepthwiseConv2dNativeInputs,\n  attrs: DepthwiseConv2dNativeAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dilations, dimRoundingMode} = attrs;\n\n  let $dilations = dilations;\n  if ($dilations == null) {\n    $dilations = [1, 1];\n  }\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, $dilations),\n      () => 'Error in depthwiseConv2d: Either strides or dilations must be ' +\n          `1. Got strides ${strides} and dilations '${$dilations}'`);\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, $dilations,\n      pad, dimRoundingMode, true /* depthwise */);\n\n  let program: DepthwiseConv2DProgram|DepthwiseConvPacked2DProgram;\n  if (env().getBool('WEBGL_PACK_DEPTHWISECONV') && convInfo.strideWidth <= 2 &&\n      convInfo.outChannels / convInfo.inChannels === 1) {\n    program = new DepthwiseConvPacked2DProgram(convInfo);\n  } else {\n    program = new DepthwiseConv2DProgram(convInfo);\n  }\n  const customValues = [\n    [convInfo.padInfo.top, convInfo.padInfo.left],\n    [convInfo.strideHeight, convInfo.strideWidth],\n    [convInfo.dilationHeight, convInfo.dilationWidth],\n    [convInfo.inHeight, convInfo.inWidth]\n  ];\n  return backend.runWebGLProgram(program, [x, filter], 'float32', customValues);\n}\n\nexport const depthwiseConv2dNativeConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNative,\n  backendName: 'webgl',\n  kernelFunc: depthwiseConv2dNative as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class DepthwiseConv2DDerFilterProgram implements GPGPUProgram {\n  variableNames = ['x', 'dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.filterShape;\n\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const channelMul = convInfo.outChannels / convInfo.inChannels;\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${channelMul} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${convInfo.batchSize}; b++) {\n          for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {\n            int xR = wR + yR * ${strideHeight} - ${padTop};\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {\n              int xC = wC + yC * ${strideWidth} - ${padLeft};\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class DepthwiseConv2DDerInputProgram implements GPGPUProgram {\n  variableNames = ['dy', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n\n    const padTop = filterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = filterWidth - 1 - convInfo.padInfo.left;\n    const channelMul = convInfo.outChannels / convInfo.inChannels;\n\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${filterHeight} - 1 - wR;\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${filterWidth} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${channelMul}; dm++) {\n              int d2 = d1 * ${channelMul} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNativeBackpropFilter, DepthwiseConv2dNativeBackpropFilterAttrs, DepthwiseConv2dNativeBackpropFilterInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {DepthwiseConv2DDerFilterProgram} from '../conv_backprop_gpu_depthwise';\n\nexport function depthwiseConv2dNativeBackpropFilter(args: {\n  inputs: DepthwiseConv2dNativeBackpropFilterInputs,\n  attrs: DepthwiseConv2dNativeBackpropFilterAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, dilations, pad, dimRoundingMode, filterShape} = attrs;\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number], filterShape, strides,\n      dilations, pad, dimRoundingMode, true /* depthwise */);\n\n  const program = new DepthwiseConv2DDerFilterProgram(convInfo);\n  return backend.runWebGLProgram(program, [x, dy], 'float32');\n}\n\nexport const depthwiseConv2dNativeBackpropFilterConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNativeBackpropFilter,\n  backendName: 'webgl',\n  kernelFunc: depthwiseConv2dNativeBackpropFilter as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNativeBackpropInput, DepthwiseConv2dNativeBackpropInputAttrs, DepthwiseConv2dNativeBackpropInputInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {DepthwiseConv2DDerInputProgram} from '../conv_backprop_gpu_depthwise';\n\nexport function depthwiseConv2dNativeBackpropInput(args: {\n  inputs: DepthwiseConv2dNativeBackpropInputInputs,\n  attrs: DepthwiseConv2dNativeBackpropInputAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {strides, dilations, pad, dimRoundingMode, inputShape} = attrs;\n\n  const convInfo = backend_util.computeConv2DInfo(\n      inputShape, filter.shape as [number, number, number, number], strides,\n      dilations, pad, dimRoundingMode, true /* depthwise */);\n\n  const program = new DepthwiseConv2DDerInputProgram(convInfo);\n  return backend.runWebGLProgram(program, [dy, filter], 'float32');\n}\n\nexport const depthwiseConv2dNativeBackpropInputConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNativeBackpropInput,\n  backendName: 'webgl',\n  kernelFunc: depthwiseConv2dNativeBackpropInput as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class DiagProgram implements GPGPUProgram {\n  variableNames = ['X'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(size: number) {\n    this.outputShape = [size, size];\n    this.userCode = `\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Diag, DiagInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {DiagProgram} from '../diag_gpu';\nimport {reshape} from './Reshape';\n\nexport function diag(args: {inputs: DiagInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  const outShape = [...x.shape, ...x.shape];\n  const xSize = util.sizeFromShape(x.shape);\n\n  const flat = reshape({inputs: {x}, backend, attrs: {shape: [xSize]}});\n\n  const program = new DiagProgram(xSize);\n  const res = backend.runWebGLProgram(program, [flat], flat.dtype);\n\n  const out = reshape({inputs: {x: res}, backend, attrs: {shape: outShape}});\n\n  backend.disposeIntermediateTensorInfo(flat);\n  backend.disposeIntermediateTensorInfo(res);\n\n  return out;\n}\n\nexport const diagConfig: KernelConfig = {\n  kernelName: Diag,\n  backendName: 'webgl',\n  kernelFunc: diag as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class Dilation2DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.outShape;\n\n    const {\n      inHeight,\n      inWidth,\n      padInfo,\n      strideHeight,\n      strideWidth,\n      filterHeight,\n      filterWidth,\n      dilationHeight,\n      dilationWidth\n    } = convInfo;\n\n    const {top: padTop, left: padLeft} = padInfo;\n\n    this.userCode = `\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n      const float neg_infinity = -3.4e38;\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.w;\n        ivec2 outTopLeftCorner =\n            coords.yz * strides - pads;\n        int hBeg = outTopLeftCorner.x;\n        int wBeg = outTopLeftCorner.y;\n\n        float curVal = neg_infinity;\n        for (int h = 0; h < ${filterHeight}; h++) {\n          int hIn = hBeg + h * ${dilationHeight};\n\n          if (hIn >= 0 && hIn < ${inHeight}) {\n            for (int w = 0; w < ${filterWidth}; w++) {\n              int wIn = wBeg + w * ${dilationWidth};\n\n              if (wIn >= 0 && wIn < ${inWidth}) {\n                float xVal = getX(batch, hIn, wIn, d1);\n                float wVal = getW(h, w, d1);\n\n                float val = xVal + wVal;\n                if (val > curVal) {\n                  curVal = val;\n                }\n              }\n            }\n          }\n        }\n\n        float result = curVal;\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Dilation2D, Dilation2DAttrs, Dilation2DInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Dilation2DProgram} from '../dilation_gpu';\nimport {reshape} from './Reshape';\n\nexport function dilation2D(args: {\n  inputs: Dilation2DInputs,\n  attrs: Dilation2DAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dilations} = attrs;\n\n  const convInfo = backend_util.computeDilation2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number], strides, pad,\n      'NHWC' /* dataFormat */, dilations);\n  let out: TensorInfo;\n\n  const program = new Dilation2DProgram(convInfo);\n  out = backend.runWebGLProgram(program, [x, filter], 'float32');\n\n  const outReshaped =\n      reshape({inputs: {x: out}, backend, attrs: {shape: convInfo.outShape}});\n  backend.disposeIntermediateTensorInfo(out);\n\n  return outReshaped;\n}\n\nexport const dilation2DConfig: KernelConfig = {\n  kernelName: Dilation2D,\n  backendName: 'webgl',\n  kernelFunc: dilation2D as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Einsum, EinsumAttrs, EinsumInputs, KernelConfig, KernelFunc, Tensor, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {multiply} from './Multiply';\nimport {reshape} from './Reshape';\nimport {sum} from './Sum';\nimport {transpose} from './Transpose';\n\nexport function einsum(\n    args:\n        {inputs: EinsumInputs, backend: MathBackendWebGL, attrs: EinsumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {equation} = attrs;\n  const tensors = inputs as Tensor[];\n\n  const {allDims, summedDims, idDims} =\n      backend_util.decodeEinsumEquation(equation, tensors.length);\n  backend_util.checkEinsumDimSizes(allDims.length, idDims, tensors);\n  const {path, steps} = backend_util.getEinsumComputePath(summedDims, idDims);\n\n  const nSteps = steps.length;\n  let out: TensorInfo|null = null;\n  let numDimsRemaining = allDims.length;\n  const tensorsToDispose: TensorInfo[] = [];\n  for (let i = 0; i < nSteps; ++i) {\n    for (const idTerm of steps[i]) {\n      const {permutationIndices: perm, expandDims: dimsToExpand} =\n          backend_util.getEinsumPermutation(numDimsRemaining, idDims[idTerm]);\n      let x: TensorInfo;\n      if (backend_util.isIdentityPermutation(perm)) {\n        x = tensors[idTerm];\n      } else {\n        x = transpose({inputs: {x: tensors[idTerm]}, backend, attrs: {perm}});\n        tensorsToDispose.push(x);\n      }\n      const targetShape: number[] = x.shape.slice();\n      for (let k = 0; k < dimsToExpand.length; ++k) {\n        targetShape.splice(dimsToExpand[k], 0, 1);\n      }\n\n      if (!util.arraysEqual(x.shape, targetShape)) {\n        x = reshape({inputs: {x}, backend, attrs: {shape: targetShape}});\n        tensorsToDispose.push(x);\n      }\n      if (out === null) {\n        out = x;\n      } else {\n        // tslint:disable-next-line: no-unnecessary-type-assertion\n        out = multiply({inputs: {a: x, b: out}, backend}) as TensorInfo;\n        tensorsToDispose.push(out);\n      }\n    }\n    if (i < nSteps - 1) {\n      if (path[i] >= 0) {\n        out = sum({\n          inputs: {x: out},\n          backend,\n          attrs: {\n            axis: path[i] - (allDims.length - numDimsRemaining),\n            keepDims: false\n          }\n        });\n        tensorsToDispose.push(out);\n      }\n      numDimsRemaining--;\n    }\n  }\n\n  // Clean up intermediate tensors.\n  for (const tensorInfo of tensorsToDispose) {\n    if (tensorInfo === out) {\n      continue;\n    }\n    backend.disposeIntermediateTensorInfo(tensorInfo);\n  }\n\n  return out;\n}\n\nexport const einsumConfig: KernelConfig = {\n  kernelName: Einsum,\n  backendName: 'webgl',\n  kernelFunc: einsum as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Elu, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst ELU = `return (x >= 0.0) ? x : (exp(x) - 1.0);`;\n\nconst ELU_PACKED = `\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n`;\n\nconst elu = unaryKernelFunc({opSnippet: ELU, packedOpSnippet: ELU_PACKED});\n\nexport const eluConfig: KernelConfig = {\n  kernelName: Elu,\n  backendName: 'webgl',\n  kernelFunc: elu as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {EluGrad, EluGradInputs, env, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {BinaryOpProgram} from '../binaryop_gpu';\nimport {BinaryOpPackedProgram} from '../binaryop_packed_gpu';\n\nconst ELU_DER = `return (b >= 1.0) ? a : a * (b + 1.0);`;\nconst ELU_DER_PACKED = `\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n`;\n\nexport const eluGrad =\n    (args: {inputs: EluGradInputs, backend: MathBackendWebGL}): TensorInfo => {\n      const {inputs, backend} = args;\n      const {dy, y} = inputs;\n\n      const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n          new BinaryOpPackedProgram(ELU_DER_PACKED, dy.shape, y.shape) :\n          new BinaryOpProgram(ELU_DER, dy.shape, y.shape);\n      return backend.runWebGLProgram(program, [dy, y], dy.dtype);\n    };\n\nexport const eluGradConfig: KernelConfig = {\n  kernelName: EluGrad,\n  backendName: 'webgl',\n  kernelFunc: eluGrad as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Equal, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {equalImplCPU} from '../kernel_utils/shared';\nconst PACKED_EQUAL = `\n  return vec4(equal(a, b));\n`;\n\nconst EQUAL = `return float(a == b);`;\n\nexport const equal = binaryKernelFunc({\n  opSnippet: EQUAL,\n  packedOpSnippet: PACKED_EQUAL,\n  dtype: 'bool',\n  cpuKernelImpl: equalImplCPU,\n});\n\nexport const equalConfig: KernelConfig = {\n  kernelName: Equal,\n  backendName: 'webgl',\n  kernelFunc: equal as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Erf, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst ERF = `\n  // Error function is calculated approximately with elementary function.\n  // See \"Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables\", Abramowitz and Stegun.\n  float p = ${backend_util.ERF_P};\n  float a1 = ${backend_util.ERF_A1};\n  float a2 = ${backend_util.ERF_A2};\n  float a3 = ${backend_util.ERF_A3};\n  float a4 = ${backend_util.ERF_A4};\n  float a5 = ${backend_util.ERF_A5};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`;\n\nexport const erf = unaryKernelFunc({opSnippet: ERF});\n\nexport const erfConfig: KernelConfig = {\n  kernelName: Erf,\n  backendName: 'webgl',\n  kernelFunc: erf,\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const ERF_P = 0.3275911;\nexport const ERF_A1 = 0.254829592;\nexport const ERF_A2 = -0.284496736;\nexport const ERF_A3 = 1.421413741;\nexport const ERF_A4 = -1.453152027;\nexport const ERF_A5 = 1.061405429;\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Exp, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET_UNARY, unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {expImplCPU} from '../kernel_utils/shared';\n\nexport const EXP = CHECK_NAN_SNIPPET_UNARY + `\n  return exp(x);\n`;\n\nconst EXP_PACKED = `\n  vec4 result = exp(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\n\nexport const exp = unaryKernelFunc({\n  opSnippet: EXP,\n  packedOpSnippet: EXP_PACKED,\n  cpuKernelImpl: expImplCPU,\n  dtype: 'float32',\n});\n\nexport const expConfig: KernelConfig = {\n  kernelName: Exp,\n  backendName: 'webgl',\n  kernelFunc: exp as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ExpandDims, ExpandDimsAttrs, ExpandDimsInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reshape} from './Reshape';\n\nexport function expandDims(args: {\n  inputs: ExpandDimsInputs,\n  attrs: ExpandDimsAttrs,\n  backend: MathBackendWebGL\n}): TensorInfo {\n  const {inputs, attrs, backend} = args;\n  const {dim} = attrs;\n  const {input} = inputs;\n\n  const inputRank = input.shape.length;\n  const newShape = input.shape.slice();\n  let $dim = dim;\n  if (dim < 0) {\n    // Negative value is counted from the tail of rank.\n    util.assert(\n        -(inputRank + 1) <= dim,\n        () => `Axis must be in the interval [${- (inputRank + 1)}, ${\n            inputRank}]`);\n    $dim = inputRank + dim + 1;\n  }\n  newShape.splice($dim, 0, 1);\n\n  return reshape({inputs: {x: input}, backend, attrs: {shape: newShape}});\n}\n\nexport const expandDimsConfig: KernelConfig = {\n  kernelName: ExpandDims,\n  backendName: 'webgl',\n  kernelFunc: expandDims as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Expm1, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {expm1ImplCPU} from '../kernel_utils/shared';\n\nconst EXPM1 = `return exp(x) - 1.0;`;\n\nexport const expm1 = unaryKernelFunc(\n    {opSnippet: EXPM1, packedOpSnippet: EXPM1, cpuKernelImpl: expm1ImplCPU});\n\nexport const expm1Config: KernelConfig = {\n  kernelName: Expm1,\n  backendName: 'webgl',\n  kernelFunc: expm1 as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class FFTProgram implements GPGPUProgram {\n  variableNames = ['real', 'imag'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      component: 'real'|'imag', inputShape: [number, number],\n      inverse: boolean) {\n    const innerDim = inputShape[1];\n    this.outputShape = inputShape;\n\n    const exponentMultiplierSnippet =\n        inverse ? `2.0 * ${Math.PI}` : `-2.0 * ${Math.PI}`;\n    const resultDenominator = inverse ? `${innerDim}.0` : '1.0';\n\n    let opString: string;\n    if (component === 'real') {\n      opString = 'return real * expR - imag * expI;';\n    } else if (component === 'imag') {\n      opString = 'return real * expI + imag * expR;';\n    } else {\n      throw new Error(\n          `FFT component must be either \"real\" or \"imag\", got ${component}.`);\n    }\n\n    this.userCode = `\n      const float exponentMultiplier = ${exponentMultiplierSnippet};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${opString}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${innerDim});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${innerDim}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${resultDenominator};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {FFTProgram} from '../fft_gpu';\n\nimport {complex} from './Complex';\nimport {reshape} from './Reshape';\n\nexport function fftImpl(\n    x: TensorInfo, inverse: boolean, backend: MathBackendWebGL): TensorInfo {\n  const xData = backend.texData.get(x.dataId);\n\n  const inputSize = util.sizeFromShape(x.shape);\n  // Collapse all outer dimensions to a single batch dimension.\n  const innerDimensionSize = x.shape[x.shape.length - 1];\n  const batch = inputSize / innerDimensionSize;\n\n  const input2D = reshape(\n      {inputs: {x}, backend, attrs: {shape: [batch, innerDimensionSize]}});\n\n  const xShape = input2D.shape as [number, number];\n  const realProgram = new FFTProgram('real', xShape, inverse);\n  const imagProgram = new FFTProgram('imag', xShape, inverse);\n\n  const inputs = [\n    {\n      dataId: xData.complexTensorInfos.real.dataId,\n      dtype: xData.complexTensorInfos.real.dtype,\n      shape: xShape\n    },\n    {\n      dataId: xData.complexTensorInfos.imag.dataId,\n      dtype: xData.complexTensorInfos.imag.dtype,\n      shape: xShape\n    }\n  ];\n\n  const realPart = backend.runWebGLProgram(realProgram, inputs, 'float32');\n  const imagPart = backend.runWebGLProgram(imagProgram, inputs, 'float32');\n\n  const complexOutput =\n      complex({inputs: {real: realPart, imag: imagPart}, backend});\n\n  backend.disposeIntermediateTensorInfo(realPart);\n  backend.disposeIntermediateTensorInfo(imagPart);\n\n  const complexOutputReshaped =\n      reshape({inputs: {x: complexOutput}, backend, attrs: {shape: x.shape}});\n\n  backend.disposeIntermediateTensorInfo(input2D);\n  backend.disposeIntermediateTensorInfo(complexOutput);\n  return complexOutputReshaped;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FFT, FFTInputs, KernelConfig, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {fftImpl} from './FFT_impl';\n\nexport function fft(args: {inputs: FFTInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  return fftImpl(input, false /* inverse */, backend);\n}\n\nexport const fftConfig: KernelConfig = {\n  kernelName: FFT,\n  backendName: 'webgl',\n  kernelFunc: fft\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {UniformType} from './shader_compiler';\n\nexport class FillProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n  customUniforms = [{name: 'value', type: 'float' as UniformType}];\n\n  constructor(shape: number[], value: number) {\n    this.variableNames = ['x'];\n    this.outputShape = shape;\n\n    this.userCode = `\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Fill, FillAttrs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {FillProgram} from '../fill_gpu';\n\nexport function fill(args: {backend: MathBackendWebGL, attrs: FillAttrs}):\n    TensorInfo {\n  const {backend, attrs} = args;\n  const {shape, value} = attrs;\n  let {dtype} = attrs;\n\n  dtype = dtype || util.inferDtype(value);\n\n  if (dtype === 'string') {\n    // String type should be handled in CPU memory.\n    const values = util.getArrayFromDType(dtype, util.sizeFromShape(shape));\n    values.fill(value as string);\n    return backend.makeTensorInfo(shape, dtype, values);\n  } else {\n    const program = new FillProgram(shape, value as number);\n    const customValues = [[value as number]];\n    return backend.runWebGLProgram(program, [], dtype, customValues);\n  }\n}\n\nexport const fillConfig: KernelConfig = {\n  kernelName: Fill,\n  backendName: 'webgl',\n  kernelFunc: fill as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\nimport {FromPixels, FromPixelsAttrs, FromPixelsInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {TextureUsage} from '../tex_util';\n\nimport {FromPixelsProgram} from './FromPixels_utils/from_pixels_gpu';\nimport {FromPixelsPackedProgram} from './FromPixels_utils/from_pixels_packed_gpu';\n\nexport const fromPixelsConfig: KernelConfig = {\n  kernelName: FromPixels,\n  backendName: 'webgl',\n  kernelFunc: fromPixels as unknown as KernelFunc,\n};\n\nlet fromPixels2DContext: CanvasRenderingContext2D;\nlet willReadFrequently = env().getBool('CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU');\n\nfunction fromPixels(args: {\n  inputs: FromPixelsInputs,\n  backend: MathBackendWebGL,\n  attrs: FromPixelsAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  let {pixels} = inputs;\n  const {numChannels} = attrs;\n\n  const isVideo = typeof (HTMLVideoElement) !== 'undefined' &&\n      pixels instanceof HTMLVideoElement;\n  const isImage = typeof (HTMLImageElement) !== 'undefined' &&\n      pixels instanceof HTMLImageElement;\n  const [width, height] = isVideo ?\n      [\n        (pixels as HTMLVideoElement).videoWidth,\n        (pixels as HTMLVideoElement).videoHeight\n      ] :\n      [pixels.width, pixels.height];\n\n  const texShape: [number, number] = [height, width];\n  const outShape = [height, width, numChannels];\n\n  if (isImage || isVideo) {\n    const newWillReadFrequently =\n        env().getBool('CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU');\n    if (fromPixels2DContext == null ||\n        newWillReadFrequently !== willReadFrequently) {\n      willReadFrequently = newWillReadFrequently;\n      fromPixels2DContext =\n          document.createElement('canvas').getContext(\n              '2d', {willReadFrequently});\n    }\n\n    fromPixels2DContext.canvas.width = width;\n    fromPixels2DContext.canvas.height = height;\n    fromPixels2DContext.drawImage(\n        pixels as HTMLVideoElement | HTMLImageElement | ImageBitmap, 0, 0,\n        width, height);\n    pixels = fromPixels2DContext.canvas;\n  }\n\n  const tempPixelHandle = backend.makeTensorInfo(texShape, 'int32');\n  // This is a byte texture with pixels.\n  backend.texData.get(tempPixelHandle.dataId).usage = TextureUsage.PIXELS;\n  backend.gpgpu.uploadPixelDataToTexture(\n      backend.getTexture(tempPixelHandle.dataId), pixels as ImageData);\n  const program = env().getBool('WEBGL_PACK') ?\n      new FromPixelsPackedProgram(outShape) :\n      new FromPixelsProgram(outShape);\n  const res = backend.runWebGLProgram(program, [tempPixelHandle], 'int32');\n  backend.disposeData(tempPixelHandle.dataId);\n  return res;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class FlipLeftRightProgram implements GPGPUProgram {\n  variableNames = ['Image'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(imageShape: [number, number, number, number]) {\n    const imageWidth = imageShape[2];\n    this.outputShape = imageShape;\n\n    this.userCode = `\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${imageWidth} - x - 1;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${imageWidth}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Tensor4D} from '@tensorflow/tfjs-core';\nimport {FlipLeftRight, FlipLeftRightInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {FlipLeftRightProgram} from '../flip_left_right_gpu';\n\nexport const flipLeftRightConfig: KernelConfig = {\n  kernelName: FlipLeftRight,\n  backendName: 'webgl',\n  kernelFunc: ({inputs, backend}) => {\n    const {image} = inputs as FlipLeftRightInputs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    const program = new FlipLeftRightProgram((image as Tensor4D).shape);\n    const output = webglBackend.runWebGLProgram(program, [image], image.dtype);\n    return output;\n  }\n};\n","\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Floor, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {floorImplCPU} from '../kernel_utils/shared';\n\nconst FLOOR = `return floor(x);`;\n\nexport const floor = unaryKernelFunc(\n    {opSnippet: FLOOR, packedOpSnippet: FLOOR, cpuKernelImpl: floorImplCPU});\n\nexport const floorConfig: KernelConfig = {\n  kernelName: Floor,\n  backendName: 'webgl',\n  kernelFunc: floor,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FloorDiv, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\n// We use native integer division to deal with floating point imprecision. Since\n// we implement floor division and glsl implements truncated division, we\n// correct for this by subtracting 1 from result when the result is negative and\n// there is a remainder.\nconst INT_DIV = `\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n`;\n\nconst INT_DIV_PACKED = `\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n`;\n\nexport const floorDiv = binaryKernelFunc(\n    {opSnippet: INT_DIV, packedOpSnippet: INT_DIV_PACKED, dtype: 'int32'});\n\nexport const floorDivConfig: KernelConfig = {\n  kernelName: FloorDiv,\n  backendName: 'webgl',\n  kernelFunc: floorDiv as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from '../../glsl_version';\nimport {GPGPUProgram} from '../../gpgpu_math';\n\nexport class FromPixelsProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n\n  constructor(outputShape: number[]) {\n    const glsl = getGlslDifferences();\n    const [height, width, ] = outputShape;\n    this.outputShape = outputShape;\n    this.userCode = `\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${width}.0, ${height}.0);\n\n        vec4 values = ${glsl.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from '../../glsl_version';\nimport {GPGPUProgram} from '../../gpgpu_math';\n\nexport class FromPixelsPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  packedInputs = false;\n  packedOutput = true;\n\n  constructor(outputShape: number[]) {\n    const glsl = getGlslDifferences();\n    const [height, width, ] = outputShape;\n    this.outputShape = outputShape;\n    this.userCode = `\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${width}.0, ${height}.0);\n            vec4 values = ${glsl.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${glsl.output} = result;\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, env, FusedConv2D, FusedConv2DAttrs, FusedConv2DInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv2DProgram} from '../conv_gpu';\nimport {Conv2DPackedProgram} from '../conv_packed_gpu';\nimport {mapActivationToShaderProgram} from '../kernel_utils/kernel_funcs_utils';\n\nimport {conv2dByMatMul, conv2dWithIm2Row} from './Conv2D_impl';\nimport {reshape} from './Reshape';\n\nexport function fusedConv2d(args: {\n  inputs: FusedConv2DInputs,\n  attrs: FusedConv2DAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter, bias, preluActivationWeights} = inputs;\n  const {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, dilations, pad,\n      dimRoundingMode, false /* depthwise */, $dataFormat);\n  let out: TensorInfo;\n  const intermediates: TensorInfo[] = [];\n\n  const hasBias = bias != null;\n  const hasPreluActivationWeights = preluActivationWeights != null;\n  const hasLeakyreluAlpha = activation === 'leakyrelu';\n\n  const prepareInputs = (): TensorInfo[] => {\n    const inputs: TensorInfo[] = [x, filter];\n\n    // If the input is a 1-D tensor, align it with the channels.\n    //\n    // For fusedConv2d, the inputs (x, W, bias, preluActivationWeights) are\n    // supposed to be aligned with the dataFormat. The 4-D tensor inputs or\n    // scalar inputs are originally aligned, but the 1-D tensor inputs are\n    // supposed to be aligned with the channels (only bias and PReLU activation\n    // weights could be a 1-D tensor).\n    const alignInputWithDataFormat =\n        (input: TensorInfo, dataFormat: 'NHWC'|'NCHW'): TensorInfo => {\n          if (dataFormat === 'NCHW' && input.shape.length === 1 &&\n              input.shape[0] !== 1) {\n            const alignedInput = reshape({\n              inputs: {x: input},\n              backend,\n              attrs: {shape: [input.shape[0], 1, 1]}\n            });\n            intermediates.push(alignedInput);\n            return alignedInput;\n          }\n          return input;\n        };\n\n    if (hasBias) {\n      inputs.push(alignInputWithDataFormat(bias, dataFormat));\n    }\n\n    if (hasPreluActivationWeights) {\n      inputs.push(alignInputWithDataFormat(preluActivationWeights, dataFormat));\n    }\n\n    if (hasLeakyreluAlpha) {\n      const $leakyreluAlpha = backend.makeTensorInfo(\n          [], 'float32',\n          util.createScalarValue(leakyreluAlpha as unknown as 'float32', 'float32'));\n      inputs.push($leakyreluAlpha);\n      intermediates.push($leakyreluAlpha);\n    }\n    return inputs;\n  };\n\n  if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 &&\n      convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 &&\n      convInfo.strideHeight === 1 && convInfo.strideWidth === 1 &&\n      (convInfo.padInfo.type === 'SAME' || convInfo.padInfo.type === 'VALID')) {\n    out = conv2dByMatMul({\n      x,\n      filter,\n      convInfo,\n      backend,\n      bias,\n      activation,\n      preluActivationWeights,\n      leakyreluAlpha\n    });\n  } else if (convInfo.strideWidth <= 2 && $dataFormat === 'channelsLast'\n    && env().getBool('WEBGL_EXP_CONV')\n    ) {\n      const fusedActivation =\n          activation ? mapActivationToShaderProgram(activation, true) : null;\n    const program = new Conv2DPackedProgram(\n      convInfo, hasBias, fusedActivation, hasPreluActivationWeights,\n      hasLeakyreluAlpha);\n    const customValues = [\n      [convInfo.padInfo.top, convInfo.padInfo.left],\n      [convInfo.strideHeight, convInfo.strideWidth],\n      [convInfo.dilationHeight, convInfo.dilationWidth],\n      [convInfo.inHeight, convInfo.inWidth]\n    ];\n    const inputs = prepareInputs();\n    out = backend.runWebGLProgram(program, inputs, 'float32', customValues);\n  } else if (env().getBool('WEBGL_CONV_IM2COL')) {\n    out = conv2dWithIm2Row({\n      x,\n      filter,\n      convInfo,\n      backend,\n      bias,\n      activation,\n      preluActivationWeights,\n      leakyreluAlpha\n    });\n  } else {\n    const fusedActivation =\n        activation ? mapActivationToShaderProgram(activation, false) : null;\n    const program = new Conv2DProgram(\n        convInfo, hasBias, fusedActivation, hasPreluActivationWeights,\n        hasLeakyreluAlpha);\n\n    const inputs = prepareInputs();\n    out = backend.runWebGLProgram(program, inputs, 'float32');\n  }\n\n  const outReshaped =\n      reshape({inputs: {x: out}, backend, attrs: {shape: convInfo.outShape}});\n\n  intermediates.push(out);\n  intermediates.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return outReshaped;\n}\n\nexport const fusedConv2DConfig: KernelConfig = {\n  kernelName: FusedConv2D,\n  backendName: 'webgl',\n  kernelFunc: fusedConv2d as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, env, FusedDepthwiseConv2D, FusedDepthwiseConv2DAttrs, FusedDepthwiseConv2DInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {DepthwiseConv2DProgram} from '../conv_gpu_depthwise';\nimport {DepthwiseConvPacked2DProgram} from '../conv_packed_gpu_depthwise';\nimport {mapActivationToShaderProgram} from '../kernel_utils/kernel_funcs_utils';\n\nexport function fusedDepthwiseConv2D(args: {\n  inputs: FusedDepthwiseConv2DInputs,\n  attrs: FusedDepthwiseConv2DAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter, bias, preluActivationWeights} = inputs;\n  const {strides, pad, dilations, dimRoundingMode, activation, leakyreluAlpha} =\n      attrs;\n\n  const intermediates: TensorInfo[] = [];\n\n  let $dilations = dilations;\n  if ($dilations == null) {\n    $dilations = [1, 1];\n  }\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, $dilations),\n      () => 'Error in depthwiseConv2d: Either strides or dilations must be ' +\n          `1. Got strides ${strides} and dilations '${$dilations}'`);\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, $dilations,\n      pad, dimRoundingMode, true /* depthwise */);\n\n  const shouldPackDepthwiseConv = env().getBool('WEBGL_PACK_DEPTHWISECONV') &&\n      convInfo.strideWidth <= 2 &&\n      convInfo.outChannels / convInfo.inChannels === 1;\n  const fusedActivation = activation ?\n      mapActivationToShaderProgram(activation, shouldPackDepthwiseConv) :\n      null;\n  const programInputs: TensorInfo[] = [x, filter];\n\n  const hasBias = bias != null;\n  const hasPreluActivationWeights = preluActivationWeights != null;\n  const hasLeakyreluAlpha = activation === 'leakyrelu';\n\n  if (hasBias) {\n    programInputs.push(bias);\n  }\n  if (hasPreluActivationWeights) {\n    programInputs.push(preluActivationWeights);\n  }\n  if (hasLeakyreluAlpha) {\n    const $leakyreluAlpha = backend.makeTensorInfo(\n        [], 'float32',\n        util.createScalarValue(leakyreluAlpha as unknown as 'float32',\n                               'float32'));\n    programInputs.push($leakyreluAlpha);\n    intermediates.push($leakyreluAlpha);\n  }\n\n  let program: DepthwiseConv2DProgram|DepthwiseConvPacked2DProgram;\n  if (shouldPackDepthwiseConv) {\n    program = new DepthwiseConvPacked2DProgram(\n        convInfo, hasBias, fusedActivation, hasPreluActivationWeights,\n        hasLeakyreluAlpha);\n  } else {\n    program = new DepthwiseConv2DProgram(\n        convInfo, hasBias, fusedActivation, hasPreluActivationWeights,\n        hasLeakyreluAlpha);\n  }\n  const customValues = [\n    [convInfo.padInfo.top, convInfo.padInfo.left],\n    [convInfo.strideHeight, convInfo.strideWidth],\n    [convInfo.dilationHeight, convInfo.dilationWidth],\n    [convInfo.inHeight, convInfo.inWidth]\n  ];\n  const result =\n      backend.runWebGLProgram(program, programInputs, 'float32', customValues);\n\n  intermediates.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n}\n\nexport const fusedDepthwiseConv2DConfig: KernelConfig = {\n  kernelName: FusedDepthwiseConv2D,\n  backendName: 'webgl',\n  kernelFunc: fusedDepthwiseConv2D as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class GatherNDProgram implements GPGPUProgram {\n  variableNames = ['x', 'indices'];\n  outputShape: number[];\n  userCode: string;\n  constructor(\n      private sliceDim: number, private strides: number[], shape: number[],\n      private paramsShape: number[]) {\n    this.outputShape = shape;\n    const dtype = getCoordsDataType(shape.length);\n\n    let mainLoop = `\n    int index;`;\n    for (let j = 0; j < this.sliceDim; j++) {\n      mainLoop += `\n          index = round(getIndices(coords[0], ${j}));\n          out_of_bounds = out_of_bounds || index < 0;\n          out_of_bounds = out_of_bounds || index >= ${this.paramsShape[j]};\n          flattenIndex += index * ${this.strides[j]};`;\n    }\n\n    this.userCode = `\n         void main() {\n          ${dtype} coords = getOutputCoords();\n          int flattenIndex = 0;\n          bool out_of_bounds = false;\n\n          ${mainLoop}\n\n          setOutput(out_of_bounds ? 0.0 : getX(flattenIndex, coords[1]));\n        }\n      `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, GatherNd, GatherNdInputs, KernelConfig, KernelFunc, Rank, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {GatherNDProgram} from '../gather_nd_gpu';\nimport {gatherNdImplCPU} from '../kernel_utils/shared';\n\nimport {reshape} from './Reshape';\n\nexport function gatherNd(\n    args: {inputs: GatherNdInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {params, indices} = inputs;\n\n  const indicesShape = indices.shape;\n  const sliceRank = indicesShape[indicesShape.length - 1];\n  const paramsSize = util.sizeFromShape(params.shape);\n\n  const [resultShape, numSlices, sliceSize, strides] =\n      backend_util.prepareAndValidate(params, indices);\n\n  const flattenIndices = reshape(\n      {inputs: {x: indices}, backend, attrs: {shape: [numSlices, sliceRank]}});\n  const flattenX = reshape({\n    inputs: {x: params},\n    backend,\n    attrs: {shape: [(util.sizeFromShape(params.shape) / sliceSize), sliceSize]}\n  });\n\n  if (backend.shouldExecuteOnCPU([params, indices]) ||\n      params.dtype === 'string') {\n    const indicesData = backend.readSync(indices.dataId) as TypedArray;\n    const paramsBuf = backend.bufferSync<Rank, 'float32'>(params);\n    const outValue = gatherNdImplCPU(\n        indicesData, paramsBuf, params.dtype, numSlices, sliceRank, sliceSize,\n        strides, params.shape, paramsSize);\n\n    return backend.makeTensorInfo(resultShape, params.dtype, outValue.values);\n  }\n  const program =\n      new GatherNDProgram(sliceRank, strides, [numSlices, sliceSize], \n        params.shape);\n  const res = backend.runWebGLProgram(\n      program, [flattenX, flattenIndices], flattenX.dtype);\n\n  const reshaped =\n      reshape({inputs: {x: res}, backend, attrs: {shape: resultShape}});\n\n  backend.disposeIntermediateTensorInfo(flattenIndices);\n  backend.disposeIntermediateTensorInfo(flattenX);\n  backend.disposeIntermediateTensorInfo(res);\n\n  return reshaped;\n}\n\nexport const gatherNdConfig: KernelConfig = {\n  kernelName: GatherNd,\n  backendName: 'webgl',\n  kernelFunc: gatherNd as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { TensorInfo } from '../tensor_info';\nimport {computeStrides, sizeFromShape} from '../util';\n\n/**\n * Validate gather nd inputs.\n *\n * @param tensor The tensor contains the source values.\n * @param indices The tensor contains the indices to slice the source.\n *\n * @returns [resultShape, numUpdates, sliceSize, strides]\n */\nexport function prepareAndValidate(tensor: TensorInfo, indices: TensorInfo):\n    [number[], number, number, number[]] {\n  const tensorRank = tensor.shape.length;\n  const indicesRank = indices.shape.length;\n  if (tensorRank < 1) {\n    throw new Error(\n        'tf.gatherND() expects the input to be rank 1 or higher,' +\n        ` but the rank was ${tensorRank}.`);\n  }\n  if (indicesRank < 1) {\n    throw new Error(\n        'tf.gatherND() expects the indices to be rank 1 or higher,' +\n        ` but the rank was ${indicesRank}.`);\n  }\n  if (indices.dtype !== 'int32') {\n    throw new Error(\n        'tf.gatherND() expects the indices to be int32 type,' +\n        ` but the dtype was ${indices.dtype}.`);\n  }\n  if (indices.shape[indicesRank - 1] > tensorRank) {\n    throw new Error(\n        'index innermost dimension length must be <= tensor rank; saw: ' +\n        `${indices.shape[indicesRank - 1]} vs. ${tensorRank}`);\n  }\n\n  if (sizeFromShape(tensor.shape) === 0) {\n    throw new Error(\n        'Requested more than 0 entries, but input is empty.' +\n        ` Input shape: ${tensor.shape}.`);\n  }\n\n  const indicesShape = indices.shape;\n  const sliceRank = indicesShape[indicesShape.length - 1];\n\n  // The result shape is\n  //   indices.shape[:-1] + params.shape[indices.shape[-1]:]\n  let nResult = 1;\n  for (let i = 0; i < indicesShape.length - 1; ++i) {\n    nResult *= indicesShape[i];\n  }\n\n  const inputShape = tensor.shape;\n\n  const resultShape = indicesShape.slice();\n  resultShape.pop();\n\n  let sliceSize = 1;\n  for (let i = sliceRank; i < tensorRank; ++i) {\n    sliceSize *= inputShape[i];\n    resultShape.push(inputShape[i]);\n  }\n\n  const strides =\n      [...computeStrides(tensor.shape).map(stride => stride / sliceSize),\n       1].slice(0, sliceRank);\n\n  return [resultShape, nResult, sliceSize, strides];\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport type GatherShape = [number, number, number, number];\n\nexport class GatherProgram implements GPGPUProgram {\n  variableNames = ['A', 'indices'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n\n  constructor(aShape: GatherShape, outputShape: GatherShape) {\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    const dtype = getCoordsDataType(this.rank);\n    const sourceCoords = getSourceCoords(aShape, 2);\n\n    this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        int index = int(getIndices(resRC.x, resRC.z));\n        float inBounds = (index >= 0) && (index < ${aShape[2]}) ? 1.0 : 0.0;\n        setOutput(inBounds * getA(${sourceCoords}));\n      }\n    `;\n  }\n}\n\n// The input and output are always flattened into rank 4 tensors.\nfunction getSourceCoords(aShape: GatherShape, axis: number): string {\n  const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];\n\n  const sourceCoords = [];\n  for (let i = 0; i < aShape.length; i++) {\n    if (i === 2) {\n      sourceCoords.push('index');\n    } else {\n      sourceCoords.push(`${currentCoords[i]}`);\n    }\n  }\n  return sourceCoords.join();\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, GatherV2, GatherV2Attrs, GatherV2Inputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util, env} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {GatherProgram, GatherShape} from '../gather_gpu';\nimport {gatherV2ImplCPU} from '../kernel_utils/shared';\n\nimport {reshape} from './Reshape';\n\nexport function gatherV2(args: {\n  inputs: GatherV2Inputs,\n  backend: MathBackendWebGL,\n  attrs: GatherV2Attrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, indices} = inputs;\n  const {axis, batchDims} = attrs;\n\n  const parsedAxis = util.parseAxisParam(axis, x.shape)[0];\n  if (env().get('DEBUG')) {\n    // In debug mode, throw error when any index is out of bound.\n    // Otherwise, just fill out of bounds with zeroes.\n    const indicesVals = backend.readSync(indices.dataId) as TypedArray;\n    const axisDim = x.shape[parsedAxis];\n    for (let i = 0; i < indicesVals.length; ++i) {\n      const index = indicesVals[i];\n      util.assert(\n        index <= axisDim - 1 && index >= 0,\n        () =>\n          `GatherV2: the index value ${index} is not in [0, ${axisDim - 1}]`);\n    }\n  }\n\n  const shapeInfo = backend_util.segment_util.collectGatherOpShapeInfo(\n      x, indices, parsedAxis, batchDims);\n\n  const indicesSize = util.sizeFromShape(indices.shape);\n\n  const toDispose = [];\n\n  const flattenX = reshape({\n    inputs: {x},\n    backend,\n    attrs: {\n      shape: [\n        shapeInfo.batchSize, shapeInfo.outerSize, shapeInfo.dimSize,\n        shapeInfo.sliceSize\n      ]\n    }\n  });\n\n  const flattenIndex = reshape({\n    inputs: {x: indices},\n    backend,\n    attrs: {shape: [shapeInfo.batchSize, indicesSize / shapeInfo.batchSize]}\n  });\n\n  toDispose.push(flattenX);\n  toDispose.push(flattenIndex);\n\n  const flattenOutputShape = [\n    shapeInfo.batchSize, shapeInfo.outerSize, indicesSize / shapeInfo.batchSize,\n    shapeInfo.sliceSize\n  ];\n\n  if (backend.shouldExecuteOnCPU([x, indices]) || x.dtype === 'string') {\n    const indicesBuf = backend.bufferSync(flattenIndex);\n    const xBuf = backend.bufferSync(flattenX);\n    const outBuf = gatherV2ImplCPU(xBuf, indicesBuf, flattenOutputShape);\n\n    toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n    return backend.makeTensorInfo(\n        shapeInfo.outputShape, outBuf.dtype, outBuf.values as TypedArray);\n  }\n\n  const program = new GatherProgram(flattenX.shape as GatherShape,\n                                    flattenOutputShape as GatherShape);\n  const res = backend.runWebGLProgram(\n      program, [flattenX, flattenIndex], flattenX.dtype);\n  toDispose.push(res);\n\n  const reshaped = reshape(\n      {inputs: {x: res}, backend, attrs: {shape: shapeInfo.outputShape}});\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return reshaped;\n}\n\nexport const gatherV2Config: KernelConfig = {\n  kernelName: GatherV2,\n  backendName: 'webgl',\n  kernelFunc: gatherV2 as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport { TensorInfo } from '../tensor_info';\nimport {nearestDivisor} from '../util';\n\nimport {PARALLELIZE_THRESHOLD} from './reduce_util';\n\nexport interface SegOpInfo {\n  windowSize: number;\n  batchSize: number;\n  inSize: number;\n  numSegments: number;\n}\n\nexport function segOpComputeOptimalWindowSize(\n    inSize: number, numSegments: number): number {\n  let done = false;\n  let res;\n\n  if (inSize <= PARALLELIZE_THRESHOLD) {\n    res = inSize;\n    done = true;\n  } else {\n    res = nearestDivisor(inSize, Math.floor(Math.sqrt(inSize)));\n  }\n\n  while (!done) {\n    if (res > numSegments || res === inSize) {\n      done = true;\n    } else {\n      res = nearestDivisor(inSize, res + 1);\n    }\n  }\n  return res;\n}\n\nexport function computeOutShape(\n    aShape: number[], axis: number, numSegments: number): number[] {\n  const outShape = [];\n  const rank = aShape.length;\n  for (let dim = 0; dim < rank; dim++) {\n    if (dim !== axis) {\n      outShape.push(aShape[dim]);\n    } else {\n      outShape.push(numSegments);\n    }\n  }\n  return outShape;\n}\n\nexport interface GatherOpShapeInfo {\n  batchSize: number;\n  sliceSize: number;\n  outerSize: number;\n  dimSize: number;\n  outputShape: number[];\n}\n\nexport function collectGatherOpShapeInfo(\n    x: TensorInfo, indices: TensorInfo, axis: number,\n    batchDims: number): GatherOpShapeInfo {\n  const indicesRank = indices.shape.length;\n  const xRank = x.shape.length;\n\n  if (batchDims !== 0) {\n    if (batchDims < -indicesRank || batchDims > indicesRank) {\n      throw new Error(`Expect batchDims in the range of [-${indicesRank}, ${\n          indicesRank}], but got ${batchDims}`);\n    }\n  }\n\n  if (batchDims < 0) {\n    batchDims += indicesRank;\n  }\n\n  if (batchDims > xRank) {\n    throw new Error(`batchDims (${batchDims}) must be less than rank(x) (\n    ${xRank}).`);\n  }\n\n  if (axis < batchDims) {\n    throw new Error(`batchDims (${\n        batchDims}) must be less than or equal to axis (${axis}).`);\n  }\n\n  for (let i = 0; i < batchDims; ++i) {\n    if (x.shape[i] !== indices.shape[i]) {\n      throw new Error(\n          `x.shape[${i}]: ${x.shape[i]} should be equal to indices.shape[${\n              i}]: ${indices.shape[i]}.`);\n    }\n  }\n  const dimSize = x.shape[axis];\n\n  const outputShape: number[] = [];\n  let batchSize = 1;\n  let outerSize = 1;\n  let sliceSize = 1;\n\n  for (let i = 0; i < batchDims; ++i) {\n    outputShape.push(x.shape[i]);\n    batchSize *= x.shape[i];\n  }\n\n  for (let i = batchDims; i < axis; i++) {\n    outputShape.push(x.shape[i]);\n    outerSize *= x.shape[i];\n  }\n\n  for (let i = batchDims; i < indicesRank; i++) {\n    outputShape.push(indices.shape[i]);\n  }\n\n  for (let i = axis + 1; i < xRank; i++) {\n    outputShape.push(x.shape[i]);\n    sliceSize *= x.shape[i];\n  }\n\n  return {batchSize, sliceSize, outerSize, dimSize, outputShape};\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Greater, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {greaterImplCPU} from '../kernel_utils/shared';\n\nconst GREATER = `return float(a > b);`;\nconst GREATER_PACKED = `\n  return vec4(greaterThan(a, b));\n`;\n\nexport const greater = binaryKernelFunc({\n  opSnippet: GREATER,\n  packedOpSnippet: GREATER_PACKED,\n  cpuKernelImpl: greaterImplCPU,\n  dtype: 'bool'\n});\n\nexport const greaterConfig: KernelConfig = {\n  kernelName: Greater,\n  backendName: 'webgl',\n  kernelFunc: greater as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GreaterEqual, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {greaterEqualImplCPU} from '../kernel_utils/shared';\n\nconst GREATER_EQUAL = `return float(a >= b);`;\nconst GREATER_EQUAL_PACKED = `\n  return vec4(greaterThanEqual(a, b));\n`;\n\nexport const greaterEqual = binaryKernelFunc({\n  opSnippet: GREATER_EQUAL,\n  packedOpSnippet: GREATER_EQUAL_PACKED,\n  dtype: 'bool',\n  cpuKernelImpl: greaterEqualImplCPU\n});\n\nexport const greaterEqualConfig: KernelConfig = {\n  kernelName: GreaterEqual,\n  backendName: 'webgl',\n  kernelFunc: greaterEqual as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IFFT, IFFTInputs, KernelConfig, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {fftImpl} from './FFT_impl';\n\nexport function ifft(args: {inputs: IFFTInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  return fftImpl(input, true /* inverse */, backend);\n}\n\nexport const ifftConfig: KernelConfig = {\n  kernelName: IFFT,\n  backendName: 'webgl',\n  kernelFunc: ifft\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsFinite, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst IS_FINITE = `return float(!isnan(x) && !isinf(x));`;\n\nexport const isFinite = unaryKernelFunc({opSnippet: IS_FINITE, dtype: 'bool'});\n\nexport const isFiniteConfig: KernelConfig = {\n  kernelName: IsFinite,\n  backendName: 'webgl',\n  kernelFunc: isFinite,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsInf, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst IS_INF = `return float(isinf(x));`;\n\nexport const isInf = unaryKernelFunc({opSnippet: IS_INF, dtype: 'bool'});\n\nexport const isInfConfig: KernelConfig = {\n  kernelName: IsInf,\n  backendName: 'webgl',\n  kernelFunc: isInf,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsNan, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst IS_NAN = `return float(isnan(x));`;\n\nexport const isNaN = unaryKernelFunc({opSnippet: IS_NAN, dtype: 'bool'});\n\nexport const isNaNConfig: KernelConfig = {\n  kernelName: IsNan,\n  backendName: 'webgl',\n  kernelFunc: isNaN,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Less} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {lessImplCPU} from '../kernel_utils/shared';\n\nconst LESS = `return float(a < b);`;\nconst LESS_PACKED = `\n  return vec4(lessThan(a, b));\n`;\n\nexport const less = binaryKernelFunc({\n  opSnippet: LESS,\n  packedOpSnippet: LESS_PACKED,\n  cpuKernelImpl: lessImplCPU,\n  dtype: 'bool'\n});\n\nexport const lessConfig: KernelConfig = {\n  kernelName: Less,\n  backendName: 'webgl',\n  kernelFunc: less as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LessEqual} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {lessEqualImplCPU} from '../kernel_utils/shared';\n\nexport const LESS_EQUAL = `return float(a <= b);`;\nexport const LESS_EQUAL_PACKED = `\n  return vec4(lessThanEqual(a, b));\n`;\n\nexport const lessEqual = binaryKernelFunc({\n  opSnippet: LESS_EQUAL,\n  packedOpSnippet: LESS_EQUAL_PACKED,\n  cpuKernelImpl: lessEqualImplCPU,\n  dtype: 'bool'\n});\n\nexport const lessEqualConfig: KernelConfig = {\n  kernelName: LessEqual,\n  backendName: 'webgl',\n  kernelFunc: lessEqual as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LinSpace, LinSpaceAttrs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {linSpaceImplCPU} from '../kernel_utils/shared';\n\nexport function linSpace(\n    args: {backend: MathBackendWebGL, attrs: LinSpaceAttrs}): TensorInfo {\n  const {backend, attrs} = args;\n  const {start, stop, num} = attrs;\n\n  // TODO: Use CPU implementation due to the precision problem in Safari.\n  const outVals = linSpaceImplCPU(start, stop, num);\n  return backend.makeTensorInfo([outVals.length], 'float32', outVals);\n}\n\nexport const linSpaceConfig: KernelConfig = {\n  kernelName: LinSpace,\n  backendName: 'webgl',\n  kernelFunc: linSpace as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Log} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET_UNARY, unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {logImplCPU} from '../kernel_utils/shared';\n\n// Windows chrome return 0 if the input is negative value. We will specifically\n// return NaN if the input is 0 to solve compatiblity issue.\nconst LOG = CHECK_NAN_SNIPPET_UNARY + `\n  return x < 0.0 ? 0./0. : log(x);\n`;\n\nconst LOG_PACKED = `\n  vec4 result = log(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);\n  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);\n  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);\n  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);\n  return result;\n`;\n\nexport const log = unaryKernelFunc(\n    {opSnippet: LOG, packedOpSnippet: LOG_PACKED, cpuKernelImpl: logImplCPU});\n\nexport const logConfig: KernelConfig = {\n  kernelName: Log,\n  backendName: 'webgl',\n  kernelFunc: log as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Log1p} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET_UNARY, unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst LOG1P = CHECK_NAN_SNIPPET_UNARY + `\n  return log(1.0 + x);\n`;\n\nexport const log1p = unaryKernelFunc({opSnippet: LOG1P});\n\nexport const log1pConfig: KernelConfig = {\n  kernelName: Log1p,\n  backendName: 'webgl',\n  kernelFunc: log1p,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LogicalAnd} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst LOGICAL_AND = `return float(a >= 1.0 && b >= 1.0);`;\nconst LOGICAL_AND_PACKED = `\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n`;\n\nexport const logicalAnd = binaryKernelFunc({\n  opSnippet: LOGICAL_AND,\n  packedOpSnippet: LOGICAL_AND_PACKED,\n  dtype: 'bool'\n});\n\nexport const logicalAndConfig: KernelConfig = {\n  kernelName: LogicalAnd,\n  backendName: 'webgl',\n  kernelFunc: logicalAnd as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LogicalNot} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst LOGICAL_NOT = `return float(!(x >= 1.0));`;\n\nexport const logicalNot = unaryKernelFunc({opSnippet: LOGICAL_NOT});\n\nexport const logicalNotConfig: KernelConfig = {\n  kernelName: LogicalNot,\n  backendName: 'webgl',\n  kernelFunc: logicalNot,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LogicalOr} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst LOGICAL_OR = `return float(a >= 1.0 || b >= 1.0);`;\nconst LOGICAL_OR_PACKED = `\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n`;\n\nexport const logicalOr = binaryKernelFunc(\n    {opSnippet: LOGICAL_OR, packedOpSnippet: LOGICAL_OR_PACKED, dtype: 'bool'});\n\nexport const logicalOrConfig: KernelConfig = {\n  kernelName: LogicalOr,\n  backendName: 'webgl',\n  kernelFunc: logicalOr as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class LRNProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      xShape: number[], radius: number, bias: number, alpha: number,\n      beta: number) {\n    const rad = radius;\n    const maxD = xShape[3] - 1;\n    this.outputShape = xShape;\n\n    // optimize pow(bias + alpha * sum, -beta)\n    // src: https://github.com/tensorflow/tensorflow/..\n    // blob/26033a1644a9c4a5fbe3170ab2e864b6a4ccd4ca/..\n    // tensorflow/core/kernels/mkl_lrn_op.cc#L320\n    let powOperator;\n    const basis = `float(${bias}) + float(${alpha}) * sum`;\n    if (beta === 0.5) {\n      powOperator = `inversesqrt(${basis})`;\n    } else if (beta === 1.0) {\n      powOperator = `1.0/(${basis})`;\n    } else {\n      powOperator = `exp(log(${basis}) * float(-${beta}));`;\n    }\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${rad}; j <= ${rad}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${maxD}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${powOperator};\n        setOutput(val);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class LRNPackedProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[] = [];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(\n      xShape: number[], radius: number, bias: number, alpha: number,\n      beta: number) {\n    const rad = radius;\n    const maxD = xShape[3] - 1;\n    this.outputShape = xShape;\n\n    // optimize pow(bias + alpha * sum, -beta)\n    // src: https://github.com/tensorflow/tensorflow/..\n    // blob/26033a1644a9c4a5fbe3170ab2e864b6a4ccd4ca/..\n    // tensorflow/core/kernels/mkl_lrn_op.cc#L320\n    let powOperator;\n    const basis = `float(${bias}) + float(${alpha}) * sum`;\n    if (beta === 0.5) {\n      powOperator = `inversesqrt(${basis})`;\n    } else if (beta === 1.0) {\n      powOperator = `1.0/(${basis})`;\n    } else {\n      powOperator = `exp(log(${basis}) * float(-${beta}));`;\n    }\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${rad};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${rad}; j <= ${rad}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${maxD}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${powOperator};\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, LRN, LRNAttrs, LRNInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {LRNProgram} from '../lrn_gpu';\nimport {LRNPackedProgram} from '../lrn_packed_gpu';\n\nexport const lrn =\n    (args: {inputs: LRNInputs, backend: MathBackendWebGL, attrs: LRNAttrs}):\n        TensorInfo => {\n          const {inputs, backend, attrs} = args;\n          const {x} = inputs;\n          const {depthRadius, bias, alpha, beta} = attrs;\n\n          const program = env().getBool('WEBGL_PACK_NORMALIZATION') ?\n              new LRNPackedProgram(x.shape, depthRadius, bias, alpha, beta) :\n              new LRNProgram(x.shape, depthRadius, bias, alpha, beta);\n          return backend.runWebGLProgram(program, [x], x.dtype);\n        };\n\n// tslint:disable-next-line: variable-name\nexport const LRNConfig: KernelConfig = {\n  kernelName: LRN,\n  backendName: 'webgl',\n  kernelFunc: lrn as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class LRNGradProgram implements GPGPUProgram {\n  variableNames = ['inputImage', 'outputImage', 'dy'];\n  outputShape: number[] = [];\n  userCode: string;\n  depthRadius: number;\n  bias: number;\n  alpha: number;\n  beta: number;\n  depth: number;\n\n  constructor(\n      inputShape: number[], depthRadius: number, bias: number, alpha: number,\n      beta: number) {\n    this.outputShape = inputShape;\n    this.depth = inputShape[3];\n    this.depthRadius = depthRadius;\n    this.bias = bias;\n    this.alpha = alpha;\n    this.beta = beta;\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${depthRadius})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${depthRadius} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${alpha}) * norm + float(${bias});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${alpha})\n                * float(${beta})\n                * getInputImage(b, r, c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${beta});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LRNGrad, LRNGradAttrs, LRNGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {LRNGradProgram} from '../lrn_grad_gpu';\n\nexport const lrnGrad = (args: {\n  inputs: LRNGradInputs,\n  backend: MathBackendWebGL,\n  attrs: LRNGradAttrs\n}): TensorInfo => {\n  const {inputs, backend, attrs} = args;\n  const {x, y, dy} = inputs;\n  const {depthRadius, bias, alpha, beta} = attrs;\n\n  const program = new LRNGradProgram(x.shape, depthRadius, bias, alpha, beta);\n  return backend.runWebGLProgram(program, [x, y, dy], x.dtype);\n};\n\n// tslint:disable-next-line: variable-name\nexport const LRNGradConfig: KernelConfig = {\n  kernelName: LRNGrad,\n  backendName: 'webgl',\n  kernelFunc: lrnGrad as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelFunc, Max, MaxAttrs, MaxInputs, TensorInfo} from '@tensorflow/tfjs-core';\nimport {backend_util, KernelConfig, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {maxImplCPU} from '../kernel_utils/shared';\n\nimport {maxImpl} from './Max_impl';\nimport {transposeImpl, transposeImplCPU} from './Transpose_impl';\n\nexport function max(\n    args: {inputs: MaxInputs, backend: MathBackendWebGL, attrs: MaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {reductionIndices, keepDims} = attrs;\n\n  const xRank = x.shape.length;\n\n  const origAxes = util.parseAxisParam(reductionIndices, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  const maxInputIsTransposed = permutedAxes != null;\n  const shouldExecuteOnCPU = backend.shouldExecuteOnCPU([x]);\n\n  let maxInput = x;\n  if (maxInputIsTransposed) {\n    if (shouldExecuteOnCPU) {\n      const xTexData = backend.texData.get(maxInput.dataId);\n      const values = xTexData.values as TypedArray;\n\n      const newShape: number[] = new Array(xRank);\n      for (let i = 0; i < newShape.length; i++) {\n        newShape[i] = x.shape[permutedAxes[i]];\n      }\n      const maxInputValues =\n          transposeImplCPU(values, x.shape, x.dtype, permutedAxes, newShape);\n\n      maxInput = backend.makeTensorInfo(newShape, x.dtype);\n      const maxInputData = backend.texData.get(maxInput.dataId);\n      maxInputData.values = maxInputValues;\n    } else {\n      maxInput = transposeImpl(x, permutedAxes, backend);\n    }\n\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('max', axes, xRank);\n  const [maxOutShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(maxInput.shape, axes);\n\n  let outShape = maxOutShape;\n  if (keepDims) {\n    // rather than reshape at the end, set the target shape here.\n    outShape = backend_util.expandShapeToKeepDim(maxOutShape, origAxes);\n  }\n\n  let out;\n  if (shouldExecuteOnCPU) {\n    const xTexData = backend.texData.get(maxInput.dataId);\n    const values = xTexData.values as TypedArray;\n\n    const outValues =\n        maxImplCPU(values, util.sizeFromShape(reduceShape), outShape, x.dtype);\n\n    out = backend.makeTensorInfo(outShape, x.dtype);\n    const outData = backend.texData.get(out.dataId);\n    outData.values = outValues;\n  } else {\n    out = maxImpl(maxInput, reduceShape, outShape, backend);\n  }\n\n  if (maxInputIsTransposed) {\n    backend.disposeIntermediateTensorInfo(maxInput);\n  }\n\n  return out;\n}\n\nexport const maxConfig: KernelConfig = {\n  kernelName: Max,\n  backendName: 'webgl',\n  kernelFunc: max as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\nimport {reshape} from '../kernels/Reshape';\n\nexport function maxImpl(\n    x: TensorInfo, reduceShape: number[], outShape: number[],\n    backend: MathBackendWebGL): TensorInfo {\n  const inSize = util.sizeFromShape(reduceShape);\n  const xSize = util.sizeFromShape(x.shape);\n  const batchSize = xSize / inSize;\n  const reshapedInput =\n      reshape({inputs: {x}, attrs: {shape: [batchSize, inSize]}, backend});\n\n  const reduced = reduce(reshapedInput, x.dtype, 'max', backend);\n  const reshapedOutput =\n      reshape({inputs: {x: reduced}, attrs: {shape: outShape}, backend});\n\n  backend.disposeIntermediateTensorInfo(reshapedInput);\n  backend.disposeIntermediateTensorInfo(reduced);\n\n  return reshapedOutput;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Maximum} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET} from '../binaryop_gpu';\nimport {CHECK_NAN_SNIPPET_PACKED} from '../binaryop_packed_gpu';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {maximumImplCPU} from '../kernel_utils/shared';\n\nconst MAXIMUM = CHECK_NAN_SNIPPET + `\n  return max(a, b);\n`;\n\nconst MAXIMUM_PACKED = `\n  vec4 result = vec4(max(a, b));\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  ` +\n    CHECK_NAN_SNIPPET_PACKED + `\n  return result;\n`;\n\nexport const maximum = binaryKernelFunc({\n  opSnippet: MAXIMUM,\n  packedOpSnippet: MAXIMUM_PACKED,\n  cpuKernelImpl: maximumImplCPU\n});\n\nexport const maximumConfig: KernelConfig = {\n  kernelName: Maximum,\n  backendName: 'webgl',\n  kernelFunc: maximum as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, KernelConfig, KernelFunc, MaxPool, MaxPoolAttrs, MaxPoolInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Pool2DProgram} from '../pool_gpu';\nimport {assertNotComplex} from '../webgl_util';\nimport {identity} from './Identity';\n\nexport function maxPool(args: {\n  inputs: MaxPoolInputs,\n  backend: MathBackendWebGL,\n  attrs: MaxPoolAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  assertNotComplex(x, 'maxPool');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations = 1;\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in maxPool: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\n      util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    return identity({inputs: {x}, backend});\n  }\n  const maxPoolProgram = new Pool2DProgram(convInfo, 'max', false);\n  return backend.runWebGLProgram(maxPoolProgram, [x], x.dtype);\n}\n\nexport const maxPoolConfig: KernelConfig = {\n  kernelName: MaxPool,\n  backendName: 'webgl',\n  kernelFunc: maxPool as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, KernelConfig, KernelFunc, MaxPool3D, MaxPool3DAttrs, MaxPool3DInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Pool3DProgram} from '../pool_gpu';\n\nexport function maxPool3d(args: {\n  inputs: MaxPool3DInputs,\n  backend: MathBackendWebGL,\n  attrs: MaxPool3DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {filterSize, strides, pad, dataFormat, dimRoundingMode} = attrs;\n  const dilations: [number, number, number] = [1, 1, 1];\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode, dataFormat);\n  const maxPoolProgram = new Pool3DProgram(convInfo, 'max', false);\n  return backend.runWebGLProgram(maxPoolProgram, [x], x.dtype);\n}\n\nexport const maxPool3DConfig: KernelConfig = {\n  kernelName: MaxPool3D,\n  backendName: 'webgl',\n  kernelFunc: maxPool3d as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class MaxPool2DBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy', 'maxPos'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n\n    const lastIndex = effectiveFilterHeight * effectiveFilterWidth - 1;\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${effectiveFilterHeight};\n          wR += ${dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${effectiveFilterWidth}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${lastIndex} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${effectiveFilterWidth} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class MaxPool3DBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy', 'maxPos'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.inShape;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n\n    const lastIndex =\n        effectiveFilterDepth * effectiveFilterHeight * effectiveFilterWidth - 1;\n    this.userCode = `\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${effectiveFilterDepth};\n           wD += ${dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${convInfo.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n              wR += ${dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${effectiveFilterWidth};\n                wC += ${dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${lastIndex} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${effectiveFilterHeight} * ${effectiveFilterWidth} +\n                  wR * ${effectiveFilterWidth} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, KernelConfig, KernelFunc, MaxPool3DGrad, MaxPool3DGradAttrs, MaxPool3DGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {MaxPool3DBackpropProgram} from '../max_pool_backprop_gpu';\nimport {Pool3DProgram} from '../pool_gpu';\n\nexport function maxPool3DGrad(args: {\n  inputs: MaxPool3DGradInputs,\n  backend: MathBackendWebGL,\n  attrs: MaxPool3DGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const x = input;\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations: [number, number, number] = [1, 1, 1];\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n\n  const maxPool3dPositionsProgram =\n      new Pool3DProgram(convInfo, 'max', true /* get positions */);\n  const maxPool3dPositions =\n      backend.runWebGLProgram(maxPool3dPositionsProgram, [x], x.dtype);\n  const maxPoolBackpropProgram = new MaxPool3DBackpropProgram(convInfo);\n  const result = backend.runWebGLProgram(\n      maxPoolBackpropProgram, [dy, maxPool3dPositions], x.dtype);\n  backend.disposeIntermediateTensorInfo(maxPool3dPositions);\n  return result;\n}\n\nexport const maxPool3DGradConfig: KernelConfig = {\n  kernelName: MaxPool3DGrad,\n  backendName: 'webgl',\n  kernelFunc: maxPool3DGrad as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, KernelConfig, KernelFunc, MaxPoolGrad, MaxPoolGradAttrs, MaxPoolGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {MaxPool2DBackpropProgram} from '../max_pool_backprop_gpu';\nimport {Pool2DProgram} from '../pool_gpu';\nimport {assertNotComplex} from '../webgl_util';\n\nexport function maxPoolGrad(args: {\n  inputs: MaxPoolGradInputs,\n  backend: MathBackendWebGL,\n  attrs: MaxPoolGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input, output} = inputs;\n  const x = input;\n  assertNotComplex([input, output], 'maxPoolGrad');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad, dimRoundingMode);\n  const getPositions = true;\n  const maxPoolPositionsProgram =\n      new Pool2DProgram(convInfo, 'max', getPositions);\n  const maxPoolPositions: TensorInfo =\n      backend.runWebGLProgram(maxPoolPositionsProgram, [x], x.dtype);\n\n  const maxPoolBackPropProgram = new MaxPool2DBackpropProgram(convInfo);\n  const result = backend.runWebGLProgram(\n      maxPoolBackPropProgram, [dy, maxPoolPositions], x.dtype);\n  backend.disposeIntermediateTensorInfo(maxPoolPositions);\n  return result;\n}\n\nexport const maxPoolGradConfig: KernelConfig = {\n  kernelName: MaxPoolGrad,\n  backendName: 'webgl',\n  kernelFunc: maxPoolGrad as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {MaxPoolWithArgmax, MaxPoolWithArgmaxAttrs, MaxPoolWithArgmaxInputs} from '@tensorflow/tfjs-core';\nimport {backend_util, KernelConfig, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {maxPoolWithArgmaxImpl} from './MaxPoolWithArgmax_impl';\n\nexport const maxPoolWithArgmaxConfig: KernelConfig = {\n  kernelName: MaxPoolWithArgmax,\n  backendName: 'webgl',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {x} = inputs as MaxPoolWithArgmaxInputs;\n    const {filterSize, strides, pad, includeBatchInIndex} =\n        attrs as unknown as MaxPoolWithArgmaxAttrs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    util.assert(\n        x.shape.length === 4,\n        () => `Error in maxPool: input must be rank 4 but got rank ${\n            x.shape.length}.`);\n    const dilations: [number, number] = [1, 1];\n    util.assert(\n        backend_util.eitherStridesOrDilationsAreOne(strides, dilations),\n        () => 'Error in maxPool: Either strides or dilations must be 1. ' +\n            `Got strides ${strides} and dilations '${dilations}'`);\n\n    const convInfo = backend_util.computePool2DInfo(\n        x.shape as [number, number, number, number], filterSize, strides,\n        dilations, pad);\n\n    const [result, indexes] =\n        maxPoolWithArgmaxImpl(x, includeBatchInIndex, convInfo, webglBackend);\n    return [result, indexes];\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Pool2DProgram} from '../pool_gpu';\n\nexport function maxPoolWithArgmaxImpl(\n    x: TensorInfo, includeBatchInIndex: boolean,\n    convInfo: backend_util.Conv2DInfo,\n    backend: MathBackendWebGL): TensorInfo[] {\n  let program = new Pool2DProgram(convInfo, 'max', false);\n  const poolOutput = backend.runWebGLProgram(program, [x], 'float32');\n\n  program = new Pool2DProgram(convInfo, 'max', true, true, includeBatchInIndex);\n  const indexOutput = backend.runWebGLProgram(program, [x], 'float32');\n  return [poolOutput, indexOutput];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, Mean, MeanAttrs, MeanInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {meanImpl} from './Mean_impl';\nimport {transposeImpl, transposeImplCPU} from './Transpose_impl';\n\nexport const meanConfig: KernelConfig = {\n  kernelName: Mean,\n  backendName: 'webgl',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {x} = inputs as MeanInputs;\n    const {keepDims, axis} = attrs as unknown as MeanAttrs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    const xRank = x.shape.length;\n    const origAxes = util.parseAxisParam(axis, x.shape);\n\n    let axes = origAxes;\n    const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n    const meanInputIsTransposed = permutedAxes != null;\n    const shouldExecuteOnCPU = webglBackend.shouldExecuteOnCPU([x]);\n\n    const intermediates: TensorInfo[] = [];\n\n    let meanInput = x;\n    if (meanInputIsTransposed) {\n      if (shouldExecuteOnCPU) {\n        const xTexData = webglBackend.texData.get(meanInput.dataId);\n        const values = xTexData.values as TypedArray;\n\n        const newShape: number[] = new Array(xRank);\n        for (let i = 0; i < newShape.length; i++) {\n          newShape[i] = x.shape[permutedAxes[i]];\n        }\n        const meanInputValues =\n            transposeImplCPU(values, x.shape, x.dtype, permutedAxes, newShape);\n\n        meanInput = webglBackend.makeTensorInfo(newShape, x.dtype);\n        const meanInputData = webglBackend.texData.get(meanInput.dataId);\n        meanInputData.values = meanInputValues;\n      } else {\n        meanInput = transposeImpl(x, permutedAxes, webglBackend);\n      }\n\n      intermediates.push(meanInput);\n      axes = backend_util.getInnerMostAxes(axes.length, xRank);\n    }\n\n    backend_util.assertAxesAreInnerMostDims('sum', axes, xRank);\n    const [meanOutShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(meanInput.shape, axes);\n\n    let outShape = meanOutShape;\n    if (keepDims) {\n      // rather than reshape at the end, set the target shape here.\n      outShape = backend_util.expandShapeToKeepDim(meanOutShape, origAxes);\n    }\n\n    const out = meanImpl(meanInput, reduceShape, outShape, webglBackend);\n    for (const i of intermediates) {\n      webglBackend.disposeIntermediateTensorInfo(i);\n    }\n\n    return out;\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\nimport {reshape} from '../kernels/Reshape';\n\nexport function meanImpl(\n    x: TensorInfo, reduceShape: number[], outShape: number[],\n    backend: MathBackendWebGL): TensorInfo {\n  const inSize = util.sizeFromShape(reduceShape);\n  const xSize = util.sizeFromShape(x.shape);\n  const batchSize = xSize / inSize;\n  const reshapedInput =\n      reshape({inputs: {x}, attrs: {shape: [batchSize, inSize]}, backend});\n\n  const reduced = reduce(reshapedInput, 'float32', 'mean', backend);\n  const reshapedOutput =\n      reshape({inputs: {x: reduced}, attrs: {shape: outShape}, backend});\n\n  backend.disposeIntermediateTensorInfo(reshapedInput);\n  backend.disposeIntermediateTensorInfo(reduced);\n\n  return reshapedOutput;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Min, MinAttrs, MinInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\n\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function min(\n    args: {inputs: MinInputs, backend: MathBackendWebGL, attrs: MinAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  const xRank = x.shape.length;\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  let permutedX = x;\n  if (permutedAxes != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('min', axes, xRank);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(permutedX.shape, axes);\n  const inSize = util.sizeFromShape(reduceShape);\n  const a2D =\n      reshape({inputs: {x: permutedX}, backend, attrs: {shape: [-1, inSize]}});\n  const reduced = reduce(a2D, a2D.dtype, 'min', backend);\n\n  let res;\n  if (keepDims) {\n    const newShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: newShape}});\n  } else {\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: outShape}});\n  }\n\n  backend.disposeIntermediateTensorInfo(a2D);\n  backend.disposeIntermediateTensorInfo(reduced);\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo(permutedX);\n  }\n\n  return res;\n}\n\nexport const minConfig: KernelConfig = {\n  kernelName: Min,\n  backendName: 'webgl',\n  kernelFunc: min as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Minimum} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET} from '../binaryop_gpu';\nimport {CHECK_NAN_SNIPPET_PACKED} from '../binaryop_packed_gpu';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {minimumImplCPU} from '../kernel_utils/shared';\n\nconst MINIMUM = CHECK_NAN_SNIPPET + `\n  return min(a, b);\n`;\n\nconst MINIMUM_PACKED = `\n  vec4 result = vec4(min(a, b));\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  ` +\n    CHECK_NAN_SNIPPET_PACKED + `\n  return result;\n`;\n\nexport const minimum = binaryKernelFunc({\n  opSnippet: MINIMUM,\n  packedOpSnippet: MINIMUM_PACKED,\n  cpuKernelImpl: minimumImplCPU\n});\n\nexport const minimumConfig: KernelConfig = {\n  kernelName: Minimum,\n  backendName: 'webgl',\n  kernelFunc: minimum as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class MirrorPadProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      xShape: number[], paddings: Array<[number, number]>,\n      mode: 'reflect'|'symmetric') {\n    this.outputShape = paddings.map(\n        (p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    const rank = xShape.length;\n    const dtype = getCoordsDataType(rank);\n\n    const start = paddings.map(p => p[0]).join(',');\n    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n    const unpackedCoords =\n        ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank);\n    const offset = mode === 'reflect' ? 0 : 1;\n\n    if (rank === 1) {\n      this.userCode = `\n        int start = ${start};\n        int end = ${end};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${offset};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${offset};\n          }\n          setOutput(getX(outC - start));\n        }\n      `;\n      return;\n    }\n    this.userCode = `\n      ${dtype} start = ${dtype}(${start});\n      ${dtype} end = ${dtype}(${end});\n\n      void main() {\n        ${dtype} outC = getOutputCoords();\n        for (int i = 0; i < ${rank}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${offset};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${offset};\n          }\n        }\n        ${dtype} coords = outC - start;\n        setOutput(getX(${unpackedCoords}));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\n/**\n * Example shader code for\n * `mirrorPad(tf.tensor1d([1, 2, 3], 'int32'), [[2, 2]], 'reflect')`\n * ```\n *    const int start = int(2);\n *    const int end = int(5);\n *\n *    void main() {\n *       int outputLoc = getOutputCoords();\n *       vec4 result = vec4(0.);\n *\n *       int rc = outputLoc;\n *\n *       int source = rc;\n *       if (source < start) {\n *         source = start * 2 - source - 0;\n *       } else if (source >= end) {\n *         source = (end - 1) * 2 - source + 0;\n *       }\n *       source -= start;\n *\n *       result[0] = getChannel(getX(source), source);\n *       rc += 1;\n *       if(rc < 6) {\n *          int source = rc;\n *          if (source < start) {\n *            source = start * 2 - source - 0;\n *          } else if (source >= end) {\n *            source = (end - 1) * 2 - source + 0;\n *          }\n *          source -= start;\n *\n *         result[1] = getChannel(getX(source), source);\n *       }\n *\n *       setOutput(result);\n *     }\n * ```\n */\nexport class MirrorPadPackedProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      xShape: number[], paddings: Array<[number, number]>,\n      mode: 'reflect'|'symmetric') {\n    this.outputShape = paddings.map(\n        (p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    const rank = xShape.length;\n    const dtype = getCoordsDataType(rank);\n\n    const start = paddings.map(p => p[0]).join(',');\n    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n    const coords = getChannels('rc', rank);\n    const source = getChannels('source', rank);\n    const cLimit = `${coords[rank - 1]} < ${this.outputShape[rank - 1]}`;\n    const innerDims =\n        rank === 1 ? 'source' : `vec2(${source.slice(-2).join()})`;\n    const offset = mode === 'reflect' ? 0 : 1;\n\n    let mainLoop = '';\n    if (rank === 1) {\n      const padSetup = `\n        ${dtype} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${offset};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${offset};\n        }\n        source -= start;\n      `;\n      mainLoop = `\n        ${dtype} rc = outputLoc;\n        ${padSetup}\n        result[0] = getChannel(getX(${source.join()}), ${innerDims});\n        ${coords[rank - 1]} += 1;\n        if(${cLimit}) {\n          ${padSetup}\n          result[1] = getChannel(getX(${source.join()}), ${innerDims});\n        }\n      `;\n    } else {\n      const padSetup = `\n        ${dtype} source = rc;\n        ${dtype} lt = ${dtype}(lessThan(source, start));\n        ${dtype} gte = ${dtype}(greaterThanEqual(source, end));\n        ${dtype} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${offset}) +\n                gte * ((end - 1) * 2 - source + ${offset});\n        source -= start;\n      `;\n\n      mainLoop = `\n        ${dtype} rc = outputLoc;\n        ${padSetup}\n        result[0] = getChannel(getX(${source.join()}), ${innerDims});\n        ${coords[rank - 1]} += 1;\n        if(${cLimit}) {\n          ${padSetup}\n          result[1] = getChannel(getX(${source.join()}), ${innerDims});\n        }\n        rc = outputLoc;\n        ${coords[rank - 2]} += 1;\n        if(${coords[rank - 2]} < ${this.outputShape[rank - 2]}) {\n          ${padSetup}\n          result[2] = getChannel(getX(${source.join()}), ${innerDims});\n          ${coords[rank - 1]} += 1;\n          if(${cLimit}) {\n            ${padSetup}\n            result[3] = getChannel(getX(${source.join()}), ${innerDims});\n          }\n        }\n      `;\n    }\n\n    this.userCode = `\n      const ${dtype} start = ${dtype}(${start});\n      const ${dtype} end = ${dtype}(${end});\n\n      void main() {\n        ${dtype} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${mainLoop}\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, MirrorPad, MirrorPadAttrs, MirrorPadInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {MirrorPadProgram} from '../mirror_pad_gpu';\nimport {MirrorPadPackedProgram} from '../mirror_pad_packed_gpu';\n\nexport const mirrorPadKernelFunc: (params: {\n  inputs: MirrorPadInputs,\n  backend: MathBackendWebGL,\n  attrs: MirrorPadAttrs\n}) => TensorInfo = ({inputs, backend, attrs}) => {\n  const {x} = inputs;\n  const {paddings, mode} = attrs;\n\n  const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n      new MirrorPadPackedProgram(x.shape, paddings, mode) :\n      new MirrorPadProgram(x.shape, paddings, mode);\n\n  const output = backend.runWebGLProgram(program, [x], x.dtype);\n\n  return output;\n};\n\nexport const mirrorPadConfig: KernelConfig = {\n  kernelName: MirrorPad,\n  backendName: 'webgl',\n  kernelFunc: mirrorPadKernelFunc as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Mod} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET_PACKED} from '../binaryop_packed_gpu';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst MOD = `if (b == 0.0) return NAN;\n  return mod(a, b);`;\n\nconst MOD_PACKED = `\n  vec4 result = mod(a, b);\n  bvec4 isNaN = equal(b, vec4(0.0));\n  ` +\n    CHECK_NAN_SNIPPET_PACKED + `\n  return result;\n`;\n\nexport const mod = binaryKernelFunc({\n  opSnippet: MOD,\n  packedOpSnippet: MOD_PACKED,\n});\n\nexport const modConfig: KernelConfig = {\n  kernelName: Mod,\n  backendName: 'webgl',\n  kernelFunc: mod as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {UniformType} from './shader_compiler';\n\nexport class MultinomialProgram implements GPGPUProgram {\n  variableNames = ['probs'];\n  outputShape: number[];\n  userCode: string;\n  customUniforms = [{name: 'seed', type: 'float' as UniformType}];\n\n  constructor(batchSize: number, numOutcomes: number, numSamples: number) {\n    this.outputShape = [batchSize, numSamples];\n\n    this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${numOutcomes - 1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${numOutcomes - 1}));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {RealDiv} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\n// Without the equality check div produces 0.9999 for a = b, which when\n// floored can cause errors.\nconst DIV = `\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;`;\n\n// We do the same as in ./binaryop_gpu, with vec4 and ivec4.\n// On Linux, the vectorized implementation produces NaNs when a and b are 0.\nconst DIV_PACKED = `\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n`;\n\nexport const realDiv = binaryKernelFunc(\n    {opSnippet: DIV, packedOpSnippet: DIV_PACKED, checkOutOfBounds: true});\n\nexport const realDivConfig: KernelConfig = {\n  kernelName: RealDiv,\n  backendName: 'webgl',\n  kernelFunc: realDiv,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sub} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {subImplCPU as cpuSub} from '../kernel_utils/shared';\n\nconst SUB = 'return a - b;';\n\nexport const sub = binaryKernelFunc({\n  opSnippet: SUB,\n  packedOpSnippet: SUB,\n  supportsComplex: true,\n  cpuKernelImpl: cpuSub\n});\n\nexport const subConfig: KernelConfig = {\n  kernelName: Sub,\n  backendName: 'webgl',\n  kernelFunc: sub\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Softmax, SoftmaxAttrs, SoftmaxInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {exp} from './Exp';\nimport {max} from './Max';\nimport {realDiv} from './RealDiv';\nimport {reshape} from './Reshape';\nimport {sub} from './Sub';\nimport {sum} from './Sum';\n\nexport function softmax(args: {\n  inputs: SoftmaxInputs,\n  backend: MathBackendWebGL,\n  attrs: SoftmaxAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {logits} = inputs;\n  const {dim} = attrs;\n\n  const axes = util.parseAxisParam([dim], logits.shape);\n\n  const maxLogit = max({\n    inputs: {x: logits},\n    backend,\n    attrs: {reductionIndices: axes, keepDims: false}\n  });\n\n  const expandedShape = backend_util.expandShapeToKeepDim(maxLogit.shape, axes);\n\n  const maxLogitsReshaped =\n      reshape({inputs: {x: maxLogit}, backend, attrs: {shape: expandedShape}});\n  const a =\n      sub({inputs: {a: logits, b: maxLogitsReshaped}, backend}) as TensorInfo;\n  const b = exp({inputs: {x: a}, backend}) as TensorInfo;\n  const sumExp =\n      sum({inputs: {x: b}, backend, attrs: {axis: axes, keepDims: false}});\n  const sumExpReshaped =\n      reshape({inputs: {x: sumExp}, backend, attrs: {shape: expandedShape}});\n\n  const res =\n      realDiv({inputs: {a: b, b: sumExpReshaped}, backend}) as TensorInfo;\n\n  backend.disposeIntermediateTensorInfo(maxLogit);\n  backend.disposeIntermediateTensorInfo(maxLogitsReshaped);\n  backend.disposeIntermediateTensorInfo(a);\n  backend.disposeIntermediateTensorInfo(b);\n  backend.disposeIntermediateTensorInfo(sumExp);\n  backend.disposeIntermediateTensorInfo(sumExpReshaped);\n\n  return res;\n}\n\nexport const softmaxConfig: KernelConfig = {\n  kernelName: Softmax,\n  backendName: 'webgl',\n  kernelFunc: softmax as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Multinomial, MultinomialAttrs, MultinomialInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {MultinomialProgram} from '../multinomial_gpu';\n\nimport {softmax} from './Softmax';\n\nexport function multinomial(args: {\n  inputs: MultinomialInputs,\n  backend: MathBackendWebGL,\n  attrs: MultinomialAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {logits} = inputs;\n  const {numSamples, seed, normalized} = attrs;\n\n  const probs = normalized ?\n      logits :\n      softmax(\n          {inputs: {logits}, backend, attrs: {dim: logits.shape.length - 1}});\n  const batchSize = probs.shape[0];\n  const numOutcomes = probs.shape[1];\n  const program = new MultinomialProgram(batchSize, numOutcomes, numSamples);\n  const customValues = [[seed]];\n  const res = backend.runWebGLProgram(program, [probs], 'int32', customValues);\n  if (!normalized) {\n    backend.disposeIntermediateTensorInfo(probs);\n  }\n  return res;\n}\n\nexport const multinomialConfig: KernelConfig = {\n  kernelName: Multinomial,\n  backendName: 'webgl',\n  kernelFunc: multinomial as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, Neg, NegInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {negImplCPU} from '../kernel_utils/shared';\nimport {CHECK_NAN_SNIPPET, UnaryOpProgram} from '../unaryop_gpu';\nimport {UnaryOpPackedProgram} from '../unaryop_packed_gpu';\n\nconst NEG = CHECK_NAN_SNIPPET + `\n  return -x;\n`;\n\nconst NEG_PACKED = `\n  vec4 result = -x;\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\n\n// This doesn't use unaryKernelFunc because negImplCPU is not of type\n// SimpleUnaryKernelImplCPU.\nexport function neg(args: {inputs: NegInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  if (backend.shouldExecuteOnCPU([x])) {\n    const xData = backend.texData.get(x.dataId);\n    const [outValues, newShape] =\n        negImplCPU(xData.values as TypedArray, x.shape, x.dtype);\n    return backend.makeTensorInfo(newShape, x.dtype, outValues);\n  }\n\n  let program: UnaryOpProgram|UnaryOpPackedProgram;\n  if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n    program = new UnaryOpPackedProgram(x.shape, NEG_PACKED);\n  } else {\n    program = new UnaryOpProgram(x.shape, NEG);\n  }\n\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\n\nexport const negConfig: KernelConfig = {\n  kernelName: Neg,\n  backendName: 'webgl',\n  kernelFunc: neg as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV3, NonMaxSuppressionV3Attrs, NonMaxSuppressionV3Inputs, TypedArray} from '@tensorflow/tfjs-core';\n\nconst nonMaxSuppressionV3Impl = kernel_impls.nonMaxSuppressionV3Impl;\nimport {MathBackendWebGL} from '../backend_webgl';\n\nexport function nonMaxSuppressionV3(args: {\n  inputs: NonMaxSuppressionV3Inputs,\n  backend: MathBackendWebGL,\n  attrs: NonMaxSuppressionV3Attrs\n}) {\n  backend_util.warn(\n      'tf.nonMaxSuppression() in webgl locks the UI thread. ' +\n      'Call tf.nonMaxSuppressionAsync() instead');\n\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold} = attrs;\n\n  const boxesVals = backend.readSync(boxes.dataId) as TypedArray;\n  const scoresVals = backend.readSync(scores.dataId) as TypedArray;\n\n  const {selectedIndices} = nonMaxSuppressionV3Impl(\n      boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold);\n\n  return backend.makeTensorInfo(\n      [selectedIndices.length], 'int32', new Int32Array(selectedIndices));\n}\n\nexport const nonMaxSuppressionV3Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV3,\n  backendName: 'webgl',\n  kernelFunc: nonMaxSuppressionV3 as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV4, NonMaxSuppressionV4Attrs, NonMaxSuppressionV4Inputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\nconst nonMaxSuppressionV4Impl = kernel_impls.nonMaxSuppressionV4Impl;\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nexport function nonMaxSuppressionV4(args: {\n  inputs: NonMaxSuppressionV4Inputs,\n  backend: MathBackendWebGL,\n  attrs: NonMaxSuppressionV4Attrs\n}): [TensorInfo, TensorInfo] {\n  backend_util.warn(\n      'tf.nonMaxSuppression() in webgl locks the UI thread. ' +\n      'Call tf.nonMaxSuppressionAsync() instead');\n\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize} =\n      attrs;\n\n  const boxesVals = backend.readSync(boxes.dataId) as TypedArray;\n  const scoresVals = backend.readSync(scores.dataId) as TypedArray;\n\n  const {selectedIndices, validOutputs} = nonMaxSuppressionV4Impl(\n      boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold,\n      padToMaxOutputSize);\n\n  return [\n    backend.makeTensorInfo(\n        [selectedIndices.length], 'int32', new Int32Array(selectedIndices)),\n    backend.makeTensorInfo([], 'int32', new Int32Array([validOutputs]))\n  ];\n}\n\nexport const nonMaxSuppressionV4Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV4,\n  backendName: 'webgl',\n  kernelFunc: nonMaxSuppressionV4 as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV5, NonMaxSuppressionV5Attrs, NonMaxSuppressionV5Inputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nconst nonMaxSuppressionV5Impl = kernel_impls.nonMaxSuppressionV5Impl;\nimport {MathBackendWebGL} from '../backend_webgl';\n\nexport function nonMaxSuppressionV5(args: {\n  inputs: NonMaxSuppressionV5Inputs,\n  backend: MathBackendWebGL,\n  attrs: NonMaxSuppressionV5Attrs\n}): [TensorInfo, TensorInfo] {\n  backend_util.warn(\n      'tf.nonMaxSuppression() in webgl locks the UI thread. ' +\n      'Call tf.nonMaxSuppressionAsync() instead');\n\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma} = attrs;\n\n  const boxesVals = backend.readSync(boxes.dataId) as TypedArray;\n  const scoresVals = backend.readSync(scores.dataId) as TypedArray;\n\n  const maxOutputSizeVal = maxOutputSize;\n  const iouThresholdVal = iouThreshold;\n  const scoreThresholdVal = scoreThreshold;\n  const softNmsSigmaVal = softNmsSigma;\n\n  const {selectedIndices, selectedScores} = nonMaxSuppressionV5Impl(\n      boxesVals, scoresVals, maxOutputSizeVal, iouThresholdVal,\n      scoreThresholdVal, softNmsSigmaVal);\n\n  return [\n    backend.makeTensorInfo(\n        [selectedIndices.length], 'int32', new Int32Array(selectedIndices)),\n    backend.makeTensorInfo(\n        [selectedScores.length], 'float32', new Float32Array(selectedScores))\n  ];\n}\n\nexport const nonMaxSuppressionV5Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV5,\n  backendName: 'webgl',\n  kernelFunc: nonMaxSuppressionV5 as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class OneHotProgram implements GPGPUProgram {\n  variableNames = ['indices'];\n  outputShape: number[];\n  userCode: string;\n\n  // Caching uniform location for speed.\n  seedLoc: WebGLUniformLocation;\n\n  constructor(\n      numIndices: number, depth: number, onValue: number, offValue: number) {\n    this.outputShape = [numIndices, depth];\n\n    this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${offValue}), float(${onValue}),\n                      float(index == coords.y)));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, OneHot, OneHotAttrs, OneHotInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {OneHotProgram} from '../onehot_gpu';\nimport {reshape} from './Reshape';\n\nexport const oneHot = (args: {\n  inputs: OneHotInputs,\n  backend: MathBackendWebGL,\n  attrs: OneHotAttrs\n}): TensorInfo => {\n  const {inputs, backend, attrs} = args;\n  const {indices} = inputs;\n  const {dtype, depth, onValue, offValue} = attrs;\n\n  const indicesSize = util.sizeFromShape(indices.shape);\n  const program = new OneHotProgram(indicesSize, depth, onValue, offValue);\n  const reshaped =\n      reshape({inputs: {x: indices}, backend, attrs: {shape: [indicesSize]}});\n  const result = backend.runWebGLProgram(program, [reshaped], dtype);\n  backend.disposeIntermediateTensorInfo(reshaped);\n\n  const outShape = [...indices.shape, depth];\n  const out = reshape({inputs: {x: result}, backend, attrs: {shape: outShape}});\n  backend.disposeIntermediateTensorInfo(result);\n  return out;\n};\n\nexport const oneHotConfig: KernelConfig = {\n  kernelName: OneHot,\n  backendName: 'webgl',\n  kernelFunc: oneHot as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, ZerosLike, ZerosLikeInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {complex} from './Complex';\nimport {fill} from './Fill';\nimport {imag} from './Imag';\nimport {real} from './Real';\n\nexport function zerosLike(\n    args: {inputs: ZerosLikeInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const r = zerosLike({inputs: {x: realPart}, backend});\n    const imagPart = imag({inputs: {input: x}, backend});\n    const i = zerosLike({inputs: {x: imagPart}, backend});\n\n    const result = complex({inputs: {real: r, imag: i}, backend});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(r);\n    backend.disposeIntermediateTensorInfo(imagPart);\n    backend.disposeIntermediateTensorInfo(i);\n\n    return result;\n  } else {\n    return fill({\n      attrs: {\n        shape: x.shape,\n        dtype: x.dtype,\n        value: x.dtype === 'string' ? '' : 0\n      },\n      backend\n    });\n  }\n}\n\nexport const zerosLikeConfig: KernelConfig = {\n  kernelName: ZerosLike,\n  backendName: 'webgl',\n  kernelFunc: zerosLike as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, OnesLike, OnesLikeInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {complex} from './Complex';\nimport {fill} from './Fill';\nimport {imag} from './Imag';\nimport {real} from './Real';\nimport {zerosLike} from './ZerosLike';\n\nexport function onesLike(\n    args: {inputs: OnesLikeInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  if (x.dtype === 'string') {\n    throw new Error('onesLike is not supported under string dtype');\n  } else if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const r = onesLike({inputs: {x: realPart}, backend});\n    const imagPart = imag({inputs: {input: x}, backend});\n    const i = zerosLike({inputs: {x: imagPart}, backend});\n\n    const result = complex({inputs: {real: r, imag: i}, backend});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(r);\n    backend.disposeIntermediateTensorInfo(imagPart);\n    backend.disposeIntermediateTensorInfo(i);\n\n    return result;\n  } else {\n    // TODO(cais, smilkov): Add WebGL shader for onesLike:\n    //   https://github.com/tensorflow/tfjs/issues/1293\n    return fill({attrs: {shape: x.shape, dtype: x.dtype, value: 1}, backend});\n  }\n}\n\nexport const onesLikeConfig: KernelConfig = {\n  kernelName: OnesLike,\n  backendName: 'webgl',\n  kernelFunc: onesLike as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Pack, PackAttrs, PackInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {concat} from './Concat';\nimport {expandDims} from './ExpandDims';\n\nexport function pack(\n    args: {inputs: PackInputs, backend: MathBackendWebGL, attrs: PackAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {axis} = attrs;\n\n  if (inputs.length === 1) {\n    return expandDims(\n        {inputs: {input: inputs[0]}, backend, attrs: {dim: axis}});\n  }\n\n  const shape = inputs[0].shape;\n  const dtype = inputs[0].dtype;\n\n  inputs.forEach(t => {\n    util.assertShapesMatch(\n        shape, t.shape,\n        'All tensors passed to stack must have matching shapes');\n    util.assert(\n        dtype === t.dtype,\n        () => 'All tensors passed to stack must have matching dtypes');\n  });\n\n  const intermediateTensorInfos: TensorInfo[] = [];\n  const expandedTensors = inputs.map(t => {\n    const expandedT =\n        expandDims({inputs: {input: t}, backend, attrs: {dim: axis}});\n    intermediateTensorInfos.push(expandedT);\n    return expandedT;\n  });\n\n  const result = concat({inputs: expandedTensors, backend, attrs: {axis}});\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n}\n\nexport const packConfig: KernelConfig = {\n  kernelName: Pack,\n  backendName: 'webgl',\n  kernelFunc: pack as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType, UniformType} from './shader_compiler';\n\nexport class PadProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n  customUniforms = [{name: 'value', type: 'float' as UniformType}];\n\n  constructor(\n      xShape: number[], paddings: Array<[number, number]>,\n      constantValue: number) {\n    this.outputShape = paddings.map(\n        (p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    const rank = xShape.length;\n    const type = getCoordsDataType(rank);\n\n    const start = paddings.map(p => p[0]).join(',');\n    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n    const unpackedCoords =\n        ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank);\n\n    if (rank === 1) {\n      this.userCode = `\n        int start = ${start};\n        int end = ${end};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(value);\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `;\n      return;\n    }\n    this.userCode = `\n      ${type} start = ${type}(${start});\n      ${type} end = ${type}(${end});\n\n      void main() {\n        ${type} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(value);\n        } else {\n          ${type} coords = outC - start;\n          setOutput(getX(${unpackedCoords}));\n        }\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType, UniformType} from './shader_compiler';\n\nexport class PadPackedProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n  customUniforms = [{name: 'value', type: 'float' as UniformType}];\n\n  constructor(\n      xShape: number[], paddings: Array<[number, number]>,\n      constantValue: number) {\n    this.outputShape = paddings.map(\n        (p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    const rank = xShape.length;\n    const dtype = getCoordsDataType(rank);\n\n    const start = paddings.map(p => p[0]).join(',');\n    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n    const coords = getChannels('rc', rank);\n    const source = getChannels('source', rank);\n    const cLimit = `${coords[rank - 1]} < ${this.outputShape[rank - 1]}`;\n    const innerDims =\n        rank === 1 ? 'source' : `vec2(${source.slice(-2).join()})`;\n\n    const componentSetup = [\n      `${dtype} rc = outputLoc;`, `${coords[rank - 1]} += 1;\n       if(${cLimit}) {\n      `,\n      rank === 1 ? '' : `}\n       rc = outputLoc;\n       ${coords[rank - 2]} += 1;\n       if(${coords[rank - 2]} < ${this.outputShape[rank - 2]}) {`,\n      rank === 1 ? '' : `  ${coords[rank - 1]} += 1;\n         if(${cLimit}) {`\n    ];\n\n    const paddingArea = rank === 1 ?\n        'rc < start || rc >= end' :\n        'any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))';\n    let mainLoop = '';\n    for (let i = 0, j = rank === 1 ? 2 : 4; i < j; i++) {\n      mainLoop += `\n        ${componentSetup[i]}\n        if (${paddingArea}) {\n          result[${i}] = float(value);\n        } else {\n          ${dtype} source = rc - start;\n          result[${i}] = getChannel(getX(${source.join()}), ${innerDims});\n        }\n      `;\n    }\n    mainLoop += (rank === 1 ? `} ` : `}}`);\n\n    this.userCode = `\n      const ${dtype} start = ${dtype}(${start});\n      const ${dtype} end = ${dtype}(${end});\n\n      void main() {\n        ${dtype} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${mainLoop}\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, PadV2, PadV2Attrs, PadV2Inputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {PadProgram} from '../pad_gpu';\nimport {PadPackedProgram} from '../pad_packed_gpu';\nimport {fill} from './Fill';\n\nexport const padV2 =\n    (args: {inputs: PadV2Inputs, backend: MathBackendWebGL, attrs: PadV2Attrs}):\n        TensorInfo => {\n          const {inputs, backend, attrs} = args;\n          const {x} = inputs;\n          const {paddings, constantValue} = attrs;\n\n          if (util.sizeFromShape(x.shape) === 0) {\n            // Short-circuit the computation, since x doesn't have value, only\n            // the shape is used to compute output shape to pad.\n            const outputShape = paddings.map(\n                (p, i) =>\n                    p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n            return fill({\n              backend,\n              attrs: {shape: outputShape, value: constantValue, dtype: x.dtype}\n            });\n          }\n\n          const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n              new PadPackedProgram(x.shape, paddings, constantValue) :\n              new PadProgram(x.shape, paddings, constantValue);\n          const customValues = [[constantValue]];\n          return backend.runWebGLProgram(program, [x], x.dtype, customValues);\n        };\n\nexport const padV2Config: KernelConfig = {\n  kernelName: PadV2,\n  backendName: 'webgl',\n  kernelFunc: padV2 as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Pow} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET_PACKED} from '../binaryop_packed_gpu';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst POW = `\n  if(a < 0.0 && floor(b) < b){\n    return NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  return (round(mod(b, 2.0)) != 1) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n`;\n\nconst POW_PACKED = `\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  bvec4 isNaN1 = lessThan(a, vec4(0.0));\n  bvec4 isNaN2 = lessThan(floor(b), b);\n  bvec4 isNaN = bvec4(isNaN1.x && isNaN2.x, isNaN1.y && isNaN2.y, isNaN1.z && isNaN2.z, isNaN1.w && isNaN2.w);\n  ` +\n    CHECK_NAN_SNIPPET_PACKED + `\n  return result;\n`;\n\nexport const pow =\n    binaryKernelFunc({opSnippet: POW, packedOpSnippet: POW_PACKED});\n\nexport const powConfig: KernelConfig = {\n  kernelName: Pow,\n  backendName: 'webgl',\n  kernelFunc: pow as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Prod, ProdAttrs, ProdInputs, sumOutType, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\nimport {prodImplCPU} from '../kernel_utils/shared';\n\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function prod(\n    args: {inputs: ProdInputs, backend: MathBackendWebGL, attrs: ProdAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  const xRank = x.shape.length;\n  const toDispose = [];\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  let permutedX = x;\n  if (permutedAxes != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n    toDispose.push(permutedX);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('prod', axes, xRank);\n\n  let res;\n  if (backend.shouldExecuteOnCPU([permutedX])) {\n    const xVals = backend.texData.get(permutedX.dataId).values as TypedArray;\n    const {outVals, outShape, outDtype} =\n        prodImplCPU(permutedX.shape, permutedX.dtype, xVals, axes);\n    res = backend.makeTensorInfo(outShape, outDtype, outVals);\n  } else {\n    const [outShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(permutedX.shape, axes);\n    const inSize = util.sizeFromShape(reduceShape);\n    const a2D = reshape(\n        {inputs: {x: permutedX}, backend, attrs: {shape: [-1, inSize]}});\n    const outputDType = sumOutType(x.dtype);\n    const reduced = reduce(a2D, outputDType, 'prod', backend);\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: outShape}});\n\n    toDispose.push(a2D);\n    toDispose.push(reduced);\n  }\n\n  if (keepDims) {\n    toDispose.push(res);\n    const newShape = backend_util.expandShapeToKeepDim(res.shape, origAxes);\n    res = reshape({inputs: {x: res}, backend, attrs: {shape: newShape}});\n  }\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return res;\n}\n\nexport const prodConfig: KernelConfig = {\n  kernelName: Prod,\n  backendName: 'webgl',\n  kernelFunc: prod as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, RaggedGather, RaggedGatherAttrs, RaggedGatherInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {raggedGatherImplCPU} from '../kernel_utils/shared';\n\nexport function raggedGather(args: {\n  inputs: RaggedGatherInputs,\n  backend: MathBackendWebGL,\n  attrs: RaggedGatherAttrs\n}): TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {paramsNestedSplits, paramsDenseValues, indices} = inputs;\n  const {outputRaggedRank} = attrs;\n\n  const $paramsNestedSplits =\n      paramsNestedSplits.map(t => backend.readSync(t.dataId) as TypedArray);\n  const $paramsNestedSplitsShapes = paramsNestedSplits.map(t => t.shape);\n  const $paramsDenseValues =\n      backend.readSync(paramsDenseValues.dataId) as TypedArray;\n  const $indices = backend.readSync(indices.dataId) as TypedArray;\n\n  const [outputNestedSplits, outputDenseValues, outputDenseValuesShape] =\n      raggedGatherImplCPU(\n          $paramsNestedSplits, $paramsNestedSplitsShapes, $paramsDenseValues,\n          paramsDenseValues.shape, paramsDenseValues.dtype, $indices,\n          indices.shape, outputRaggedRank);\n\n  const outputNestedSplitsTensors = outputNestedSplits.map(\n      (splits) => backend.makeTensorInfo([splits.length], 'int32', splits));\n\n  const outputDenseValuesTensor = backend.makeTensorInfo(\n      outputDenseValuesShape, paramsDenseValues.dtype, outputDenseValues);\n\n  return outputNestedSplitsTensors.concat([outputDenseValuesTensor]);\n}\n\nexport const raggedGatherConfig: KernelConfig = {\n  kernelName: RaggedGather,\n  backendName: 'webgl',\n  kernelFunc: raggedGather as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, RaggedRange, RaggedRangeInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {raggedRangeImplCPU} from '../kernel_utils/shared';\n\nexport function raggedRange(\n    args: {inputs: RaggedRangeInputs, backend: MathBackendWebGL}):\n    [TensorInfo, TensorInfo] {\n  const {inputs, backend} = args;\n  const {starts, limits, deltas} = inputs;\n\n  const $starts = backend.readSync(starts.dataId) as TypedArray;\n  const $limits = backend.readSync(limits.dataId) as TypedArray;\n  const $deltas = backend.readSync(deltas.dataId) as TypedArray;\n\n  const [rtNestedSplitsData, rtDenseValuesData] = raggedRangeImplCPU(\n      $starts, starts.shape, starts.dtype, $limits, limits.shape, $deltas,\n      deltas.shape);\n\n  const rtNestedSplits = backend.makeTensorInfo(\n      [rtNestedSplitsData.length], 'int32', rtNestedSplitsData);\n  const rtDenseValues = backend.makeTensorInfo(\n      [rtDenseValuesData.length], starts.dtype, rtDenseValuesData);\n\n  return [rtNestedSplits, rtDenseValues];\n}\n\nexport const raggedRangeConfig: KernelConfig = {\n  kernelName: RaggedRange,\n  backendName: 'webgl',\n  kernelFunc: raggedRange as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, RaggedTensorToTensor, RaggedTensorToTensorAttrs, RaggedTensorToTensorInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {raggedTensorToTensorImplCPU} from '../kernel_utils/shared';\n\nexport function raggedTensorToTensor(args: {\n  inputs: RaggedTensorToTensorInputs,\n  backend: MathBackendWebGL,\n  attrs: RaggedTensorToTensorAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {shape, values, defaultValue, rowPartitionTensors} = inputs;\n  const {rowPartitionTypes} = attrs;\n\n  const $shape = backend.readSync(shape.dataId) as TypedArray;\n  const $values = backend.readSync(values.dataId) as TypedArray;\n  const $defaultValue = backend.readSync(defaultValue.dataId) as TypedArray;\n  const $rowPartitionValues =\n      rowPartitionTensors.map(t => backend.readSync(t.dataId) as TypedArray);\n  const rowPartitionValuesShapes = rowPartitionTensors.map(t => t.shape);\n\n  const [outputShape, output] = raggedTensorToTensorImplCPU(\n      $shape, shape.shape, $values, values.shape, values.dtype, $defaultValue,\n      defaultValue.shape, $rowPartitionValues, rowPartitionValuesShapes,\n      rowPartitionTypes);\n  return backend.makeTensorInfo(outputShape, values.dtype, output);\n}\n\nexport const raggedTensorToTensorConfig: KernelConfig = {\n  kernelName: RaggedTensorToTensor,\n  backendName: 'webgl',\n  kernelFunc: raggedTensorToTensor as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Range, RangeAttrs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {rangeImplCPU} from '../kernel_utils/shared';\n\nexport const range =\n    (args: {backend: MathBackendWebGL, attrs: RangeAttrs}): TensorInfo => {\n      const {backend, attrs} = args;\n      const {start, stop, step, dtype} = attrs;\n      const values = rangeImplCPU(start, stop, step, dtype);\n      return backend.makeTensorInfo([values.length], dtype, values);\n    };\n\nexport const rangeConfig: KernelConfig = {\n  kernelName: Range,\n  backendName: 'webgl',\n  kernelFunc: range as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Reciprocal} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst RECIPROCAL = `return 1.0 / x;`;\n\nexport const reciprocal = unaryKernelFunc({opSnippet: RECIPROCAL});\n\nexport const reciprocalConfig: KernelConfig = {\n  kernelName: Reciprocal,\n  backendName: 'webgl',\n  kernelFunc: reciprocal,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Relu} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst RELU = CHECK_NAN_SNIPPET + `\n  return (x < 0.0) ? 0.0 : x;\n`;\n\nconst RELU_PACKED = `\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\n\nexport const relu =\n    unaryKernelFunc({opSnippet: RELU, packedOpSnippet: RELU_PACKED});\n\nexport const reluConfig: KernelConfig = {\n  kernelName: Relu,\n  backendName: 'webgl',\n  kernelFunc: relu as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Relu6} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst RELU6 = CHECK_NAN_SNIPPET + `\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n`;\n\nconst RELU6_PACKED = `\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\n\nexport const relu6 =\n    unaryKernelFunc({opSnippet: RELU6, packedOpSnippet: RELU6_PACKED});\n\nexport const relu6Config: KernelConfig = {\n  kernelName: Relu6,\n  backendName: 'webgl',\n  kernelFunc: relu6 as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeBilinearProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      inputShape: [number, number, number, number], newHeight: number,\n      newWidth: number, alignCorners: boolean, halfPixelCenters: boolean) {\n    const [batch, oldHeight, oldWidth, depth] = inputShape;\n    this.outputShape = [batch, newHeight, newWidth, depth];\n\n    const effectiveInSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n      (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n    ];\n\n    const effectiveOutSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n      (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n    ];\n\n    let sourceFracIndexRC: string;\n    if (halfPixelCenters) {\n      sourceFracIndexRC =\n          `(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC` +\n          ` - vec2(0.5)`;\n    } else {\n      sourceFracIndexRC = `vec2(yRC) * effectiveInputOverOutputRatioRC`;\n    }\n\n    this.userCode = `\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec2 inputShapeRC = vec2(${oldHeight}.0, ${oldWidth}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${sourceFracIndexRC};\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeBilinearPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      inputShape: [number, number, number, number], newHeight: number,\n      newWidth: number, alignCorners: boolean, halfPixelCenters: boolean) {\n    const [batch, oldHeight, oldWidth, depth] = inputShape;\n    this.outputShape = [batch, newHeight, newWidth, depth];\n\n    const effectiveInSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n      (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n    ];\n\n    const effectiveOutSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n      (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n    ];\n\n    let sourceFracIndexRC: string;\n    if (halfPixelCenters) {\n      sourceFracIndexRC = `(vec3(yRC) + vec3(0.5)) * ` +\n          `effectiveInputOverOutputRatioRC - vec3(0.5)`;\n    } else {\n      sourceFracIndexRC = `vec3(yRC) * effectiveInputOverOutputRatioRC`;\n    }\n\n    this.userCode = `\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec3 inputShapeRC = vec3(${oldHeight}.0, ${oldWidth}.0,\n                                     ${oldWidth}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${sourceFracIndexRC};\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${depth - 1};\n        bool hasNextRow = coords.z < ${newWidth - 1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, ResizeBilinear, ResizeBilinearAttrs, ResizeBilinearInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ResizeBilinearProgram} from '../resize_bilinear_gpu';\nimport {ResizeBilinearPackedProgram} from '../resize_bilinear_packed_gpu';\n\nexport function resizeBilinear(args: {\n  inputs: ResizeBilinearInputs,\n  backend: MathBackendWebGL,\n  attrs: ResizeBilinearAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images} = inputs;\n  const {alignCorners, halfPixelCenters, size} = attrs;\n\n  const [newHeight, newWidth] = size;\n\n  const program = env().getBool('WEBGL_PACK_IMAGE_OPERATIONS') ?\n      new ResizeBilinearPackedProgram(\n          images.shape as [number, number, number, number], newHeight, newWidth,\n          alignCorners, halfPixelCenters) :\n      new ResizeBilinearProgram(\n          images.shape as [number, number, number, number], newHeight, newWidth,\n          alignCorners, halfPixelCenters);\n  return backend.runWebGLProgram(program, [images], 'float32');\n}\n\nexport const resizeBilinearConfig: KernelConfig = {\n  kernelName: ResizeBilinear,\n  backendName: 'webgl',\n  kernelFunc: resizeBilinear as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeBilinearBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      dyShape: [number, number, number, number],\n      inputShape: [number, number, number, number], alignCorners: boolean) {\n    this.outputShape = inputShape;\n    const [, xHeight, xWidth, ] = inputShape;\n    const [, yHeight, yWidth] = dyShape;\n\n    // In the backwards pass, we want to find the pixels that were generated for\n    // each pixel in the input image the forward pass and add the corresponding\n    // coefficient from dy to the gradient (with some interpolation).\n\n    const effectiveXSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n      (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n    ];\n\n    const effectiveYSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n      (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n    ];\n\n    const heightScale = effectiveXSize[0] / effectiveYSize[0];\n    const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n    const invHeightScale = 1 / heightScale;\n    const invWidthScale = 1 / widthScale;\n\n    // This defines the size of the window of values around a particular\n    // index in dy that we want to search for contributions to dx.\n    const winHeight = (Math.ceil(invHeightScale) * 2) + 2;\n    const winWidth = (Math.ceil(invWidthScale) * 2) + 2;\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${heightScale});\n        const float widthScale = float(${widthScale});\n\n        const float invHeightScale = float(${invHeightScale});\n        const float invWidthScale = float(${invWidthScale});\n\n        const int winHeight = int(${winHeight});\n        const int winWidth = int(${winWidth});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${yHeight}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${yWidth}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${xHeight - 1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${xWidth - 1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeBilinearGrad, ResizeBilinearGradAttrs, ResizeBilinearGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ResizeBilinearBackpropProgram} from '../resize_bilinear_backprop_gpu';\n\nexport function resizeBilinearGrad(args: {\n  inputs: ResizeBilinearGradInputs,\n  backend: MathBackendWebGL,\n  attrs: ResizeBilinearGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images, dy} = inputs;\n  const {alignCorners} = attrs;\n\n  const program = new ResizeBilinearBackpropProgram(\n      dy.shape as [number, number, number, number],\n      images.shape as [number, number, number, number], alignCorners);\n\n  return backend.runWebGLProgram(program, [dy], dy.dtype);\n}\n\nexport const resizeBilinearGradConfig: KernelConfig = {\n  kernelName: ResizeBilinearGrad,\n  backendName: 'webgl',\n  kernelFunc: resizeBilinearGrad as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeNearestNeighborProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      inputShape: [number, number, number, number], newHeight: number,\n      newWidth: number, alignCorners: boolean, halfPixelCenters: boolean) {\n    const [batch, oldHeight, oldWidth, depth] = inputShape;\n    this.outputShape = [batch, newHeight, newWidth, depth];\n\n    const effectiveInSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n      (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n    ];\n\n    const effectiveOutSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n      (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n    ];\n\n    // When align corners is false, we rounds the value with floor.\n    const roundBase = alignCorners ? '0.5' : '0.0';\n\n    let sourceFracIndexRC: string;\n    if (halfPixelCenters) {\n      sourceFracIndexRC =\n          `max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC` +\n          `, vec2(0.0))`;\n    } else {\n      sourceFracIndexRC = `vec2(yRC) * effectiveInputOverOutputRatioRC`;\n    }\n    this.userCode = `\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec2 inputShapeRC = vec2(${oldHeight}.0, ${oldWidth}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${sourceFracIndexRC};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${roundBase})));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeNearestNeighborPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      inputShape: [number, number, number, number], newHeight: number,\n      newWidth: number, alignCorners: boolean, halfPixelCenters: boolean) {\n    const [batch, oldHeight, oldWidth, depth] = inputShape;\n    this.outputShape = [batch, newHeight, newWidth, depth];\n\n    const effectiveInSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n      (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n    ];\n\n    const effectiveOutSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n      (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n    ];\n\n    // When align corners is false, we rounds the value with floor.\n    const roundBase = alignCorners ? '0.5' : '0.0';\n    let sourceFracIndexRC: string;\n    if (halfPixelCenters) {\n      sourceFracIndexRC = `max((vec3(yRC) + vec3(0.5)) * ` +\n          `effectiveInputOverOutputRatioRC, vec3(0.0))`;\n    } else {\n      sourceFracIndexRC = `vec3(yRC) * effectiveInputOverOutputRatioRC`;\n    }\n\n    this.userCode = `\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec3 inputShapeRC = vec3(${oldHeight}.0, ${oldWidth}.0,\n                                     ${oldWidth}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${sourceFracIndexRC};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec3 sourceNearestRC = ivec3(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${roundBase})));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${depth - 1};\n        bool hasNextRow = coords.z < ${newWidth - 1};\n\n        vec4 newValue = vec4(\n          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),\n          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);\n\n        setOutput(newValue);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, ResizeNearestNeighbor, ResizeNearestNeighborAttrs, ResizeNearestNeighborInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ResizeNearestNeighborProgram} from '../resize_nearest_neighbor_gpu';\nimport {ResizeNearestNeighborPackedProgram} from '../resize_nearest_neighbor_packed_gpu';\n\nexport function resizeNearestNeighbor(args: {\n  inputs: ResizeNearestNeighborInputs,\n  backend: MathBackendWebGL,\n  attrs: ResizeNearestNeighborAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images} = inputs;\n  const {alignCorners, halfPixelCenters, size} = attrs;\n\n  const [newHeight, newWidth] = size;\n\n  const program = env().getBool('WEBGL_PACK_IMAGE_OPERATIONS') ?\n      new ResizeNearestNeighborPackedProgram(\n          images.shape as [number, number, number, number], newHeight, newWidth,\n          alignCorners, halfPixelCenters) :\n      new ResizeNearestNeighborProgram(\n          images.shape as [number, number, number, number], newHeight, newWidth,\n          alignCorners, halfPixelCenters);\n  return backend.runWebGLProgram(program, [images], images.dtype);\n}\n\nexport const resizeNearestNeighborConfig: KernelConfig = {\n  kernelName: ResizeNearestNeighbor,\n  backendName: 'webgl',\n  kernelFunc: resizeNearestNeighbor as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeNearestNeigborBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      dyShape: [number, number, number, number],\n      inputShape: [number, number, number, number], alignCorners: boolean) {\n    this.outputShape = inputShape;\n    const [, xHeight, xWidth, ] = inputShape;\n    const [, yHeight, yWidth] = dyShape;\n\n    // In the backwards pass, we want to find the pixels that were generated for\n    // each pixel in the input image the forward pass and add the corresponding\n    // coefficient from dy to the gradient (with some interpolation).\n\n    const effectiveXSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n      (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n    ];\n\n    const effectiveYSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n      (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n    ];\n\n    const heightScale = effectiveXSize[0] / effectiveYSize[0];\n    const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n    const invHeightScale = 1 / heightScale;\n    const invWidthScale = 1 / widthScale;\n\n    // This defines the size of the window of values around a particular\n    // index in dy that we want to search for contributions to dx.\n    const winHeight = (Math.ceil(invHeightScale) * 2) + 2;\n    const winWidth = (Math.ceil(invWidthScale) * 2) + 2;\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${heightScale});\n        const float widthScale = float(${widthScale});\n\n        const float invHeightScale = float(${invHeightScale});\n        const float invWidthScale = float(${invWidthScale});\n\n        const int winHeight = int(${winHeight});\n        const int winWidth = int(${winWidth});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${yHeight}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${yWidth}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${effectiveXSize[0]}) *\n                (float(dyR) / float(${effectiveYSize[0]}));\n\n            float sourceFracCol =\n                float(${effectiveXSize[1]}) *\n                  (float(dyC) / float(${effectiveYSize[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${xHeight}) - 1),\n                ${alignCorners} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${xWidth}) - 1),\n                ${alignCorners} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeNearestNeighborGrad, ResizeNearestNeighborGradAttrs, ResizeNearestNeighborGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ResizeNearestNeigborBackpropProgram} from '../resize_nearest_neighbor_backprop_gpu';\n\nexport function resizeNearestNeighborGrad(args: {\n  inputs: ResizeNearestNeighborGradInputs,\n  backend: MathBackendWebGL,\n  attrs: ResizeNearestNeighborGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images, dy} = inputs;\n  const {alignCorners} = attrs;\n\n  const program = new ResizeNearestNeigborBackpropProgram(\n      dy.shape as [number, number, number, number],\n      images.shape as [number, number, number, number], alignCorners);\n  return backend.runWebGLProgram(program, [dy], dy.dtype);\n}\n\nexport const resizeNearestNeighborGradConfig: KernelConfig = {\n  kernelName: ResizeNearestNeighborGrad,\n  backendName: 'webgl',\n  kernelFunc: resizeNearestNeighborGrad as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ReverseProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(xShape: number[], axis: number[]) {\n    const rank = xShape.length;\n    if (rank > 4) {\n      throw new Error(\n          `WebGL backend: Reverse of rank-${rank} tensor is not yet supported`);\n    }\n    this.outputShape = xShape;\n\n    if (rank === 1) {\n      this.userCode = `\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${xShape[0]} - coord - 1));\n        }\n      `;\n      return;\n    }\n    const getInCoord = (i: number) => {\n      if (axis.indexOf(i) !== -1 && xShape[i] !== 1) {\n        return `${xShape[i]} - coords[${i}] - 1`;\n      }\n      return `coords[${i}]`;\n    };\n    const inCoords = xShape.map((_, i) => getInCoord(i)).join(',');\n    const type = getCoordsDataType(rank);\n\n    this.userCode = `\n      void main() {\n        ${type} coords = getOutputCoords();\n        setOutput(getX(${inCoords}));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ReversePackedProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(xShape: number[], axis: number[]) {\n    const rank = xShape.length;\n    if (rank > 4) {\n      throw new Error(\n          `WebGL backend: Reverse of rank-${rank} tensor is not yet supported`);\n    }\n    this.outputShape = xShape;\n    const channels = getChannels('rc', rank);\n    const nextColumn =\n        `${channels[rank - 1]} + 1 < ${this.outputShape[rank - 1]}`;\n    const nextRow = `${channels[rank - 2]} + 1 < ${this.outputShape[rank - 2]}`;\n    const type = getCoordsDataType(rank);\n    if (rank === 1) {\n      this.userCode = `\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${xShape[0]} - rc - 1),\n            ${xShape[0]} - rc - 1);\n          if(${nextColumn}){\n              result.g = getChannel(getX(${xShape[0]} - (rc  + 1) - 1),\n                ${xShape[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `;\n    } else {\n      this.userCode = `\n        void main() {\n          ${type} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${getR(channels.slice())};\n          if(${nextColumn}){\n            result.g = ${getG(channels.slice())};\n          }\n          if(${nextRow}) {\n            result.b = ${getB(channels.slice())};\n            if(${nextColumn}) {\n              result.a = ${getA(channels.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `;\n    }\n\n    function getR(channels: string[]): string {\n      return getChannel(channels);\n    }\n\n    function getG(channels: string[]): string {\n      channels[rank - 1] = '(' + channels[rank - 1] + ` + 1)`;\n      return getChannel(channels);\n    }\n\n    function getB(channels: string[]): string {\n      channels[rank - 2] = '(' + channels[rank - 2] + ` + 1)`;\n      return getChannel(channels);\n    }\n\n    function getA(channels: string[]): string {\n      channels[rank - 1] = '(' + channels[rank - 1] + ` + 1)`;\n      channels[rank - 2] = '(' + channels[rank - 2] + ` + 1)`;\n      return getChannel(channels);\n    }\n\n    function getChannel(channels: string[]): string {\n      const inCoordsArray = xShape.map((_, i) => getInCoord(i, channels));\n      const inCoords = inCoordsArray.join(',');\n      const innerDims = inCoordsArray.slice(-2).join(',');\n      return `getChannel(getX(${inCoords}), vec2(${innerDims}))`;\n    }\n\n    function getInCoord(i: number, channels1: string[]): string {\n      if (axis.indexOf(i) !== -1 && xShape[i] !== 1) {\n        return `${xShape[i]} - ${channels1[i]} - 1`;\n      } else {\n        return `${channels1[i]}`;\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, Reverse, ReverseAttrs, ReverseInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ReverseProgram} from '../reverse_gpu';\nimport {ReversePackedProgram} from '../reverse_packed_gpu';\n\nimport {identity} from './Identity';\n\nexport function reverse(args: {\n  inputs: ReverseInputs,\n  backend: MathBackendWebGL,\n  attrs: ReverseAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {dims} = attrs;\n\n  const xRank = x.shape.length;\n\n  const $dims = util.parseAxisParam(dims, x.shape);\n  if (xRank === 0) {\n    return identity({inputs: {x}, backend});\n  }\n\n  const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n      new ReversePackedProgram(x.shape, $dims) :\n      new ReverseProgram(x.shape, $dims);\n\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\n\nexport const reverseConfig: KernelConfig = {\n  kernelName: Reverse,\n  backendName: 'webgl',\n  kernelFunc: reverse as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {UniformType} from './shader_compiler';\n\nexport class RotateProgram implements GPGPUProgram {\n  variableNames = ['Image'];\n  outputShape: number[] = [];\n  userCode: string;\n  customUniforms = [{name: 'params', type: 'vec4' as UniformType}];\n  constructor(\n      imageShape: [number, number, number, number],\n      fillValue: number|[number, number, number]) {\n    const imageHeight = imageShape[1];\n    const imageWidth = imageShape[2];\n    this.outputShape = imageShape;\n\n    let fillSnippet = '';\n    if (typeof fillValue === 'number') {\n      fillSnippet = `float outputValue = ${fillValue.toFixed(2)};`;\n    } else {\n      fillSnippet = `\n        vec3 fill = vec3(${fillValue.join(',')});\n        float outputValue = fill[coords[3]];`;\n    }\n\n    this.userCode = `\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - params[0]) * params[3] -\n            (float(y) - params[1]) * params[2];\n          float coordYFloat = (float(x) - params[0]) * params[2] +\n            (float(y) - params[1]) * params[3];\n          int coordX = int(round(coordXFloat + params[0]));\n          int coordY = int(round(coordYFloat + params[1]));\n          ${fillSnippet}\n          if(coordX >= 0 && coordX < ${imageWidth} && coordY >= 0 && coordY < ${\n        imageHeight}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, Tensor4D} from '@tensorflow/tfjs-core';\nimport {RotateWithOffset, RotateWithOffsetAttrs, RotateWithOffsetInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {RotateProgram} from '../rotate_gpu';\n\nexport const rotateWithOffsetConfig: KernelConfig = {\n  kernelName: RotateWithOffset,\n  backendName: 'webgl',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {image} = inputs as RotateWithOffsetInputs;\n    const {radians, fillValue, center} =\n        attrs as unknown as RotateWithOffsetAttrs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    const program = new RotateProgram((image as Tensor4D).shape, fillValue);\n    const [centerX, centerY] =\n        backend_util.getImageCenter(center, image.shape[1], image.shape[2]);\n    const customValues =\n        [[centerX, centerY, Math.sin(radians), Math.cos(radians)]];\n    const output = webglBackend.runWebGLProgram(\n        program, [image], image.dtype, customValues);\n    return output;\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Returns the image center in pixels.\nexport function getImageCenter(\n    center: number|[number, number], imageHeight: number,\n    imageWidth: number): [number, number] {\n  const centerX =\n      imageWidth * (typeof center === 'number' ? center : center[0]);\n  const centerY =\n      imageHeight * (typeof center === 'number' ? center : center[1]);\n  return [centerX, centerY];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Round} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst ROUND = `\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n`;\n\nexport const round = unaryKernelFunc({opSnippet: ROUND});\n\nexport const roundConfig: KernelConfig = {\n  kernelName: Round,\n  backendName: 'webgl',\n  kernelFunc: round,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Rsqrt} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {rsqrtImplCPU} from '../kernel_utils/shared';\n\nconst RSQRT = `return inversesqrt(x);`;\n\nexport const rsqrt =\n    unaryKernelFunc({opSnippet: RSQRT, cpuKernelImpl: rsqrtImplCPU});\n\nexport const rsqrtConfig: KernelConfig = {\n  kernelName: Rsqrt,\n  backendName: 'webgl',\n  kernelFunc: rsqrt as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ScatterProgram implements GPGPUProgram {\n  variableNames = ['updates', 'indices', 'defaultValue'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      updateSize: number, sliceDim: number, indicesRank: number,\n      updatesRank: number, strides: number[], shape: number[],\n      summingDupeIndex = true) {\n    this.outputShape = shape;\n    const stridesType = getCoordsDataType(strides.length);\n    const dtype = getCoordsDataType(shape.length);\n    let indicesString = '';\n    if (indicesRank === 1) {\n      indicesString = 'i';\n    } else if (indicesRank === 2) {\n      indicesString = 'i, j';\n    }\n    const indicesSnippet = `getIndices(${indicesString})`;\n\n    let updatesString = '';\n    if (updatesRank === 1) {\n      updatesString = 'i';\n    } else if (updatesRank === 2) {\n      updatesString = 'i, coords[1]';\n    }\n    const updatesSnippet = `getUpdates(${updatesString})`;\n\n    const strideString = sliceDim > 1 ? 'strides[j]' : 'strides';\n    this.userCode = `\n        ${stridesType} strides = ${stridesType}(${strides});\n\n        void main() {\n          ${dtype} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${updateSize}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${sliceDim}; j++) {\n              int index = round(${indicesSnippet});\n              flattenedIndex += index * ${strideString};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${updatesSnippet};\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, ScatterNd, ScatterNdAttrs, ScatterNdInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ScatterProgram} from '../scatter_gpu';\nimport {reshape} from './Reshape';\n\nexport function scatterNd(args: {\n  inputs: ScatterNdInputs,\n  backend: MathBackendWebGL,\n  attrs: ScatterNdAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {indices, updates} = inputs;\n  const {shape} = attrs;\n\n  const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n      backend_util.calculateShapes(updates, indices, shape);\n\n  const flattenShape = [outputSize / sliceSize, sliceSize];\n\n  if (outputSize === 0) {\n    return backend.makeTensorInfo(shape, indices.dtype);\n  }\n\n  const flattenIndices = reshape(\n      {inputs: {x: indices}, backend, attrs: {shape: [numUpdates, sliceRank]}});\n  const flattenX = reshape(\n      {inputs: {x: updates}, backend, attrs: {shape: [numUpdates, sliceSize]}});\n\n  const defaultValue = backend.makeTensorInfo(\n      [], 'float32', new Float32Array([0]));  // scalar(0)\n  const program = new ScatterProgram(\n      numUpdates, sliceRank, flattenIndices.shape.length, flattenX.shape.length,\n      strides, flattenShape);\n  const res = backend.runWebGLProgram(\n      program, [flattenX, flattenIndices, defaultValue], flattenX.dtype);\n\n  const reshaped = reshape({inputs: {x: res}, backend, attrs: {shape}});\n\n  backend.disposeIntermediateTensorInfo(flattenIndices);\n  backend.disposeIntermediateTensorInfo(flattenX);\n  backend.disposeIntermediateTensorInfo(res);\n  backend.disposeIntermediateTensorInfo(defaultValue);\n\n  return reshaped;\n}\n\nexport const scatterNdConfig: KernelConfig = {\n  kernelName: ScatterNd,\n  backendName: 'webgl',\n  kernelFunc: scatterNd as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\nimport {UniformType} from './shader_compiler';\n\nexport class SearchSortedProgram implements GPGPUProgram {\n  variableNames = ['sortedSequence', 'values'];\n  outputShape: number[];\n  userCode: string;\n  customUniforms = [{name: 'numInputs', type: 'int' as UniformType}];\n\n  constructor(\n      batchSize: number, numInputs: number, numValues: number,\n      side: 'left'|'right') {\n    this.outputShape = [batchSize, numValues];\n\n    const webGL2LoopHead = 'while (left < right) {';\n    // WebGL1 doesn't accept non constant loop conditions, so upper bound loop\n    // iterations.\n    const webGL1LoopHead = `for (int i = 0; i < ${\n        Math.ceil(Math.log2(numInputs + 1))}; ++i) { if (left >= right) break;`;\n    const loopHead = env().getNumber('WEBGL_VERSION') === 2 ? webGL2LoopHead :\n                                                              webGL1LoopHead;\n\n    // left corresponds to lower bound and right to upper bound.\n    const boundComparator = side === 'left' ? '<' : '<=';\n    this.userCode = `\n       int findBound(int batch, float value) {\n         int left = 0;\n         int right = numInputs;\n         int mid;\n         ${loopHead}\n           mid = (left + right) / 2;\n           if (getSortedSequence(batch, mid) ${boundComparator} value) {\n             left = mid + 1;\n           } else {\n             right = mid;\n           }\n         }\n         return right;\n       }\n\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int valueIndex = coords[1];\n\n         float value = getValues(batch, valueIndex);\n\n         setOutput(float(findBound(batch, value)));\n       }\n     `;\n  }\n}\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, SearchSorted, SearchSortedAttrs, SearchSortedInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {SearchSortedProgram} from '../search_sorted_gpu';\n\nexport function searchSorted(args: {\n  inputs: SearchSortedInputs,\n  backend: MathBackendWebGL,\n  attrs: SearchSortedAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {sortedSequence, values} = inputs;\n  const {side} = attrs;\n\n  const program = new SearchSortedProgram(\n      sortedSequence.shape[0], sortedSequence.shape[1], values.shape[1], side);\n  const customValues = [[sortedSequence.shape[1]]];\n  return backend.runWebGLProgram(\n      program, [sortedSequence, values], 'int32', customValues);\n}\n\nexport const searchSortedConfig: KernelConfig = {\n  kernelName: SearchSorted,\n  backendName: 'webgl',\n  kernelFunc: searchSorted as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class SelectProgram implements GPGPUProgram {\n  variableNames = ['c', 'a', 'b'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(cRank: number, shape: number[], rank: number) {\n    this.outputShape = shape;\n\n    let cCoords;\n    let abCoords;\n    if (rank > 4) {\n      throw Error(`Where for rank ${rank} is not yet supported`);\n    }\n\n    if (rank === 1) {\n      abCoords = `resRC`;\n      cCoords = `resRC`;\n    } else {\n      const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];\n      const cCoordVars = [];\n      const abCoordVars = [];\n      for (let i = 0; i < shape.length; i++) {\n        abCoordVars.push(`${currentCoords[i]}`);\n        if (i < cRank) {\n          cCoordVars.push(`${currentCoords[i]}`);\n        }\n      }\n      cCoords = cCoordVars.join();\n      abCoords = abCoordVars.join();\n    }\n\n    const dtype = getCoordsDataType(rank);\n\n    this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        float cVal = getC(${cCoords});\n        if (cVal >= 1.0) {\n          setOutput(getA(${abCoords}));\n        } else {\n          setOutput(getB(${abCoords}));\n        }\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Select, SelectInputs, TensorInfo, upcastType} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {SelectProgram} from '../select_gpu';\n\nexport function select(args: {inputs: SelectInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {condition, t, e} = inputs;\n\n  const program =\n      new SelectProgram(condition.shape.length, t.shape, t.shape.length);\n  return backend.runWebGLProgram(\n      program, [condition, t, e], upcastType(t.dtype, e.dtype));\n}\n\nexport const selectConfig: KernelConfig = {\n  kernelName: Select,\n  backendName: 'webgl',\n  kernelFunc: select as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, Selu} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst SELU = `\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${backend_util.SELU_SCALEALPHA};\n  float scale = ${backend_util.SELU_SCALE};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`;\n\nexport const selu = unaryKernelFunc({opSnippet: SELU});\n\nexport const seluConfig: KernelConfig = {\n  kernelName: Selu,\n  backendName: 'webgl',\n  kernelFunc: selu,\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const SELU_SCALEALPHA = 1.7580993408473768599402175208123;\nexport const SELU_SCALE = 1.0507009873554804934193349852946;\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sigmoid} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET_UNARY, unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {sigmoidImplCPU} from '../kernel_utils/shared';\n\nconst SIGMOID = CHECK_NAN_SNIPPET_UNARY + `\n  return 1.0 / (1.0 + exp(-1.0 * x));\n`;\n\nconst SIGMOID_PACKED = `\n  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\nexport const sigmoid = unaryKernelFunc({\n  opSnippet: SIGMOID,\n  packedOpSnippet: SIGMOID_PACKED,\n  cpuKernelImpl: sigmoidImplCPU\n});\n\nexport const sigmoidConfig: KernelConfig = {\n  kernelName: Sigmoid,\n  backendName: 'webgl',\n  kernelFunc: sigmoid,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sign} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\n// Sign does not propagate NANs.\nconst SIGN = `\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n`;\n\nexport const sign = unaryKernelFunc({opSnippet: SIGN});\n\nexport const signConfig: KernelConfig = {\n  kernelName: Sign,\n  backendName: 'webgl',\n  kernelFunc: sign,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sin} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET_UNARY, unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst SIN = CHECK_NAN_SNIPPET_UNARY + `\n  return sin(x);\n`;\n\nexport const sin = unaryKernelFunc({opSnippet: SIN});\n\nexport const sinConfig: KernelConfig = {\n  kernelName: Sin,\n  backendName: 'webgl',\n  kernelFunc: sin,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sinh} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst SINH = `\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n`;\n\nexport const sinh = unaryKernelFunc({opSnippet: SINH});\n\nexport const sinhConfig: KernelConfig = {\n  kernelName: Sinh,\n  backendName: 'webgl',\n  kernelFunc: sinh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Softplus} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst SOFTPLUS = `\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n`;\n\nexport const softplus = unaryKernelFunc({opSnippet: SOFTPLUS});\n\nexport const softplusConfig: KernelConfig = {\n  kernelName: Softplus,\n  backendName: 'webgl',\n  kernelFunc: softplus,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, SpaceToBatchND, SpaceToBatchNDAttrs, SpaceToBatchNDInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {padV2} from './PadV2';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport const spaceToBatchND = (args: {\n  inputs: SpaceToBatchNDInputs,\n  backend: MathBackendWebGL,\n  attrs: SpaceToBatchNDAttrs\n}): TensorInfo => {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockShape, paddings} = attrs;\n\n  util.assert(\n      x.shape.length <= 4,\n      () => 'spaceToBatchND for rank > 4 with a WebGL backend not ' +\n          'implemented yet');\n\n  const prod = blockShape.reduce((a, b) => a * b);\n\n  const completePaddings: Array<[number, number]> = [[0, 0]];\n  completePaddings.push(...paddings as Array<[number, number]>);\n  for (let i = 1 + blockShape.length; i < x.shape.length; ++i) {\n    completePaddings.push([0, 0]);\n  }\n\n  const toDispose = [];\n\n  const paddedX = padV2({\n    inputs: {x},\n    backend,\n    attrs: {paddings: completePaddings, constantValue: 0}\n  });\n\n  const reshapedPaddedShape =\n      backend_util.getReshaped(paddedX.shape, blockShape, prod, false);\n\n  const permutedReshapedPaddedPermutation = backend_util.getPermuted(\n      reshapedPaddedShape.length, blockShape.length, false);\n\n  const flattenShape =\n      backend_util.getReshapedPermuted(paddedX.shape, blockShape, prod, false);\n\n  const reshapedPaddedX = reshape(\n      {inputs: {x: paddedX}, backend, attrs: {shape: reshapedPaddedShape}});\n\n  const paddedXT = transpose({\n    inputs: {x: reshapedPaddedX},\n    backend,\n    attrs: {perm: permutedReshapedPaddedPermutation}\n  });\n\n  const result =\n      reshape({inputs: {x: paddedXT}, backend, attrs: {shape: flattenShape}});\n\n  toDispose.push(paddedX);\n  toDispose.push(reshapedPaddedX);\n  toDispose.push(paddedXT);\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n};\n\nexport const spaceToBatchNDConfig: KernelConfig = {\n  kernelName: SpaceToBatchND,\n  backendName: 'webgl',\n  kernelFunc: spaceToBatchND as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, SparseFillEmptyRows, SparseFillEmptyRowsInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {sparseFillEmptyRowsImplCPU} from '../kernel_utils/shared';\n\nexport function sparseFillEmptyRows(args: {\n  inputs: SparseFillEmptyRowsInputs,\n  backend: MathBackendWebGL\n}): [TensorInfo, TensorInfo, TensorInfo, TensorInfo] {\n  const {inputs, backend} = args;\n  const {indices, values, denseShape, defaultValue} = inputs;\n  if (denseShape.shape.length !== 1) {\n    throw new Error(`Dense shape must be a vector, saw:\n         ${denseShape.shape}`);\n  }\n  if (indices.shape.length !== 2) {\n    throw new Error(`Indices must be a matrix, saw:\n         ${indices.shape}`);\n  }\n  if (values.shape.length !== 1) {\n    throw new Error(`Values must be a vector, saw:\n         ${values.shape}`);\n  }\n  if (defaultValue.shape.length !== 0) {\n    throw new Error(`Default value must be a scalar, saw:\n        ${defaultValue.shape}`);\n  }\n\n  const $indices = backend.readSync(indices.dataId) as TypedArray;\n  const $values = backend.readSync(values.dataId) as TypedArray;\n  const $denseShape = backend.readSync(denseShape.dataId) as TypedArray;\n  const $defaultValue =\n      backend.readSync(defaultValue.dataId)[0] as number;\n\n  const [outputIndices, outputIndicesShape, outputValues,\n         emptyRowIndicator, reverseIndexMap] =\n      sparseFillEmptyRowsImplCPU(\n          $indices, indices.shape, indices.dtype, $values, values.dtype,\n          $denseShape, $defaultValue);\n  return [\n    backend.makeTensorInfo(outputIndicesShape, indices.dtype, outputIndices),\n    backend.makeTensorInfo(\n        [outputIndicesShape[0]], values.dtype, outputValues),\n    backend.makeTensorInfo(\n        [emptyRowIndicator.length], 'bool',\n        new Uint8Array(\n            emptyRowIndicator.map((value: boolean) => Number(value)))),\n    backend.makeTensorInfo(\n        [reverseIndexMap.length], indices.dtype,\n        new Int32Array(reverseIndexMap)),\n  ];\n}\n\nexport const sparseFillEmptyRowsConfig: KernelConfig = {\n  kernelName: SparseFillEmptyRows,\n  backendName: 'webgl',\n  kernelFunc: sparseFillEmptyRows as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SparseReshape, SparseReshapeInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {sparseReshapeImplCPU} from '../kernel_utils/shared';\n\nexport function sparseReshape(\n    args: {inputs: SparseReshapeInputs, backend: MathBackendWebGL}):\n    [TensorInfo, TensorInfo] {\n  const {inputs, backend} = args;\n  const {inputIndices, inputShape, newShape} = inputs;\n  if (inputIndices.shape.length !== 2) {\n    throw new Error(`Input indices should be a matrix but received shape ${\n        inputIndices.shape}`);\n  }\n  if (inputShape.shape.length !== 1) {\n    throw new Error(`Input shape should be a vector but received shape ${\n        inputShape.shape}`);\n  }\n\n  if (newShape.shape.length !== 1) {\n    throw new Error(\n        `Target shape should be a vector but received shape ${newShape.shape}`);\n  }\n\n  const $inputShape =\n      Array.from(backend.readSync(inputShape.dataId) as TypedArray);\n  const $inputIndices = backend.readSync(inputIndices.dataId) as TypedArray;\n  const targetShape =\n      Array.from(backend.readSync(newShape.dataId) as TypedArray);\n\n  const [newIndices, indicesShape, outputShape] = sparseReshapeImplCPU(\n      $inputIndices, inputIndices.shape, inputIndices.dtype, $inputShape,\n      targetShape);\n  return [\n    backend.makeTensorInfo(indicesShape, inputIndices.dtype, newIndices),\n    backend.makeTensorInfo(\n        [outputShape.length], newShape.dtype, new Int32Array(outputShape)),\n  ];\n}\n\nexport const sparseReshapeConfig: KernelConfig = {\n  kernelName: SparseReshape,\n  backendName: 'webgl',\n  kernelFunc: sparseReshape,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, SparseSegmentMean, SparseSegmentMeanInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {sparseSegmentReductionImplCPU} from '../kernel_utils/shared';\n\nexport function sparseSegmentMean(\n    args: {inputs: SparseSegmentMeanInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {data, indices, segmentIds} = inputs;\n  if (data.shape.length < 1) {\n    throw new Error(\n        `Data should be at least 1 dimensional but received scalar`);\n  }\n  if (indices.shape.length !== 1) {\n    throw new Error(`Indices should be a vector but received shape\n              ${indices.shape}`);\n  }\n  if (segmentIds.shape.length !== 1) {\n    throw new Error(`Segment ids should be a vector but received shape\n              ${segmentIds.shape}`);\n  }\n\n  const $data = backend.readSync(data.dataId) as TypedArray;\n  const $indices = backend.readSync(indices.dataId) as TypedArray;\n  const $segmentIds = backend.readSync(segmentIds.dataId) as TypedArray;\n\n  const [outputData, outputDataShape] = sparseSegmentReductionImplCPU(\n      $data, data.shape, data.dtype, $indices, $segmentIds, true);\n  return backend.makeTensorInfo(outputDataShape, data.dtype, outputData);\n}\n\nexport const sparseSegmentMeanConfig: KernelConfig = {\n  kernelName: SparseSegmentMean,\n  backendName: 'webgl',\n  kernelFunc: sparseSegmentMean as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, SparseSegmentSum, SparseSegmentSumInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {sparseSegmentReductionImplCPU} from '../kernel_utils/shared';\n\nexport function sparseSegmentSum(\n    args: {inputs: SparseSegmentSumInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {data, indices, segmentIds} = inputs;\n  if (data.shape.length < 1) {\n    throw new Error(\n        `Data should be at least 1 dimensional but received scalar`);\n  }\n  if (indices.shape.length !== 1) {\n    throw new Error(`Indices should be a vector but received shape\n             ${indices.shape}`);\n  }\n  if (segmentIds.shape.length !== 1) {\n    throw new Error(`Segment ids should be a vector but received shape\n             ${segmentIds.shape}`);\n  }\n\n  const $data = backend.readSync(data.dataId) as TypedArray;\n  const $indices = backend.readSync(indices.dataId) as TypedArray;\n  const $segmentIds = backend.readSync(segmentIds.dataId) as TypedArray;\n\n  const [outputData, outputDataShape] = sparseSegmentReductionImplCPU(\n      $data, data.shape, data.dtype, $indices, $segmentIds);\n  return backend.makeTensorInfo(outputDataShape, data.dtype, outputData);\n}\n\nexport const sparseSegmentSumConfig: KernelConfig = {\n  kernelName: SparseSegmentSum,\n  backendName: 'webgl',\n  kernelFunc: sparseSegmentSum as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Rank, SparseToDense, SparseToDenseAttrs, SparseToDenseInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {scatterImplCPU} from '../kernel_utils/shared';\nimport {ScatterProgram} from '../scatter_gpu';\n\nimport {reshape} from './Reshape';\n\nexport function sparseToDense(args: {\n  inputs: SparseToDenseInputs,\n  backend: MathBackendWebGL,\n  attrs: SparseToDenseAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {sparseIndices, sparseValues, defaultValue} = inputs;\n  const {outputShape} = attrs;\n\n  const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n      backend_util.calculateShapes(sparseValues, sparseIndices, outputShape);\n  const sumDupeIndices = false;\n\n  if (sparseValues.dtype === 'string') {\n    const indicesBuf = backend.bufferSync<Rank, 'int32'>(sparseIndices);\n    const updatesBuf = backend.bufferSync<Rank, 'string'>(sparseValues);\n    const $defaultValue = util.decodeString(\n        backend.readSync(defaultValue.dataId)[0] as Uint8Array);\n    const outBuf = scatterImplCPU(\n        indicesBuf, updatesBuf, outputShape, outputSize, sliceSize, numUpdates,\n        sliceRank, strides, $defaultValue, sumDupeIndices);\n    return backend.makeTensorInfo(outputShape, outBuf.dtype, outBuf.values);\n  }\n  const program = new ScatterProgram(\n      numUpdates, sliceRank, sparseIndices.shape.length,\n      sparseValues.shape.length, strides, [outputSize, 1], sumDupeIndices);\n\n  const res = backend.runWebGLProgram(\n      program, [sparseValues, sparseIndices, defaultValue], sparseValues.dtype);\n\n  const reshaped =\n      reshape({inputs: {x: res}, backend, attrs: {shape: outputShape}});\n\n  backend.disposeIntermediateTensorInfo(res);\n  return reshaped;\n}\n\nexport const sparseToDenseConfig: KernelConfig = {\n  kernelName: SparseToDense,\n  backendName: 'webgl',\n  kernelFunc: sparseToDense as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, SplitV, SplitVAttrs, SplitVInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {slice} from './Slice';\n\nexport function splitV(\n    args:\n        {inputs: SplitVInputs, backend: MathBackendWebGL, attrs: SplitVAttrs}):\n    TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {numOrSizeSplits, axis} = attrs;\n\n  const $axis = util.parseAxisParam(axis, x.shape)[0];\n  const splitSizes = backend_util.prepareSplitSize(x, numOrSizeSplits, $axis);\n\n  const xRank = x.shape.length;\n  const begin = new Array(xRank).fill(0);\n  const size = x.shape.slice();\n\n  return splitSizes.map(s => {\n    const sliceSize = [...size];\n    sliceSize[$axis] = s;\n    const sliceT =\n        slice({inputs: {x}, backend, attrs: {begin, size: sliceSize}});\n    begin[$axis] += s;\n    return sliceT;\n  });\n}\n\nexport const splitVConfig: KernelConfig = {\n  kernelName: SplitV,\n  backendName: 'webgl',\n  kernelFunc: splitV as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { TensorInfo } from '../tensor_info';\nimport {Tensor} from '../tensor';\nimport {assert} from '../util';\n\n/**\n * Prepare the split size array. When the input is a number, the axis is evenly\n * divided among the split size. When the input contains the negative value, the\n * rest of the axis is allocated toward that.\n */\nexport function prepareSplitSize(\n    x: Tensor|TensorInfo, numOrSizeSplits: number[]|number,\n    axis = 0): number[] {\n  let splitSizes = [];\n  if (typeof (numOrSizeSplits) === 'number') {\n    assert(\n        x.shape[axis] % numOrSizeSplits === 0,\n        () => 'Number of splits must evenly divide the axis.');\n    splitSizes =\n        new Array(numOrSizeSplits).fill(x.shape[axis] / numOrSizeSplits);\n  } else {\n    const numOfNegs = numOrSizeSplits.reduce((count, value) => {\n      if (value === -1) {\n        count += 1;\n      }\n      return count;\n    }, 0);\n    assert(\n        numOfNegs <= 1,\n        () => 'There should be only one negative value in split array.');\n    const negIndex = numOrSizeSplits.indexOf(-1);\n    // Allow the number of split array to be -1, which indicates the rest\n    // of dimension is allocated to that split.\n    if (negIndex !== -1) {\n      const total = numOrSizeSplits.reduce((a, b) => b > 0 ? a + b : a);\n      numOrSizeSplits[negIndex] = x.shape[axis] - total;\n    }\n    assert(\n        x.shape[axis] === numOrSizeSplits.reduce((a, b) => a + b),\n        () => 'The sum of sizes must match the size of the axis dimension.');\n    splitSizes = numOrSizeSplits;\n  }\n\n  return splitSizes;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Sqrt} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {sqrtImplCPU} from '../kernel_utils/shared';\n\nconst SQRT = `return sqrt(x);`;\n\nexport const sqrt = unaryKernelFunc(\n    {opSnippet: SQRT, packedOpSnippet: SQRT, cpuKernelImpl: sqrtImplCPU});\n\nexport const sqrtConfig: KernelConfig = {\n  kernelName: Sqrt,\n  backendName: 'webgl',\n  kernelFunc: sqrt as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Square} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst SQUARE = `return x * x;`;\n\nexport const square = unaryKernelFunc({opSnippet: SQUARE});\n\nexport const squareConfig: KernelConfig = {\n  kernelName: Square,\n  backendName: 'webgl',\n  kernelFunc: square,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SquaredDifference} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst SQUARED_DIFFERENCE = 'return (a - b) * (a - b);';\n\nexport const squaredDifference = binaryKernelFunc(\n    {opSnippet: SQUARED_DIFFERENCE, packedOpSnippet: SQUARED_DIFFERENCE});\n\nexport const squaredDifferenceConfig: KernelConfig = {\n  kernelName: SquaredDifference,\n  backendName: 'webgl',\n  kernelFunc: squaredDifference,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Step, StepAttrs, TensorInfo, UnaryInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {CHECK_NAN_SNIPPET, UnaryOpProgram} from '../unaryop_gpu';\n\nexport function step(\n    {inputs, attrs, backend}:\n        {inputs: UnaryInputs, attrs: StepAttrs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {x} = inputs;\n  const opSnippet = CHECK_NAN_SNIPPET + `\n    return x > 0.0 ? 1.0 : float(${attrs.alpha});\n  `;\n\n  const program = new UnaryOpProgram(x.shape, opSnippet);\n\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\n\nexport const stepConfig: KernelConfig = {\n  kernelName: Step,\n  backendName: 'webgl',\n  kernelFunc: step as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class StridedSliceProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(begin: number[], strides: number[], size: number[]) {\n    this.outputShape = size;\n    const rank = size.length;\n    const inputDtype = getCoordsDataType(size.length);\n    const dtype = getCoordsDataType(size.length);\n\n    let newCoords = '';\n    if (rank === 1) {\n      newCoords = 'coords * strides + begin';\n    } else {\n      let outputAxis = 0;\n      newCoords =\n          size.map((_, i) => {\n                outputAxis++;\n                return size.length === 1 ?\n                    `coords * strides[${i}] + begin[${i}]` :\n                    `coords[${outputAxis - 1}] * strides[${i}] + begin[${i}]`;\n              })\n              .join(',');\n    }\n\n    this.userCode = `\n      ${inputDtype} begin = ${inputDtype}(${begin});\n      ${inputDtype} strides = ${inputDtype}(${strides});\n\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        setOutput(getX(${newCoords}));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, KernelConfig, KernelFunc, Rank, slice_util, StridedSlice, StridedSliceAttrs, StridedSliceInputs, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {stridedSliceImplCPU} from '../kernel_utils/shared';\nimport {StridedSliceProgram} from '../strided_slice_gpu';\n\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\n\nexport function stridedSlice(args: {\n  inputs: StridedSliceInputs,\n  backend: MathBackendWebGL,\n  attrs: StridedSliceAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {\n    begin,\n    end,\n    strides,\n    beginMask,\n    endMask,\n    ellipsisMask,\n    newAxisMask,\n    shrinkAxisMask\n  } = attrs;\n\n  const {\n    finalShapeSparse,\n    finalShape,\n    isIdentity,\n    sliceDim0,\n    isSimpleSlice,\n    begin: $begin,\n    end: $end,\n    strides: $strides\n  } =\n      slice_util.sliceInfo(\n          x.shape, begin, end, strides, beginMask, endMask, ellipsisMask,\n          newAxisMask, shrinkAxisMask);\n\n  let result;\n\n  if (isIdentity) {\n    // Optimization #1, slice is a no-op plus reshape\n    result = reshape({inputs: {x}, backend, attrs: {shape: finalShape}});\n  } else if (sliceDim0 || isSimpleSlice) {\n    // Optimization #2, slice is memory contiguous (only occurs in dim 0)\n    util.assert(\n        x.shape.length >= 1,\n        () => `Input must have rank at least 1, got: ${x.shape.length}`);\n\n    const size = slice_util.computeOutShape($begin, $end, $strides);\n    // To tolerate begin[0] > end[0] (a 0-output slice), we min(begin, end).\n    const sliced = slice({inputs: {x}, backend, attrs: {begin: $begin, size}});\n    result =\n        reshape({inputs: {x: sliced}, backend, attrs: {shape: finalShape}});\n    backend.disposeIntermediateTensorInfo(sliced);\n  } else {\n    const shouldExecuteOnCPU = backend.shouldExecuteOnCPU([x]);\n    if (shouldExecuteOnCPU) {\n      // tslint:disable-next-line: no-unnecessary-type-assertion\n      const values = backend.readSync(x.dataId) as TypedArray;\n      // tslint:disable-next-line: no-unnecessary-type-assertion\n      const xBuf = buffer(x.shape, x.dtype, values) as TensorBuffer<Rank>;\n      const resultValues =\n          stridedSliceImplCPU(finalShapeSparse, xBuf, $strides, $begin);\n      result = backend.makeTensorInfo(finalShape, x.dtype, resultValues.values);\n    } else {\n      const program =\n          new StridedSliceProgram($begin, $strides, finalShapeSparse);\n      result = backend.runWebGLProgram(program, [x], x.dtype);\n    }\n  }\n\n  const resultReshaped =\n      reshape({inputs: {x: result}, backend, attrs: {shape: finalShape}});\n\n  backend.disposeIntermediateTensorInfo(result);\n\n  return resultReshaped;\n}\n\nexport const stridedSliceConfig: KernelConfig = {\n  kernelName: StridedSlice,\n  backendName: 'webgl',\n  kernelFunc: stridedSlice as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringNGrams, StringNGramsAttrs, StringNGramsInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {stringNGramsImplCPU} from '../kernel_utils/shared';\n\nexport function stringNGrams(args: {\n  inputs: StringNGramsInputs,\n  backend: MathBackendWebGL,\n  attrs: StringNGramsAttrs\n}): [TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {\n    separator,\n    nGramWidths,\n    leftPad,\n    rightPad,\n    padWidth,\n    preserveShortSequences\n  } = attrs;\n  const {data, dataSplits} = inputs;\n  const $data = backend.readSync(data.dataId) as Uint8Array[];\n  const $dataSplits = backend.readSync(dataSplits.dataId) as Int32Array;\n\n  const [nGrams, nGramsSplits] = stringNGramsImplCPU(\n      $data, $dataSplits, separator, nGramWidths, leftPad, rightPad, padWidth,\n      preserveShortSequences);\n  return [\n    backend.makeTensorInfo([nGrams.length], 'string', nGrams),\n    backend.makeTensorInfo(dataSplits.shape, 'int32', nGramsSplits),\n  ];\n}\n\nexport const stringNGramsConfig: KernelConfig = {\n  kernelName: StringNGrams,\n  backendName: 'webgl',\n  kernelFunc: stringNGrams as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringSplit, StringSplitAttrs, StringSplitInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {stringSplitImplCPU} from '../kernel_utils/shared';\n\nexport function stringSplit(args: {\n  inputs: StringSplitInputs,\n  backend: MathBackendWebGL,\n  attrs: StringSplitAttrs\n}): [TensorInfo, TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {skipEmpty} = attrs;\n  const {input, delimiter} = inputs;\n\n  if (input.dtype !== 'string') {\n    throw new Error('Input must be of datatype string');\n  }\n  if (input.shape.length !== 1) {\n    throw new Error(`Input must be a vector, got shape: ${input.shape}`);\n  }\n  if (delimiter.shape.length !== 0) {\n    throw new Error(\n        `Delimiter must be a scalar, got shape: ${delimiter.shape}`);\n  }\n\n  const $input = backend.readSync(input.dataId) as Uint8Array[];\n  const $delimiter = backend.readSync(delimiter.dataId)[0] as Uint8Array;\n\n  const [indices, values, shape] =\n      stringSplitImplCPU($input, $delimiter, skipEmpty);\n  const outputSize = values.length;\n  return [\n    backend.makeTensorInfo([outputSize, 2], 'int32', indices),\n    backend.makeTensorInfo([outputSize], 'string', values),\n    backend.makeTensorInfo([2], 'int32', new Int32Array(shape))\n  ];\n}\n\nexport const stringSplitConfig: KernelConfig = {\n  kernelName: StringSplit,\n  backendName: 'webgl',\n  kernelFunc: stringSplit as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringToHashBucketFast, StringToHashBucketFastAttrs, StringToHashBucketFastInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {stringToHashBucketFastImplCPU} from '../kernel_utils/shared';\n\nexport function stringToHashBucketFast(args: {\n  inputs: StringToHashBucketFastInputs,\n  backend: MathBackendWebGL,\n  attrs: StringToHashBucketFastAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {numBuckets} = attrs;\n  const {input} = inputs;\n\n  if (input.dtype !== 'string') {\n    throw new Error('Input must be of datatype string');\n  }\n  if (numBuckets <= 0) {\n    throw new Error(`Number of buckets must be at least 1`);\n  }\n\n  const $input = backend.readSync(input.dataId) as Uint8Array[];\n\n  const output = stringToHashBucketFastImplCPU($input, numBuckets);\n  return backend.makeTensorInfo(input.shape, 'int32', output);\n}\n\nexport const stringToHashBucketFastConfig: KernelConfig = {\n  kernelName: StringToHashBucketFast,\n  backendName: 'webgl',\n  kernelFunc: stringToHashBucketFast as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Tan} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst TAN = `return tan(x);`;\n\nexport const tan = unaryKernelFunc({opSnippet: TAN});\n\nexport const tanConfig: KernelConfig = {\n  kernelName: Tan,\n  backendName: 'webgl',\n  kernelFunc: tan,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Tanh} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst TANH = `\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n`;\n\nexport const tanh = unaryKernelFunc({opSnippet: TANH});\n\nexport const tanhConfig: KernelConfig = {\n  kernelName: Tanh,\n  backendName: 'webgl',\n  kernelFunc: tanh,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class TileProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n\n  constructor(aShape: number[], reps: number[]) {\n    const outputShape: number[] = new Array(aShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[i] * reps[i];\n    }\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    const dtype = getCoordsDataType(this.rank);\n    const sourceCoords = getSourceCoords(aShape);\n\n    this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        setOutput(getA(${sourceCoords}));\n      }\n    `;\n  }\n}\n\nfunction getSourceCoords(aShape: number[]): string {\n  const rank = aShape.length;\n  if (rank > 5) {\n    throw Error(`Tile for rank ${rank} is not yet supported`);\n  }\n  if (rank === 1) {\n    return `imod(resRC, ${aShape[0]})`;\n  }\n\n  const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w', 'resRC.u'];\n\n  const sourceCoords = [];\n  for (let i = 0; i < aShape.length; i++) {\n    sourceCoords.push(`imod(${currentCoords[i]}, ${aShape[i]})`);\n  }\n  return sourceCoords.join();\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, KernelConfig, KernelFunc, TensorInfo, Tile, TileAttrs, TileInputs, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {tileImplCPU} from '../kernel_utils/shared';\nimport {TileProgram} from '../tile_gpu';\n\nexport function tile(\n    params: {inputs: TileInputs, backend: MathBackendWebGL, attrs: TileAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = params;\n  const {x} = inputs;\n  const {reps} = attrs;\n\n  // tile gpu program cannot handle rank > 5 case.\n  if (x.dtype === 'string' || x.shape.length > 5) {\n    // Even thought string tensor is always on CPU, just to be consistent on how\n    // to access tensor data.\n    const data = backend.readSync(x.dataId);\n    const value = x.dtype === 'string' ?\n        (data as Uint8Array[]).map(d => util.decodeString(d)) :\n        data as TypedArray;\n    const buf = buffer(x.shape, x.dtype, value);\n    const outBuf = tileImplCPU(buf, reps);\n    return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n  }\n\n  const program = new TileProgram(x.shape, reps);\n  const output = backend.runWebGLProgram(program, [x], x.dtype);\n\n  return output;\n}\n\nexport const tileConfig: KernelConfig = {\n  kernelName: Tile,\n  backendName: 'webgl',\n  kernelFunc: tile as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {GPGPUProgram} from './gpgpu_math';\nimport {UniformType} from './shader_compiler';\n\n// Based on Algorithm 2 of Bitonic Top K, ref:\n// https://anilshanbhag.in/static/papers/gputopk_sigmod18.pdf\n// The original algorithm is based on computing the top K only, however\n// since for TFJS we require the indices of the top K values as well then the\n// algorithm found here is a bit modified. Rather than producing the values\n// at each step, the indices containing the top K are generated instead.\n// The output values are not generated to reduce the number of outputs in the\n// GPU, the values can easily be retrieved from the indices using a gather\n// op.\nexport class SwapProgram implements GPGPUProgram {\n  variableNames = ['x', 'indices'];\n  outputShape: number[];\n  userCode: string;\n  // |n| Size of the original input of TopK.\n  // |firstPass|indicates if this is the first time swap is being used which\n  // means no indices input containing the top K is present yet.\n  // |inc| Swaps pairs of indices (0, inc), (1, inc + 1), (2, inc + 2) ...\n  customUniforms = [\n    {name: 'n', type: 'int' as UniformType},\n    {name: 'firstPass', type: 'int' as UniformType},\n    {name: 'negativeInf', type: 'float' as UniformType},\n    {name: 'dir', type: 'int' as UniformType},\n    {name: 'inc', type: 'int' as UniformType}\n  ];\n\n  /**\n   * @param shape desired output shape (can be larger than input shape, output\n   *                                    will be padded with -Infinity)\n   */\n  constructor(shape: number[]) {\n    this.outputShape = shape;\n\n    this.userCode = `\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // We compare elements pair-wise within a group of size 2 * inc.\n         // The comparing rule for each group alternates between ascending\n         // and descending. Within each group, we compare each pair at\n         // positions i and i+inc. To decide whether an element at position i\n         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than\n         // inc, it is in the first half of the group, we denote it as x0,\n         // otherwise we denote it as x1.\n         // For example, as shown in the Bitonic top K paper referenced above,\n         // Figure5(a) shows that element[1] is in the\n         // second half of the group when group size is 2, but it is in the\n         // first half of the group when group size is 4.\n\n         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;\n         int i = isFirstInPair ? elemIdx : elemIdx - inc;\n\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));\n         float x0 = i0 < n ? getX(batch, i0) : negativeInf;\n         float x1 = i1 < n ? getX(batch, i1) : negativeInf;\n\n         // Denotes which direction indices are in (ascending or descending).\n         bool reverse = imod(elemIdx, 2 * dir) >= dir;\n         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);\n         if (reverse == isGreater) { // Elements in opposite order of direction\n           int iTemp = i0;\n           i0 = i1;\n           i1 = iTemp;\n         }\n         if (isFirstInPair) {\n            setOutput(float(i0));\n         } else {\n            setOutput(float(i1));\n         }\n       }\n     `;\n  }\n}\n\nexport class MergeProgram implements GPGPUProgram {\n  variableNames = ['x', 'indices'];\n  outputShape: number[];\n  userCode: string;\n  // |n| Size of the original input of TopK\n  // |firstPass| indicates if this is the first time swap is being used which\n  // means no indices input containing the top K is present yet.\n  // |k| Top k elements desired\n  customUniforms = [\n    {name: 'n', type: 'int' as UniformType},\n    {name: 'firstPass', type: 'int' as UniformType},\n    {name: 'k', type: 'int' as UniformType}\n  ];\n\n  /**\n   * @param shape desired output shape (must be half of the input size)\n   */\n  constructor(shape: number[]) {\n    this.outputShape = shape;\n\n    this.userCode = `\n    void main() {\n         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // The output size is half of the previous size.\n         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),\n         // we only need to output the indices at positions |, the indices at\n         // positions _ can be thrown away, see Figure5(b) After Phase 2\n         // (Merge phase) in the Bitonic Top K paper referenced above.\n         // For example, the paper shows we only need to output the orange bars.\n         // The output sequence should look like this | | | | | | | |.\n         // Because the sequence is halved, to map the output index back\n         // to the previous sequence to find the corresponding value,\n         // we need to double the index. When we double the index,\n         // we basically interpolate a position, so 2i looks like\n         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position\n         // of each 2k positions by - elemIdx % k. E.g. for output at\n         // index 4,5,6,7, we want to get the corresponding element at\n         // original index 8,9,10,11, for output at index 8,9,10,11,\n         // we want to get the corresponding element at original index\n         // 16,17,18,19, so on and so forth.\n\n         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));\n\n         float x0 = getX(batch, i0);\n         float x1 = i1 < n ? getX(batch, i1) : x0;\n\n         setOutput(x0 >= x1 ? float(i0) : float(i1));\n       }\n     `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, NumericDataType, TensorInfo, TopK, TopKAttrs, TopKInputs, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {topKImplCPU} from '../kernel_utils/shared';\nimport {MergeProgram, SwapProgram} from '../top_k_gpu';\nimport {fill} from './Fill';\nimport {gatherV2} from './GatherV2';\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\n\nfunction disposeIntermediateTensorInfoOrNull(\n    backend: MathBackendWebGL, tensorInfo: TensorInfo) {\n  if (tensorInfo !== null) {\n    backend.disposeIntermediateTensorInfo(tensorInfo);\n  }\n}\n\nfunction roundUpToPow2(num: number) {\n  let pow2 = 1;\n  while (pow2 < num) {\n    pow2 *= 2;\n  }\n  return pow2;\n}\n\n// Based on Algorithm 2 of Bitonic Top K, ref:\n// https://anilshanbhag.in/static/papers/gputopk_sigmod18.pdf\nexport function topK(\n    args: {inputs: TopKInputs, backend: MathBackendWebGL, attrs: TopKAttrs}):\n    TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {k, sorted} = attrs;\n\n  // Empirically determined constant used to determine last dim threshold for\n  // handing off execution to the CPU.\n  const TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD =\n      env().getNumber('TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD');\n\n  // Empirically determined constant used to determine k threshold for handing\n  // off execution to the CPU.\n  const TOPK_K_CPU_HANDOFF_THRESHOLD =\n      env().getNumber('TOPK_K_CPU_HANDOFF_THRESHOLD');\n\n  const xShape = x.shape;\n  const lastDim = xShape[xShape.length - 1];\n\n  if (backend.shouldExecuteOnCPU([x]) ||\n      lastDim < TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD ||\n      k > TOPK_K_CPU_HANDOFF_THRESHOLD) {\n    const xVals = backend.readSync(x.dataId) as TypedArray;\n    const [allTopKVals, allTopKIndices] =\n        topKImplCPU(xVals, xShape, x.dtype as NumericDataType, k, sorted);\n\n    return [\n      backend.makeTensorInfo(\n          allTopKVals.shape, allTopKVals.dtype, allTopKVals.values),\n      backend.makeTensorInfo(\n          allTopKIndices.shape, allTopKIndices.dtype, allTopKIndices.values)\n    ];\n  }\n\n  if (k === 0) {\n    xShape[xShape.length - 1] = 0;\n    return [\n      backend.makeTensorInfo(xShape, x.dtype, []),\n      backend.makeTensorInfo(xShape, 'int32', [])\n    ];\n  }\n\n  if (lastDim === 1 /* firstPass */) {\n    return [\n      x, fill({attrs: {shape: xShape, dtype: 'int32', value: 0}, backend})\n    ];\n  }\n\n  // Eagerly unpack x input since it is passed in to all the shaders which\n  // require unpacked inputs.\n  const xtexData = backend.texData.get(x.dataId);\n  const xIsPacked = xtexData !== null && xtexData.isPacked;\n  const xUnPacked = xIsPacked ? backend.unpackTensor(x) : x;\n\n  // Reshape into a 2d tensor [batch, lastDim] and compute topk along lastDim.\n  const xSize = util.sizeFromShape(xShape);\n  const batch = xSize / lastDim;\n  const x2D = reshape(\n      {inputs: {x: xUnPacked}, attrs: {shape: [batch, lastDim]}, backend});\n\n  if (xIsPacked) {\n    disposeIntermediateTensorInfoOrNull(backend, xUnPacked);\n  }\n\n  const kPow2 = roundUpToPow2(k);\n  const lastDimPow2 = roundUpToPow2(lastDim);\n\n  // Only the indices containing the top K are kept at every step to reduce\n  // number of outputs in the GPU algorithms, so once the final set of indices\n  // is computed then gather is used to grab the corresponding values\n  // from the original input.\n  let indices: TensorInfo = null;\n\n  // GPU algorithm always takes in an indices input but this input is not used\n  // on the first run of a GPU algorithm, therefore if indices is null we simply\n  // pass in x2D instead of it but the value will not actually be used\n  const getInputs = () => indices === null ? [x2D, x2D] : [x2D, indices];\n\n  const runSwap = (dir: number, inc: number, shape: number[]) => {\n    const inputs = getInputs();\n    const program = new SwapProgram(shape);\n    const fistPass = indices === null ? 1 : 0;\n    const customValues =\n        [[lastDim], [fistPass], [Number.NEGATIVE_INFINITY], [dir], [inc]];\n    const prevIndices = indices;\n    indices = backend.runWebGLProgram(program, inputs, 'int32', customValues);\n    disposeIntermediateTensorInfoOrNull(backend, prevIndices);\n  };\n\n  // Step 1: local sort\n  for (let len = 1; len < kPow2; len *= 2) {\n    const dir = len * 2;\n    for (let inc = len; inc >= 1; inc /= 2) {\n      runSwap(dir, inc, [batch, lastDimPow2]);\n    }\n  }\n\n  // Step 2: merge\n  for (let indicesSize = lastDimPow2; indicesSize > kPow2; indicesSize /= 2) {\n    const inputs = getInputs();\n    const mergeProgram = new MergeProgram([batch, indicesSize / 2]);\n    const firstPass = indices === null ? 1 : 0;\n    const customValues = [[lastDim], [firstPass], [kPow2]];\n    const prevIndices = indices;\n    indices =\n        backend.runWebGLProgram(mergeProgram, inputs, 'int32', customValues);\n    disposeIntermediateTensorInfoOrNull(backend, prevIndices);\n\n    // Step 3: rebuild\n    const len = kPow2 / 2;\n    const dir = len * 2;\n    for (let inc = len; inc >= 1; inc /= 2) {\n      runSwap(dir, inc, indices.shape);\n    }\n  }\n\n  // Keep only the requested top K results instead of kPow2\n  let prevIndices = indices;\n  indices = slice(\n      {inputs: {x: indices}, backend, attrs: {begin: 0, size: [batch, k]}});\n  disposeIntermediateTensorInfoOrNull(backend, prevIndices);\n\n  // Gather values on last dimension\n  let values = gatherV2(\n      {inputs: {x: x2D, indices}, backend, attrs: {axis: 1, batchDims: 1}});\n  disposeIntermediateTensorInfoOrNull(backend, x2D);\n\n  // Reshape back to the original input shape, except that the last\n  // dimension is k.\n  const newShape = xShape.slice(0, -1);\n  newShape.push(k);\n\n  prevIndices = indices;\n  indices = reshape({inputs: {x: indices}, attrs: {shape: newShape}, backend});\n  disposeIntermediateTensorInfoOrNull(backend, prevIndices);\n\n  const prevValues = values;\n  values = reshape({inputs: {x: values}, attrs: {shape: newShape}, backend});\n  disposeIntermediateTensorInfoOrNull(backend, prevValues);\n\n  return [values, indices];\n}\n\nexport const topKConfig: KernelConfig = {\n  kernelName: TopK,\n  backendName: 'webgl',\n  kernelFunc: topK as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class TransformProgram implements GPGPUProgram {\n  variableNames = ['Image', 'Transforms'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      imageHeight: number, imageWidth: number,\n      interpolation: 'nearest'|'bilinear',\n      fillMode: 'constant'|'reflect'|'wrap'|'nearest', fillValue: number,\n      outShape: [number, number, number, number]) {\n    this.outputShape = outShape;\n    const interpolationModeId = interpolation === 'nearest' ? 1 : 2;\n    let fillModeId;\n    switch (fillMode) {\n      case 'constant':\n        fillModeId = 1;\n        break;\n      case 'reflect':\n        fillModeId = 2;\n        break;\n      case 'wrap':\n        fillModeId = 3;\n        break;\n      case 'nearest':\n        fillModeId = 4;\n        break;\n      default:\n        fillModeId = 1;\n        break;\n    }\n    this.userCode = `\n            float mapCoord(float outCoord, float len) {\n              float inCoord = outCoord;\n              if(${fillModeId} == 2) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    if (inCoord < sz2) {\n                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +\n                      inCoord;\n                    }\n                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    inCoord -= sz2 * float(int(float(inCoord / sz2)));\n                    if (inCoord >= len) {\n                      inCoord = sz2 - inCoord - 1.0;\n                    }\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${fillModeId} == 3) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord -= len * float(int(float(inCoord / sz)));\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${fillModeId} == 4) {\n                return clamp(outCoord, 0.0, len - 1.0);\n              } else {\n                return outCoord;\n              }\n            }\n\n            float readWithFillValue(int batch, int coordY, int coordX,\n              int channel) {\n              float outputValue;\n              if (0 <= coordY && coordY < ${\n        imageHeight} && 0 <= coordX && coordX < ${imageWidth}) {\n                  outputValue = getImage(batch, coordY, coordX, channel);\n              } else {\n                outputValue = float(${fillValue});\n              }\n              return outputValue;\n            }\n\n            void main() {\n              ivec4 coords = getOutputCoords();\n              float outputValue;\n              int batch = coords[0];\n              int x = coords[2];\n              int y = coords[1];\n              int channel = coords[3];\n              float xf = float(x);\n              float yf = float(y);\n              float a1 = getTransforms(batch, 0);\n              float a2 = getTransforms(batch, 1);\n              float a3 = getTransforms(batch, 2);\n              float b1 = getTransforms(batch, 3);\n              float b2 = getTransforms(batch, 4);\n              float b3 = getTransforms(batch, 5);\n              float c1 = getTransforms(batch, 6);\n              float c2 = getTransforms(batch, 7);\n              float projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = float(${fillValue});\n              } else {\n                float inX = (a1 * xf + a2 * yf + a3) / projection;\n                float inY = (b1 * xf + b2 * yf + b3) / projection;\n                float mapX = mapCoord(inX, float(${imageWidth}));\n                float mapY = mapCoord(inY, float(${imageHeight}));\n\n                if (${interpolationModeId} == 1) {\n                  int coordY = int(round(mapY));\n                  int coordX = int(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  float yFloor = floor(mapY);\n                  float xFloor = floor(mapX);\n                  float yCeil = yFloor + 1.0;\n                  float xCeil = xFloor + 1.0;\n                  float valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);\n                  float valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutput(outputValue);\n            }\n        `;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Transform, TransformAttrs, TransformInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {TransformProgram} from '../transform_gpu';\n\nexport function transform(args: {\n  inputs: TransformInputs,\n  backend: MathBackendWebGL,\n  attrs: TransformAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {image, transforms} = inputs;\n  const {interpolation, fillMode, fillValue, outputShape} = attrs;\n\n  const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n  const [outHeight, outWidth] =\n      outputShape != null ? outputShape : [imageHeight, imageWidth];\n  const outShape =\n      [batch, outHeight, outWidth,\n       numChannels] as [number, number, number, number];\n\n  const program = new TransformProgram(\n      imageHeight, imageWidth, interpolation, fillMode, fillValue, outShape);\n  return backend.runWebGLProgram(program, [image, transforms], 'float32');\n}\n\nexport const transformConfig: KernelConfig = {\n  kernelName: Transform,\n  backendName: 'webgl',\n  kernelFunc: transform as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Unique, UniqueAttrs, UniqueInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {uniqueImplCPU} from '../kernel_utils/shared';\nimport {assertNotComplex} from '../webgl_util';\n\nexport function unique(\n    args:\n        {inputs: UniqueInputs, attrs: UniqueAttrs, backend: MathBackendWebGL}):\n    TensorInfo[] {\n  const {inputs, attrs, backend} = args;\n  const {axis} = attrs;\n  const {x} = inputs;\n  assertNotComplex(x, 'unique');\n\n  // For now, always forward calculation to the CPU backend.\n  console.warn(\n      'WARNING: ',\n      'UI might be locked temporarily as data is being downloaded');\n  const values = backend.readSync(x.dataId);\n  const {outputValues, outputShape, indices} =\n      uniqueImplCPU(values, axis, x.shape, x.dtype);\n  return [\n    backend.makeTensorInfo(outputShape, x.dtype, outputValues),\n    backend.makeTensorInfo([indices.length], 'int32', indices),\n  ];\n}\n\nexport const uniqueConfig: KernelConfig = {\n  kernelName: Unique,\n  backendName: 'webgl',\n  kernelFunc: unique as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Unpack, UnpackAttrs, UnpackInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\n\nexport function unpack(\n    args:\n        {inputs: UnpackInputs, backend: MathBackendWebGL, attrs: UnpackAttrs}):\n    TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {value} = inputs;\n  let {axis} = attrs;\n\n  if (axis < 0) {\n    axis += value.shape.length;\n  }\n\n  const x = value;\n  const xRank = x.shape.length;\n\n  const num = value.shape[axis];\n  const outShape: number[] = new Array(xRank - 1);\n  let outIndex = 0;\n  for (let i = 0; i < xRank; i++) {\n    if (i !== axis) {\n      outShape[outIndex++] = x.shape[i];\n    }\n  }\n\n  const toDispose = [];\n\n  const begin = new Array(xRank).fill(0);\n  const size = x.shape.slice();\n  size[axis] = 1;\n  const res: TensorInfo[] = new Array(num);\n  for (let i = 0; i < res.length; i++) {\n    begin[axis] = i;\n    const sliced = slice({inputs: {x}, backend, attrs: {begin, size}});\n    const reshaped =\n        reshape({inputs: {x: sliced}, backend, attrs: {shape: outShape}});\n    res[i] = reshaped;\n\n    toDispose.push(sliced);\n  }\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return res;\n}\n\nexport const unpackConfig: KernelConfig = {\n  kernelName: Unpack,\n  backendName: 'webgl',\n  kernelFunc: unpack as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class SegmentOpProgram implements GPGPUProgram {\n  variableNames = ['x', 'segmentIds'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      segOpInfo: backend_util.segment_util.SegOpInfo,\n      segOpType: 'unsortedSegmentSum') {\n    const windowSize = segOpInfo.windowSize;\n    const batchSize = segOpInfo.batchSize;\n    const inSize = segOpInfo.inSize;\n    const numSegments = segOpInfo.numSegments;\n    const outSize = numSegments * Math.ceil(inSize / windowSize);\n    this.outputShape = [batchSize, outSize];\n\n    const initializationValue = '0.0';\n    const returnValue = `sumValue`;\n\n    const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;\n    const windowSizeVec4Remainder = windowSize % 4;\n\n    const updateSnippet = `\n        sumValue += dot(values, segFilter);\n    `;\n\n    let checkValueOutOfBounds = '';\n    if (inSize % windowSize > 0) {\n      checkValueOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return initializationValue;\n        }\n      `;\n    }\n\n    let checkSegmentIdOutOfBounds = '';\n    if (inSize % windowSize > 0) {\n      checkSegmentIdOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return -1.0;\n        }\n      `;\n    }\n\n    this.userCode = `\n      const float initializationValue = ${initializationValue};\n\n      float getValue(int batch, int inIdx) {\n        ${checkValueOutOfBounds}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${checkSegmentIdOutOfBounds}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${numSegments})) * float(${windowSize}));\n        int currentSeg = int(mod(float(outIdx), float(${numSegments})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${updateSnippet}\n        }\n\n        int inIdx = inOffset + ${windowSizeNearestVec4};\n        if (${windowSizeVec4Remainder === 1}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 2}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 3}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${updateSnippet}\n        }\n        setOutput(${returnValue});\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {KernelConfig, registerKernel} from '@tensorflow/tfjs-core';\n\nimport {_fusedMatMulConfig} from './kernels/_FusedMatMul';\nimport {absConfig} from './kernels/Abs';\nimport {acosConfig} from './kernels/Acos';\nimport {acoshConfig} from './kernels/Acosh';\nimport {addConfig} from './kernels/Add';\nimport {addNConfig} from './kernels/AddN';\nimport {allConfig} from './kernels/All';\nimport {anyConfig} from './kernels/Any';\nimport {argMaxConfig} from './kernels/ArgMax';\nimport {argMinConfig} from './kernels/ArgMin';\nimport {asinConfig} from './kernels/Asin';\nimport {asinhConfig} from './kernels/Asinh';\nimport {atanConfig} from './kernels/Atan';\nimport {atan2Config} from './kernels/Atan2';\nimport {atanhConfig} from './kernels/Atanh';\nimport {avgPoolConfig} from './kernels/AvgPool';\nimport {avgPool3DConfig} from './kernels/AvgPool3D';\nimport {avgPool3DGradConfig} from './kernels/AvgPool3DGrad';\nimport {avgPoolGradConfig} from './kernels/AvgPoolGrad';\nimport {batchMatMulConfig} from './kernels/BatchMatMul';\nimport {batchNormConfig} from './kernels/BatchNorm';\nimport {batchToSpaceNDConfig} from './kernels/BatchToSpaceND';\nimport {bincountConfig} from './kernels/Bincount';\nimport {broadcastArgsConfig} from './kernels/BroadcastArgs';\nimport {castConfig} from './kernels/Cast';\nimport {ceilConfig} from './kernels/Ceil';\nimport {clipByValueConfig} from './kernels/ClipByValue';\nimport {complexConfig} from './kernels/Complex';\nimport {complexAbsConfig} from './kernels/ComplexAbs';\nimport {concatConfig} from './kernels/Concat';\nimport {conv2DConfig} from './kernels/Conv2D';\nimport {conv2DBackpropFilterConfig} from './kernels/Conv2DBackpropFilter';\nimport {conv2DBackpropInputConfig} from './kernels/Conv2DBackpropInput';\nimport {conv3DConfig} from './kernels/Conv3D';\nimport {conv3DBackpropFilterV2Config} from './kernels/Conv3DBackpropFilterV2';\nimport {conv3DBackpropInputConfig} from './kernels/Conv3DBackpropInputV2';\nimport {cosConfig} from './kernels/Cos';\nimport {coshConfig} from './kernels/Cosh';\nimport {cropAndResizeConfig} from './kernels/CropAndResize';\nimport {cumprodConfig} from './kernels/Cumprod';\nimport {cumsumConfig} from './kernels/Cumsum';\nimport {denseBincountConfig} from './kernels/DenseBincount';\nimport {depthToSpaceConfig} from './kernels/DepthToSpace';\nimport {depthwiseConv2dNativeConfig} from './kernels/DepthwiseConv2dNative';\nimport {depthwiseConv2dNativeBackpropFilterConfig} from './kernels/DepthwiseConv2dNativeBackpropFilter';\nimport {depthwiseConv2dNativeBackpropInputConfig} from './kernels/DepthwiseConv2dNativeBackpropInput';\nimport {diagConfig} from './kernels/Diag';\nimport {dilation2DConfig} from './kernels/Dilation2D';\nimport {einsumConfig} from './kernels/Einsum';\nimport {eluConfig} from './kernels/Elu';\nimport {eluGradConfig} from './kernels/EluGrad';\nimport {equalConfig} from './kernels/Equal';\nimport {erfConfig} from './kernels/Erf';\nimport {expConfig} from './kernels/Exp';\nimport {expandDimsConfig} from './kernels/ExpandDims';\nimport {expm1Config} from './kernels/Expm1';\nimport {fftConfig} from './kernels/FFT';\nimport {fillConfig} from './kernels/Fill';\nimport {flipLeftRightConfig} from './kernels/FlipLeftRight';\nimport {floorConfig} from './kernels/Floor';\nimport {floorDivConfig} from './kernels/FloorDiv';\nimport {fromPixelsConfig} from './kernels/FromPixels';\nimport {fusedConv2DConfig} from './kernels/FusedConv2D';\nimport {fusedDepthwiseConv2DConfig} from './kernels/FusedDepthwiseConv2D';\nimport {gatherNdConfig} from './kernels/GatherNd';\nimport {gatherV2Config} from './kernels/GatherV2';\nimport {greaterConfig} from './kernels/Greater';\nimport {greaterEqualConfig} from './kernels/GreaterEqual';\nimport {identityConfig} from './kernels/Identity';\nimport {ifftConfig} from './kernels/IFFT';\nimport {imagConfig} from './kernels/Imag';\nimport {isFiniteConfig} from './kernels/IsFinite';\nimport {isInfConfig} from './kernels/IsInf';\nimport {isNaNConfig} from './kernels/IsNaN';\nimport {leakyReluConfig} from './kernels/LeakyRelu';\nimport {lessConfig} from './kernels/Less';\nimport {lessEqualConfig} from './kernels/LessEqual';\nimport {linSpaceConfig} from './kernels/LinSpace';\nimport {logConfig} from './kernels/Log';\nimport {log1pConfig} from './kernels/Log1p';\nimport {logicalAndConfig} from './kernels/LogicalAnd';\nimport {logicalNotConfig} from './kernels/LogicalNot';\nimport {logicalOrConfig} from './kernels/LogicalOr';\nimport {LRNConfig} from './kernels/LRN';\nimport {LRNGradConfig} from './kernels/LRNGrad';\nimport {maxConfig} from './kernels/Max';\nimport {maximumConfig} from './kernels/Maximum';\nimport {maxPoolConfig} from './kernels/MaxPool';\nimport {maxPool3DConfig} from './kernels/MaxPool3D';\nimport {maxPool3DGradConfig} from './kernels/MaxPool3DGrad';\nimport {maxPoolGradConfig} from './kernels/MaxPoolGrad';\nimport {maxPoolWithArgmaxConfig} from './kernels/MaxPoolWithArgmax';\nimport {meanConfig} from './kernels/Mean';\nimport {minConfig} from './kernels/Min';\nimport {minimumConfig} from './kernels/Minimum';\nimport {mirrorPadConfig} from './kernels/MirrorPad';\nimport {modConfig} from './kernels/Mod';\nimport {multinomialConfig} from './kernels/Multinomial';\nimport {multiplyConfig} from './kernels/Multiply';\nimport {negConfig} from './kernels/Neg';\nimport {nonMaxSuppressionV3Config} from './kernels/NonMaxSuppressionV3';\nimport {nonMaxSuppressionV4Config} from './kernels/NonMaxSuppressionV4';\nimport {nonMaxSuppressionV5Config} from './kernels/NonMaxSuppressionV5';\nimport {notEqualConfig} from './kernels/NotEqual';\nimport {oneHotConfig} from './kernels/OneHot';\nimport {onesLikeConfig} from './kernels/OnesLike';\nimport {packConfig} from './kernels/Pack';\nimport {padV2Config} from './kernels/PadV2';\nimport {powConfig} from './kernels/Pow';\nimport {preluConfig} from './kernels/Prelu';\nimport {prodConfig} from './kernels/Prod';\nimport {raggedGatherConfig} from './kernels/RaggedGather';\nimport {raggedRangeConfig} from './kernels/RaggedRange';\nimport {raggedTensorToTensorConfig} from './kernels/RaggedTensorToTensor';\nimport {rangeConfig} from './kernels/Range';\nimport {realConfig} from './kernels/Real';\nimport {realDivConfig} from './kernels/RealDiv';\nimport {reciprocalConfig} from './kernels/Reciprocal';\nimport {reluConfig} from './kernels/Relu';\nimport {relu6Config} from './kernels/Relu6';\nimport {reshapeConfig} from './kernels/Reshape';\nimport {resizeBilinearConfig} from './kernels/ResizeBilinear';\nimport {resizeBilinearGradConfig} from './kernels/ResizeBilinearGrad';\nimport {resizeNearestNeighborConfig} from './kernels/ResizeNearestNeighbor';\nimport {resizeNearestNeighborGradConfig} from './kernels/ResizeNearestNeighborGrad';\nimport {reverseConfig} from './kernels/Reverse';\nimport {rotateWithOffsetConfig} from './kernels/RotateWithOffset';\nimport {roundConfig} from './kernels/Round';\nimport {rsqrtConfig} from './kernels/Rsqrt';\nimport {scatterNdConfig} from './kernels/ScatterNd';\nimport {searchSortedConfig} from './kernels/SearchSorted';\nimport {selectConfig} from './kernels/Select';\nimport {seluConfig} from './kernels/Selu';\nimport {sigmoidConfig} from './kernels/Sigmoid';\nimport {signConfig} from './kernels/Sign';\nimport {sinConfig} from './kernels/Sin';\nimport {sinhConfig} from './kernels/Sinh';\nimport {sliceConfig} from './kernels/Slice';\nimport {softmaxConfig} from './kernels/Softmax';\nimport {softplusConfig} from './kernels/Softplus';\nimport {spaceToBatchNDConfig} from './kernels/SpaceToBatchND';\nimport {sparseFillEmptyRowsConfig} from './kernels/SparseFillEmptyRows';\nimport {sparseReshapeConfig} from './kernels/SparseReshape';\nimport {sparseSegmentMeanConfig} from './kernels/SparseSegmentMean';\nimport {sparseSegmentSumConfig} from './kernels/SparseSegmentSum';\nimport {sparseToDenseConfig} from './kernels/SparseToDense';\nimport {splitVConfig} from './kernels/SplitV';\nimport {sqrtConfig} from './kernels/Sqrt';\nimport {squareConfig} from './kernels/Square';\nimport {squaredDifferenceConfig} from './kernels/SquaredDifference';\nimport {stepConfig} from './kernels/Step';\nimport {stridedSliceConfig} from './kernels/StridedSlice';\nimport {stringNGramsConfig} from './kernels/StringNGrams';\nimport {stringSplitConfig} from './kernels/StringSplit';\nimport {stringToHashBucketFastConfig} from './kernels/StringToHashBucketFast';\nimport {subConfig} from './kernels/Sub';\nimport {sumConfig} from './kernels/Sum';\nimport {tanConfig} from './kernels/Tan';\nimport {tanhConfig} from './kernels/Tanh';\nimport {tileConfig} from './kernels/Tile';\nimport {topKConfig} from './kernels/TopK';\nimport {transformConfig} from './kernels/Transform';\nimport {transposeConfig} from './kernels/Transpose';\nimport {uniqueConfig} from './kernels/Unique';\nimport {unpackConfig} from './kernels/Unpack';\nimport {unsortedSegmentSumConfig} from './kernels/UnsortedSegmentSum';\nimport {zerosLikeConfig} from './kernels/ZerosLike';\n\n// List all kernel configs here\nconst kernelConfigs: KernelConfig[] = [\n  _fusedMatMulConfig,\n  absConfig,\n  acosConfig,\n  acoshConfig,\n  addConfig,\n  addNConfig,\n  allConfig,\n  anyConfig,\n  argMaxConfig,\n  argMinConfig,\n  asinConfig,\n  asinhConfig,\n  atanConfig,\n  atan2Config,\n  atanhConfig,\n  avgPoolConfig,\n  avgPool3DConfig,\n  avgPool3DGradConfig,\n  avgPoolGradConfig,\n  batchMatMulConfig,\n  batchNormConfig,\n  batchToSpaceNDConfig,\n  bincountConfig,\n  broadcastArgsConfig,\n  castConfig,\n  ceilConfig,\n  clipByValueConfig,\n  complexConfig,\n  complexAbsConfig,\n  concatConfig,\n  conv2DConfig,\n  conv2DBackpropFilterConfig,\n  conv2DBackpropInputConfig,\n  conv3DConfig,\n  conv3DBackpropFilterV2Config,\n  conv3DBackpropInputConfig,\n  cosConfig,\n  coshConfig,\n  cropAndResizeConfig,\n  cumprodConfig,\n  cumsumConfig,\n  denseBincountConfig,\n  depthToSpaceConfig,\n  depthwiseConv2dNativeConfig,\n  depthwiseConv2dNativeBackpropFilterConfig,\n  depthwiseConv2dNativeBackpropInputConfig,\n  diagConfig,\n  dilation2DConfig,\n  einsumConfig,\n  eluConfig,\n  eluGradConfig,\n  equalConfig,\n  erfConfig,\n  expConfig,\n  expandDimsConfig,\n  expm1Config,\n  fftConfig,\n  fillConfig,\n  flipLeftRightConfig,\n  floorConfig,\n  floorDivConfig,\n  fromPixelsConfig,\n  fusedConv2DConfig,\n  fusedDepthwiseConv2DConfig,\n  gatherNdConfig,\n  gatherV2Config,\n  greaterConfig,\n  greaterEqualConfig,\n  identityConfig,\n  ifftConfig,\n  imagConfig,\n  isFiniteConfig,\n  isInfConfig,\n  isNaNConfig,\n  leakyReluConfig,\n  lessConfig,\n  lessEqualConfig,\n  linSpaceConfig,\n  logConfig,\n  log1pConfig,\n  logicalAndConfig,\n  logicalNotConfig,\n  logicalOrConfig,\n  LRNConfig,\n  LRNGradConfig,\n  maxConfig,\n  maximumConfig,\n  maxPoolConfig,\n  maxPool3DConfig,\n  maxPool3DGradConfig,\n  maxPoolGradConfig,\n  maxPoolWithArgmaxConfig,\n  meanConfig,\n  minConfig,\n  minimumConfig,\n  mirrorPadConfig,\n  modConfig,\n  multinomialConfig,\n  multiplyConfig,\n  negConfig,\n  nonMaxSuppressionV3Config,\n  nonMaxSuppressionV4Config,\n  nonMaxSuppressionV5Config,\n  notEqualConfig,\n  oneHotConfig,\n  onesLikeConfig,\n  packConfig,\n  padV2Config,\n  powConfig,\n  preluConfig,\n  prodConfig,\n  raggedGatherConfig,\n  raggedRangeConfig,\n  raggedTensorToTensorConfig,\n  rangeConfig,\n  realConfig,\n  realDivConfig,\n  reciprocalConfig,\n  reluConfig,\n  relu6Config,\n  reshapeConfig,\n  resizeBilinearConfig,\n  resizeBilinearGradConfig,\n  resizeNearestNeighborConfig,\n  resizeNearestNeighborGradConfig,\n  reverseConfig,\n  rotateWithOffsetConfig,\n  roundConfig,\n  rsqrtConfig,\n  scatterNdConfig,\n  searchSortedConfig,\n  selectConfig,\n  seluConfig,\n  sigmoidConfig,\n  signConfig,\n  sinConfig,\n  sinhConfig,\n  sliceConfig,\n  softmaxConfig,\n  softplusConfig,\n  spaceToBatchNDConfig,\n  sparseFillEmptyRowsConfig,\n  sparseReshapeConfig,\n  sparseSegmentMeanConfig,\n  sparseSegmentSumConfig,\n  sparseToDenseConfig,\n  splitVConfig,\n  sqrtConfig,\n  squareConfig,\n  squaredDifferenceConfig,\n  stepConfig,\n  stridedSliceConfig,\n  stringNGramsConfig,\n  stringSplitConfig,\n  stringToHashBucketFastConfig,\n  subConfig,\n  sumConfig,\n  tanConfig,\n  tanhConfig,\n  tileConfig,\n  topKConfig,\n  transformConfig,\n  transposeConfig,\n  uniqueConfig,\n  unpackConfig,\n  unsortedSegmentSumConfig,\n  zerosLikeConfig\n];\n\nfor (const kernelConfig of kernelConfigs) {\n  registerKernel(kernelConfig);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, KernelConfig, KernelFunc, sumOutType, TensorInfo, UnsortedSegmentSum, UnsortedSegmentSumAttrs, UnsortedSegmentSumInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {SegmentOpProgram} from '../segment_gpu';\n\nimport {range} from './Range';\nimport {reshape} from './Reshape';\nimport {tile} from './Tile';\nimport {transpose} from './Transpose';\n\nexport function unsortedSegmentSum(args: {\n  inputs: UnsortedSegmentSumInputs,\n  backend: MathBackendWebGL,\n  attrs: UnsortedSegmentSumAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, segmentIds} = inputs;\n  const {numSegments} = attrs;\n\n  const xRank = x.shape.length;\n\n  const toDispose = [];\n\n  let axis = 0;\n  const permutation = backend_util.getAxesPermutation([axis], xRank);\n  let permutedX = x;\n  if (permutation != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutation}});\n    toDispose.push(permutedX);\n    axis = backend_util.getInnerMostAxes(1, xRank)[0];\n  }\n\n  const outShape = backend_util.segment_util.computeOutShape(\n      permutedX.shape, axis, numSegments);\n  const inSize = util.sizeFromShape([permutedX.shape[axis]]);\n  const a2D =\n      reshape({inputs: {x: permutedX}, backend, attrs: {shape: [-1, inSize]}});\n  toDispose.push(a2D);\n\n  const outputDType = sumOutType(x.dtype);\n\n  const segOpCompute =\n      (x: TensorInfo, segOpType: 'unsortedSegmentSum', segmentIds: TensorInfo,\n       dtype: DataType, numSegments: number): TensorInfo => {\n        const batchSize = x.shape[0];\n        const inSize = x.shape[1];\n        const windowSize =\n            backend_util.segment_util.segOpComputeOptimalWindowSize(\n                inSize, numSegments);\n        const segOpInfo = {windowSize, inSize, batchSize, numSegments};\n        const program = new SegmentOpProgram(segOpInfo, segOpType);\n        const output = backend.compileAndRun(program, [x, segmentIds], dtype);\n        toDispose.push(output);\n        // No need to run another GPGPU program.\n        if (output.shape[1] === numSegments) {\n          return output;\n        }\n        const rangeInfo = range({\n          backend,\n          attrs: {start: 0, stop: numSegments, step: 1, dtype: 'float32'}\n        });\n        const tileInfo = tile({\n          inputs: {x: rangeInfo},\n          backend,\n          attrs: {reps: [inSize / windowSize]}\n        });\n\n        toDispose.push(rangeInfo);\n        toDispose.push(tileInfo);\n\n        const result =\n            segOpCompute(output, segOpType, tileInfo, dtype, numSegments);\n        return result;\n      };\n\n  const segOpResult = segOpCompute(\n      a2D, 'unsortedSegmentSum', segmentIds, outputDType, numSegments);\n\n  const reshaped =\n      reshape({inputs: {x: segOpResult}, backend, attrs: {shape: outShape}});\n\n  let result = reshaped;\n  if (permutation != null) {\n    toDispose.push(reshaped);\n    const perm = backend_util.getUndoAxesPermutation(permutation);\n    result = transpose({inputs: {x: result}, backend, attrs: {perm}});\n  }\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return result;\n}\n\nexport const unsortedSegmentSumConfig: KernelConfig = {\n  kernelName: UnsortedSegmentSum,\n  backendName: 'webgl',\n  kernelFunc: unsortedSegmentSum as unknown as KernelFunc\n};\n","import { useRef, useEffect } from 'react';\r\n\r\nfunction usePrevious(value) {\r\n    const ref = useRef();\r\n    useEffect(() => {\r\n      ref.current = value; //assign the value of ref to the argument\r\n    },[value]); //this code will run when the value of 'value' changes\r\n    return ref.current; //in the end, return the current ref value.\r\n  }\r\n  export default usePrevious;","import { useEffect, useRef, useState, useMemo } from 'react';\r\nimport { Camera } from '@mediapipe/camera_utils';\r\nimport * as handpose from '@tensorflow-models/handpose';\r\nimport '@tensorflow/tfjs-backend-webgl';\r\nimport usePrevious from './UsePrevious';\r\n\r\nconst CameraCanvas = ({ pressButton, APP_WRAPPER }) => {\r\n    const videoRef = useRef(null);\r\n    const canvasRef = useRef(null);\r\n    const canvasContainer = useRef(null);\r\n    const pointerFinger = useRef(null);\r\n\r\n    const [handData, setHandData] = useState();\r\n    const [cameraLoaded, setCameraLoaded] = useState(false);\r\n    const [loadedModel, setLoadedModel] = useState();\r\n    const [clickStrength, setClickStrength] = useState();\r\n    const [clickFlash, setClickFlash] = useState(false);\r\n\r\n    const prevHandData = usePrevious(handData);\r\n\r\n    const loadModel = async () => {\r\n        try {\r\n            const model = await handpose.load();\r\n            setLoadedModel(model);\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    }\r\n\r\n    const appWidth = APP_WRAPPER?.current?.offsetWidth;\r\n    const appHeight = APP_WRAPPER?.current?.offsetHeight;\r\n\r\n    const APP_DIMENSIONS = {\r\n        width: appWidth,\r\n        height: appHeight\r\n    }\r\n\r\n    const WIDTH_RATIO = APP_DIMENSIONS?.width / 620\r\n    const HEIGHT_RATIO = APP_DIMENSIONS?.height / 360\r\n\r\n    if (!loadedModel) {\r\n        loadModel();\r\n        console.log('loading model')\r\n    }\r\n\r\n    useEffect(() => {\r\n        const camera = new Camera(videoRef.current);\r\n        const video = videoRef.current;\r\n        console.log(video.offsetHeight)\r\n        camera.start();\r\n\r\n        const endstream = async () => {\r\n            video.srcObject = await navigator.mediaDevices.getUserMedia({ video: true });\r\n            const stream = video.srcObject;\r\n\r\n            const tracks = stream.getTracks();\r\n            tracks.forEach((track) => {\r\n                track.stop();\r\n            });\r\n            camera.stop();\r\n\r\n        }\r\n\r\n        return () => {\r\n            console.log(\"closing stream\")\r\n            endstream();\r\n        }\r\n    }, [])\r\n\r\n    const returnLandmarks = (hand => {\r\n        return ({\r\n            thumb: { left: hand[4][0], top: hand[4][1], zIndex: hand[4][2] },\r\n            pointer: { left: hand[8][0], top: hand[8][1], zIndex: hand[8][2] },\r\n            middle: { left: hand[12][0], top: hand[12][1], zIndex: hand[12][2] },\r\n            ring: { left: hand[16][0], top: hand[16][1], zIndex: hand[16][2] },\r\n            pinky: { left: hand[20][0], top: hand[20][1], zIndex: hand[20][2] }\r\n        })\r\n    });\r\n    const fingerPos = useMemo(() => {\r\n\r\n        if (handData?.landmarks) {\r\n            return returnLandmarks(handData.landmarks);\r\n        } else {\r\n            return (\r\n                {\r\n                    thumb: { left: -200, top: -200 },\r\n                    pointer: { left: -200, top: -200 },\r\n                    middle: { left: -200, top: -200 },\r\n                    ring: { left: -200, top: -200 },\r\n                    pinky: { left: -200, top: -200 }\r\n                }\r\n            )\r\n        }\r\n    }, [handData])\r\n    const prevFingerPos = useMemo(() => {\r\n        if (prevHandData?.landmarks) {\r\n            return returnLandmarks(prevHandData.landmarks);\r\n        } else {\r\n            if (handData?.landmarks > 0) {\r\n                return {\r\n                    thumb: { left: handData.landmarks[4][0], top: handData.landmarks[4][1], zIndex: handData.landmarks[4][2] },\r\n                    pointer: { left: handData.landmarks[8][0], top: handData.landmarks[8][1], zIndex: handData.landmarks[8][2] },\r\n                    middle: { left: handData.landmarks[12][0], top: handData.landmarks[12][1], zIndex: handData.landmarks[12][2] },\r\n                    ring: { left: handData.landmarks[16][0], top: handData.landmarks[16][1], zIndex: handData.landmarks[16][2] },\r\n                    pinky: { left: handData.landmarks[20][0], top: handData.landmarks[20][1], zIndex: handData.landmarks[20][2] }\r\n                }\r\n            } else {\r\n                return (\r\n                    {\r\n                        thumb: { left: -200, top: -200 },\r\n                        pointer: { left: -200, top: -200 },\r\n                        middle: { left: -200, top: -200 },\r\n                        ring: { left: -200, top: -200 },\r\n                        pinky: { left: -200, top: -200 }\r\n                    }\r\n                )\r\n            }\r\n\r\n        }\r\n    }, [handData, prevHandData]);\r\n\r\n    const makeFlash = () => {\r\n        setClickFlash(true);\r\n        setTimeout(() => {\r\n            setClickFlash(false);\r\n        }, 500)\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        let firstFinger = null;\r\n        let pinching = false;\r\n        let proximityCount = 1;\r\n        let count = 0;\r\n\r\n        for (const [key, value] of Object.entries(fingerPos)) {\r\n\r\n            if (proximityCount > Object.entries(fingerPos).length - 3) {\r\n                pinching = true;\r\n            }\r\n\r\n            const left = value.left;\r\n            const top = value.top;\r\n            const zIndex = value.zIndex;\r\n            const prevZ = prevFingerPos[key].zIndex;\r\n            const sensitivity = 10.5;\r\n            const clicking = zIndex < prevZ - sensitivity;\r\n            const currentStrength = prevZ - zIndex;\r\n            const X_PIXELS = (620 - left) * WIDTH_RATIO;\r\n            const Y_PIXELS = top * (HEIGHT_RATIO);\r\n\r\n            setClickStrength(currentStrength)\r\n            currentStrength > 10 && makeFlash();\r\n\r\n            key === \"pointer\" && pressButton(X_PIXELS, Y_PIXELS, clicking, pinching);\r\n\r\n            if (count === 0) {\r\n                firstFinger = {\r\n                    firstLeft: left,\r\n                    firstTop: top,\r\n                }\r\n                count++\r\n            }\r\n\r\n            if (Math.abs(firstFinger.firstLeft - left) < 50 && Math.abs(firstFinger.firstTop - top) < 50) {\r\n                proximityCount++\r\n            }\r\n\r\n        }\r\n\r\n    }, [HEIGHT_RATIO, WIDTH_RATIO, fingerPos, pressButton, prevFingerPos])\r\n\r\n    useEffect(() => {\r\n        const video = videoRef.current;\r\n\r\n        async function draw() {\r\n            try {\r\n                if (loadedModel) {\r\n\r\n\r\n                    const hands = await loadedModel.estimateHands(video);\r\n                    hands && setCameraLoaded(true);\r\n\r\n                    if (hands?.length > 0) {\r\n                        setHandData(hands[0])\r\n                    } else {\r\n                        setHandData(null);\r\n                    }\r\n                }\r\n            } catch (e) {\r\n                console.log(e);\r\n            }\r\n        }\r\n\r\n        const drawInterval = setInterval(() => {\r\n            draw();\r\n        }, 50)\r\n\r\n        return () => clearInterval(drawInterval)\r\n    }, [loadedModel])\r\n    return (\r\n        <div className=\"cameraCanvas\" ref={canvasContainer}>\r\n\r\n            {!cameraLoaded && <div className='loadingScreen'>\r\n                CAMERA LOADING\r\n            </div>}\r\n\r\n            <video ref={videoRef} className=\"input_video\" id='video'></video>\r\n            <canvas ref={canvasRef} className=\"output_canvas\">\r\n            </canvas>\r\n            {/* <div className=\"fingerTracker\" style={{ left: ((620 - fingerPos.thumb.left) * (WIDTH_RATIO)), top: (fingerPos.thumb.top * (HEIGHT_RATIO))}} id=\"thumb\"></div> */}\r\n            <div className={`fingerTracker`} id={`${clickFlash ? 'clickingFlash' : \"\"}`} style={{ left: ((620 - fingerPos.pointer.left) * (WIDTH_RATIO)), top: (fingerPos.pointer.top * (HEIGHT_RATIO)) }} ref={pointerFinger}></div>\r\n            {/* <div className=\"fingerTracker\" style={{ left: ((620 - fingerPos.middle.left) * (WIDTH_RATIO)), top: (fingerPos.middle.top * (HEIGHT_RATIO)) }}id=\"middleFing\"></div>\r\n            <div className=\"fingerTracker\" style={{ left: ((620 - fingerPos.ring.left) * (WIDTH_RATIO)), top: (fingerPos.ring.top * (HEIGHT_RATIO)) }} id=\"ringFing\"></div>\r\n            <div className=\"fingerTracker\" style={{ left: ((620 - fingerPos.pinky.left) * (WIDTH_RATIO)), top: (fingerPos.pinky.top * (HEIGHT_RATIO)) }} id=\"pinky\"></div> */}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CameraCanvas;","import { useRef, useState, useEffect } from 'react';\nimport './App.css';\nimport CameraCanvas from './CameraCanvas';\nimport loading from './resources/loading.gif';\nimport logo from './resources/adamportpix.png';\nimport realAdam from './resources/adamport.png';\nimport reactIcon from './resources/reacticon.png';\nimport nodeIcon from './resources/nodeicon.png';\nimport mongoIcon from './resources/mongoicon.png';\nimport jsIcon from './resources/jsicon.png';\nimport dockerIcon from './resources/dockericon.png';\nimport firebaseIcon from './resources/firebaseicon.png';\nimport typeScriptIcon from './resources/typescript_icon.png';\nimport awsIcon from './resources/awsicon.png';\nimport htmlIcon from './resources/htmlicon.png';\nimport cssIcon from './resources/cssicon.png';\nimport safesend from './resources/safesend.jpg';\nimport cheats from './resources/cheat.jpg';\nimport phpIcon from './resources/phpicon.png';\nimport anon from './resources/anon.png';\nimport galquiz from './resources/quizgalscreen.PNG';\nimport linkedinIcon from './resources/linkedinicon.png';\nimport resumeIcon from './resources/resumeicon.png';\nimport emailIcon from './resources/emailicon.png';\nimport vsSnip from './resources/vsSnipOne.JPG';\nimport vsSnipTwo from './resources/vsSnipTwo.JPG';\nimport resumePdf from './resources/engResumeAdamShaneHaviv.pdf';\nimport githubIcon from './resources/githubicon.png';\nimport minervaXR from './resources/minervaxr.JPG';\nimport githubSmall from './resources/githubsmall.png';\nimport websiteIcon from './resources/tabicon.png';\nimport offSwitch from './resources/offSwitch.png';\nimport onSwitch from './resources/onSwitch.png';\nimport blueBrush from './resources/brushes/bluebrush.png';\n\nfunction App() {\n\n  const [icon, setIcon] = useState(logo);\n  const [active, setActive] = useState('about');\n  const [progress, setProgress] = useState(0);\n  const [captionActive, setCaptionActive] = useState(false);\n  const [clickCount, setClickCount] = useState(0);\n  const [capMessage, setCapMessage] = useState(\"Hi! Thanks for visiting :)\")\n  const [isLoading, setIsLoading] = useState(true);\n  const [modeAR, setModeAR] = useState(false);\n\n  const sectionTwo = useRef(null);\n  const sectionOne = useRef(null);\n  const sectionThree = useRef(null);\n  const appWrapper = useRef(null);\n  const logoCaption = useRef(null);\n\n  const buttonOne = useRef(null);\n  const buttonTwo = useRef(null);\n  const buttonThree = useRef(null);\n  const buttonFour = useRef(null);\n  const buttonFive = useRef(null);\n\n  const linkedinRef = useRef(null);\n  const cvRef = useRef(null);\n  const mailRef = useRef(null);\n  const gitRef = useRef(null);\n\n  const pathRef = useRef(null);\n\n  const APP_WRAPPER = appWrapper;\n\n  let clicked = false;\n  let triggered = false;\n\n  const icons = [reactIcon, nodeIcon, mongoIcon, jsIcon, dockerIcon, firebaseIcon, awsIcon, htmlIcon, cssIcon, phpIcon, typeScriptIcon];\n  const brushes = [blueBrush]\n\n  const cacheImages = async (srcArray) => {\n    const promises = await srcArray.map((src) => {\n      return new Promise(function (resolve, reject) {\n        const img = new Image();\n        img.src = src;\n        img.onload = resolve();\n        img.onerror = reject();\n      });\n    });\n\n    await Promise.all(promises);\n\n    setIsLoading(false)\n  }\n\n  const pathLength = pathRef.current ? pathRef.current.getTotalLength() : 0;\n\n  useEffect(() => {\n    const imgs = [\n      loading,\n      logo,\n      realAdam,\n      reactIcon,\n      nodeIcon,\n      mongoIcon,\n      jsIcon,\n      dockerIcon,\n      firebaseIcon,\n      awsIcon,\n      htmlIcon,\n      cssIcon,\n      safesend,\n      cheats,\n      anon,\n      galquiz,\n      linkedinIcon,\n      resumeIcon,\n      emailIcon,\n      vsSnip,\n      vsSnipTwo,\n      resumePdf,\n      githubIcon\n    ]\n\n    cacheImages(imgs);\n  }, [])\n\n  const projects = [\n    {\n      name: \"MinervaXR - LMS\",\n      description: \"A Learning Management System made during my internship at MinervaXR \",\n      tech: [\"Node\", \"React\", \"Firebase\", \"AWS\", \"Docker\"],\n      images: [minervaXR],\n      link: null\n    },\n    {\n      name: \"AnonChat\",\n      description: \"Open a temporary chat room at chat anonymously\",\n      tech: [\"NEXTjs\", \"Netlify\", \"Firebase\"],\n      images: [anon],\n      link: \"https://bespoke-dolphin-95cd93.netlify.app/\",\n      repo: \"https://github.com/ashvv1/anonchatbase\"\n    },\n    {\n      name: \"My Quiz Gal\",\n      description: \"Learn any language that you want through practice and by testing yourself, for free!\",\n      tech: [\"React\", \"Router\", \"Heroku\", \"Firebase\"],\n      images: [galquiz],\n      link: \"https://www.myquizgal.com/\"\n    },\n    {\n      name: \"TextSOD\",\n      description: \"Send and receive messages using a 5 Digit Code that is known only by you and your intended respondents\",\n      tech: [\"React\"],\n      images: [safesend],\n      link: null,\n    },\n    {\n      name: \"Cheat Delete\",\n      description: \"Get a customized workout according to calorie intake\",\n      tech: [\"React\"],\n      images: [cheats],\n      link: \"https://ashvv1.github.io/cheatdelete\",\n      repo: \"https://github.com/ashvv1/cheatdelete\"\n    }\n  ];\n\n  const switchLogo = () => {\n    setClickCount((prevCount) => {\n      return prevCount + 1\n    });\n    if (clickCount > 3) {\n      setCapMessage(\"Ouch! How many times are you gonna click me?\")\n    }\n    if (icon === logo) {\n      setIcon(realAdam);\n    } else {\n      setIcon(logo);\n    }\n    if (!captionActive) {\n      logoCaption.current.style.display = 'flex';\n      setCaptionActive(true);\n    } else {\n      logoCaption.current.style.display = 'none';\n      setCaptionActive(false);\n    }\n  }\n\n  const goToSection = (ref) => {\n    ref.current.scrollIntoView({ behavior: \"smooth\" });\n  }\n\n  const inRange = (x, y, topMax, bottomMax, rightMax, leftMax) => {\n    const xInRange = x < rightMax + 50 && x > leftMax - 50;\n    const yInRange = y < bottomMax + 50 && y > topMax - 50;\n    return xInRange && yInRange;\n  }\n\n\n  const checkIfInView = (element) => {\n    const elementBounds = element.current.getBoundingClientRect();\n    return (\n      -50 < elementBounds.top\n      && elementBounds.top < 400\n    )\n  }\n\n  const handleScroll = () => {\n\n    const drawLength = (pathLength * progress * .01);\n\n    pathRef && (pathRef.current.style.strokeDashoffset = pathLength - drawLength);\n\n\n    if (progress >= 99.90) {\n      pathRef.current.style.strokeDasharray = \"none\";\n    } else {\n      pathRef.current && (pathRef.current.style.strokeDasharray = pathLength + ' ' + pathLength);\n    }\n    const appHeight = (\n      sectionOne.current.clientHeight\n      + sectionTwo.current.clientHeight\n      + sectionThree.current.clientHeight\n    );\n    setProgress(appWrapper.current.scrollTop / (appHeight - window.innerHeight) * 100)\n    if (checkIfInView(sectionOne)) {\n      setActive('about');\n    } else if (checkIfInView(sectionTwo)) {\n      setActive('work');\n    } else if (checkIfInView(sectionThree)) {\n      setActive('contact');\n    }\n  }\n\n\n  const openEmail = () => {\n    window.open('mailto:ashaviv27@gmail.com?subject=Job%20Offer&body=Come%20work%20with%20us!')\n  }\n\n  const pressButton = (x_axis, y_axis, clicking, pinching) => {\n\n    let triggerCount = 0;\n\n    const menuElements = [buttonOne, buttonTwo, buttonThree, buttonFour];\n\n    for (let i = 0; i < menuElements.length; i++) {\n      const menuButton = menuElements[i].current.getBoundingClientRect()\n      const topMax = menuButton.top;\n      const bottomMax = menuButton.bottom;\n      const leftMax = menuButton.left;\n      const rightMax = menuButton.right;\n      if (inRange(x_axis, y_axis, topMax, bottomMax, rightMax, leftMax)) {\n        menuElements[i].current.setAttribute(\"aria-label\", \"hovered\");\n        triggerCount++\n        if (!clicked && clicking) {\n          menuElements[i].current.setAttribute(\"aria-selected\", \"true\")\n          menuElements[i].current.setAttribute(\"aria-label\", \"un-hover\");\n          setTimeout(() => {\n            menuElements[i].current.setAttribute(\"aria-selected\", \"false\")\n          }, 10)\n          clicked = true;\n          menuElements[i].current.click();\n          // eslint-disable-next-line no-loop-func\n          setTimeout(() => {\n            clicked = false;\n          }, 800)\n        }\n        break;\n      }\n    }\n\n    if (active === 'contact') {\n      const sectionElements = [linkedinRef, cvRef, mailRef, gitRef];\n\n      for (let i = 0; i < sectionElements.length; i++) {\n        const topMax = sectionElements[i].current.getBoundingClientRect().top;\n        const bottomMax = sectionElements[i].current.getBoundingClientRect().bottom;\n        const leftMax = sectionElements[i].current.getBoundingClientRect().left;\n        const rightMax = sectionElements[i].current.getBoundingClientRect().right;\n\n        if (inRange(x_axis, y_axis, topMax, bottomMax, rightMax, leftMax)) {\n          sectionElements[i].current.setAttribute(\"aria-label\", \"hovered\");\n          triggerCount++\n          if (!clicked && clicking) {\n            clicked = true;\n            sectionElements[i].current.click();\n            // eslint-disable-next-line no-loop-func\n            setTimeout(() => {\n              clicked = false;\n            }, 800)\n            break;\n          }\n        }\n      }\n    }\n    triggerCount > 0 ? triggered = true : triggered = false;\n    const activeElement = document.querySelector('[aria-label=\"hovered\"]');\n    !triggered && activeElement?.setAttribute(\"aria-label\", \"un-hover\");\n  }\n\n\n  pathRef.current && (pathRef.current.style.strokeDasharray = pathLength + ' ' + pathLength);\n\n  progress < .1 && (pathRef.current && (pathRef.current.style.strokeDashoffset = pathLength))\n\n  if (isLoading) {\n    return (\n      <div className=\"App\" id='loading-screen'>\n        <img src={loading} alt='loading gif'></img>\n      </div>\n    )\n  }\n\n  return (\n    <div className={`App ${modeAR ? 'arMode' : \"\"}`} onScroll={() => handleScroll()} ref={appWrapper}>\n      {modeAR ? <CameraCanvas pressButton={pressButton} APP_WRAPPER={APP_WRAPPER} /> : null}\n      <div className='header-container'>\n        <header>\n          <div className='logo-container'>\n            <img onClick={() => switchLogo()} src={icon} alt=\"homelogo\" className='logo' ref={buttonFive}></img>\n            <div className='logo-caption' ref={logoCaption} ><span>{capMessage}</span></div>\n          </div>\n          <div className=\"arButton\" onClick={() => setModeAR(!modeAR)} ref={buttonFour}><h3>ARMODE</h3><img src={modeAR ? onSwitch : offSwitch} alt=\"ar is on\"></img></div>\n          <nav >\n\n            <ul className='nav-list'>\n              <li className={active === 'about' ? 'active' : \"\"} onClick={() => goToSection(sectionOne)} ref={buttonOne}>About</li>\n              <li className={active === 'work' ? 'active' : \"\"} onClick={() => goToSection(sectionTwo)} ref={buttonTwo}>Projects</li>\n              <li className={active === 'contact' ? 'active' : \"\"} onClick={() => goToSection(sectionThree)} ref={buttonThree}>Contact</li>\n            </ul>\n            <div className='progress-ball-container'>\n              <div className='progress-ball' style={{ left: `${progress}%` }}></div>\n            </div>\n\n          </nav>\n        </header>\n      </div>\n\n      <div className={`body `} >\n\n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0.327874 0.448701 17.2 12.37\" className={modeAR ? 'hidden' : 'svgPath'} visibility={progress < .1 ? \"hidden\" : \"\"}>\n          <path ref={pathRef}\n            d=\"M 4.835 7.02 C 0.488 3.868 -1.358 15.133 2.63 12.159 C 4.099 11.25 7.772 4.673 4.832 6.971 \n        C 3.084 8.101 2.77 11.74 2.665 12.124 C 2.41 14.545 6.548 8.871 8.507 7.716 C 11.771 5.434 7.073\n        5.163 7.842 8.101 C 9.067 14.363 5.883 12.404 5.428 11.39 C 3.749 7.647 8.997 12.754 9.836 10.9 \n        C 11.655 7.542 19.422 1.769 16.938 0.58 C 15.049 -0.12 8.507 11.145 9.56 12.002 C 10.517 12.541 12.132 \n        6.378 13.568 7.664 C 14.256 8.502 10.128 12.84 13.179 11.853 C 14.107 11.464 14.705 10.626 14.944 9.549\"\n            stroke=\"#E9ECF8\" strokeWidth=\"0.05\" fill=\"none\" />\n        </svg>\n\n        <div id=\"about\" className='section column' ref={sectionOne}>\n\n          <div className={'colorsContainer'}>\n            {brushes.map(brush => (\n              <div className='brush' key={brush}><img src={blueBrush} alt=\"blue brush\" ></img></div>\n            ))}\n          </div>\n          <div className=\"headerText\" >\n            <div id='upOne'>\n              <h4>Hi, my name is</h4>\n              <h2>Adam Haviv</h2>\n            </div>\n            <div id='upTwo'>\n              <h3>I am a FullStack Developer</h3>\n            </div>\n            <div id='upThree'>\n              <p>I specialize in building websites and apps using React, Next.js and NoSQL databases.\n                I have over one year of experience in building both professional and personal projects. My current focus is on AR and VR technologies.</p>\n            </div>\n          </div>\n\n          <img className='vs-snip' src={vsSnip} alt=\"vscode snippet\" ></img>\n        </div>\n\n        <div id=\"work\" ref={sectionTwo} className='section'>\n          <div className=\"icons-container\">\n            {icons.map((icon, i) => (\n              <img key={`icon${i}`} src={icon} alt='stack icon'></img>\n            ))}\n          </div>\n          <div className=\"Project-list\">\n            {projects.map((project, i) => (\n              <div key={project.name} className=\"Project-list-item\">\n\n                <img className=\"projectBackgroundImage\" src={project.images[0]} alt={`${project.name} background`} />\n                <div className=\"project-list-desc\">\n                  {project.repo && <a href={project.repo} target=\"_blank\" rel=\"noreferrer\" className=\"projectIcon\" id=\"topLeft\"><img src={githubSmall} alt={\"link to github\"} /></a>}\n                  {project.link && <a href={project.link} target=\"_blank\" rel=\"noreferrer\" className=\"projectIcon\" id=\"topRight\"><img src={websiteIcon} alt={\"link to website\"} /></a>}\n                  <h3>{project.name}</h3>\n                  <h4>{project.description}</h4>\n                  <p className=\"project-tech\">Made using: {project.tech.map(tech => <span key={tech}>{tech} </span>)}</p>\n                </div>\n              </div>\n            ))}\n          </div>\n\n        </ div>\n\n        <div id='contact' ref={sectionThree} className='section'>\n          <div className=\"contact-icons\">\n\n            <a href='https://www.linkedin.com/in/adam-haviv-84bb17225' target=\"_blank\" rel=\"noreferrer\" ref={linkedinRef}><img src={linkedinIcon} alt='linkedin icon' ref={linkedinRef} /></a>\n            <a href={resumePdf} download='adamhavivresume.pdf' target=\"_blank\" rel=\"noreferrer\" ref={cvRef}><img src={resumeIcon} alt='resume icon' ></img></a>\n            <div id='email-icon-container' >\n              <img onClick={() => openEmail()} id='email-icon' src={emailIcon} alt='email icon' ref={mailRef}></img>\n            </div>\n            <a href={'https://github.com/ashvv1/'} target=\"_blank\" rel=\"noreferrer\" ref={gitRef}><img src={githubIcon} alt='github icon'></img></a>\n\n          </div>\n\n        </div>\n\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n    <App />\n);\n"],"names":["n","a","b","length","done","value","q","Object","defineProperties","defineProperty","e","Array","prototype","u","globalThis","window","self","global","Math","Error","t","this","v","split","f","h","configurable","writable","w","next","Symbol","iterator","x","call","y","i","g","o","j","m","z","TypeError","A","F","G","B","D","l","c","H","return","I","throw","C","J","Promise","resolve","then","toString","random","d","reject","push","setTimeout","k","console","error","CustomEvent","Event","dispatchEvent","cancelable","document","createEvent","initCustomEvent","promise","reason","s","p","r","E","catch","race","all","K","assign","arguments","hasOwnProperty","L","M","facingMode","width","height","N","video","P","requestAnimationFrame","paused","currentTime","onFrame","Q","stop","getTracks","start","navigator","mediaDevices","getUserMedia","alert","srcObject","onloadedmetadata","play","O","T","R","S","execScript","shift","module","exports","Long","wasm","WebAssembly","Instance","Module","Uint8Array","low","high","unsigned","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","fromBits","fromNumber","isNaN","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","pow","fromString","str","radix","RangeError","indexOf","substring","radixToPower","result","size","min","parseInt","power","mul","add","fromValue","val","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","toNumber","isZero","isNegative","eq","radixLong","div","rem1","sub","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","other","notEquals","neq","ne","lessThan","comp","lt","lessThanOrEqual","lte","le","greaterThan","gt","greaterThanOrEqual","gte","ge","compare","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","toUnsigned","shru","shr","shl","max","floor","log2","ceil","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","mod","and","or","xor","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toSigned","toBytes","toBytesLE","toBytesBE","hi","lo","fromBytes","bytes","fromBytesLE","fromBytesBE","aa","require","ca","encodeURIComponent","da","Set","ea","fa","ha","ia","createElement","ja","ka","la","ma","acceptsBooleans","attributeName","attributeNamespace","mustUseProperty","propertyName","type","sanitizeURL","removeEmptyString","forEach","toLowerCase","ra","sa","toUpperCase","ta","slice","pa","qa","test","oa","removeAttribute","setAttribute","setAttributeNS","replace","xlinkHref","ua","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","va","for","wa","ya","za","Aa","Ba","Ca","Da","Ea","Fa","Ga","Ha","Ia","Ja","Ka","La","Ma","stack","trim","match","Na","Oa","prepareStackTrace","set","Reflect","construct","displayName","includes","name","Pa","tag","render","Qa","$$typeof","_context","_payload","_init","Ra","Sa","Ta","nodeName","Va","_valueTracker","getOwnPropertyDescriptor","constructor","get","enumerable","getValue","setValue","stopTracking","Ua","Wa","checked","Xa","activeElement","body","Ya","defaultChecked","defaultValue","_wrapperState","initialChecked","Za","initialValue","controlled","ab","bb","cb","db","ownerDocument","eb","isArray","fb","options","selected","defaultSelected","disabled","gb","dangerouslySetInnerHTML","children","hb","ib","jb","textContent","kb","lb","mb","nb","namespaceURI","innerHTML","valueOf","firstChild","removeChild","appendChild","MSApp","execUnsafeLocalFunction","ob","lastChild","nodeType","nodeValue","pb","animationIterationCount","aspectRatio","borderImageOutset","borderImageSlice","borderImageWidth","boxFlex","boxFlexGroup","boxOrdinalGroup","columnCount","columns","flex","flexGrow","flexPositive","flexShrink","flexNegative","flexOrder","gridArea","gridRow","gridRowEnd","gridRowSpan","gridRowStart","gridColumn","gridColumnEnd","gridColumnSpan","gridColumnStart","fontWeight","lineClamp","lineHeight","opacity","order","orphans","tabSize","widows","zIndex","zoom","fillOpacity","floodOpacity","stopOpacity","strokeDasharray","strokeDashoffset","strokeMiterlimit","strokeOpacity","strokeWidth","qb","rb","sb","style","setProperty","keys","charAt","tb","menuitem","area","base","br","col","embed","hr","img","input","keygen","link","meta","param","source","track","wbr","ub","vb","is","wb","xb","target","srcElement","correspondingUseElement","parentNode","yb","zb","Ab","Bb","Cb","stateNode","Db","Eb","Fb","Gb","Hb","Ib","Jb","Kb","Lb","Mb","addEventListener","removeEventListener","Nb","apply","onError","Ob","Pb","Qb","Rb","Sb","Tb","Vb","alternate","flags","Wb","memoizedState","dehydrated","Xb","Zb","child","sibling","current","Yb","$b","ac","unstable_scheduleCallback","bc","unstable_cancelCallback","cc","unstable_shouldYield","dc","unstable_requestPaint","unstable_now","ec","unstable_getCurrentPriorityLevel","fc","unstable_ImmediatePriority","gc","unstable_UserBlockingPriority","hc","unstable_NormalPriority","ic","unstable_LowPriority","jc","unstable_IdlePriority","kc","lc","oc","clz32","pc","qc","rc","sc","tc","uc","pendingLanes","suspendedLanes","pingedLanes","entangledLanes","entanglements","vc","xc","yc","zc","Ac","eventTimes","Cc","Dc","Ec","Fc","Gc","Hc","Ic","Jc","Kc","Lc","Mc","Nc","Oc","Map","Pc","Qc","Rc","Sc","delete","pointerId","Tc","nativeEvent","blockedOn","domEventName","eventSystemFlags","targetContainers","Vc","Wc","priority","isDehydrated","containerInfo","Xc","Yc","Zc","$c","ad","bd","cd","ReactCurrentBatchConfig","dd","ed","transition","fd","gd","hd","id","Uc","stopPropagation","jd","kd","ld","md","nd","od","keyCode","charCode","pd","qd","rd","_reactName","_targetInst","currentTarget","isDefaultPrevented","defaultPrevented","returnValue","isPropagationStopped","preventDefault","cancelBubble","persist","isPersistent","wd","xd","yd","sd","eventPhase","bubbles","timeStamp","Date","now","isTrusted","td","ud","view","detail","vd","Ad","screenX","screenY","clientX","clientY","pageX","pageY","ctrlKey","shiftKey","altKey","metaKey","getModifierState","zd","button","buttons","relatedTarget","fromElement","toElement","movementX","movementY","Bd","Dd","dataTransfer","Fd","Hd","animationName","elapsedTime","pseudoElement","Id","clipboardData","Jd","Ld","data","Md","Esc","Spacebar","Left","Up","Right","Down","Del","Win","Menu","Apps","Scroll","MozPrintableKey","Nd","Od","Alt","Control","Meta","Shift","Pd","Qd","key","String","fromCharCode","code","location","repeat","locale","which","Rd","Td","pressure","tangentialPressure","tiltX","tiltY","twist","pointerType","isPrimary","Vd","touches","targetTouches","changedTouches","Xd","Yd","deltaX","wheelDeltaX","deltaY","wheelDeltaY","wheelDelta","deltaZ","deltaMode","Zd","$d","ae","be","documentMode","ce","de","ee","fe","he","ie","color","date","datetime","email","month","number","password","range","search","tel","text","time","url","week","me","oe","event","listeners","pe","qe","re","se","te","ue","ve","we","xe","ye","ze","oninput","Ae","detachEvent","Be","Ce","attachEvent","De","Ee","Fe","He","Ie","Je","Ke","node","offset","nextSibling","Le","contains","compareDocumentPosition","Me","HTMLIFrameElement","contentWindow","href","Ne","contentEditable","Oe","focusedElem","selectionRange","documentElement","end","selectionStart","selectionEnd","defaultView","getSelection","extend","rangeCount","anchorNode","anchorOffset","focusNode","focusOffset","createRange","setStart","removeAllRanges","addRange","setEnd","element","left","scrollLeft","top","scrollTop","focus","Pe","Qe","Re","Se","Te","Ue","Ve","We","animationend","animationiteration","animationstart","transitionend","Xe","Ye","Ze","animation","$e","af","bf","cf","df","ef","ff","gf","hf","lf","mf","concat","nf","Ub","instance","listener","of","has","pf","qf","rf","sf","bind","capture","passive","tf","uf","parentWindow","vf","wf","na","xa","$a","ba","je","char","ke","unshift","xf","yf","zf","Af","Bf","Cf","Df","Ef","__html","Ff","Gf","clearTimeout","Hf","Jf","queueMicrotask","If","Kf","Lf","Mf","previousSibling","Nf","Of","Pf","Qf","Rf","Sf","Tf","Uf","Vf","Wf","Xf","Yf","contextTypes","__reactInternalMemoizedUnmaskedChildContext","__reactInternalMemoizedMaskedChildContext","Zf","childContextTypes","$f","ag","bg","getChildContext","cg","__reactInternalMemoizedMergedChildContext","dg","eg","fg","gg","hg","jg","kg","lg","mg","ng","og","pg","qg","rg","sg","tg","ug","vg","wg","xg","yg","zg","Ag","Bg","elementType","deletions","Cg","pendingProps","overflow","treeContext","retryLane","Dg","mode","Eg","Fg","Gg","memoizedProps","Hg","Ig","Jg","Kg","Lg","defaultProps","Mg","Ng","Og","Pg","Qg","Rg","_currentValue","Sg","childLanes","Tg","dependencies","firstContext","lanes","Ug","Vg","context","memoizedValue","Wg","Xg","Yg","interleaved","Zg","$g","ah","updateQueue","baseState","firstBaseUpdate","lastBaseUpdate","shared","pending","effects","bh","ch","eventTime","lane","payload","callback","dh","eh","fh","gh","hh","ih","jh","Component","refs","kh","nh","isMounted","_reactInternals","enqueueSetState","lh","mh","enqueueReplaceState","enqueueForceUpdate","oh","shouldComponentUpdate","isPureReactComponent","ph","contextType","state","updater","qh","componentWillReceiveProps","UNSAFE_componentWillReceiveProps","rh","props","getDerivedStateFromProps","getSnapshotBeforeUpdate","UNSAFE_componentWillMount","componentWillMount","componentDidMount","sh","ref","_owner","_stringRef","th","join","uh","vh","index","wh","xh","yh","implementation","zh","Ah","Bh","Ch","Dh","Eh","Fh","Gh","Hh","Ih","tagName","Jh","Kh","Lh","Mh","revealOrder","Nh","Oh","_workInProgressVersionPrimary","Ph","ReactCurrentDispatcher","Qh","Rh","Sh","Th","Uh","Vh","Wh","Xh","Yh","Zh","$h","ai","bi","ci","baseQueue","queue","di","ei","fi","lastRenderedReducer","action","hasEagerState","eagerState","lastRenderedState","dispatch","gi","ii","ji","ki","getSnapshot","li","mi","ni","lastEffect","stores","oi","pi","qi","ri","create","destroy","deps","si","ti","ui","vi","wi","xi","yi","zi","Ai","Bi","Ci","Di","Ei","Fi","Gi","Hi","Ii","Ji","readContext","useCallback","useContext","useEffect","useImperativeHandle","useInsertionEffect","useLayoutEffect","useMemo","useReducer","useRef","useState","useDebugValue","useDeferredValue","useTransition","useMutableSource","useSyncExternalStore","useId","unstable_isNewReconciler","identifierPrefix","Ki","message","digest","Li","Mi","Ni","WeakMap","Oi","Pi","Qi","Ri","getDerivedStateFromError","componentDidCatch","Si","componentStack","Ti","pingCache","Ui","Vi","Wi","Xi","ReactCurrentOwner","Yi","Zi","$i","aj","bj","cj","dj","ej","baseLanes","cachePool","transitions","fj","gj","hj","ij","jj","UNSAFE_componentWillUpdate","componentWillUpdate","componentDidUpdate","kj","lj","pendingContext","mj","Aj","Cj","Dj","nj","oj","pj","fallback","qj","rj","tj","dataset","dgst","uj","vj","_reactRetry","sj","subtreeFlags","wj","xj","isBackwards","rendering","renderingStartTime","last","tail","tailMode","yj","Ej","Fj","Gj","wasMultiple","multiple","suppressHydrationWarning","onClick","onclick","createElementNS","autoFocus","createTextNode","Hj","Ij","Jj","Kj","U","Lj","WeakSet","V","Mj","W","Nj","Oj","Qj","Rj","Sj","Tj","Uj","Vj","Wj","insertBefore","_reactRootContainer","Xj","X","Yj","Zj","ak","onCommitFiberUnmount","componentWillUnmount","bk","ck","dk","ek","fk","isHidden","gk","hk","display","ik","jk","kk","lk","__reactInternalSnapshotBeforeUpdate","src","Wk","mk","nk","ok","pk","Y","Z","qk","rk","sk","tk","uk","Infinity","vk","wk","xk","yk","zk","Ak","Bk","Ck","Dk","Ek","callbackNode","expirationTimes","expiredLanes","wc","callbackPriority","ig","Fk","Gk","Hk","Ik","Jk","Kk","Lk","Mk","Nk","Ok","Pk","finishedWork","finishedLanes","Qk","timeoutHandle","Rk","Sk","Tk","Uk","Vk","mutableReadLanes","Bc","Pj","onCommitFiberRoot","mc","onRecoverableError","Xk","onPostCommitFiberRoot","Yk","Zk","al","isReactComponent","pendingChildren","bl","mutableSourceEagerHydrationData","cl","pendingSuspenseBoundaries","dl","el","fl","gl","hl","il","jl","zj","$k","ll","reportError","ml","_internalRoot","nl","ol","pl","ql","sl","rl","unmount","unstable_scheduleHydration","splice","querySelectorAll","JSON","stringify","form","tl","usingClientEntryPoint","Events","ul","findFiberByHostInstance","bundleType","version","rendererPackageName","vl","rendererConfig","overrideHookState","overrideHookStateDeletePath","overrideHookStateRenamePath","overrideProps","overridePropsDeletePath","overridePropsRenamePath","setErrorHandler","setSuspenseHandler","scheduleUpdate","currentDispatcherRef","findHostInstanceByFiber","findHostInstancesForRefresh","scheduleRefresh","scheduleRoot","setRefreshHandler","getCurrentFiber","reconcilerVersion","__REACT_DEVTOOLS_GLOBAL_HOOK__","wl","isDisabled","supportsFiber","inject","createPortal","createRoot","unstable_strictMode","findDOMNode","flushSync","hydrate","hydrateRoot","hydratedSources","_getVersion","_source","unmountComponentAtNode","unstable_batchedUpdates","unstable_renderSubtreeIntoContainer","checkDCE","err","__self","__source","jsx","jsxs","setState","forceUpdate","escape","_status","_result","default","Children","map","count","toArray","only","Fragment","Profiler","PureComponent","StrictMode","Suspense","cloneElement","createContext","_currentValue2","_threadCount","Provider","Consumer","_defaultValue","_globalName","createFactory","createRef","forwardRef","isValidElement","lazy","memo","startTransition","unstable_act","pop","sortIndex","performance","setImmediate","startTime","expirationTime","priorityLevel","scheduling","isInputPending","MessageChannel","port2","port1","onmessage","postMessage","unstable_Profiling","unstable_continueExecution","unstable_forceFrameRate","unstable_getFirstCallbackNode","unstable_next","unstable_pauseExecution","unstable_runWithPriority","delay","unstable_wrapCallback","alea","xor128","xorwow","xorshift7","xor4096","tychei","sr","define","Alea","seed","mash","charCodeAt","Mash","s0","s1","s2","copy","impl","opts","prng","int32","double","quick","XorGen","strseed","limit","init","pool","math","nodecrypto","startdenom","significance","mask","seedrandom","shortseed","mixkey","flatten","entropy","tostring","out","randomBytes","crypto","msCrypto","getRandomValues","browser","plugins","screen","autoseed","arc4","ARC4","pass","is_math_call","keylen","depth","prop","typ","smear","stringseed","ex","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","loaded","__webpack_modules__","amdD","amdO","getter","__esModule","definition","Function","toStringTag","nmd","paths","_typeof","Op","hasOwn","desc","$Symbol","iteratorSymbol","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","wrap","innerFn","outerFn","tryLocsList","protoGenerator","Generator","generator","Context","makeInvokeMethod","tryCatch","fn","arg","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","method","_invoke","AsyncIterator","PromiseImpl","invoke","record","__await","unwrapped","previousPromise","callInvokeWithMethodAndArg","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","methodName","info","resultName","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","iterable","iteratorMethod","isGeneratorFunction","genFun","ctor","mark","setPrototypeOf","__proto__","awrap","async","iter","object","reverse","skipTempReset","prev","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","thrown","delegateYield","asyncGeneratorStep","gen","_next","_throw","args","_arrayLikeToArray","arr","len","arr2","_unsupportedIterableToArray","minLen","from","_i","_s","_e","_x","_r","_arr","_n","_d","_createForOfIteratorHelper","allowArrayLike","it","normalCompletion","didErr","step","_e2","_classCallCheck","Constructor","_toPropertyKey","hint","prim","toPrimitive","Number","_defineProperties","descriptor","_createClass","protoProps","staticProps","DataStorage","backend","dataMover","dataIdsCount","dataId","moveData","KernelBackend","notYetImplemented","force","shape","dtype","refCount","floatPrecision","kernelName","nearestLargerEven","swap","right","temp","sum","assert","expr","msg","assertShapesMatch","shapeA","shapeB","errorMessagePrefix","arraysEqual","assertNonNull","sizeFromShape","n1","n2","isInt","sizeToSquarishShape","sqrt","rightPad","repeatedTry","checkFn","delayFn","counter","maxCounter","scheduleFn","tryCount","tryFn","nextBackoff","parseAxisParam","axis","rank","every","ax","squeezeShape","newShape","keptDims","isEmptyArray","axes","sort","getTypedArrayFromDType","Float32Array","Int32Array","getArrayFromDType","hasEncodingLoss","oldType","newType","bytesPerElement","isString","inferDtype","Uint8ClampedArray","isBoolean","isFunction","nearestDivisor","computeStrides","strides","createNestedArray","isComplex","ret","rest","reduce","acc","toNestedArray","makeOnesTypedArray","array","makeZerosTypedArray","assertNonNegativeIntegerDimensions","dimSize","isInteger","locToIndex","indexToLoc","isPromise","TENSORFLOWJS_FLAGS_PREFIX","Environment","flagRegistry","urlFlags","getQueryParams","populateURLFlags","platformName","platform","env","getBool","warn","flagName","evaluationFn","setHook","flagValue","evaluateFlag","urlParams","keyValue","parseValue","queryString","params","decodeParam","decodeURIComponent","ENV","globalNameSpace","getGlobalNamespace","ns","process","getGlobal","globalMap","_tfGlobals","getGlobalMap","singleton","Abs","Acos","Acosh","Add","AddN","All","Any","ArgMax","ArgMin","Asin","Asinh","Atan","Atanh","Atan2","AvgPool","AvgPool3D","BatchMatMul","BatchToSpaceND","Bincount","BroadcastArgs","Cast","Ceil","ClipByValue","Complex","ComplexAbs","Concat","Conv2D","Conv2DBackpropFilter","Conv2DBackpropInput","Conv3D","Conv3DBackpropInputV2","Cosh","Cumprod","Cumsum","CropAndResize","DenseBincount","DepthToSpace","DepthwiseConv2dNative","DepthwiseConv2dNativeBackpropFilter","DepthwiseConv2dNativeBackpropInput","Diag","Dilation2D","RealDiv","Einsum","Equal","Exp","ExpandDims","Expm1","Fill","FlipLeftRight","Floor","FloorDiv","FusedBatchNorm","GatherV2","GatherNd","Greater","GreaterEqual","Identity","IFFT","Imag","IsFinite","IsInf","IsNan","LeakyRelu","Less","LessEqual","LinSpace","Log","Log1p","LogicalAnd","LogicalNot","LogicalOr","LRN","Max","Maximum","MaxPool","MaxPool3D","MaxPoolWithArgmax","Mean","Min","Minimum","MirrorPad","Multinomial","Multiply","Neg","NotEqual","NonMaxSuppressionV3","NonMaxSuppressionV4","NonMaxSuppressionV5","OnesLike","OneHot","Pack","PadV2","Prelu","Prod","RaggedGather","RaggedRange","RaggedTensorToTensor","Range","Real","Reciprocal","Relu","Reshape","ResizeNearestNeighbor","ResizeBilinear","Relu6","Reverse","Round","Rsqrt","ScatterNd","SearchSorted","Select","Selu","Slice","Sinh","Sign","Sigmoid","Softplus","Sqrt","Sum","SpaceToBatchND","SplitV","Softmax","SparseFillEmptyRows","SparseReshape","SparseSegmentMean","SparseSegmentSum","SparseToDense","SquaredDifference","StridedSlice","StringNGrams","StringSplit","StringToHashBucketFast","Sub","Tanh","Tile","TopK","Transform","Transpose","Unique","Unpack","UnsortedSegmentSum","ZerosLike","Step","FromPixels","RotateWithOffset","_FusedMatMul","FusedConv2D","FusedDepthwiseConv2D","kernelRegistry","gradRegistry","getKernel","backendName","makeKey","getGradient","getKernelsForBackend","entries","config","registerKernel","LongExports","hexToLong","hex","k0","k1","k2","shiftMix","fetch","numBytes","fetch64","fetch32","rotate64","hashLen16","weakHashLen32WithSeedsStr","weakHashLen32WithSeeds","hashLen0to16","hashLen17to32","hashLen33to64","fingerPrint64","last64","createScalarValue","encodeString","toTypedArray","vals","num","isFinite","noConversionNeeded","bool","round","encoding","encode","decodeString","decode","isTypedArray","skipTypedArray","maxIndex","backendTimer","logger","Logger","inputs","outputs","timer","holdResultWrapperFn","util","timerAvailable","dataSync","kernelMs","output","tensorVals","checkComputationForErrors","timeMs","timing","extraInfo","getExtraProfileInfo","kernelProfile","valueContainer","logKernelProfile","paddedName","inputShapesDescription","inputShape","inputRank","getFilteredNodesXToY","tape","xs","tensorsFromX","nodesFromX","nodeInputs","inputName","anyInputFromX","tensorsLeadToY","nodesToY","filteredTape","prunedInputs","nodeInput","prunedNode","backpropagateGradients","tensorAccumulatedGradientMap","tidy","dys","gradTensor","gradient","inputGradients","dx","curGradient","dispose","_setPrototypeOf","_inherits","subClass","superClass","_getPrototypeOf","_assertThisInitialized","ReferenceError","_possibleConstructorReturn","_createSuper","Derived","hasNativeReflectConstruct","sham","Proxy","Boolean","Super","NewTarget","tensorToString","verbose","padPerCol","numCols","fill","valuesOrTuples","createComplexTuples","row","valToString","computeMaxSizePerColumn","valsLines","subTensorToString","lines","pad","parseFloat","toFixed","boolNumToString","isLast","storagePerElement","complexTuple","firstValsSize","firstVals","lastVals","displayVals","subshape","substrides","stride","sep","newLineSep","complexTuples","TensorBuffer","trackerFn","makeTensor","opHandler","Tensor","kept","isDisposedInternal","rankType","buffer","throwIfDisposed","read","readToGPU","readSync","isDisposed","disposeTensor","print","clone","cast","trainable","makeVariable","hasInstance","Rank","UpcastInt32AndMap","UpcastBoolAndMap","UpcastFloat32AndMap","UpcastComplex64AndMap","Variable","tensorId","newValue","incRef","disposeVariable","upcastTypeMap","upcastType","typeA","typeB","sumOutType","makeTypesMatch","assertTypesMatch","getTensorsInContainer","list","walkTensorContainer","container","seen","isRegisteredKernelInvocation","kernelInvocation","EngineState","registeredVariables","nextTapeNodeId","numTensors","numStringTensors","numDataBuffers","gradientDepth","kernelDepth","scopeStack","numDataMovesStack","nextScopeId","tensorInfo","profiling","activeProfile","newBytes","newTensors","peakBytes","kernels","kernelNames","variableName","Engine","registry","registryFactory","pendingBackendInitId","pendingBackendInit","backendInstance","sortedBackends","getSortedBackends","initializeBackend","success","setBackend","initializeBackendsAndReturnBest","asyncInit","factory","setupRegisteredKernels","profiler","kernel","setupFunc","disposeFunc","registryFactoryEntry","promiseId","disposeRegisteredKernels","srcBackend","disposeData","move","shouldCheckForMemLeaks","nameOrFn","scopedRun","startScope","endScope","nextTensorId","nextVariableId","ENGINE","runKernel","addTapeNode","activeScope","dy","gradInputs","attrs","runKernelFunc","numDataIdsBefore","outInfos","numDataIdsAfter","numDataIds","numOutputDataIds","numMoves","dataIdsLeaked","kernelParams","kernelFunc","saved","isTapeOn","startingBytecount","startingNumTensors","kernelOrScopeName","checkKernelForMemLeak","outTensors","outInfo","makeTensorFromTensorInfo","tensorsToSave","getTensorsForGradient","saveTensorsForBackwardMode","forwardFunc","saveFunc","tensors","tensor","keep","outs","backwardsFunc","profileKernel","bytesAdded","totalBytesSnapshot","tensorsAdded","totalTensorsSnapshot","inputShapes","outputShapes","item","kernelTimeMs","gradConfig","inputTensorsToSave","inputsToSave","outputsToSave","saveAllInputs","outputTensorsToSave","filter","_","backendVals","write","trackTensor","bytesFromStringArray","removeDataId","varName","memory","unreliable","reasons","query","startBytes","startNumTensors","gradientsFunc","tapeNode","gradFunc","activeTape","scopeInfo","tensorsToTrackInParent","tensorsToTrackInParentSet","oldScope","scopeId","allowNoGradients","startTape","endTape","accumulatedGradientMap","ones","grads","inputMap","save","gradRes","gradMap","grad","timingInfo","wallMs","getOrMakeEngine","_tfengine","environment","setEnvironmentGlobal","isMobileMockValue","isMobile","nav","product","userAgent","vendor","opera","navAny","userAgentData","mobile","substr","isBrowser","WorkerGlobalScope","inferShape","firstElem","usedChannels","channels","ArrayBuffer","deepAssertShapeConsistency","indices","subShape","assertDtype","expectedDtype","actualDType","argName","functionName","convertToTensor","parseAsDtype","inferredDtype","inferredShape","convertToTensorArray","registerFlag","debugValue","device_util","versions","OP_SCOPE_SUFFIX","op","opName","endsWith","f2","complex","complex_","real","imag","$real","$imag","providedSize","inferredSize","inferred","flatDimsDontMatch","DTYPE_VALUE_SIZE_MAP","encodeWeights","group","specs","dataPromises","names","spec","utf8bytes","totalNumBytes","bytesOfLength","Uint32Array","tensorValues","concatenateTypedArrays","decodeWeights","float16Decode","quantization","quantizationSizeFactor","byteBuffer","quantizedArray","Uint16Array","scale","getFloat16Decoder","byteLength","dtypeFactor","image","realTensor","imageTensor","totalByteLength","normalizedXs","useNodeBuffer","Buffer","Blob","atob","btoa","stringByteLength","arrayBufferToBase64String","buf","base64StringToArrayBuffer","byteOffset","concatenateArrayBuffers","buffers","basename","path","items","getModelJSONForModelArtifacts","artifacts","manifest","modelTopology","format","generatedBy","convertedBy","weightsManifest","signature","userDefinedMetadata","modelInitializer","initializerSignature","trainingConfig","getModelArtifactsForJSONSync","modelJSON","weightSpecs","weightData","modelArtifacts","getModelArtifactsForJSON","loadWeights","getModelArtifactsInfoForJSON","dateSaved","modelTopologyType","modelTopologyBytes","weightSpecsBytes","weightDataBytes","getWeightSpecs","weights","mantisaTable","convertMantissa","computeFloat16MantisaTable","exponentTable","computeFloat16ExponentTable","offsetTable","computeFloat16OffsetTable","bufferUint32View","float16Bits","float32Bits","IORouterRegistry","saveRouters","loadRouters","saveRouter","getInstance","loadRouter","getHandlers","loadOptions","handlerType","validHandlers","router","handler","registerSaveRouter","loudRouter","registerLoadRouter","getSaveHandlers","getLoadHandlers","DATABASE_NAME","MODEL_STORE_NAME","INFO_STORE_NAME","getIndexedDBFactory","theWindow","indexedDB","mozIndexedDB","webkitIndexedDB","msIndexedDB","shimIndexedDB","setUpDatabase","openRequest","createObjectStore","keyPath","BrowserIndexedDB","modelPath","databaseAction","open","onupgradeneeded","onsuccess","modelTx","transaction","getRequest","objectStore","close","onerror","oncomplete","modelArtifactsInfo","infoTx","infoStore","putInfoRequest","put","putModelRequest","deleteInfoRequest","indexedDBRouter","startsWith","URL_SCHEME","BrowserIndexedDBManager","tx","getAllInfoRequest","getAll","getInfoRequest","deleteModelData","deleteModelRequest","PATH_SEPARATOR","PATH_PREFIX","INFO_SUFFIX","MODEL_TOPOLOGY_SUFFIX","WEIGHT_SPECS_SUFFIX","WEIGHT_DATA_SUFFIX","MODEL_METADATA_SUFFIX","getModelKeys","topology","modelMetadata","removeItems","localStorage","removeItem","getModelPathFromKey","BrowserLocalStorage","LS","setItem","metadata","parse","getItem","metadataString","weightDataBase64","localStorageRouter","BrowserLocalStorageManager","prefix","suffix","URL_SCHEME_SUFFIX","ModelStoreManagerRegistry","managers","scheme","manager","parseURL","getSchemes","cloneModelInternal","sourceURL","destURL","deleteSource","loadHandlers","loadHandler","saveHandlers","saveHandler","sourceScheme","sourcePath","sameMedium","load","getManager","removeModel","saveResult","listModels","schemes","schemeOut","schemeAndPath","copyModel","moveModel","PlatformBrowser","messageName","functionRefs","handledMessageCount","hasEventListener","textEncoder","TextEncoder","TextDecoder","functionRef","setPlatform","registerManager","systemFetch","getNodeFetch","PlatformNode","requestInits","hrtime","types","isFloat32Array","isInt32Array","isUint8Array","isUint8ClampedArray","cast_","$x","clone_","engine","getBackend","add_","floorDiv","floorDiv_","div_","mul_","sqrt_","square","square_","zerosLike","zerosLike_","customGrad","scalar","Serializable","className","cls","SerializationMap","classNameMap","getMap","fromConfig","registerClass","register","Optimizer","returnCost","varList","computeGradients","gradArray","applyGradients","iterations_","iterations","specifiedVarList","specifiedNonTrainable","variable","originalVarCount","some","namedGrads","variableGrads","weightValues","getClassName","minimize","AdadeltaOptimizer","learningRate","rho","epsilon","accumulatedGrads","accumulatedUpdates","variableGradients","originalName","accumulatedGrad","accumulatedUpdate","newAccumulatedGrad","updates","newAccumulatedUpdate","incrementIterations","variables","saveIterations","extractIterations","variableCount","AdagradOptimizer","initialAccumulatorValue","pow_","exp","$base","$exp","sub_","AdamOptimizer","beta1","beta2","accumulatedFirstMoment","accumulatedSecondMoment","accBeta1","accBeta2","varNames","oneMinusAccBeta1","oneMinusAccBeta2","firstMoment","secondMoment","newFirstMoment","newSecondMoment","biasCorrectedFirstMoment","biasCorrectedSecondMoment","abs","abs_","getBroadcastDims","inShape","outShape","inRank","dims","dim","assertAndGetBroadcastShape","errMsg","maximum","maximum_","AdamaxOptimizer","decay","accumulatedWeightedInfNorm","iteration","variableNames","lr","weightedInfNorm","ut0","ut1","newWeightedInfNorm","SGDOptimizer","setLearningRate","MomentumOptimizer","momentum","useNesterov","accumulations","accumulation","newAccumulation","RMSPropOptimizer","centered","accumulatedMeanSquares","accumulatedMoments","accumulatedMeanGrads","accumulatedMeanSquare","newAccumulatedMeanSquare","accumulatedMeanGrad","newAccumulatedMeanGrad","gradContribution","newAccumulatedMoments","OPTIMIZERS","defer","BrowserDownloads","fileNamePrefix","modelJsonFileName","weightDataFileName","weightsURL","URL","createObjectURL","modelJsonURL","jsonAnchor","modelJsonAnchor","download","MouseEvent","weightDataAnchor","BrowserFiles","files","jsonFile","weightsFiles","jsonReader","FileReader","onload","modelArtifactsPromise","readAsText","pathToFile","checkManifestAndWeightFiles","promises","loadWeightsFile","file","weightFileReader","readAsArrayBuffer","basenames","fileNames","pathBasename","browserFiles","monitorPromisesProgress","onProgress","startFraction","endFraction","checkPromises","checkFraction","resolvedPromise","fraction","loadWeightsAsArrayBuffer","fetchURLs","fetchFunc","requests","fetchURL","requestInit","isBinary","fetchStartFraction","fetchEndFraction","responses","bufferPromises","response","arrayBuffer","bufferStartFraction","bufferEndFraction","filePathPrefix","weightNames","weightsLoaderFactory","fetchUrls","fetchWeightsFunction","groupIndicesToFetchMap","groupWeightsToFetch","weightsFound","allManifestWeightNames","manifestGroupConfig","groupIndex","groupOffset","weightsEntry","rawDtype","weightsBytes","enqueueWeightsForFetchingFn","manifestEntry","sizeBytes","weightName","weightIndex","found","weightsNotFound","groupIndicesToFetch","accumulator","shouldFetch","filepath","fetchUrl","weightsTensorMap","bufferIndexOffset","numBuffers","groupBytes","groupBuffer","groupByteBuffer","groupBufferOffset","nameToTensorMap","browserDownloads","HTTPRequest","DEFAULT_METHOD","weightPathPrefix","weightUrlConverter","FormData","modelTopologyAndWeightManifest","append","status","modelConfigRequest","json","weightPath","parseUrl","pathPrefix","urlPromises","weightsGroup","lastSlash","lastIndexOf","lastSearchParam","isHTTPScheme","URL_SCHEME_REGEX","httpRouter","urlItem","http","browserHTTPRequest","fromPixels2DContext","PassthroughLoader","PassthroughSaver","PassthroughAsync","fromMemory","fromMemorySync","isModelArtifacts","withSaveHandler","withSaveHandlerSync","tensor3d","fromPixels_","pixels","numChannels","isPixelData","isImageData","isVideo","isImage","isCanvasLike","isImageBitmap","ImageData","HTMLVideoElement","HTMLImageElement","getContext","ImageBitmap","videoWidth","videoHeight","getImageData","OffscreenCanvas","OffscreenCanvasRenderingContext2D","willReadFrequently","canvas","drawImage","numPixels","channel","fromPixels","assertParamsValid","begin","isSliceContinous","firstNonOneAxis","computeFlatOffset","flatOffset","parseSliceParams","begin_","size_","xRank","sliceInfo","xShape","beginMask","endMask","ellipsisMask","newAxisMask","shrinkAxisMask","stridesNonNull","ellipsisSeen","sparseSpec","numAddAxisAfterEllipsis","denseSpec","beginValid","endValid","sparse","dense","fullIndex","finalShapeGatherIndices","finalShapeGatherIndicesSparse","inputShapeGatherIndicesSparse","nextIndex","buildDenseSpec","isIdentity","sliceDim0","isSimpleSlice","processingShape","finalShape","shrinkI","dimI","masks","validRange","beginAndEndMasked","xFwd","canonical","takeAllInDimension","intervalLength","knownInterval","sizeI","trunc","denseDim","gatherIndex","finalShapeSparse","strideI","acos","acos_","acosh","acosh_","addN","addN_","$tensors","firstTensor","all_","keepDims","any","any_","argMax","argMax_","argMin","argMin_","asin","asin_","asinh","asinh_","atan","atan_","atan2","atan2_","atanh","atanh_","computePool2DInfo","filterSize","dilations","roundingMode","filterShape","dataFormat","parseTupleParam","filterHeight","filterWidth","computeConv2DInfo","computePool3DInfo","$dataFormat","parse3TupleParam","filterDepth","computeConv3DInfo","depthwise","batchSize","inHeight","inWidth","inChannels","filterChannels","strideHeight","strideWidth","dilationHeight","dilationWidth","effectiveFilterHeight","getEffectiveFilterSize","effectiveFilterWidth","getPadAndOutInfo","padInfo","outHeight","outWidth","outChannels","inDepth","strideDepth","dilationDepth","effectiveFilterDepth","get3DPadAndOutInfo","outDepth","computeDefaultPad","fieldSize","dilation","effectiveFieldSize","bottom","zeroPad","inputRows","inputCols","computeOutputShape2D","padAlongHeight","padAlongWidth","front","back","computeOutputShape4D","padAlongDepth","tupleValuesAreOne","dimA","dimB","dimC","eitherStridesOrDilationsAreOne","stridesOrDilationsArePositive","convertConv2DDataFormat","checkPadOnDimRoundingMode","opDesc","dimRoundingMode","reshape","reshape_","avgPool","avgPool_","conv_util","x4D","reshapedTo4D","avgPool3d","avgPool3d_","x5D","reshapedTo5D","concat_","attr","matMul","matMul_","transposeA","transposeB","sigmoid","sigmoid_","slice_","tanh","tanh_","basicLSTMCell","basicLSTMCell_","forgetBias","lstmKernel","lstmBias","$forgetBias","$lstmKernel","$lstmBias","$data","combined","weighted","sliceCols","sliceSize","newC","batchToSpaceND","batchToSpaceND_","blockShape","crops","prod","batchNorm","batchNorm_","mean","variance","varianceEpsilon","$scale","$offset","$mean","$variance","xAs4D","batchNorm2d","batchNorm2d_","batchNorm3d","batchNorm3d_","batchNorm4d","batchNorm4d_","bincount","bincount_","$weights","broadcastArgs","broadcastArgs_","shape1Input","shape2Input","broadcastTo","broadcastTo_","reps","ceil_","clipByValue","clipByValue_","clipValueMin","clipValueMax","concat1d","concat1d_","concat2d","concat2d_","concat3d","concat3d_","concat4d","concat4d_","conv2d","conv2d_","$filter","conv1d","conv1d_","x3D","reshapedTo3D","filter4D","input4D","conv2dDataFormat","conv2DBackpropInput","conv2DBackpropInput_","xShape4D","dy4D","conv2dTranspose","conv2dTranspose_","outputShape","conv3d","conv3d_","conv3DBackpropInput","conv3DBackpropInput_","xShape5D","dy5D","conv3dTranspose","conv3dTranspose_","cos","cos_","cosh","cosh_","cumprod","cumprod_","exclusive","cumsum","cumsum_","denseBincount","denseBincount_","binaryOutput","depthToSpace","depthToSpace_","blockSize","inputHeight","inputWidth","inputDepth","depthwiseConv2d","depthwiseConv2d_","diag","diag_","dilation2d","dilation2d_","equal","equal_","where","where_","condition","$condition","broadcastShape","divNoNan","divNoNan_","divResult","zeros","bEqualsZero","dot","dot_","t1","t2","$t1","$t2","t1Inner","t2Inner","t12D","t22D","t1t2","einsum","einsum_","equation","elu","elu_","erf","erf_","axesAreInnerMostDims","computeOutAndReduceShapes","aShape","reduceShape","expandShapeToKeepDim","outputLoc","reduceLoc","outIdx","reduceIdx","combineLocations","assertAxesAreInnerMostDims","getAxesPermutation","getUndoAxesPermutation","getInnerMostAxes","numAxes","max_","reductionIndices","min_","sum_","normImpl","norm","norm_","ord","keepDimsShape","axis_util","euclideanNorm","euclideanNorm_","exp_","expandDims","expandDims_","expm1","expm1_","tile","tile_","eye","eye_","numRows","numColumns","batchShape","buff","toTensor","floor_","gather","gather_","batchDims","$indices","greater","greater_","greaterEqual","greaterEqual_","imag_","isFinite_","isInf","isInf_","isNaN_","leakyRelu","leakyRelu_","alpha","less","less_","lessEqual","lessEqual_","linspace","localResponseNormalization","localResponseNormalization_","depthRadius","bias","beta","log_","log1p","log1p_","neg_","softplus","softplus_","logSigmoid","logSigmoid_","customOp","logSoftmax","logSoftmax_","logits","$logits","xMax","shifted","softmax","logSumExp","logSumExp_","logicalAnd","logicalAnd_","logicalNot","logicalNot_","logicalOr","logicalOr_","logicalXor","logicalXor_","INT32_MAX","searchSorted","searchSorted_","sortedSequence","side","$sortedSequence","$values","sequenceSize","valuesSize","$sortedSequence2D","$values2D","lowerBound","maxPool","maxPool_","maxPool3d","maxPool3d_","maxPoolWithArgmax","maxPoolWithArgmax_","includeBatchInIndex","indexes","mean_","meshgrid","indexing","$y","minimum","minimum_","mirrorPad","mirrorPad_","paddings","shapeOffset","mod_","moments","moments_","xMean","devSquared","multiRNNCell","multiRNNCell_","lstmCells","newStates","newH","multinomial","multinomial_","numSamples","normalized","numOutcomes","origRank","logits2D","notEqual","notEqual_","oneHot","oneHot_","onValue","offValue","onesLike","onesLike_","outerProduct","outerProduct_","v1","v2","$v1","$v2","v12D","v22D","pad_","constantValue","pad1d","pad1d_","pad2d","pad2d_","pad3d","pad3d_","pad4d","pad4d_","spaceToBatchND","spaceToBatchND_","pool_","windowShape","poolingType","basePadding","convInfo","dilatedFilterShape","padExtraShape","padExtraStart","padExtraEnd","withSpaceToBatchBasePaddings","isDilationOne","padStart","origPadEnd","fullInputShape","padEndExtra","padEnd","requiredSpaceToBatchPaddings","adjustedPadding","adjustedCrops","convertedPad","convertedX","prelu","prelu_","prod_","raggedGather","raggedGather_","paramsNestedSplits","paramsDenseValues","outputRaggedRank","outputNestedSplits","outputDenseValues","raggedRange","raggedRange_","starts","limits","deltas","$starts","rtNestedSplits","rtDenseValues","raggedTensorToTensor","raggedTensorToTensor_","rowPartitionTensors","rowPartitionTypes","$shape","rand","rand_","randFunction","MPRandGauss","stdDeviation","truncated","stdDev","nextVal","NaN","upper","lower","seedValue","resultX","resultY","isValid","isValidTruncated","convertValue","RandGamma","randu","randn","x2","v0","nextValue","UniformRandom","canReturnFloat","randomGamma","randomGamma_","rgamma","randomNormal","randomNormal_","randGauss","randomStandardNormal","randomStandardNormal_","randomUniform","randomUniform_","minval","maxval","real_","reciprocal","reciprocal_","relu","relu_","relu6","relu6_","reverse_","reverse1d","reverse1d_","reverse2d","reverse2d_","reverse3d","reverse3d_","reverse4d","reverse4d_","round_","rsqrt","rsqrt_","selu","selu_","separableConv2d","separableConv2d_","depthwiseFilter","pointwiseFilter","$depthwiseFilter","$pointwiseFilter","channelMultiplier","pointwiseStride","xVals","yVals","ySet","outputSize","setdiff1dAsync","sign","sign_","sin","sin_","sinh","sinh_","slice1d","slice1d_","slice2d","slice2d_","slice3d","slice3d_","slice4d","slice4d_","softmax_","fft","fft_","ifft","ifft_","irfft","irfft_","innerDimensionSize","batch","complexInput","realInput","imagInput","realConjugate","imagConjugate","split_","numOrSizeSplits","rfft","rfft_","fftLength","adjustedInput","zerosShape","zerosInput","half","realValues","imagValues","realComplexConjugate","imagComplexConjugate","squaredDifference","squaredDifference_","squeeze","squeeze_","stack_","step_","stridedSlice","stridedSlice_","tan","tan_","tensor1d","tensor2d","tensor4d","tensor5d","tensor6d","topk","topk_","sorted","lastDim","truncatedNormal","truncatedNormal_","unique","unique_","unsortedSegmentSum","unsortedSegmentSum_","segmentIds","numSegments","$segmentIds","unstack","unstack_","upperBound","whereImpl","condShape","condVals","inBuffer","whereAsync","$tensor","$mask","axisFrom","maskDim","tensorShape","leadingSize","targetTensorShape","reshapedTensor","reshapedMask","positivePositions","booleanMaskAsync","transpose","transpose_","perm","conjugate","movingAverage","movingAverage_","zeroDebias","$v","$decay","one","oneMinusDecay","update","$step","validateInput","sliceDim","batchDim","shapeError","validateUpdateShape","calculateShapes","indicesRank","sliceRank","totalNd","safeSliceDim","numUpdates","scatterND","scatterND_","$updates","scatter_nd_util","sparseIndices","sparseValues","defaultValues","numElems","numDims","numValues","sparseToDense","sparseToDense_","$sparseIndices","$sparseValues","$defaultValue","sparse_to_dense","gatherND","gatherND_","dropout","dropout_","rate","noiseShape","$noiseShape","newDimension","getNoiseShape","keepProb","enclosingPowerOfTwo","cosineWindow","windowLength","even","newValues","cosArg","PI","predictions","targets","$predictions","$targets","predictionsVals","targetsVals","precision","subarray","valAndInd","inTopKAsync","conv2DBackpropFilter","conv2DBackpropFilter_","getFusedDyActivation","activation","getFusedBiasGradient","dyActivation","reduceAxes","inDim","outAxis","outDim","broadcast_util","applyActivation","preluActivationWeights","leakyreluAlpha","shouldFuse","fusedConv2d_","unfusedConv2d","inputChannels","$bias","$preluActivationWeights","alphaShape","der","biasDer","customOpWithBias","depthwiseConv2dNativeBackpropFilter","depthwiseConv2dNativeBackpropFilter_","depthwiseConv2dNativeBackpropInput","depthwiseConv2dNativeBackpropInput_","fusedDepthwiseConv2d_","unfusedDepthwiseConv2d","xDer","filterDer","fusedMatMul_","unfusedMatMul","innerShapeA","innerShapeB","outerShapeA","outerShapeB","outerDimsA","outerDimsB","batchDimA","batchDimB","a3D","b3D","aDer","bDer","hammingWindow","hammingWindow_","hannWindow","hannWindow_","frame","frame_","signal","frameLength","frameStep","padValue","padLen","stft","stft_","windowFn","framedSignal","windowedSignal","cropAndResize","cropAndResize_","boxes","boxInd","cropSize","extrapolationValue","$image","$boxes","$boxInd","numBoxes","flipLeftRight","flipLeftRight_","grayscaleToRGB","grayscaleToRGB_","lastDimsIdx","lastDims","rotateWithOffset","rotateWithOffset_","radians","fillValue","center","nonMaxSuppSanityCheck","scores","maxOutputSize","iouThreshold","scoreThreshold","softNmsSigma","NEGATIVE_INFINITY","nonMaxSuppression","nonMaxSuppression_","$scores","binaryInsert","comparator","middle","compareResult","binarySearch_","defaultComparator","binarySearch","insertionPoint","nonMaxSuppressionV3Impl","nonMaxSuppressionImpl_","nonMaxSuppressionV4Impl","padToMaxOutputSize","nonMaxSuppressionV5Impl","returnScoresTensor","returnValidOutputs","candidates","score","boxIndex","suppressBeginIndex","ascendingComparator","selectedIndices","selectedScores","candidate","originalScore","ignoreCandidate","iou","intersectionOverUnion","suppressWeight","validOutputs","elemsToPad","iCoord","jCoord","yminI","xminI","ymaxI","xmaxI","yminJ","xminJ","ymaxJ","xmaxJ","areaI","areaJ","intersectionYmin","intersectionXmin","intersectionYmax","intersectionXmax","intersectionArea","weight","c1","c2","boxesAndScores","boxesVals","scoresVals","nonMaxSuppressionAsync","nonMaxSuppressionWithScore","nonMaxSuppressionWithScore_","nonMaxSuppressionWithScoreAsync","nonMaxSuppressionPadded","nonMaxSuppressionPadded_","$maxOutputSize","$iouThreshold","$scoreThreshold","nonMaxSuppressionPaddedAsync","resizeBilinear","resizeBilinear_","images","alignCorners","halfPixelCenters","$images","batchImages","resizeNearestNeighbor","resizeNearestNeighbor_","otsu","histogram","total","classFirst","classSecond","meanFirst","meanSec","weightForeground","weightBack","bestThresh","bestInBetVar","cInBetVar","meanFirstDivA","meanSecFill","meanSecAdd","meanSecMul","cInBetVarSubA","cInBetVarSubB","cInBetVarMul","threshold","threshold_","grayscale","inverted","threshValue","RED_INTENCITY_COEF","GREEN_INTENCITY_COEF","BLUE_INTENCITY_COEF","totalPixelsInImage","$threshold","$r","$histogram","invCondition","transform","transform_","transforms","interpolation","fillMode","$transforms","bandPart","bandPart_","numLower","numUpper","inBand","zero","mat","gramSchmidt","gramSchmidt_","inputIsTensor2D","ys","xs1d","proj","qr2d","fullMatrices","one2D","iters","rTemp","wTemp","qTemp","rjEnd1","normX","rjj","u1","wPre","tau","rjEndAll","tauTimesW","wT","rTimesTau","tawTimesWT","qAllJEnd","qTimesTau","Reduction","qr","qr_","outerDimsProd","x2ds","q2ds","r2ds","x2d","q2d","r2d","computeWeightedLoss","computeWeightedLoss_","losses","reduction","SUM_BY_NONZERO_WEIGHTS","$losses","weightedLoss","NONE","SUM","MEAN","broadcastFactor","broadcastedWeights","numNonZeros","absoluteDifference","absoluteDifference_","labels","$labels","cosineDistance","cosineDistance_","hingeLoss","hingeLoss_","huberLoss","huberLoss_","deltaScalar","quadratic","linear","logLoss","logLoss_","epsilonScalar","l1","l2","meanSquaredError","meanSquaredError_","sigmoidCrossEntropyWithLogits_","maxOutput","outputXTarget","sigmoidOutput","sigmoidCrossEntropy","sigmoidCrossEntropy_","multiClassLabels","labelSmoothing","$multiClassLabels","labelSmoothingScalar","softmaxCrossEntropyWithLogits_","lse","logResult","costVector","dyShape","softmaxCrossEntropy","softmaxCrossEntropy_","onehotLabels","$onehotLabels","numClasses","sparseFillEmptyRows","sparseFillEmptyRows_","denseShape","$denseShape","outputIndices","outputValues","emptyRowIndicator","reverseIndexMap","sparseReshape","sparseReshape_","inputIndices","$inputIndices","$inputShape","$newShape","sparseSegmentMean","sparseSegmentMean_","sparseSegmentSum","sparseSegmentSum_","stringNGrams","stringNGrams_","dataSplits","separator","nGramWidths","leftPad","padWidth","preserveShortSequences","$dataSplits","nGrams","nGramsSplits","stringSplit","stringSplit_","delimiter","skipEmpty","$input","$delimiter","RowPartitionType","spectral","linalg","string","stringToHashBucketFast","stringToHashBucketFast_","numBuckets","delayCallback","computeOutShape","shapes","computeOptimalWindowSize","inSize","getReshaped","batchToSpace","reshaped","spatialLength","getPermuted","reshapedRank","blockShapeRank","permuted","permutedBeforeBatch","permutedAfterBatch","getReshapedPermuted","reshapedPermuted","mergeRealAndImagArrays","DataType","SaverDef","ARROW","ARROW_REGEX","getEinsumPermutation","nDims","idDims","permutationIndices","isIdentityPermutation","findTermsWithDim","termIndices","getSparseFillEmptyRowsOutOfRangeIndexErrorMessage","getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage","segmentId","outputRows","getSparseSegmentReductionIndicesOutOfRangeErrorMessage","indexValue","fromUint8ToStringArray","registerOptimizers","CheckpointFormatVersion","CUSTOM_OPS","getRegisteredOp","getParamValue","paramName","tensorMap","resourceManager","inputParam","inputParams","inputIndexStart","inputIndexEnd","getTensor","inputNames","attrParam","attrParams","tensorsMap","parseNodeName","getHashTableHandleByName","contextId","currentContextIds","find","getNodeNameWithContextId","getNodeNameAndIndex","outputName","currentContextId","parts","getPadding","explicitPadding","cloneTensor","OperationMapper","ops","arithmetic","basicMath","control","convolution","creation","dynamic","evaluation","graph","hashTable","logical","matrices","normalization","sliceJoin","transformation","mappersJson","opMappers","mapper","tfOpName","tfNodes","placeholders","initNodes","nodes","mapNode","inputNodeNameToKey","outputNodeNameToKey","mapSignatureEntries","allNodes","inputNode","outputIndex","signatureKey","functions","library","function","func","mapFunction","curr","newNode","category","rawAttrs","getStringParam","tfName","tfDeprecatedName","getStringArrayParam","getNumberParam","getNumericArrayParam","getBoolParam","getBoolArrayParam","getTensorShapeParam","getTensorShapeArrayParam","getDtypeParam","getDtypeArrayParam","getFuncParam","functionDef","nodeDef","inputArg","parseDtypeParam","returnNodeMap","outputArg","defaultOutput","mapArgsToSignature","mapArgToTensorInfo","nameMap","_instance","parseStringParam","keepCase","decodeBase64","def","tensorflow","parseTensorShapeParam","unknownRank","NodeValueImpl","getInput","getAttr","executeOp","tfOps","assertShapesMatchAllowUndefinedSize","dim0","dim1","fullDefinedShape","elementShape","inferElementShape","listElementShape","partialShape","mergeElementShape","notfullDefinedShape","elementShapeA","elementShapeB","TensorArray","maxSize","identicalElementShapes","dynamicSize","clearAfterRead","closed_","idTensor","keepIds","tensorWithState","cleared","written","readMany","writeMany","totalLength","cumulativeLengths","elementPerRow","sizes","TensorList","elementDtype","maxNumElements","numElements","outputElementShape","reshapedTensors","destTensorList","elementIndex","fromTensor","tensorList","reserve","scatter","thenFunc","elseFunc","cond","functionMap","executeFunctionAsync","tensorArrayMap","tensorListMap","bodyFunc","condFunc","condResult","argIds","condValue","origResult","resultIds","pred","frameId","enterFrame","exitFrame","nextIteration","tensorArray","addTensorArray","writeTensor","writeTensorArray","getTensorArray","readId","readIndex","readTensorArray","gatherId","gatherIndices","gatherDtype","gatherTensorArray","scatterId","scatterIndices","scatterTensor","scatterTensorArray","concatId","concatTensorArray","concatDtype","splitId","splitTensor","lengths","splitTensorArray","sizeId","sizeTensorArray","closeId","closeTensorArray","clearAndClose","getTensorList","elementDType","addTensorList","numElementsParam","pushBack","popBack","srcTensorList","resize","fusedConvAndDepthWiseParams","extraOp","activationFunc","isBiasAdd","noBiasAdd","isPrelu","isBatchNorm","numArgs","biasArg","preluArg","fused","kernelSize","nmsParams","snapshot","summarize","HashTable","keyDType","valueDType","clear","checkKeyAndValueTensor","$keys","keysLength","valuesLength","findWithDefault","existingTableHandle","addHashTable","getHashTableById","import","tensorSize","squeezedShape","mapped","sameShape","outputData","tfc","ragged","opMapper","customExecutor","ExecutionContext","weightMap","rootContext","frameName","iterationId","contexts","lastId","generateCurrentContextIds","_currentContextIds","contextIdforContexts","newFrame","getExecutionSubgraph","usedNodes","missingInputs","dynamicNode","syncInputs","inputNodeNames","initNodeNames","frontier","isControlFlow","isDynamicShape","isHashTable","CONTROL_FLOW_OPS","DYNAMIC_SHAPE_OPS","HASH_TABLE_OPS","GraphExecutor","parent","compiledMap","_weightMap","SEPERATOR","_functions","_functionExecutorMap","keepIntermediateTensors","_outputs","_inputs","_initNodes","_signature","weightIds","_weightIds","functionExecutorMap","_resourceManager","sortedInputs","sortedOutputs","executionInfo","outNames","inNames","inputNodes","orderedNodes","getNodesInTopologicalOrder","clonedTensor","cloneAndKeepTensor","fromEntries","tensorsList","cloneTensorList","disposeIntermediateTensors","mapInputs","checkInputs","checkInputShapeAndType","mapOutputs","checkOutputs","outputNodeNames","outputNodes","compilationKey","getCompilationKey","compile","clonedTensorsMap","cloneTensorMap","tensorsToKeep","getFrozenTensorIds","intermediateTensorConsumerCount","checkTensorForDisposal","ids","outputNames","getTensorsForCurrentContenxt","_executeAsync","isFunctionExecution","executeWithControlFlow","results","outputIds","inputIds","mappedInputs","currentContext","added","processStack","missingOutputs","alternativeMsg","processChildNodes","childNode","notInGraph","normalizedName","ResourceManager","hashTableNameToHandle","hashTableMap","GraphModel","modelUrl","tfio","io","executor","structuredOutputKeys","handlers","findIOHandler","loadResult","loadSync","producer","minConsumer","transformGraph","convertTensorMapToTensorsMap","initializer","handlerOrURL","outputTensors","outputTensorMap","outputTensor","execute","addStructuredOutputNames","executeAsync","signatureInputs","resourceId","resourceIdToCapturedInput","numCapturedInputs","inputIndex","signatureOutputs","setResourceIdToCapturedInput","executeInitializerGraph","normalizeInputs","normalizeOutputs","executeInitializerGraphAsync","getIntermediateTensors","newMap","loadGraphModel","fromTFHub","getTFHubUrl","model","label","trys","endPoint","startPoint","palmLandmarks","anchors","x_center","y_center","anchorsTensor","inputSizeTensor","doubleInputSizeTensor","normalizeBoxes","normalizeLandmarks","getBoundingBoxes","predict","estimateHandBounds","arraySync","thumb","indexFinger","middleFinger","ringFinger","pinky","palmBase","boundingBoxDetector","meshDetector","meshWidth","meshHeight","maxContinuousChecks","detectionConfidence","regionsOfInterest","runsWithoutHandDetector","maxHandsNumber","getBoxForPalmLandmarks","calculateLandmarksBoundingBox","getBoxForHandLandmarks","transformRawCoords","estimateHand","shouldUpdateRegionsOfInterest","updateRegionsOfInterest","landmarks","handInViewConfidence","boundingBox","topLeft","bottomRight","PackingScheme","TextureUsage","PhysicalTextureType","pipeline","getAnnotations","estimateHands","annotations","WEBGL_ATTRIBUTES","antialias","premultipliedAlpha","preserveDrawingBuffer","stencil","failIfMajorPerformanceCaveat","getWebGLContext","webGLVersion","customCanvas","newCtx","createCanvas","ev","getWebGLRenderingContext","isContextLost","disable","DEPTH_TEST","STENCIL_TEST","BLEND","DITHER","POLYGON_OFFSET_FILL","SAMPLE_COVERAGE","enable","SCISSOR_TEST","CULL_FACE","cullFace","BACK","getUnpackedMatrixTextureShapeWidthHeight","rows","getDenseTexShape","getPackedMatrixTextureShapeWidthHeight","getTextureConfig","textureHalfFloatExtension","internalFormatFloat","internalFormatHalfFloat","internalFormatPackedHalfFloat","internalFormatPackedFloat","textureFormatFloat","downloadTextureFormat","downloadUnpackNumChannels","defaultNumChannels","textureTypeHalfFloat","textureTypeFloat","glany","getNumber","R32F","R16F","RGBA16F","RGBA32F","RED","HALF_FLOAT","FLOAT","RGBA8","RGBA","HALF_FLOAT_OES","callAndCheck","getError","NO_ERROR","INVALID_ENUM","INVALID_VALUE","INVALID_OPERATION","INVALID_FRAMEBUFFER_OPERATION","OUT_OF_MEMORY","CONTEXT_LOST_WEBGL","getWebGLErrorMessage","checkWebGLError","canBeRepresented","getExtensionOrThrow","extensionName","throwIfNull","getExtension","MAX_TEXTURE_SIZE","MAX_TEXTURES_IN_SHADER","lineNumberRegex","logShaderSourceAndInfoLog","shaderSource","shaderInfoLog","lineNumberRegexResult","exec","lineNumber","shaderLines","linesWithLineNumbers","line","maxLineLength","beforeErrorLines","errorLine","afterErrorLines","validateProgram","program","getProgramParameter","VALIDATE_STATUS","getProgramInfoLog","bindVertexBufferToProgramAttribute","attribute","arrayEntriesPerItem","itemStrideInBytes","itemOffsetInBytes","getAttribLocation","bindBuffer","ARRAY_BUFFER","vertexAttribPointer","enableVertexAttribArray","getProgramUniformLocationOrThrow","uniformName","getUniformLocation","getProgramUniformLocation","bindTextureToProgramUniformSampler","texture","uniformSamplerLocation","textureUnit","validateTextureUnit","activeTexture","TEXTURE0","bindTexture","TEXTURE_2D","bindTextureUnit","uniform1i","bindColorTextureToFramebuffer","framebuffer","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","unbindColorTextureFromFramebuffer","validateFramebuffer","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","FRAMEBUFFER_INCOMPLETE_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_DIMENSIONS","FRAMEBUFFER_UNSUPPORTED","getFramebufferErrorMessage","returnTOrNull","failureMessage","tOrNull","maxTextureUnit","MAX_COMBINED_TEXTURE_IMAGE_UNITS","glTextureUnit","textureUnitRange","getBatchDim","dimsToSkip","getRowsCols","getShapeAs3D","shapeAs3D","isReshapeFree","shape1","shape2","shape1Cols","shape2Cols","hasExtension","isWebGLVersionEnabled","isDownloadFloatTextureEnabled","createFloatTextureAndBindToFramebuffer","COLOR_BUFFER_HALF_FLOAT","texConfig","createTexture","texImage2D","frameBuffer","createFramebuffer","isFrameBufferComplete","deleteTexture","deleteFramebuffer","createHalfFloatTextureAndBindToFramebuffer","assertNotComplex","getGlslDifferences","varyingVs","varyingFs","texture2D","defineOutput","defineSpecialNaN","defineSpecialInf","defineRound","getLogicalCoordinatesFromFlatIndex","coords","line1","line2","getOutputLogicalCoordinatesFromFlatIndexByUniform","symbolicallyComputeStrides","indicesArr","numCoords","getFlatIndexFrom3D","getParameter","getWebGLMaxTextureSize","MAX_TEXTURE_IMAGE_UNITS","getMaxTexturesInShader","getWebGLDisjointQueryTimerVersion","isCapableOfRenderingToFloatTexture","fenceSync","ENCODE_FLOAT_SNIPPET","backend_util","makeShader","inputsInfo","prefixSnippets","shapeInfo","logicalShape","isUniform","enableShapeUniforms","getUniformInfoFromShape","packedInputs","texShape","uniformShape","customUniforms","arrayIndex","outputSamplingSnippet","floatTextureSetOutputSnippet","inputPrefixSnippet","inputSamplingSnippet","inInfo","outShapeInfo","usesPackedTextures","getPackedSamplerFromInInfo","getSamplerFromInInfo","getPackedSamplerAtOutputCoords","getSamplerAtOutputCoords","getInputSamplingSnippet","outTexShape","glsl","floatTextureSampleSnippet","getFloatTextureSampleSnippet","shaderPrefix","SHADER_PREFIX","SAMPLE_1D_SNIPPET","SAMPLE_2D_SNIPPET","SAMPLE_3D_SNIPPET","getShaderPrefix","isPacked","packedTexShape","getOutputPacked1DCoords","texelsInLogicalRow","getOutputPacked2DCoords","texelsInBatch","getOutputPacked3DCoords","texelsInBatchN","batches","getOutputPackedNDCoords","getPackedOutputSamplingSnippet","getFloatTextureSetRGBASnippet","getOutput1DCoords","getOutput2DCoords","coordsFromIndexSnippet","shader_util","getOutput3DCoords","getOutput4DCoords","getOutput5DCoords","getOutput6DCoords","getOutputSamplingSnippet","getFloatTextureSetRSnippet","SHADER_PACKED_PREFIX","userCode","getSamplerScalar","getSampler1D","getSampler2D","getSampler3D","getSampler4D","getSampler5D","getSampler6D","inputInfo","texName","funcName","getPackedSamplerScalar","getPackedSampler1D","texNumR","texNumC","valuesPerRow","getPackedSampler2D","newInputInfo","squeezeInputInfo","getSqueezedParams","getPackedSampler3D","getPackedSamplerND","getFlatOffsetUniformName","tNumR","tNumC","getUniformSampler","stride0","stride1","stride2","stride2Str","stride1Str","stride0Str","stride3","stride4","coordsSnippet","texFuncSnippet","outRank","broadcastDims","getCoordsDataType","rankDiff","fields","unpackedCoordsSnippet","isInputScalar","isOutputScalar","cols","inTexShape","useSqueezePackedShape","useSqueezeShape","compileProgram","gpgpu","inputInfos","texData","inShapeInfos","shader_compiler","fragmentShader","fragmentShaderSource","createShader","FRAGMENT_SHADER","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","createFragmentShader","webGLProgram","createProgram","uniformLocations","customUniformLocations","infLoc","nanLoc","inShapesLocations","inTexShapesLocations","outShapeLocation","outShapeStridesLocation","outTexShapeLocation","getUniformLocations","shouldThrow","validateBinaryAndProgram","shapeInfos","texShapeA","texShapeB","runProgram","binary","customUniformValues","outTex","setOutputPackedMatrixTexture","setOutputMatrixTexture","setProgram","uniform1f","varLoc","varOffsetLoc","varShapeLoc","varTexShapeLoc","uniform1iv","uniform2iv","uniform3iv","uniform4iv","uniform2i","uniformValues","uniform1fv","setInputMatrixTexture","outShapeLoc","customLoc","customValue","uniform2fv","uniform3fv","uniform4fv","executeProgram","makeShaderKey","keyInputs","hasOffset","xTexShape","rank1","rank2","rank34","isLogicalShapTexShapeEqual","isScalar","isInOutTexShapeEqual","isTexShapeGreaterThanOne","keyUserCode","useShapeUniforms","DecodeMatrixProgram","packedOutput","outPackingScheme","DENSE","DecodeMatrixPackedProgram","EncodeFloatProgram","outTexUsage","DOWNLOAD","EncodeFloatPackedProgram","CHANNEL_CHAR_TO_INDEX_MAP","EncodeMatrixProgram","inputIsUnsignedByte","mainLoop","usedChannelIndex","curChannel","EncodeMatrixPackedProgram","createVertexShader","vertexShaderSource","vertexShader","VERTEX_SHADER","webgl_util","createVertexBuffer","createBuffer","bufferData","STATIC_DRAW","createIndexBuffer","ELEMENT_ARRAY_BUFFER","createAndConfigureTexture","internalFormat","textureFormat","textureType","maxTextureSize","requested","tex2d","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","texStorage2D","getInternalFormatForFloat32MatrixTexture","textureConfig","getInternalFormatForFloat16MatrixTexture","getInternalFormatForUnsignedBytesMatrixTexture","getInternalFormatForPackedMatrixTexture","getInternalFormatForFloat16PackedMatrixTexture","downloadPackedMatrixFromBuffer","physicalRows","physicalCols","gl2","downloadTarget","tex_util","PIXEL_PACK_BUFFER","getBufferSubData","GPGPUContext","outputTexture","disposed","itemsToPoll","glVersion","setWebGLContext","createVertexArray","bindVertexArray","vao","deleteVertexArray","getVertexArray","VERTEX_ARRAY_BINDING","ext","createVertexArrayOES","bindVertexArrayOES","deleteVertexArrayOES","VERTEX_ARRAY_BINDING_OES","COLOR_BUFFER_FLOAT","parallelCompilationExtension","TEXTURE_HALF_FLOAT","textureFloatExtension","colorBufferFloatExtension","colorBufferHalfFloatExtension","vertexBuffer","gpgpu_util","indexBuffer","deleteBuffer","UNSIGNED_BYTE","texSubImage2D","dataForUpload","texelDataType","downloadMatrixDriver","readPixels","bindTextureToFrameBuffer","bufferSizeBytes","bytesPerFloat","STREAM_READ","unbindTextureToFrameBuffer","fenceContext","createFence","pollFence","isFencePassed","sync","SYNC_GPU_COMMANDS_COMPLETE","flush","clientWaitSync","ALREADY_SIGNALED","CONDITION_SATISFIED","beginQuery","endQuery","isQueryAvailable","packedRGBA","program2","attachShader","linkProgram","LINK_STATUS","debug","deleteProgram","useProgram","inputMatrixTexture","uniformLocation","throwIfNoProgram","outputMatrixTexture","setOutputMatrixTextureDriver","outputPackedMatrixTexture","startRow","startColumn","setOutputMatrixWriteRegionDriver","boundVao","debugValidate","drawElements","TRIANGLES","UNSIGNED_SHORT","disjointQueryTimerExtension","getQueryTimerExtension","getQueryTimerExtensionWebGL2","createQuery","TIME_ELAPSED_EXT","getQueryTimerExtensionWebGL1","createQueryEXT","beginQueryEXT","endQueryEXT","getQueryTime","queryTimerVersion","getQueryParameter","QUERY_RESULT","getQueryObjectEXT","QUERY_RESULT_EXT","available","QUERY_RESULT_AVAILABLE","disjoint","GPU_DISJOINT_EXT","QUERY_RESULT_AVAILABLE_EXT","addItemToPoll","linearSearchLastTrue","isDoneFn","resolveFn","setTimeoutCustom","pollItems","downloadAndDecode","outputMatrixTextureMaybePacked","viewport","scissor","createSimpleBinaryKernelImpl","bShape","aVals","bVals","resultRank","resultStrides","aRank","bRank","aStrides","bStrides","aBroadcastDims","bBroadcastDims","aLoc","aIndex","bLoc","bIndex","realVals","imagVals","complexInfo","makeTensorInfo","complexTensorInfos","identity","realVal","castImpl","inputType","resultData","zerosTensorInfo","floatX","disposeIntermediateTensorInfo","realPart","resultShape","resultType","binaryKernelFunc","simpleImpl","complexImpl","cpuBackend","decodedAVals","decodedBVals","$dtype","$aComplex","$aComplexVals","aReal","aImag","aRealVals","aImagVals","$bComplex","$bComplexVals","bReal","bImag","bRealVals","bImagVals","resultRealData","resultImagData","resultReal","resultImag","createComplexBinaryKernelImpl","resultSize","resultRealVals","resultImagVals","aIdx","bIdx","opResult","addImpl","addComplexImpl","createSimpleUnaryImpl","unaryKernelFunc","xSize","unaryKernelFuncFromImpl","unaryImpl","ceilImpl","equalImpl","expImpl","expm1Impl","floorImpl","greaterImpl","greaterEqualImpl","lessImpl","lessEqualImpl","logImpl","maximumImpl","aValue","bValue","minimumImpl","multiplyImpl","multiplyComplexImpl","negImpl","xDtype","minusOne","notEqualImpl","transposeImpl","xStrides","newStrides","newLoc","prodImpl","reductionAxes","outDtype","outVals","reduceSize","makeSplits","indicesShape","numParamsDenseValues","valueSlices","numSplits","outSplits","splits","lastSplit","validateSplits","nrows","rowLength","outSplitsOutDim","computeFlatOuterDims","orig","numOutDims","outDims","getValues","paramsDenseValuesShape","paramsDenseValuesDType","valuesShape","valuesOut","valueSize","denseM","valuesM","outPos","writeValueSlices","RaggedTensorToTensorOp","shapeShape","valuesDType","defaultValueShape","rowPartitionValues","rowPartitionValuesShapes","rowPartitionTypeStrings","stringToType","FIRST_DIM_SIZE","VALUE_ROWIDS","ROW_LENGTHS","ROW_SPLITS","ROW_LIMITS","ROW_STARTS","typeStr","raggedRank","dimension","rowPartitionTensor","getRowPartitionTensor","getRowPartitionTypeByDimension","getMaxWidthValueRowID","getMaxWidthRowSplit","tShape","isPartial","makeShape","firstDim","valueShape","defaultNDims","valuesNDims","defaultDim","valueDim","tensorShapeFromTensor","outputShapeDimIndex","outputShapeDim","getMaxWidth","firstDimension","outputIndexMultiplier","firstDimensionOutput","minDimension","currentOutputIndex","rowSplit","parentOutputIndex","rowSplitSize","realLength","parentOutputIndexCurrent","valueRowIds","indexSize","currentOutputColumn","currentValueRowId","nextValueRowId","partitionType","calculateOutputIndexValueRowID","calculateOutputIndexRowSplit","firstPartitionTensor","firstPartitionType","getFirstDimensionSize","calculateOutputSize","calculateFirstParentOutputIndex","calculateOutputIndex","setOutput","valuesBase","outputBase","valueElementSize","outputIndexSize","srcShape","defaultValueTensor","bCastDefault","srcStart","dstStart","dstEnd","srcI","dstI","copyArray","tensorLength","maxWidth","currentWidth","indexLength","firstEqualIndex","firstEqualIndexValue","dst","rsqrtImpl","sigmoidImpl","simpleAbsImpl","resultValues","sliceImpl","isContinous","slice_util","inBuf","outBuf","outLoc","inLoc","idx","sqrtImpl","StringNGramsOp","preserveShort","nGramWidth","getPadWidth","splitIndex","outputStartIndex","numNGrams","leftPadding","nGramIndex","rightPadding","numTokens","dataStartIndex","nGramSize","nGram","nextNGramIndex","appendToNGram","inputDataSize","splitsSize","prevSplit","validSplits","numBatchItems","empty","getNumNGrams","outputStartIdx","createNGrams","dataLength","delimiters","tokenStart","token","subImpl","subComplexImpl","comparePair","valueDiff","select","newLeft","newRight","addImplCPU","bincountImplCPU","weightsVals","weightsDtype","weightsShape","weightsSize","bincountReduceImplCPU","xBuf","weightsBuf","castImplCPU","ceilImplCPU","concatImplCPU","simplyConcat","colOffset","decodedData","tIdx","resIdx","equalImplCPU","expImplCPU","expm1ImplCPU","floorImplCPU","gatherNdImplCPU","indicesData","paramsBuf","numSlices","paramsShape","paramsSize","flattenIndex","gatherV2ImplCPU","indicesBuf","flattenOutputShape","originalLoc","batchIdx","indicesIdx","indicesIndex","originalIndex","greaterImplCPU","greaterEqualImplCPU","lessImplCPU","lessEqualImplCPU","linSpaceImplCPU","logImplCPU","maxImplCPU","maximumImplCPU","minimumImplCPU","multiplyImplCPU","negImplCPU","notEqualImplCPU","prodImplCPU","raggedGatherImplCPU","paramsNestedSplitsShapes","numParams","locString","validateIndices","splitsOut","getSplits","raggedRangeImplCPU","startsShape","startsDType","limitsShape","deltasShape","broadcastStarts","broadcastLimits","broadcastDeltas","inSizes","nRows","valueIndex","rowSize","raggedTensorToTensorImplCPU","shapesShape","compute","rangeImplCPU","rsqrtImplCPU","scatterImplCPU","sumDupeIndices","flattenShape","updatesData","sigmoidImplCPU","simpleAbsImplCPU","sliceImplCPU","sparseFillEmptyRowsImplCPU","indicesDType","indicesCount","denseRows","rowsAreOrdered","lastIndicesRow","csrOffset","allRowsFull","rowEmpty","fullIndicesCount","filledCount","outputI","startingIndex","sparseReshapeImplCPU","inputIndicesShape","inputDType","targetShape","dim2","denseSize","nnz","outputRank","unknownIndex","missing","inputSize","inputStrides","outputStrides","newIndices","sparseSegmentReductionImplCPU","isMean","numIndices","inputFlat","numCol","lastSegmentIdPlusOne","outputLength","uninitializedIndex","outIndex","sqrtImplCPU","stridedSliceImplCPU","stringNGramsImplCPU","stringSplitImplCPU","tokens","maxNumEntries","prevTokensLength","nEntries","stringToHashBucketFastImplCPU","subImplCPU","tileImplCPU","topKImplCPU","allTopKVals","allTopKIndices","outOffset","topKVals","topKIndices","transposeImplCPU","uniqueImplCPU","$axis","uniqueElements","inputBuffer","uniqueIndices","is1DTensor","axisValues","uniqueIndex","outputTmpShape","outputBuffer","uniqueElementIndex","getVecChannels","getChannels","PackProgram","outOfBoundsCondition","getOutOfBoundsCondition","setup","getSetup","getOutput","coord","innerDims","sourceCoords","getSourceCoordsArr","ReshapePackedProgram","thisRC","indicesArray","getReshapedInputCoords","TextureManager","numUsedTextures","numFreeTextures","_numBytesAllocated","_numBytesFree","freeTextures","logEnabled","usedTextures","shapeRC","usage","physicalTexType","getPhysicalFromLogicalTextureType","shapeKey","getKeyFromTextureShape","newTexture","texBytes","computeBytes","PACKED_2X2_FLOAT32","createPackedMatrixTexture","PACKED_2X2_FLOAT16","createFloat16PackedMatrixTexture","UNPACKED_FLOAT32","createFloat32MatrixTexture","UNPACKED_FLOAT16","createFloat16MatrixTexture","PACKED_4X1_UNSIGNED_BYTE","createUnsignedBytesMatrixTexture","logicalTexType","deleteTexThreshold","deleteMatrixTexture","texList","texIndex","freeRatio","tex","internalFormatForPhysicalTexType","numBytesForInternalFormat","UPLOAD","RENDER","getPhysicalTextureForRendering","PIXELS","shapeRowsCol","UnaryOpProgram","opSnippet","CHECK_NAN_SNIPPET","LINEAR","ABS","ELU","RELU","RELU6","CLONE","SIGMOID","UnaryOpPackedProgram","UnpackProgram","getSourceCoords","kernel_impls","binaryCaches","CPU_HANDOFF_SIZE_THRESHOLD","MathBackendWebGL","gpuResource","newGPGPU","pendingRead","pendingDisposal","dataRefCount","numBytesInGPU","uploadWaitMs","downloadWaitMs","lastGlFlushTime","warnedAboutMemory","pendingDeletes","binaryCache","gpgpuCreatedLocally","textureManager","numMBBeforeWarning","devicePixelRatio","nextDataId","texHeight","texWidth","inData","runWebGLProgram","checkNumericalProblems","unary_op","convertAndCacheOnCPU","shouldTimeProgram","activeTimers","getValuesFromTexture","subscribers","tmpDownloadTarget","tmpData","createBufferFromTexture","createAndWaitForFence","ps","downloadFloat32MatrixFromBuffer","dTypeVals","gpuResouorce","tmpTarget","customTexShape","tensorRef","strings","downloadMatrixFromPackedTexture","shouldUsePackedProgram","downloadByteEncodedFloatMatrixFromOutputTexture","oldActiveTimers","newActiveTimers","outerMostTime","programTimersStack","flattenedActiveTimerQueries","flattenedActiveTimerNames","ms","numBytesInGPUAllocated","numBytesAllocated","numBytesInGPUFree","numBytesFree","startMs","endMs","waitForQueryAndGetTime","timerQuery","releaseGPUData","origDataId","releaseTexture","uploadToGPU","sizeThreshold","compileAndRun","shouldExecuteOnCPU","outValues","makeOutput","packedUnaryOp","encodedValues","afterShape","input3DShape","input3D","afterShapeAs3D","customValues","outputDtype","preventEagerUnpackingOfOutput","outData","texelShape","dataToDispose","inputsData","unpackTensor","packTensor","savedInput","packedReshape","gpgpu_math","getAndSaveBinary","startTimer","endTimer","glFlushThreshold","unpacked","getBinary","HTMLCanvasElement","remove","floatPrecisionValue","debugFlag","underflowCheckValue","logShape","maxTexSize","maxSizeForNarrowTex","squeezeResult","textureShape","isLongNarrowTex","isByteArray","tempDenseInputTexShape","tempDenseInputHandle","tempDenseInputTexData","uploadDenseMatrixToTexture","getTexture","encodedOutputTarget","outputTexData","acquireTexture","float32Values","float32ToTypedArray","texType","checkCompletion_","checkCompletionAsync_","COMPLETION_STATUS_KHR","isTexture","writeTexture","makeTensorFromDataId","registerBackend","BinaryOpProgram","CHECK_NAN_SNIPPET_PACKED","BinaryOpPackedProgram","checkOutOfBounds","supportsBroadcasting","checkOutOfBoundsString","identityConfig","realTensorInfo","imagTensorInfo","complexConfig","LEAKYRELU","LEAKYRELU_PACKED","leakyReluConfig","$alpha","PRELU","PRELU_PACKED","preluConfig","CHECK_NAN_SNIPPET_UNARY","packedOpSnippet","cpuKernelImpl","webglBackend","xData","supportsComplex","aData","bData","complexParts","aPart","bPart","aHandle","bHandle","complexOutput","mapActivationToShaderProgram","packed","unary_packed_op","MatMulPackedProgram","addBias","hasPreluActivation","hasLeakyreluActivation","sharedDim","sharedDimensionPacked","aSample","bSample","aSwizzle","bSwizzle","activationSnippet","applyActivationSnippet","addBiasSnippet","batchASnippet","batchBSnippet","COMPLEX_MULTIPLY","BinaryOpComplexProgram","MUL","realProgram","binaryop_complex_gpu","imagProgram","imagPart","cpuMultiply","multiplyConfig","shapeProd","implicitIdx","$xSize","xTexData","reshapeConfig","MeanProgram","reduceInfo","windowSize","outSize","windowSizeNearestVec4","windowSizeVec4Remainder","updateSnippet","denominator","toPrecision","ReduceProgram","reduceType","initializationValue","compareOp","vecType","reductionType","reductionStages","stages","getReductionStages","previousResult","TransposeProgram","newDim","switched","originalOrder","switchedCoords","getSwitchedCoords","TransposePackedProgram","outputOrder","switchedOrder","nextColumn","getc","origAxes","permutedAxes","sumInputIsTransposed","sumInput","sumOutShape","reshapedInput","reduced","sumImpl","sumConfig","cpuTranspose","transposeConfig","batchMatMulImpl","a3dShape","b3dShape","a3d","b3d","intermediates","hasBias","hasPreluActivationWeights","hasLeakyreluAlpha","fusedActivation","aVec","bVec","shouldReshapeB","aVec3d","bVec3d","$leakyreluAlpha","outReshaped","_fusedMatMulConfig","absConfig","acosConfig","acoshConfig","ADD","addKernelFunc","cpuAdd","addConfig","AddNProgram","snippets","operation","AddNPackedProgram","addNConfig","midIndex","leftSide","rightSide","d1","d2","allConfig","permutedX","a2D","anyConfig","ArgMinMaxProgram","firstPass","compOp","indexSnippet","ArgMinMaxPackedProgram","sourceLocSetup","sourceRank","sourceLocDType","inChannel","intChannels","srcRCoords","srcGCoords","srcBCoords","srcACoords","fetchCandidateIdx","fetchValue","getBestIndicesAChannelSnippet","argReduce","bestIndicesA","argReducePacked","argMinMaxReduce","intermediateTensorInfos","xtexData","xUnPacked","argMaxConfig","argMinConfig","asinConfig","asinhConfig","atanConfig","atan2Config","atanhConfig","Pool2DProgram","poolType","computePositions","flattenPositions","padTop","padLeft","isAvgPool","batchFlattenPositionStr","flattenPositionStr","filterWidthNearestVec4","filterWidthVec4Remainder","Pool3DProgram","padFront","avgPoolConfig","avgPoolProgram","avgPool3DConfig","AvgPool2DBackpropProgram","avgMultiplier","AvgPool3DBackpropProgram","avgPool3DGradConfig","avgPoolBackpropProgram","avgPoolGradConfig","batchMatMulConfig","BatchNormProgram","meanShape","varianceShape","offsetShape","scaleShape","offsetSnippet","scaleSnippet","BatchNormPackedProgram","batchNormConfig","finalInputs","SliceProgram","destSize","getCoords","coordSum","SlicePackedProgram","sourceLoc","getChannel","upperRow","lowerRow","$begin","$size","newTexData","shallowSlice","sliceConfig","batchToSpaceNDConfig","sliceBeginCoords","uncroppedShape","toDispose","reshapedIntermediate","transposedIntermediate","reshapedIntermediate2","sliced","bincountConfig","broadcastArgsConfig","s0Vals","s1Vals","notEqualConfig","realConfig","castConfig","zerosTensor","int","CEIL","ceilConfig","ClipProgram","ClipPackedProgram","clipByValueConfig","ComplexAbsProgram","makeComplexComponentTensorInfo","complexTensor","complexPart","complexAbsConfig","programInputs","ConcatProgram","offsets","lastIndex","lastShift","ConcatPackedProgram","lastChannels","allChannels","getValueSnippet","shiftedChannels","channelIdx","imagConfig","concatImpl","reals","imags","realConcated","imagConcated","runOnCpu","tensors2D","innerSize","inputsValShapes","finalOutShape","$inputs","shouldPack","maxTexturesInShader","reducedInputs","subArray","computeTensors2D","reshapedResult","firstShape","concatConfig","Conv2DProgram","inputDepthNearestVec4","inputDepthVec4Remainder","isChannelsLast","rowDim","colDim","channelDim","Conv3DProgram","Conv2DPackedProgram","hasLeakyReluAlpha","texelsAcross","texelC","colIndex","nextTexelOffset","Im2ColPackedProgram","boundsCheckingSnippet","unrolled","getShapeForBatchMatMul","conv2dByMatMul","sharedMatMulDim","outerShapeX","outerShapeFilter","xReshaped","originalXTexDataShape","filterReshaped","pointwiseConv","pointwiseConvTexData","conv2dWithIm2Row","x2ColShape","w2Row","im2ColProgram","im2Col","im2ColReshaped","matmulProgram","conv2DConfig","Conv2DDerFilterProgram","Conv2DDerInputProgram","Conv3DDerFilterProgram","Conv3DDerInputProgram","conv2DBackpropFilterConfig","conv2DBackpropInputConfig","conv3DConfig","conv3DBackpropFilterV2Config","CumOpType","conv3DBackpropInputConfig","cosConfig","coshConfig","CropAndResizeProgram","imageShape","boxShape","imageHeight","imageWidth","cropHeight","cropWidth","methodId","inputHeightFloat","inputWidthFloat","heightRatio","heightScale","inY","widthRatio","widthScale","inX","cropAndResizeConfig","CumProgram","initVal","idxString","getFinalCoord","cumImpl","permutation","permutedAxis","prevResult","reverseTransposedResult","cumprodConfig","cumsumConfig","denseBincountConfig","bufferSync","DepthToSpaceProgram","getHeightCoordString","getWidthCoordString","getDepthCoordString","getOutputDepthSize","getInputSamplingString","depthToSpaceConfig","outputHeight","outputWidth","outputDepth","DepthwiseConv2DProgram","channelMul","DepthwiseConvPacked2DProgram","depthwiseConv2dNativeConfig","$dilations","DepthwiseConv2DDerFilterProgram","DepthwiseConv2DDerInputProgram","depthwiseConv2dNativeBackpropFilterConfig","depthwiseConv2dNativeBackpropInputConfig","DiagProgram","diagConfig","flat","Dilation2DProgram","dilation2DConfig","$filterShape","einsumConfig","numArrows","inputString","outputString","inputTerms","numInputs","allDims","dimName","inputTerm","summedDims","dimSizes","nSteps","steps","computedTermIndices","termIndex","numDimsRemaining","tensorsToDispose","idTerm","dimsToExpand","eluConfig","eluGradConfig","equalConfig","erfConfig","expConfig","$dim","expandDimsConfig","EXPM1","expm1Config","FFTProgram","component","inverse","innerDim","opString","exponentMultiplierSnippet","resultDenominator","fftImpl","input2D","complexOutputReshaped","fftConfig","FillProgram","fillConfig","FlipLeftRightProgram","flipLeftRightConfig","FLOOR","floorConfig","floorDivConfig","FromPixelsProgram","FromPixelsPackedProgram","fromPixelsConfig","newWillReadFrequently","tempPixelHandle","uploadPixelDataToTexture","fusedConv2DConfig","prepareInputs","alignInputWithDataFormat","alignedInput","fusedDepthwiseConv2DConfig","shouldPackDepthwiseConv","GatherNDProgram","gatherNdConfig","tensorRank","nResult","flattenIndices","flattenX","outValue","GatherProgram","currentCoords","gatherV2","parsedAxis","indicesVals","axisDim","outerSize","indicesSize","gatherV2Config","greaterConfig","greaterEqualConfig","ifftConfig","isFiniteConfig","isInfConfig","isNaNConfig","lessConfig","lessEqualConfig","linSpaceConfig","logConfig","log1pConfig","logicalAndConfig","logicalNotConfig","logicalOrConfig","LRNProgram","radius","powOperator","rad","maxD","basis","LRNPackedProgram","LRNConfig","LRNGradProgram","LRNGradConfig","maxInputIsTransposed","maxInput","maxInputValues","maxOutShape","reshapedOutput","maxImpl","maxConfig","maximumConfig","maxPoolConfig","maxPoolProgram","maxPool3DConfig","MaxPool2DBackpropProgram","MaxPool3DBackpropProgram","maxPool3DGradConfig","maxPool3dPositionsProgram","maxPool3dPositions","maxPoolBackpropProgram","maxPoolGradConfig","maxPoolPositionsProgram","maxPoolPositions","maxPoolBackPropProgram","maxPoolWithArgmaxConfig","poolOutput","maxPoolWithArgmaxImpl","meanConfig","meanInputIsTransposed","meanInput","meanInputValues","meanOutShape","meanImpl","minConfig","minimumConfig","MirrorPadProgram","unpackedCoords","MirrorPadPackedProgram","cLimit","padSetup","mirrorPadConfig","modConfig","MultinomialProgram","realDiv","realDivConfig","SUB","cpuSub","subConfig","maxLogit","expandedShape","maxLogitsReshaped","sumExp","sumExpReshaped","softmaxConfig","multinomialConfig","probs","NEG","negConfig","nonMaxSuppressionV3Config","nonMaxSuppressionV4Config","nonMaxSuppressionV5Config","OneHotProgram","oneHotConfig","zerosLikeConfig","onesLikeConfig","packConfig","expandedT","PadProgram","PadPackedProgram","componentSetup","paddingArea","padV2","padV2Config","powConfig","prodConfig","raggedGatherConfig","$paramsNestedSplits","$paramsNestedSplitsShapes","$paramsDenseValues","outputDenseValuesShape","outputNestedSplitsTensors","outputDenseValuesTensor","raggedRangeConfig","$limits","$deltas","rtNestedSplitsData","rtDenseValuesData","raggedTensorToTensorConfig","$rowPartitionValues","rangeConfig","reciprocalConfig","reluConfig","relu6Config","ResizeBilinearProgram","newHeight","newWidth","oldHeight","oldWidth","sourceFracIndexRC","effectiveInSize","effectiveOutSize","ResizeBilinearPackedProgram","resizeBilinearConfig","ResizeBilinearBackpropProgram","xHeight","xWidth","yHeight","yWidth","effectiveXSize","effectiveYSize","invHeightScale","invWidthScale","winHeight","winWidth","resizeBilinearGradConfig","ResizeNearestNeighborProgram","roundBase","ResizeNearestNeighborPackedProgram","resizeNearestNeighborConfig","ResizeNearestNeigborBackpropProgram","resizeNearestNeighborGradConfig","ReverseProgram","inCoords","getInCoord","ReversePackedProgram","nextRow","inCoordsArray","channels1","getR","getG","getB","getA","reverseConfig","$dims","RotateProgram","fillSnippet","rotateWithOffsetConfig","roundConfig","rsqrtConfig","ScatterProgram","updateSize","updatesRank","stridesType","indicesString","indicesSnippet","updatesString","updatesSnippet","strideString","scatterNdConfig","SearchSortedProgram","webGL1LoopHead","loopHead","boundComparator","searchSortedConfig","SelectProgram","cRank","cCoords","abCoords","cCoordVars","abCoordVars","selectConfig","seluConfig","sigmoidConfig","signConfig","sinConfig","sinhConfig","softplusConfig","spaceToBatchNDConfig","completePaddings","paddedX","reshapedPaddedShape","permutedReshapedPaddedPermutation","reshapedPaddedX","paddedXT","sparseFillEmptyRowsConfig","outputIndicesShape","sparseReshapeConfig","sparseSegmentMeanConfig","outputDataShape","sparseSegmentSumConfig","sparseToDenseConfig","updatesBuf","splitVConfig","splitSizes","negIndex","sliceT","SQRT","sqrtConfig","squareConfig","SQUARED_DIFFERENCE","squaredDifferenceConfig","stepConfig","StridedSliceProgram","inputDtype","newCoords","outputAxis","stridedSliceConfig","$end","$strides","resultReshaped","stringNGramsConfig","stringSplitConfig","stringToHashBucketFastConfig","tanConfig","tanhConfig","TileProgram","tileConfig","SwapProgram","MergeProgram","disposeIntermediateTensorInfoOrNull","roundUpToPow2","pow2","topKConfig","TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD","TOPK_K_CPU_HANDOFF_THRESHOLD","xIsPacked","x2D","kPow2","lastDimPow2","getInputs","runSwap","dir","inc","prevIndices","mergeProgram","prevValues","TransformProgram","fillModeId","interpolationModeId","transformConfig","uniqueConfig","unpackConfig","SegmentOpProgram","segOpInfo","segOpType","checkValueOutOfBounds","checkSegmentIdOutOfBounds","unsortedSegmentSumConfig","segOpResult","segOpCompute","rangeInfo","tileInfo","pressButton","APP_WRAPPER","videoRef","canvasRef","canvasContainer","pointerFinger","handData","setHandData","cameraLoaded","setCameraLoaded","loadedModel","setLoadedModel","setClickStrength","clickFlash","setClickFlash","prevHandData","usePrevious","loadModel","handpose","APP_DIMENSIONS","offsetWidth","offsetHeight","WIDTH_RATIO","HEIGHT_RATIO","camera","Camera","endstream","stream","returnLandmarks","hand","pointer","ring","fingerPos","prevFingerPos","firstFinger","pinching","proximityCount","prevZ","clicking","currentStrength","X_PIXELS","Y_PIXELS","firstLeft","firstTop","hands","drawInterval","setInterval","draw","clearInterval","logo","icon","setIcon","active","setActive","progress","setProgress","captionActive","setCaptionActive","clickCount","setClickCount","capMessage","setCapMessage","isLoading","setIsLoading","modeAR","setModeAR","sectionTwo","sectionOne","sectionThree","appWrapper","logoCaption","buttonOne","buttonTwo","buttonThree","buttonFour","buttonFive","linkedinRef","cvRef","mailRef","gitRef","pathRef","clicked","triggered","icons","reactIcon","nodeIcon","mongoIcon","jsIcon","dockerIcon","firebaseIcon","awsIcon","htmlIcon","cssIcon","phpIcon","brushes","blueBrush","cacheImages","srcArray","Image","pathLength","getTotalLength","loading","realAdam","safesend","cheats","anon","galquiz","linkedinIcon","resumeIcon","emailIcon","vsSnip","vsSnipTwo","resumePdf","githubIcon","projects","description","tech","minervaXR","repo","goToSection","scrollIntoView","behavior","inRange","topMax","bottomMax","rightMax","leftMax","checkIfInView","elementBounds","getBoundingClientRect","alt","onScroll","drawLength","appHeight","clientHeight","innerHeight","handleScroll","x_axis","y_axis","triggerCount","menuElements","menuButton","click","sectionElements","querySelector","prevCount","xmlns","viewBox","visibility","stroke","brush","project","rel","ReactDOM","getElementById"],"sourceRoot":""}